// Automatically generated from template - EDITS WILL BE LOST

// Generated by iodcomp.awk with options declare iodcompc

#ifndef __Header_iodcompc__
#define __Header_iodcompc__

class CompositeIOD_CRImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_CRSeries *CRSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_CRImage *CRImage;
	Module_OverlayPlane *OverlayPlane;
	Module_ModalityLUT *ModalityLUT;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_CRImage(AttributeList *list);
	const char *identify(void) const { return "CRImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_CTImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePlane *ImagePlane;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_CTImage *CTImage;
	Module_MultienergyCTImage *MultienergyCTImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_CTImage(AttributeList *list);
	const char *identify(void) const { return "CTImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MRImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePlane *ImagePlane;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_MRImage *MRImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_MRImage(AttributeList *list);
	const char *identify(void) const { return "MRImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_NMImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_NMPETPatientOrientation *NMPETPatientOrientation;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_NMImagePixel *NMImagePixel;
	Module_MultiFrame *MultiFrame;
	Module_NMMultiFrame *NMMultiFrame;
	Module_NMImage *NMImage;
	Module_NMIsotope *NMIsotope;
	Module_NMDetector *NMDetector;
	Module_NMTomoAcquisition *NMTomoAcquisition;
	Module_NMMultiGatedAcquisition *NMMultiGatedAcquisition;
	Module_NMPhase *NMPhase;
	Module_NMReconstruction *NMReconstruction;
	Module_OverlayPlane *OverlayPlane;
	Module_MultiFrameOverlay *MultiFrameOverlay;
	Module_VOILUT *VOILUT;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_NMImage(AttributeList *list);
	const char *identify(void) const { return "NMImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_USImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_PaletteColorLookupTable *PaletteColorLookupTable;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_USRegionCalibration *USRegionCalibration;
	Module_USImage *USImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_USImage(AttributeList *list);
	const char *identify(void) const { return "USImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_USMultiFrameImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_PaletteColorLookupTable *PaletteColorLookupTable;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_USRegionCalibration *USRegionCalibration;
	Module_USImage *USImage;
	Module_VOILUT *VOILUT;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_USMultiFrameImage(AttributeList *list);
	const char *identify(void) const { return "USMultiFrameImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_SCImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_SCImage *SCImage;
	Module_OverlayPlane *OverlayPlane;
	Module_ModalityLUT *ModalityLUT;
	Module_VOILUT *VOILUT;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_SCImage(AttributeList *list);
	const char *identify(void) const { return "SCImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MultiframeSingleBitSCImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_SCImage *SCImage;
	Module_SCMultiFrameImage *SCMultiFrameImage;
	Module_SCMultiFrameVector *SCMultiFrameVector;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
	Module_MultiframeSingleBitSCImagePseudo *MultiframeSingleBitSCImagePseudo;
public:
	            CompositeIOD_MultiframeSingleBitSCImage(AttributeList *list);
	const char *identify(void) const { return "MultiframeSingleBitSCImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MultiframeGrayscaleByteSCImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_Device *Device;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForMFSC *MultiFrameFunctionalGroupsForMFSC;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_Specimen *Specimen;
	Module_SCImage *SCImage;
	Module_SCMultiFrameImage *SCMultiFrameImage;
	Module_SCMultiFrameVector *SCMultiFrameVector;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
	Module_MultiframeGrayscaleByteSCImagePseudo *MultiframeGrayscaleByteSCImagePseudo;
public:
	            CompositeIOD_MultiframeGrayscaleByteSCImage(AttributeList *list);
	const char *identify(void) const { return "MultiframeGrayscaleByteSCImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MultiframeGrayscaleWordSCImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_Device *Device;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForMFSC *MultiFrameFunctionalGroupsForMFSC;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_Specimen *Specimen;
	Module_SCImage *SCImage;
	Module_SCMultiFrameImage *SCMultiFrameImage;
	Module_SCMultiFrameVector *SCMultiFrameVector;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
	Module_MultiframeGrayscaleWordSCImagePseudo *MultiframeGrayscaleWordSCImagePseudo;
public:
	            CompositeIOD_MultiframeGrayscaleWordSCImage(AttributeList *list);
	const char *identify(void) const { return "MultiframeGrayscaleWordSCImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MultiframeTrueColorSCImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_Device *Device;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForMFSC *MultiFrameFunctionalGroupsForMFSC;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_Specimen *Specimen;
	Module_SCImage *SCImage;
	Module_SCMultiFrameImage *SCMultiFrameImage;
	Module_SCMultiFrameVector *SCMultiFrameVector;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
	Module_MultiframeTrueColorSCImagePseudo *MultiframeTrueColorSCImagePseudo;
public:
	            CompositeIOD_MultiframeTrueColorSCImage(AttributeList *list);
	const char *identify(void) const { return "MultiframeTrueColorSCImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_StandaloneOverlay : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_OverlayIdentification *OverlayIdentification;
	Module_OverlayPlane *OverlayPlane;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_StandaloneOverlay(AttributeList *list);
	const char *identify(void) const { return "StandaloneOverlay"; }
	bool        retired(void) const { return true; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_StandaloneCurve : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_CurveIdentification *CurveIdentification;
	Module_Curve *Curve;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_StandaloneCurve(AttributeList *list);
	const char *identify(void) const { return "StandaloneCurve"; }
	bool        retired(void) const { return true; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_StandaloneModalityLUT : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_ModalityLUT *ModalityLUT;
	Module_LUTIdentification *LUTIdentification;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_StandaloneModalityLUT(AttributeList *list);
	const char *identify(void) const { return "StandaloneModalityLUT"; }
	bool        retired(void) const { return true; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_StandaloneVOILUT : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_VOILUT *VOILUT;
	Module_LUTIdentification *LUTIdentification;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_StandaloneVOILUT(AttributeList *list);
	const char *identify(void) const { return "StandaloneVOILUT"; }
	bool        retired(void) const { return true; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_Segmentation : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_SegmentationSeries *SegmentationSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_SegmentationImage *SegmentationImage;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForSegmentation *MultiFrameFunctionalGroupsForSegmentation;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_Specimen *Specimen;
	Module_SOPCommon *SOPCommon;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_Segmentation(AttributeList *list);
	const char *identify(void) const { return "Segmentation"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_SurfaceSegmentation : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_SegmentationSeries *SegmentationSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_SurfaceSegmentation *SurfaceSegmentation;
	Module_SurfaceMesh *SurfaceMesh;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_SurfaceSegmentation(AttributeList *list);
	const char *identify(void) const { return "SurfaceSegmentation"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_SpatialRegistration : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_SpatialRegistrationSeries *SpatialRegistrationSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SpatialRegistration *SpatialRegistration;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_SpatialRegistration(AttributeList *list);
	const char *identify(void) const { return "SpatialRegistration"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_DeformableSpatialRegistration : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_SpatialRegistrationSeries *SpatialRegistrationSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_DeformableSpatialRegistration *DeformableSpatialRegistration;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_DeformableSpatialRegistration(AttributeList *list);
	const char *identify(void) const { return "DeformableSpatialRegistration"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_SpatialFiducials : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_SpatialFiducialsSeries *SpatialFiducialsSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SpatialFiducials *SpatialFiducials;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_SpatialFiducials(AttributeList *list);
	const char *identify(void) const { return "SpatialFiducials"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EncapsulatedPDF : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_EncapsulatedDocumentSeries *EncapsulatedDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_EncapsulatedDocument *EncapsulatedDocument;
	Module_EncapsulatedDocumentPDFPseudo *EncapsulatedDocumentPDFPseudo;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_EncapsulatedPDF(AttributeList *list);
	const char *identify(void) const { return "EncapsulatedPDF"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EncapsulatedCDA : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_EncapsulatedDocumentSeries *EncapsulatedDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SCEquipment *SCEquipment;
	Module_EncapsulatedDocument *EncapsulatedDocument;
	Module_EncapsulatedDocumentCDAPseudo *EncapsulatedDocumentCDAPseudo;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_EncapsulatedCDA(AttributeList *list);
	const char *identify(void) const { return "EncapsulatedCDA"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EncapsulatedSTL : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_EncapsulatedDocumentSeries *EncapsulatedDocumentSeries;
	Module_EncapsulatedDocumentSTLSeriesPseudo *EncapsulatedDocumentSTLSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_EncapsulatedDocument *EncapsulatedDocument;
	Module_EncapsulatedDocumentSTLPseudo *EncapsulatedDocumentSTLPseudo;
	Module_Manufacturing3DModel *Manufacturing3DModel;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_EncapsulatedSTL(AttributeList *list);
	const char *identify(void) const { return "EncapsulatedSTL"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RealWorldValueMapping : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_RealWorldValueMappingSeries *RealWorldValueMappingSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RealWorldValueMapping *RealWorldValueMapping;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_RealWorldValueMapping(AttributeList *list);
	const char *identify(void) const { return "RealWorldValueMapping"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_IVOCTImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_IntravascularOCTSeries *IntravascularOCTSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_SupplementalPaletteColorLUT *SupplementalPaletteColorLUT;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation *MultiFrameFunctionalGroupsForIVOCTImageForPresentation;
	Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing *MultiFrameFunctionalGroupsForIVOCTImageForProcessing;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_AcquisitionContext *AcquisitionContext;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_IntravascularOCTImage *IntravascularOCTImage;
	Module_IntravascularOCTAcquisitionParameters *IntravascularOCTAcquisitionParameters;
	Module_IntravascularOCTProcessingParameters *IntravascularOCTProcessingParameters;
	Module_IntravascularImageAcquisitionParameters *IntravascularImageAcquisitionParameters;
	Module_Device *Device;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_IVOCTImage(AttributeList *list);
	const char *identify(void) const { return "IVOCTImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_ParametricMap : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ParametricMapSeries *ParametricMapSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_FloatingPointImagePixel *FloatingPointImagePixel;
	Module_DoubleFloatingPointImagePixel *DoubleFloatingPointImagePixel;
	Module_ParametricMapImage *ParametricMapImage;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForParametricMap *MultiFrameFunctionalGroupsForParametricMap;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_PaletteColorLookupTable *PaletteColorLookupTable;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_BulkMotionSynchronization *BulkMotionSynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_SOPCommon *SOPCommon;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_ParametricMap(AttributeList *list);
	const char *identify(void) const { return "ParametricMap"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BasicDirectory : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_FileSetIdentification *FileSetIdentification;
	Module_DirectoryInformation *DirectoryInformation;
public:
	            CompositeIOD_BasicDirectory(AttributeList *list);
	const char *identify(void) const { return "BasicDirectory"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BasicDirectoryDental : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_FileSetIdentification *FileSetIdentification;
	Module_DirectoryInformation *DirectoryInformation;
	Module_DirectoryInformationDental *DirectoryInformationDental;
public:
	            CompositeIOD_BasicDirectoryDental(AttributeList *list);
	const char *identify(void) const { return "BasicDirectoryDental"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_XAImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_Mask *Mask;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_XRayImage *XRayImage;
	Module_XRayAcquisition *XRayAcquisition;
	Module_XRayCollimator *XRayCollimator;
	Module_XRayTable *XRayTable;
	Module_XAPositioner *XAPositioner;
	Module_DXDetector *DXDetector;
	Module_OverlayPlane *OverlayPlane;
	Module_MultiFrameOverlay *MultiFrameOverlay;
	Module_ModalityLUT *ModalityLUT;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_XAImage(AttributeList *list);
	const char *identify(void) const { return "XAImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_XRFImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_FramePointers *FramePointers;
	Module_Mask *Mask;
	Module_XRayImage *XRayImage;
	Module_XRayAcquisition *XRayAcquisition;
	Module_XRayCollimator *XRayCollimator;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_XRayTable *XRayTable;
	Module_XRFPositioner *XRFPositioner;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_DXDetector *DXDetector;
	Module_OverlayPlane *OverlayPlane;
	Module_MultiFrameOverlay *MultiFrameOverlay;
	Module_ModalityLUT *ModalityLUT;
	Module_VOILUT *VOILUT;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_XRFImage(AttributeList *list);
	const char *identify(void) const { return "XRFImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedXAImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_XAXRFSeries *XAXRFSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Mask *Mask;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedXAImage *MultiFrameFunctionalGroupsForEnhancedXAImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_Specimen *Specimen;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_EnhancedXAXRFImage *EnhancedXAXRFImage;
	Module_XAXRFAcquisition *XAXRFAcquisition;
	Module_XRayImageIntensifier *XRayImageIntensifier;
	Module_XRayDetector *XRayDetector;
	Module_XAXRFMultiFramePresentation *XAXRFMultiFramePresentation;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedXAImage(AttributeList *list);
	const char *identify(void) const { return "EnhancedXAImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedXRFImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_XAXRFSeries *XAXRFSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Mask *Mask;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedXRFImage *MultiFrameFunctionalGroupsForEnhancedXRFImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_Specimen *Specimen;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_EnhancedXAXRFImage *EnhancedXAXRFImage;
	Module_XAXRFAcquisition *XAXRFAcquisition;
	Module_XRayImageIntensifier *XRayImageIntensifier;
	Module_XRayDetector *XRayDetector;
	Module_XAXRFMultiFramePresentation *XAXRFMultiFramePresentation;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedXRFImage(AttributeList *list);
	const char *identify(void) const { return "EnhancedXRFImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_XRay3DAngiographicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedSeries *EnhancedSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage *MultiFrameFunctionalGroupsForXRay3DAngiographicImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_PatientOrientation *PatientOrientation;
	Module_ImageEquipmentCoordinateRelationship *ImageEquipmentCoordinateRelationship;
	Module_Specimen *Specimen;
	Module_XRay3DImage *XRay3DImage;
	Module_XRay3DAngiographicImageContributingSources *XRay3DAngiographicImageContributingSources;
	Module_XRay3DAngiographicAcquisition *XRay3DAngiographicAcquisition;
	Module_XRay3DReconstruction *XRay3DReconstruction;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_XRay3DAngiographicImage(AttributeList *list);
	const char *identify(void) const { return "XRay3DAngiographicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_XRay3DCraniofacialImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedSeries *EnhancedSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage *MultiFrameFunctionalGroupsForXRay3DCraniofacialImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_PatientOrientation *PatientOrientation;
	Module_ImageEquipmentCoordinateRelationship *ImageEquipmentCoordinateRelationship;
	Module_Specimen *Specimen;
	Module_XRay3DImage *XRay3DImage;
	Module_XRay3DCraniofacialImageContributingSources *XRay3DCraniofacialImageContributingSources;
	Module_XRay3DCraniofacialAcquisition *XRay3DCraniofacialAcquisition;
	Module_XRay3DReconstruction *XRay3DReconstruction;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_XRay3DCraniofacialImage(AttributeList *list);
	const char *identify(void) const { return "XRay3DCraniofacialImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_PETImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_PETSeries *PETSeries;
	Module_PETIsotope *PETIsotope;
	Module_PETMultigatedAcquisition *PETMultigatedAcquisition;
	Module_NMPETPatientOrientation *NMPETPatientOrientation;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePlane *ImagePlane;
	Module_ImagePixel *ImagePixel;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_PETImage *PETImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_PETImage(AttributeList *list);
	const char *identify(void) const { return "PETImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedPETImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedPETSeries *EnhancedPETSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedPETImage *MultiFrameFunctionalGroupsForEnhancedPETImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_Specimen *Specimen;
	Module_EnhancedPETIsotope *EnhancedPETIsotope;
	Module_EnhancedPETAcquisition *EnhancedPETAcquisition;
	Module_EnhancedPETImage *EnhancedPETImage;
	Module_EnhancedPETCorrections *EnhancedPETCorrections;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedPETImage(AttributeList *list);
	const char *identify(void) const { return "EnhancedPETImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_LegacyConvertedEnhancedPETImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedPETSeries *EnhancedPETSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage *MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_Specimen *Specimen;
	Module_EnhancedPETImage *EnhancedPETImage;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_LegacyConvertedEnhancedPETImage(AttributeList *list);
	const char *identify(void) const { return "LegacyConvertedEnhancedPETImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedPETImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedPETSeries *EnhancedPETSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage *MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedPETImage *EnhancedPETImage;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedPETImage(AttributeList *list);
	const char *identify(void) const { return "PrivatePixelMedLegacyConvertedEnhancedPETImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_RTImage *RTImage;
	Module_ModalityLUT *ModalityLUT;
	Module_VOILUT *VOILUT;
	Module_Approval *Approval;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_RTImage(AttributeList *list);
	const char *identify(void) const { return "RTImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTDose : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePlane *ImagePlane;
	Module_ImagePixel *ImagePixel;
	Module_MultiFrame *MultiFrame;
	Module_OverlayPlane *OverlayPlane;
	Module_MultiFrameOverlay *MultiFrameOverlay;
	Module_ModalityLUT *ModalityLUT;
	Module_RTDose *RTDose;
	Module_RTDVH *RTDVH;
	Module_StructureSet *StructureSet;
	Module_ROIContour *ROIContour;
	Module_RTDoseROI *RTDoseROI;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_RTDose(AttributeList *list);
	const char *identify(void) const { return "RTDose"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTStructureSet : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_StructureSet *StructureSet;
	Module_ROIContour *ROIContour;
	Module_RTROIObservations *RTROIObservations;
	Module_Approval *Approval;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTStructureSet(AttributeList *list);
	const char *identify(void) const { return "RTStructureSet"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTPlan : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RTGeneralPlan *RTGeneralPlan;
	Module_RTPrescription *RTPrescription;
	Module_RTToleranceTables *RTToleranceTables;
	Module_RTPatientSetup *RTPatientSetup;
	Module_RTFractionScheme *RTFractionScheme;
	Module_RTBeams *RTBeams;
	Module_RTBrachyApplicationSetups *RTBrachyApplicationSetups;
	Module_Approval *Approval;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTPlan(AttributeList *list);
	const char *identify(void) const { return "RTPlan"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTBeamsTreatmentRecord : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RTGeneralTreatmentRecord *RTGeneralTreatmentRecord;
	Module_RTPatientSetup *RTPatientSetup;
	Module_RTTreatmentMachineRecord *RTTreatmentMachineRecord;
	Module_MeasuredDoseReferenceRecord *MeasuredDoseReferenceRecord;
	Module_CalculatedDoseReferenceRecord *CalculatedDoseReferenceRecord;
	Module_RTBeamsSessionRecord *RTBeamsSessionRecord;
	Module_RTTreatmentSummaryRecord *RTTreatmentSummaryRecord;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTBeamsTreatmentRecord(AttributeList *list);
	const char *identify(void) const { return "RTBeamsTreatmentRecord"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTBrachyTreatmentRecord : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RTGeneralTreatmentRecord *RTGeneralTreatmentRecord;
	Module_RTPatientSetup *RTPatientSetup;
	Module_RTTreatmentMachineRecord *RTTreatmentMachineRecord;
	Module_MeasuredDoseReferenceRecord *MeasuredDoseReferenceRecord;
	Module_CalculatedDoseReferenceRecord *CalculatedDoseReferenceRecord;
	Module_RTBrachySessionRecord *RTBrachySessionRecord;
	Module_RTTreatmentSummaryRecord *RTTreatmentSummaryRecord;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTBrachyTreatmentRecord(AttributeList *list);
	const char *identify(void) const { return "RTBrachyTreatmentRecord"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTTreatmentSummaryRecord : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RTGeneralTreatmentRecord *RTGeneralTreatmentRecord;
	Module_RTTreatmentSummaryRecord *RTTreatmentSummaryRecord;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTTreatmentSummaryRecord(AttributeList *list);
	const char *identify(void) const { return "RTTreatmentSummaryRecord"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTIonPlan : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RTGeneralPlan *RTGeneralPlan;
	Module_RTPrescription *RTPrescription;
	Module_RTIonToleranceTables *RTIonToleranceTables;
	Module_RTPatientSetup *RTPatientSetup;
	Module_RTFractionScheme *RTFractionScheme;
	Module_RTIonBeams *RTIonBeams;
	Module_Approval *Approval;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTIonPlan(AttributeList *list);
	const char *identify(void) const { return "RTIonPlan"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RTIonBeamsTreatmentRecord : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_RTSeries *RTSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_RTGeneralTreatmentRecord *RTGeneralTreatmentRecord;
	Module_RTPatientSetup *RTPatientSetup;
	Module_RTTreatmentMachineRecord *RTTreatmentMachineRecord;
	Module_MeasuredDoseReferenceRecord *MeasuredDoseReferenceRecord;
	Module_CalculatedDoseReferenceRecord *CalculatedDoseReferenceRecord;
	Module_RTIonBeamsSessionRecord *RTIonBeamsSessionRecord;
	Module_RTTreatmentSummaryRecord *RTTreatmentSummaryRecord;
	Module_GeneralReference *GeneralReference;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_RTIonBeamsTreatmentRecord(AttributeList *list);
	const char *identify(void) const { return "RTIonBeamsTreatmentRecord"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_DXImageForProcessing : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_DXImageForProcessing(AttributeList *list);
	const char *identify(void) const { return "DXImageForProcessing"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_DXImageForPresentation : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_DXImageForPresentation(AttributeList *list);
	const char *identify(void) const { return "DXImageForPresentation"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyImageForProcessing : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_MammographySeries *MammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_MammographyImage *MammographyImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_MammographyImageForProcessing(AttributeList *list);
	const char *identify(void) const { return "MammographyImageForProcessing"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyImageForPresentation : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_MammographySeries *MammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_MammographyImage *MammographyImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_MammographyImageForPresentation(AttributeList *list);
	const char *identify(void) const { return "MammographyImageForPresentation"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyImageForProcessingIHEMammo : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_MammographySeries *MammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_MammographyImage *MammographyImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_IHEMammoProfile *IHEMammoProfile;
	Module_IHEMammoProfileWithoutPartialViewOption *IHEMammoProfileWithoutPartialViewOption;
public:
	            CompositeIOD_MammographyImageForProcessingIHEMammo(AttributeList *list);
	const char *identify(void) const { return "MammographyImageForProcessingIHEMammo"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyImageForProcessingIHEMammoPartialViewOption : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_MammographySeries *MammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_MammographyImage *MammographyImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_IHEMammoProfile *IHEMammoProfile;
	Module_IHEMammoProfileWithPartialViewOption *IHEMammoProfileWithPartialViewOption;
public:
	            CompositeIOD_MammographyImageForProcessingIHEMammoPartialViewOption(AttributeList *list);
	const char *identify(void) const { return "MammographyImageForProcessingIHEMammoPartialViewOption"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyImageForPresentationIHEMammo : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_MammographySeries *MammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_MammographyImage *MammographyImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_IHEMammoProfile *IHEMammoProfile;
	Module_IHEMammoProfileWithoutPartialViewOption *IHEMammoProfileWithoutPartialViewOption;
	Module_IHEMammoProfileForPresentationOnly *IHEMammoProfileForPresentationOnly;
public:
	            CompositeIOD_MammographyImageForPresentationIHEMammo(AttributeList *list);
	const char *identify(void) const { return "MammographyImageForPresentationIHEMammo"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyImageForPresentationIHEMammoPartialViewOption : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_MammographySeries *MammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_MammographyImage *MammographyImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_IHEMammoProfile *IHEMammoProfile;
	Module_IHEMammoProfileWithPartialViewOption *IHEMammoProfileWithPartialViewOption;
	Module_IHEMammoProfileForPresentationOnly *IHEMammoProfileForPresentationOnly;
public:
	            CompositeIOD_MammographyImageForPresentationIHEMammoPartialViewOption(AttributeList *list);
	const char *identify(void) const { return "MammographyImageForPresentationIHEMammoPartialViewOption"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_IntraoralImageForProcessing : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_IntraoralSeries *IntraoralSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_IntraoralImage *IntraoralImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_IntraoralImageForProcessing(AttributeList *list);
	const char *identify(void) const { return "IntraoralImageForProcessing"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_IntraoralImageForPresentation : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_IntraoralSeries *IntraoralSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_IntraoralImage *IntraoralImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
public:
	            CompositeIOD_IntraoralImageForPresentation(AttributeList *list);
	const char *identify(void) const { return "IntraoralImageForPresentation"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_IntraoralImageForPresentationDentalMedia : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_IntraoralSeries *IntraoralSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_IntraoralImage *IntraoralImage;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_DentalImageOnMediaProfile *DentalImageOnMediaProfile;
public:
	            CompositeIOD_IntraoralImageForPresentationDentalMedia(AttributeList *list);
	const char *identify(void) const { return "IntraoralImageForPresentationDentalMedia"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_DXImageForPresentationDentalMedia : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_DisplayShutter *DisplayShutter;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_Specimen *Specimen;
	Module_DXAnatomyImaged *DXAnatomyImaged;
	Module_DXImage *DXImage;
	Module_DXDetector *DXDetector;
	Module_XRayCollimator *XRayCollimator;
	Module_DXPositioning *DXPositioning;
	Module_XRayTomographyAcquisition *XRayTomographyAcquisition;
	Module_XRayAcquisitionDose *XRayAcquisitionDose;
	Module_XRayGeneration *XRayGeneration;
	Module_XRayFiltration *XRayFiltration;
	Module_XRayGrid *XRayGrid;
	Module_OverlayPlane *OverlayPlane;
	Module_VOILUT *VOILUT;
	Module_ImageHistogram *ImageHistogram;
	Module_AcquisitionContext *AcquisitionContext;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_DentalImageOnMediaProfile *DentalImageOnMediaProfile;
public:
	            CompositeIOD_DXImageForPresentationDentalMedia(AttributeList *list);
	const char *identify(void) const { return "DXImageForPresentationDentalMedia"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BreastTomosynthesisImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedMammographySeries *EnhancedMammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage *MultiFrameFunctionalGroupsForBreastTomosynthesisImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_ImageEquipmentCoordinateRelationship *ImageEquipmentCoordinateRelationship;
	Module_Specimen *Specimen;
	Module_XRay3DImage *XRay3DImage;
	Module_BreastTomosynthesisContributingSources *BreastTomosynthesisContributingSources;
	Module_BreastTomosynthesisAcquisition *BreastTomosynthesisAcquisition;
	Module_XRay3DReconstruction *XRay3DReconstruction;
	Module_BreastView *BreastView;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_BreastTomosynthesisImage(AttributeList *list);
	const char *identify(void) const { return "BreastTomosynthesisImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BreastTomosynthesisImageIHEDBT : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedMammographySeries *EnhancedMammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage *MultiFrameFunctionalGroupsForBreastTomosynthesisImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_ImageEquipmentCoordinateRelationship *ImageEquipmentCoordinateRelationship;
	Module_Specimen *Specimen;
	Module_XRay3DImage *XRay3DImage;
	Module_BreastTomosynthesisContributingSources *BreastTomosynthesisContributingSources;
	Module_BreastTomosynthesisAcquisition *BreastTomosynthesisAcquisition;
	Module_XRay3DReconstruction *XRay3DReconstruction;
	Module_BreastView *BreastView;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
	Module_IHEDBTProfile *IHEDBTProfile;
public:
	            CompositeIOD_BreastTomosynthesisImageIHEDBT(AttributeList *list);
	const char *identify(void) const { return "BreastTomosynthesisImageIHEDBT"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BreastProjectionXRayImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_DXSeries *DXSeries;
	Module_EnhancedMammographySeries *EnhancedMammographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_EnhancedMammographyImage *EnhancedMammographyImage;
	Module_BreastView *BreastView;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Device *Device;
	Module_Intervention *Intervention;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage *MultiFrameFunctionalGroupsForBreastProjectionXRayImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_PatientOrientation *PatientOrientation;
	Module_Specimen *Specimen;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_BreastProjectionXRayImage(AttributeList *list);
	const char *identify(void) const { return "BreastProjectionXRayImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VLEndoscopicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLEndoscopicSeriesPseudo *VLEndoscopicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_OverlayPlane *OverlayPlane;
	Module_ICCProfile *ICCProfile;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_VLEndoscopicImage(AttributeList *list);
	const char *identify(void) const { return "VLEndoscopicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VLMicroscopicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLMicroscopicSeriesPseudo *VLMicroscopicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_OpticalPath *OpticalPath;
	Module_OverlayPlane *OverlayPlane;
	Module_ICCProfile *ICCProfile;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_VLMicroscopicImage(AttributeList *list);
	const char *identify(void) const { return "VLMicroscopicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VLSlideCoordinatesMicroscopicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLSlideCoordinatesMicroscopicSeriesPseudo *VLSlideCoordinatesMicroscopicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_SlideCoordinates *SlideCoordinates;
	Module_OpticalPath *OpticalPath;
	Module_OverlayPlane *OverlayPlane;
	Module_ICCProfile *ICCProfile;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_VLSlideCoordinatesMicroscopicImage(AttributeList *list);
	const char *identify(void) const { return "VLSlideCoordinatesMicroscopicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VLPhotographicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLPhotographicSeriesPseudo *VLPhotographicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_OverlayPlane *OverlayPlane;
	Module_ICCProfile *ICCProfile;
	Module_CheckSingleFramePseudo *CheckSingleFramePseudo;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
public:
	            CompositeIOD_VLPhotographicImage(AttributeList *list);
	const char *identify(void) const { return "VLPhotographicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VideoEndoscopicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLEndoscopicSeriesPseudo *VLEndoscopicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_VideoEndoscopicImage(AttributeList *list);
	const char *identify(void) const { return "VideoEndoscopicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VideoMicroscopicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLMicroscopicSeriesPseudo *VLMicroscopicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_VideoMicroscopicImage(AttributeList *list);
	const char *identify(void) const { return "VideoMicroscopicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VideoPhotographicImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VLPhotographicSeriesPseudo *VLPhotographicSeriesPseudo;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_VLImage *VLImage;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_VideoPhotographicImage(AttributeList *list);
	const char *identify(void) const { return "VideoPhotographicImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_OphthalmicPhotography8BitImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_OphthalmicPhotographySeries *OphthalmicPhotographySeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_AcquisitionContext *AcquisitionContext;
	Module_OphthalmicPhotographyImage *OphthalmicPhotographyImage;
	Module_OphthalmicPhotography8BitImagePseudo *OphthalmicPhotography8BitImagePseudo;
	Module_OcularRegionImaged *OcularRegionImaged;
	Module_OphthalmicPhotographyAcquisitionParameters *OphthalmicPhotographyAcquisitionParameters;
	Module_OphthalmicPhotographicParameters *OphthalmicPhotographicParameters;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_OphthalmicPhotography8BitImage(AttributeList *list);
	const char *identify(void) const { return "OphthalmicPhotography8BitImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_OphthalmicPhotography16BitImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_OphthalmicPhotographySeries *OphthalmicPhotographySeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_Cine *Cine;
	Module_MultiFrame *MultiFrame;
	Module_AcquisitionContext *AcquisitionContext;
	Module_OphthalmicPhotographyImage *OphthalmicPhotographyImage;
	Module_OphthalmicPhotography16BitImagePseudo *OphthalmicPhotography16BitImagePseudo;
	Module_OcularRegionImaged *OcularRegionImaged;
	Module_OphthalmicPhotographyAcquisitionParameters *OphthalmicPhotographyAcquisitionParameters;
	Module_OphthalmicPhotographicParameters *OphthalmicPhotographicParameters;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_OphthalmicPhotography16BitImage(AttributeList *list);
	const char *identify(void) const { return "OphthalmicPhotography16BitImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_StereometricRelationship : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_StereometricSeries *StereometricSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_StereometricRelationship *StereometricRelationship;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_StereometricRelationship(AttributeList *list);
	const char *identify(void) const { return "StereometricRelationship"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_OphthalmicTomographyImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_OphthalmicTomographySeries *OphthalmicTomographySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForOphthalmicTomography *MultiFrameFunctionalGroupsForOphthalmicTomography;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_AcquisitionContext *AcquisitionContext;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_OphthalmicTomographyImage *OphthalmicTomographyImage;
	Module_OphthalmicTomographyAcquisitionParameters *OphthalmicTomographyAcquisitionParameters;
	Module_OphthalmicTomographyParameters *OphthalmicTomographyParameters;
	Module_OcularRegionImaged *OcularRegionImaged;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_OphthalmicTomographyImage(AttributeList *list);
	const char *identify(void) const { return "OphthalmicTomographyImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VLWholeSlideMicroscopyImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_WholeSlideMicroscopySeries *WholeSlideMicroscopySeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_AcquisitionContext *AcquisitionContext;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy *MultiFrameFunctionalGroupsForWholeSlideMicroscopy;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_Specimen *Specimen;
	Module_WholeSlideMicroscopyImage *WholeSlideMicroscopyImage;
	Module_OpticalPath *OpticalPath;
	Module_MultiResolutionNavigation *MultiResolutionNavigation;
	Module_SlideLabel *SlideLabel;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_VLWholeSlideMicroscopyImage(AttributeList *list);
	const char *identify(void) const { return "VLWholeSlideMicroscopyImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_LensometryMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_LensometryMeasurementsSeries *LensometryMeasurementsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_LensometryMeasurements *LensometryMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_LensometryMeasurements(AttributeList *list);
	const char *identify(void) const { return "LensometryMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_AutorefractionMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_AutorefractionMeasurementsSeries *AutorefractionMeasurementsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_AutorefractionMeasurements *AutorefractionMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_AutorefractionMeasurements(AttributeList *list);
	const char *identify(void) const { return "AutorefractionMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_KeratometryMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_KeratometryMeasurementsSeries *KeratometryMeasurementsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_KeratometryMeasurements *KeratometryMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_KeratometryMeasurements(AttributeList *list);
	const char *identify(void) const { return "KeratometryMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_SubjectiveRefractionMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_SubjectiveRefractionMeasurementsSeries *SubjectiveRefractionMeasurementsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_SubjectiveRefractionMeasurements *SubjectiveRefractionMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_SubjectiveRefractionMeasurements(AttributeList *list);
	const char *identify(void) const { return "SubjectiveRefractionMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_VisualAcuityMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_VisualAcuityMeasurementsSeries *VisualAcuityMeasurementsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_VisualAcuityMeasurements *VisualAcuityMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_VisualAcuityMeasurements(AttributeList *list);
	const char *identify(void) const { return "VisualAcuityMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_OphthalmicAxialMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_OphthalmicAxialMeasurementsSeries *OphthalmicAxialMeasurementsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_OphthalmicAxialMeasurements *OphthalmicAxialMeasurements;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_OphthalmicAxialMeasurements(AttributeList *list);
	const char *identify(void) const { return "OphthalmicAxialMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_IntraocularLensCalculations : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_IntraocularLensCalculationsSeries *IntraocularLensCalculationsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_IntraocularLensCalculations *IntraocularLensCalculations;
	Module_GeneralOphthalmicRefractiveMeasurements *GeneralOphthalmicRefractiveMeasurements;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_IntraocularLensCalculations(AttributeList *list);
	const char *identify(void) const { return "IntraocularLensCalculations"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_OphthalmicVisualFieldStaticPerimetryMeasurements : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_VisualFieldStaticPerimetryMeasurementsSeries *VisualFieldStaticPerimetryMeasurementsSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_VisualFieldStaticPerimetryTestParameters *VisualFieldStaticPerimetryTestParameters;
	Module_VisualFieldStaticPerimetryTestReliability *VisualFieldStaticPerimetryTestReliability;
	Module_VisualFieldStaticPerimetryTestMeasurements *VisualFieldStaticPerimetryTestMeasurements;
	Module_VisualFieldStaticPerimetryTestResults *VisualFieldStaticPerimetryTestResults;
	Module_OphthalmicPatientClinicalInformationandTestLensParameters *OphthalmicPatientClinicalInformationandTestLensParameters;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_OphthalmicVisualFieldStaticPerimetryMeasurements(AttributeList *list);
	const char *identify(void) const { return "OphthalmicVisualFieldStaticPerimetryMeasurements"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BasicVoice : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_WaveformIdentification *WaveformIdentification;
	Module_Waveform *Waveform;
	Module_AcquisitionContext *AcquisitionContext;
	Module_WaveformAnnotation *WaveformAnnotation;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_BasicVoice(AttributeList *list);
	const char *identify(void) const { return "BasicVoice"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_TwelveLeadECG : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_WaveformIdentification *WaveformIdentification;
	Module_Waveform *Waveform;
	Module_AcquisitionContext *AcquisitionContext;
	Module_WaveformAnnotation *WaveformAnnotation;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_TwelveLeadECG(AttributeList *list);
	const char *identify(void) const { return "TwelveLeadECG"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_GeneralECG : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_WaveformIdentification *WaveformIdentification;
	Module_Waveform *Waveform;
	Module_AcquisitionContext *AcquisitionContext;
	Module_WaveformAnnotation *WaveformAnnotation;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_GeneralECG(AttributeList *list);
	const char *identify(void) const { return "GeneralECG"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_AmbulatoryECG : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_WaveformIdentification *WaveformIdentification;
	Module_Waveform *Waveform;
	Module_AcquisitionContext *AcquisitionContext;
	Module_WaveformAnnotation *WaveformAnnotation;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_AmbulatoryECG(AttributeList *list);
	const char *identify(void) const { return "AmbulatoryECG"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_HemodynamicWaveform : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_WaveformIdentification *WaveformIdentification;
	Module_Waveform *Waveform;
	Module_AcquisitionContext *AcquisitionContext;
	Module_WaveformAnnotation *WaveformAnnotation;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_HemodynamicWaveform(AttributeList *list);
	const char *identify(void) const { return "HemodynamicWaveform"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_CardiacElectrophysiologyWaveform : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_WaveformIdentification *WaveformIdentification;
	Module_Waveform *Waveform;
	Module_AcquisitionContext *AcquisitionContext;
	Module_WaveformAnnotation *WaveformAnnotation;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_CardiacElectrophysiologyWaveform(AttributeList *list);
	const char *identify(void) const { return "CardiacElectrophysiologyWaveform"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BasicTextSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_BasicTextSR(AttributeList *list);
	const char *identify(void) const { return "BasicTextSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_EnhancedSR(AttributeList *list);
	const char *identify(void) const { return "EnhancedSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_ComprehensiveSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_ComprehensiveSR(AttributeList *list);
	const char *identify(void) const { return "ComprehensiveSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_Comprehensive3DSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_Comprehensive3DSR(AttributeList *list);
	const char *identify(void) const { return "Comprehensive3DSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_KeyObjectSelectionDocument : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_KeyObjectDocumentSeries *KeyObjectDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_KeyObjectDocument *KeyObjectDocument;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_KeyObjectSelectionDocument(AttributeList *list);
	const char *identify(void) const { return "KeyObjectSelectionDocument"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_KeyObjectSelectionDocumentIHEXDSIManifest : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_KeyObjectDocumentSeries *KeyObjectDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_KeyObjectDocument *KeyObjectDocument;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
	Module_IHEXDSIManifestProfile *IHEXDSIManifestProfile;
public:
	            CompositeIOD_KeyObjectSelectionDocumentIHEXDSIManifest(AttributeList *list);
	const char *identify(void) const { return "KeyObjectSelectionDocumentIHEXDSIManifest"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MammographyCADSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_MammographyCADSR(AttributeList *list);
	const char *identify(void) const { return "MammographyCADSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_ChestCADSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_ChestCADSR(AttributeList *list);
	const char *identify(void) const { return "ChestCADSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_ProcedureLog : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_ProcedureLog(AttributeList *list);
	const char *identify(void) const { return "ProcedureLog"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_XRayRadiationDoseSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_XRayRadiationDoseSR(AttributeList *list);
	const char *identify(void) const { return "XRayRadiationDoseSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_XRayRadiationDoseSRIHEREM : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
	Module_IHEREMProfile *IHEREMProfile;
public:
	            CompositeIOD_XRayRadiationDoseSRIHEREM(AttributeList *list);
	const char *identify(void) const { return "XRayRadiationDoseSRIHEREM"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RadiopharmaceuticalRadiationDoseSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_RadiopharmaceuticalRadiationDoseSR(AttributeList *list);
	const char *identify(void) const { return "RadiopharmaceuticalRadiationDoseSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_SpectaclePrescriptionReport : public CompositeIOD {
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_SpectaclePrescriptionReport(AttributeList *list);
	const char *identify(void) const { return "SpectaclePrescriptionReport"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_AcquisitionContextSR : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_SRDocumentSeries *SRDocumentSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_SRDocumentGeneral *SRDocumentGeneral;
	Module_SRDocumentContent *SRDocumentContent;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_AcquisitionContextSR(AttributeList *list);
	const char *identify(void) const { return "AcquisitionContextSR"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_GrayscaleSoftcopyPresentationState : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_PresentationSeries *PresentationSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_PresentationStateIdentification *PresentationStateIdentification;
	Module_PresentationStateRelationship *PresentationStateRelationship;
	Module_PresentationStateShutter *PresentationStateShutter;
	Module_PresentationStateMask *PresentationStateMask;
	Module_Mask *Mask;
	Module_DisplayShutter *DisplayShutter;
	Module_BitmapDisplayShutter *BitmapDisplayShutter;
	Module_OverlayPlane *OverlayPlane;
	Module_OverlayActivation *OverlayActivation;
	Module_DisplayedArea *DisplayedArea;
	Module_GraphicAnnotation *GraphicAnnotation;
	Module_SpatialTransformation *SpatialTransformation;
	Module_GraphicLayer *GraphicLayer;
	Module_ModalityLUT *ModalityLUT;
	Module_SoftcopyVOILUT *SoftcopyVOILUT;
	Module_SoftcopyPresentationLUT *SoftcopyPresentationLUT;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_GrayscaleSoftcopyPresentationState(AttributeList *list);
	const char *identify(void) const { return "GrayscaleSoftcopyPresentationState"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_ColorSoftcopyPresentationState : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_PresentationSeries *PresentationSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_PresentationStateIdentification *PresentationStateIdentification;
	Module_PresentationStateRelationship *PresentationStateRelationship;
	Module_PresentationStateShutter *PresentationStateShutter;
	Module_DisplayShutter *DisplayShutter;
	Module_BitmapDisplayShutter *BitmapDisplayShutter;
	Module_OverlayPlane *OverlayPlane;
	Module_OverlayActivation *OverlayActivation;
	Module_DisplayedArea *DisplayedArea;
	Module_GraphicAnnotation *GraphicAnnotation;
	Module_SpatialTransformation *SpatialTransformation;
	Module_GraphicLayer *GraphicLayer;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_ColorSoftcopyPresentationState(AttributeList *list);
	const char *identify(void) const { return "ColorSoftcopyPresentationState"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_PseudoColorSoftcopyPresentationState : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_PresentationSeries *PresentationSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_PresentationStateIdentification *PresentationStateIdentification;
	Module_PresentationStateRelationship *PresentationStateRelationship;
	Module_PresentationStateShutter *PresentationStateShutter;
	Module_PresentationStateMask *PresentationStateMask;
	Module_Mask *Mask;
	Module_DisplayShutter *DisplayShutter;
	Module_BitmapDisplayShutter *BitmapDisplayShutter;
	Module_OverlayPlane *OverlayPlane;
	Module_OverlayActivation *OverlayActivation;
	Module_DisplayedArea *DisplayedArea;
	Module_GraphicAnnotation *GraphicAnnotation;
	Module_SpatialTransformation *SpatialTransformation;
	Module_GraphicLayer *GraphicLayer;
	Module_ModalityLUT *ModalityLUT;
	Module_SoftcopyVOILUT *SoftcopyVOILUT;
	Module_PaletteColorLookupTable *PaletteColorLookupTable;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_PseudoColorSoftcopyPresentationState(AttributeList *list);
	const char *identify(void) const { return "PseudoColorSoftcopyPresentationState"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BlendingSoftcopyPresentationState : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_PresentationSeries *PresentationSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_PresentationStateIdentification *PresentationStateIdentification;
	Module_PresentationStateBlending *PresentationStateBlending;
	Module_DisplayedArea *DisplayedArea;
	Module_GraphicAnnotation *GraphicAnnotation;
	Module_SpatialTransformation *SpatialTransformation;
	Module_GraphicLayer *GraphicLayer;
	Module_PaletteColorLookupTable *PaletteColorLookupTable;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_BlendingSoftcopyPresentationState(AttributeList *list);
	const char *identify(void) const { return "BlendingSoftcopyPresentationState"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_HangingProtocol : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_HangingProtocolDefinition *HangingProtocolDefinition;
	Module_HangingProtocolEnvironment *HangingProtocolEnvironment;
	Module_HangingProtocolDisplay *HangingProtocolDisplay;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_HangingProtocol(AttributeList *list);
	const char *identify(void) const { return "HangingProtocol"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_ColorPalette : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_ColorPaletteDefinition *ColorPaletteDefinition;
	Module_PaletteColorLookupTable *PaletteColorLookupTable;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_ColorPalette(AttributeList *list);
	const char *identify(void) const { return "ColorPalette"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_BasicStructuredDisplay : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_PresentationSeries *PresentationSeries;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_StructuredDisplay *StructuredDisplay;
	Module_StructuredDisplayImageBox *StructuredDisplayImageBox;
	Module_StructuredDisplayAnnotation *StructuredDisplayAnnotation;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_BasicStructuredDisplay(AttributeList *list);
	const char *identify(void) const { return "BasicStructuredDisplay"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedMRImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_MRSeries *MRSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedMRImage *MultiFrameFunctionalGroupsForEnhancedMRImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_BulkMotionSynchronization *BulkMotionSynchronization;
	Module_SupplementalPaletteColorLUT *SupplementalPaletteColorLUT;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedMRImage *EnhancedMRImage;
	Module_MRPulseSequence *MRPulseSequence;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedMRImage(AttributeList *list);
	const char *identify(void) const { return "EnhancedMRImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedMRColorImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_MRSeries *MRSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedMRImage *MultiFrameFunctionalGroupsForEnhancedMRImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_BulkMotionSynchronization *BulkMotionSynchronization;
	Module_SupplementalPaletteColorLUT *SupplementalPaletteColorLUT;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedMRImage *EnhancedMRImage;
	Module_MRPulseSequence *MRPulseSequence;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedMRColorImage(AttributeList *list);
	const char *identify(void) const { return "EnhancedMRColorImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_MRSpectroscopy : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_MRSeries *MRSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForMRSpectroscopy *MultiFrameFunctionalGroupsForMRSpectroscopy;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_BulkMotionSynchronization *BulkMotionSynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Specimen *Specimen;
	Module_MRSpectroscopy *MRSpectroscopy;
	Module_MRSpectroscopyPulseSequence *MRSpectroscopyPulseSequence;
	Module_MRSpectroscopyData *MRSpectroscopyData;
	Module_SOPCommon *SOPCommon;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_MRSpectroscopy(AttributeList *list);
	const char *identify(void) const { return "MRSpectroscopy"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_RawData : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Specimen *Specimen;
	Module_RawData *RawData;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_RawData(AttributeList *list);
	const char *identify(void) const { return "RawData"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_LegacyConvertedEnhancedMRImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_MRSeries *MRSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage *MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_BulkMotionSynchronization *BulkMotionSynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedMRImage *EnhancedMRImage;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_LegacyConvertedEnhancedMRImage(AttributeList *list);
	const char *identify(void) const { return "LegacyConvertedEnhancedMRImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedMRImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_MRSeries *MRSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage *MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_BulkMotionSynchronization *BulkMotionSynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedMRImage *EnhancedMRImage;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedMRImage(AttributeList *list);
	const char *identify(void) const { return "PrivatePixelMedLegacyConvertedEnhancedMRImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_TractographyResults : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_TractographyResultsSeries *TractographyResultsSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_TractographyResults *TractographyResults;
	Module_Specimen *Specimen;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_SOPCommon *SOPCommon;
public:
	            CompositeIOD_TractographyResults(AttributeList *list);
	const char *identify(void) const { return "TractographyResults"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedCTImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_CTSeries *CTSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedCTImage *MultiFrameFunctionalGroupsForEnhancedCTImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_SupplementalPaletteColorLUT *SupplementalPaletteColorLUT;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedCTImage *EnhancedCTImage;
	Module_EnhancedMultienergyCTAcquisition *EnhancedMultienergyCTAcquisition;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedCTImage(AttributeList *list);
	const char *identify(void) const { return "EnhancedCTImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_LegacyConvertedEnhancedCTImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_CTSeries *CTSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage *MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedCTImage *EnhancedCTImage;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_LegacyConvertedEnhancedCTImage(AttributeList *list);
	const char *identify(void) const { return "LegacyConvertedEnhancedCTImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedCTImage : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_CTSeries *CTSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_ImagePixel *ImagePixel;
	Module_ContrastBolus *ContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage *MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Device *Device;
	Module_Specimen *Specimen;
	Module_EnhancedCTImage *EnhancedCTImage;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedCTImage(AttributeList *list);
	const char *identify(void) const { return "PrivatePixelMedLegacyConvertedEnhancedCTImage"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedUltrasoundVolume : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedUSSeries *EnhancedUSSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_UltrasoundFrameOfReference *UltrasoundFrameOfReference;
	Module_Synchronization *Synchronization;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedUSVolume *MultiFrameFunctionalGroupsForEnhancedUSVolume;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_Device *Device;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Specimen *Specimen;
	Module_EnhancedPaletteColorLookupTable *EnhancedPaletteColorLookupTable;
	Module_EnhancedUSImage *EnhancedUSImage;
	Module_IVUSImage *IVUSImage;
	Module_ExcludedIntervals *ExcludedIntervals;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
public:
	            CompositeIOD_EnhancedUltrasoundVolume(AttributeList *list);
	const char *identify(void) const { return "EnhancedUltrasoundVolume"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class CompositeIOD_EnhancedUltrasoundVolumeQTUS : public CompositeIOD {
	Module_FileMetaInformation *FileMetaInformation;
	Module_Patient *Patient;
	Module_ClinicalTrialSubject *ClinicalTrialSubject;
	Module_GeneralStudy *GeneralStudy;
	Module_PatientStudy *PatientStudy;
	Module_ClinicalTrialStudy *ClinicalTrialStudy;
	Module_QTUSEnhancedUltrasoundVolumeProfileStudy *QTUSEnhancedUltrasoundVolumeProfileStudy;
	Module_GeneralSeries *GeneralSeries;
	Module_ClinicalTrialSeries *ClinicalTrialSeries;
	Module_EnhancedUSSeries *EnhancedUSSeries;
	Module_QTUSEnhancedUltrasoundVolumeProfileSeries *QTUSEnhancedUltrasoundVolumeProfileSeries;
	Module_FrameOfReference *FrameOfReference;
	Module_UltrasoundFrameOfReference *UltrasoundFrameOfReference;
	Module_Synchronization *Synchronization;
	Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference *QTUSEnhancedUltrasoundVolumeProfileFrameOfReference;
	Module_GeneralEquipment *GeneralEquipment;
	Module_EnhancedGeneralEquipment *EnhancedGeneralEquipment;
	Module_QTUSEnhancedUltrasoundVolumeProfileEquipment *QTUSEnhancedUltrasoundVolumeProfileEquipment;
	Module_GeneralImage *GeneralImage;
	Module_GeneralReference *GeneralReference;
	Module_ImagePixel *ImagePixel;
	Module_EnhancedContrastBolus *EnhancedContrastBolus;
	Module_MultiFrameFunctionalGroupsCommon *MultiFrameFunctionalGroupsCommon;
	Module_MultiFrameFunctionalGroupsForEnhancedUSVolume *MultiFrameFunctionalGroupsForEnhancedUSVolume;
	Module_MultiFrameDimension *MultiFrameDimension;
	Module_CardiacSynchronization *CardiacSynchronization;
	Module_RespiratorySynchronization *RespiratorySynchronization;
	Module_Device *Device;
	Module_AcquisitionContext *AcquisitionContext;
	Module_Specimen *Specimen;
	Module_EnhancedPaletteColorLookupTable *EnhancedPaletteColorLookupTable;
	Module_EnhancedUSImage *EnhancedUSImage;
	Module_IVUSImage *IVUSImage;
	Module_ExcludedIntervals *ExcludedIntervals;
	Module_ICCProfile *ICCProfile;
	Module_SOPCommon *SOPCommon;
	Module_CommonInstanceReference *CommonInstanceReference;
	Module_FrameExtraction *FrameExtraction;
	Module_QTUSEnhancedUltrasoundVolumeProfileInstance *QTUSEnhancedUltrasoundVolumeProfileInstance;
public:
	            CompositeIOD_EnhancedUltrasoundVolumeQTUS(AttributeList *list);
	const char *identify(void) const { return "EnhancedUltrasoundVolumeQTUS"; }
	bool        retired(void) const { return false; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};


#endif /* __Header_iodcompc__ */
