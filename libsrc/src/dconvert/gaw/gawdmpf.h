// Automatically generated from template - EDITS WILL BE LOST
//
// Generated by convert.awk with options or defaults ...
//
// 	 role=dump
// 	 prefix=GAW_
// 	 dicomfunctionname=ToDicom_Template
// 	 dumpcommonfunctionname=DumpCommon
// 	 dumpselectedimagefunctionname=DumpSelectedImage
// 	 headeroffsetprefix=GAW_Offset
// 	 headeroffsetsuffix=ptr
// 	 headerclassprefix=GAW_HeaderClass
// 	 headerdicomclassprefix=GAW_Header_BothClass
// 	 headerdumpclassprefix=GAW_Header_BothClass
// 	 headerinstanceprefix=GAW_HeaderInstance
// 	 methodnameprefix=GAW_Method
// 	 methodconstructorargsprefix=GAW_MethodConstructorArgs
// 	 headerclassparameters=

void 
GAW_Header_BothClass::DumpCommon(TextOutputStream *log)
{
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 0 << "] "<< "\t  magic number (IH_img_magic)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_magic
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 4 << "] "<< "\t  a byte displacement to the <pixel data area> (IH_img_hdr_length)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_hdr_length
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 8 << "] "<< "\t  width (pixels) of image (IH_img_width)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_width
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 12 << "] "<< "\t  height (pixels) of image (IH_img_height)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_height
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 16 << "] "<< "\t  depth (1, 8, 16, or 24 bits) of (IH_img_depth)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_depth
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 20 << "] "<< "\t  type of compression; see IC_* below (IH_img_compress)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_compress
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 24 << "] "<< "\t  default window setting (IH_img_dwindow)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_dwindow
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 28 << "] "<< "\t  default level setting (IH_img_dlevel)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_dlevel
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 32 << "] "<< "\t  background shade to use for non-image (IH_img_bgshade)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_bgshade
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 36 << "] "<< "\t  overflow value (IH_img_ovrflow)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_ovrflow
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 40 << "] "<< "\t  underflow value (IH_img_undflow)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_undflow
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 44 << "] "<< "\t  number of blank lines at image top (IH_img_top_offset)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_top_offset
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 48 << "] "<< "\t  number of blank lines at image bottom (IH_img_bot_offset)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_bot_offset
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 52 << "] "<< "\t  version of the header structure (IH_img_version)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_version
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 54 << "] "<< "\t  16 bit end_around_carry sum of pixels (IH_img_checksum)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_checksum
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 56 << "] "<< "\t  a byte disp to unique image identifier (IH_img_p_id)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_id
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 60 << "] "<< "\t  byte length of unique image identifier (IH_img_l_id)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_id
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 64 << "] "<< "\t  a byte disp to <unpack control> (IH_img_p_unpack)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_unpack
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 68 << "] "<< "\t  byte length of <unpack control> (IH_img_l_unpack)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_unpack
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 72 << "] "<< "\t  a byte disp to <compression control> (IH_img_p_compress)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_compress
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 76 << "] "<< "\t  byte length of <compression control> (IH_img_l_compress)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_compress
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 80 << "] "<< "\t  a byte disp to <histogram control> (IH_img_p_histo)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_histo
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 84 << "] "<< "\t  byte length of <histogram control> (IH_img_l_histo)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_histo
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 88 << "] "<< "\t  a byte disp to <text plane data> (IH_img_p_text)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_text
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 92 << "] "<< "\t  byte length of <text plane data> (IH_img_l_text)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_text
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 96 << "] "<< "\t  a byte disp to <graphics plane data> (IH_img_p_graphics)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_graphics
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 100 << "] "<< "\t  byte length of <graphics plane data> (IH_img_l_graphics)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_graphics
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 104 << "] "<< "\t  a byte disp to <data base header data> (IH_img_p_dbHdr)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_dbHdr
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 108 << "] "<< "\t  byte length of <data base header data> (IH_img_l_dbHdr)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_dbHdr
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 112 << "] "<< "\t  value to add to stored Pixel Data values (IH_img_levelOffset)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_levelOffset
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 116 << "] "<< "\t  byte displacement to user defined data (IH_img_p_user)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_user
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 120 << "] "<< "\t  byte length of user defined data (IH_img_l_user)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_user
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 124 << "] "<< "\t  byte displacement to <suite> header data (IH_img_p_suite)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_suite
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 128 << "] "<< "\t  byte length of <suite> header data (IH_img_l_suite)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_suite
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 132 << "] "<< "\t  byte displacement to <exam> header data (IH_img_p_exam)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_exam
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 136 << "] "<< "\t  byte length of <exam> header data (IH_img_l_exam)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_exam
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 140 << "] "<< "\t  byte displacement to <series> header data (IH_img_p_series)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_series
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 144 << "] "<< "\t  byte length of <series> header data (IH_img_l_series)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_series
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 148 << "] "<< "\t  byte displacement to <image> header data (IH_img_p_image)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_p_image
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_FILEHDR_ptr << ":" << 152 << "] "<< "\t  byte length of <image> header data (IH_img_l_image)\t <"
		 << GAW_HeaderInstance_FILEHDR->IH_img_l_image
		 << ">\n";
	if (GAW_hasuid) (*log)	 << "[" << GAW_Offset_UIDHDR_ptr << ":" << 0 << "] "<< "\t  version of the uid area (ID_id_version)\t <"
		 << GAW_HeaderInstance_UIDHDR->ID_id_version
		 << ">\n";
	if (GAW_hasuid) (*log)	 << "[" << GAW_Offset_UIDHDR_ptr << ":" << 4 << "] "<< "\t  unique text area or orphan description (ID_id_text)\t <"
		 << String_Use(GAW_HeaderInstance_UIDHDR->ID_id_text)
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 0 << "] "<< "\t  version of the histogram structure (HS_hs_version)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_version
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 4 << "] "<< "\t  standard deviation of pixel data value (HS_hs_sd)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_sd
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 8 << "] "<< "\t  rounded mean pixel data value (HS_hs_mean)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_mean
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 10 << "] "<< "\t  minimum pixel data value (HS_hs_min)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_min
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 12 << "] "<< "\t  maximum pixel data value (HS_hs_max)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_max
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 14 << "] "<< "\t  first histogram entry used for <hs_sd> (HS_hs_first)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_first
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 16 << "] "<< "\t  region entries used for <hs_sd> (HS_hs_region)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_region
		 << ">\n";
	if (GAW_hashisto) (*log)	 << "[" << GAW_Offset_HISTOHDR_ptr << ":" << 18 << "] "<< "\t  number of bins in the histogram area (HS_hs_length)\t <"
		 << GAW_HeaderInstance_HISTOHDR->HS_hs_length
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 0 << "] "<< "\t  Suite ID (SU_su_id)\t <"
		 << String_Use(GAW_HeaderInstance_SUITEHDR->SU_su_id)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 4 << "] "<< "\t  Make Unique Flag (SU_su_uniq)\t <"
		 << GAW_HeaderInstance_SUITEHDR->SU_su_uniq
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 6 << "] "<< "\t  Disk ID (SU_su_diskid)\t <"
		 << String_Use(GAW_HeaderInstance_SUITEHDR->SU_su_diskid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 7 << "] "<< "\t  Product ID (SU_prodid)\t <"
		 << String_Use(GAW_HeaderInstance_SUITEHDR->SU_prodid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 20 << "] "<< "\t  Original Version of Record (SU_su_verscre)\t <"
		 << String_Use(GAW_HeaderInstance_SUITEHDR->SU_su_verscre)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 22 << "] "<< "\t  Current Version of Record (SU_su_verscur)\t <"
		 << String_Use(GAW_HeaderInstance_SUITEHDR->SU_su_verscur)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 24 << "] "<< "\t  Suite Record Checksum (SU_su_checksum)\t <"
		 << GAW_HeaderInstance_SUITEHDR->SU_su_checksum
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SUITEHDR_ptr << ":" << 28 << "] "<< "\t  Spare Space (SU_su_padding)\t <"
		 << String_Use(GAW_HeaderInstance_SUITEHDR->SU_su_padding)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 0 << "] "<< "\t  Suite ID for this Exam (EX_ex_suid)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_suid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 4 << "] "<< "\t  Make-Unique Flag (EX_ex_uniq)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_uniq
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 6 << "] "<< "\t  Disk ID for this Exam (EX_ex_diskid)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_diskid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 8 << "] "<< "\t  Exam Number (EX_ex_no)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_no
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 10 << "] "<< "\t  Hospital Name (EX_hospname)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_hospname)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 44 << "] "<< "\t  Detector Type (EX_detect)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_detect
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_detect == 1) (*log) << "\t\t\t 1 = Xenon\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_detect == 2) (*log) << "\t\t\t 2 = Hilight\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 48 << "] "<< "\t  Number of cells in det (EX_numcells)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_numcells
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 52 << "] "<< "\t  Cell number at theta (EX_zerocell)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_zerocell
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 56 << "] "<< "\t  Cell spacing (EX_cellspace)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_cellspace
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 60 << "] "<< "\t  Distance from source to detector (EX_srctodet)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_srctodet
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 64 << "] "<< "\t  Distance from source to iso (EX_srctoiso)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_srctoiso
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 68 << "] "<< "\t  Tube type (EX_tubetyp)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_tubetyp
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 0) (*log) << "\t\t\t 0 = MX100_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 1) (*log) << "\t\t\t 1 = MX125_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 2) (*log) << "\t\t\t 2 = TT9800:9800_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 3) (*log) << "\t\t\t 3 = TT9100:9100_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 4) (*log) << "\t\t\t 4 = HPRI_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 5) (*log) << "\t\t\t 5 = HPRII_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 6) (*log) << "\t\t\t 6 = ADV650_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 7) (*log) << "\t\t\t 7 = ADV681_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 8) (*log) << "\t\t\t 8 = ST2000CT_6_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 9) (*log) << "\t\t\t 9 = ST2000CT_10_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 12) (*log) << "\t\t\t 12 = MX_135CT_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 13) (*log) << "\t\t\t 13 = MX_165CT_TUBE\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_tubetyp == 14) (*log) << "\t\t\t 14 = MX_165CT_I_TUBE\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 70 << "] "<< "\t  DAS type (EX_dastyp)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_dastyp
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_dastyp == 1) (*log) << "\t\t\t 1 = CDAS\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_dastyp == 2) (*log) << "\t\t\t 2 = EDAS\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 72 << "] "<< "\t  Number of Decon Kernals (EX_num_dcnk)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_num_dcnk
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 74 << "] "<< "\t  Number of elements in a Decon Kernal (EX_dcn_len)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_dcn_len
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 76 << "] "<< "\t  Decon Kernal density (EX_dcn_density)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_dcn_density
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 78 << "] "<< "\t  Decon Kernal stepsize (EX_dcn_stepsize)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_dcn_stepsize
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 80 << "] "<< "\t  Decon Kernal Shift Count (EX_dcn_shiftcnt)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_dcn_shiftcnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 84 << "] "<< "\t  Magnet strength (in gauss) (EX_magstrength)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_magstrength
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 88 << "] "<< "\t  Patient ID for this Exam (EX_patid)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_patid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 101 << "] "<< "\t  Patient Name (EX_patname)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_patname)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 126 << "] "<< "\t  Patient Age (years, months or days) (EX_patage)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_patage
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 128 << "] "<< "\t  Patient Age Notation (EX_patian)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_patian
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_patian == 0) (*log) << "\t\t\t 0 = Years:Y\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_patian == 1) (*log) << "\t\t\t 1 = Months:M\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_patian == 2) (*log) << "\t\t\t 2 = Days:D\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_patian == 3) (*log) << "\t\t\t 3 = Weeks:W\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 130 << "] "<< "\t  Patient Sex (EX_patsex)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_patsex
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_patsex == 1) (*log) << "\t\t\t 1 = Male:M\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_patsex == 2) (*log) << "\t\t\t 2 = Female:F\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 132 << "] "<< "\t  Patient Weight ? grams (EX_patweight)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_patweight
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 136 << "] "<< "\t  Trauma Flag (EX_trauma)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_trauma
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_trauma == 0) (*log) << "\t\t\t 0 = Trauma Flag Off\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_trauma == 1) (*log) << "\t\t\t 1 = Trauma Flag On\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 138 << "] "<< "\t  Patient History (EX_hist)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_hist)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 199 << "] "<< "\t  Requisition Number (EX_reqnum)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_reqnum)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 212 << "] "<< "\t  Exam date/time stamp (EX_ex_datetime)\t <"
		 <<          DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_datetime).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_datetime).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_datetime).getDD()
		 << " " << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_datetime).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_datetime).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_datetime).getSecond()
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 216 << "] "<< "\t  Referring Physician (EX_refphy)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_refphy)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 249 << "] "<< "\t  Diagnostician/Radiologist (EX_diagrad)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_diagrad)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 282 << "] "<< "\t  Operator (EX_op)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_op)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 286 << "] "<< "\t  Exam Description (EX_ex_desc)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_desc)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 309 << "] "<< "\t  Exam Type ('CT' or 'MR') (EX_ex_typ)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_typ)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 312 << "] "<< "\t  Exam Format (EX_ex_format)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_format
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 0) (*log) << "\t\t\t 0 = Foreign\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 1) (*log) << "\t\t\t 1 = Genesis Image\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 2) (*log) << "\t\t\t 2 = Technicare HPS1440\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 3) (*log) << "\t\t\t 3 = Technicare Delta Scan 2010\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 4) (*log) << "\t\t\t 4 = Technicare Delta Scan 2020\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 5) (*log) << "\t\t\t 5 = Technicare Delta Scan 2060\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 6) (*log) << "\t\t\t 6 = Signa\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 7) (*log) << "\t\t\t 7 = CT9800\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 8) (*log) << "\t\t\t 8 = CT9800 Q\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 9) (*log) << "\t\t\t 9 = CT9800 QHL\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 10) (*log) << "\t\t\t 10 = EMI_9800\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 11) (*log) << "\t\t\t 11 = CT_8800_9800\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 12) (*log) << "\t\t\t 12 = CT9600\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 13) (*log) << "\t\t\t 13 = Jupiter\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 14) (*log) << "\t\t\t 14 = Zeus:CT HiSpeed Advantage\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 15) (*log) << "\t\t\t 15 = CT HiSpeed Advantage VX\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 16) (*log) << "\t\t\t 16 = Resona\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 17) (*log) << "\t\t\t 17 = Vectra\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 18) (*log) << "\t\t\t 18 = MR Max\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 19) (*log) << "\t\t\t 19 = CT Max\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 20) (*log) << "\t\t\t 20 = CT Pace\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 21) (*log) << "\t\t\t 21 = CT Sytec 2000\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 22) (*log) << "\t\t\t 22 = CT Sytec 3000\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 23) (*log) << "\t\t\t 23 = CT Sytec 4000\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 24) (*log) << "\t\t\t 24 = CT Sytec 6000\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_format == 25) (*log) << "\t\t\t 25 = CT Sytec 8000\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 320 << "] "<< "\t  Start time(secs) of first axial in exam (EX_firstaxtime)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_firstaxtime
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 328 << "] "<< "\t  Creator Suite and Host (EX_ex_sysid)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_sysid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 340 << "] "<< "\t  Date/Time of Last Change (EX_ex_lastmod)\t <"
		 <<          DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_lastmod).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_lastmod).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_lastmod).getDD()
		 << " " << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_lastmod).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_lastmod).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_EXAMHDR->EX_ex_lastmod).getSecond()
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 344 << "] "<< "\t  Non-Zero indicates Protocol Exam (EX_protocolflag)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_protocolflag
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 346 << "] "<< "\t  Process that allocated this record (EX_ex_alloc_key)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_alloc_key)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 360 << "] "<< "\t  Indicates number of updates to header (EX_ex_delta_cnt)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_delta_cnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 364 << "] "<< "\t  Genesis Version - Created (EX_ex_verscre)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_verscre)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 366 << "] "<< "\t  Genesis Version - Now (EX_ex_verscur)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_verscur)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 368 << "] "<< "\t  Exam Record Checksum (EX_ex_checksum)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_checksum
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 372 << "] "<< "\t  Exam Complete Flag (EX_ex_complete)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_complete
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 376 << "] "<< "\t  Last Series Number Used (EX_ex_seriesct)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_seriesct
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 380 << "] "<< "\t  Number of Series Archived (EX_ex_numarch)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_numarch
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 384 << "] "<< "\t  Number of Series Existing (EX_ex_numseries)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_numseries
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 388 << "] "<< "\t  Series Keys for this exam - length (EX_ex_series_l)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_series_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 392 << "] "<< "\t  Series Keys for this exam - data ptr (EX_ex_series_d)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_series_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 396 << "] "<< "\t  Number of Unstored Series (EX_ex_numunser)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_numunser
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 400 << "] "<< "\t  Unstored Series Keys for this exam - length (EX_ex_unseries_l)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_unseries_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 404 << "] "<< "\t  Unstored Series Keys for this exam - data ptr (EX_ex_unseries_d)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_unseries_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 408 << "] "<< "\t  Number of Unarchived Series (EX_ex_toarchcnt)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_toarchcnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 412 << "] "<< "\t  Unarchived Series Keys for this exam - length (EX_ex_toarchive_l)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_toarchive_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 416 << "] "<< "\t  Unarchived Series Keys for this exam - data ptr (EX_ex_toarchive_d)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_toarchive_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 420 << "] "<< "\t  Number of Prospective/Scout Series (EX_ex_prospcnt)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_prospcnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 424 << "] "<< "\t  Prospective Series Keys for this exam - length (EX_ex_prosp_l)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_prosp_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 428 << "] "<< "\t  Prospective Series Keys for this exam - data ptr (EX_ex_prosp_d)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_prosp_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 432 << "] "<< "\t  Last Model Number used (EX_ex_modelnum)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_modelnum
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 436 << "] "<< "\t  Number of ThreeD Models (EX_ex_modelcnt)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_modelcnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 440 << "] "<< "\t  3D Model Keys for this exam - length (EX_ex_models_l)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_models_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 444 << "] "<< "\t  3D Model Keys for this exam - data ptr (EX_ex_models_d)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_models_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 448 << "] "<< "\t  Patient Status (EX_ex_stat)\t <"
		 << GAW_HeaderInstance_EXAMHDR->EX_ex_stat
		 << ">\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_stat == 0) (*log) << "\t\t\t 0 = In Patient:IN\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_stat == 1) (*log) << "\t\t\t 1 = Out Patient:OUT\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_stat == 2) (*log) << "\t\t\t 2 = Emergency:EM\n";
	if (GAW_HeaderInstance_EXAMHDR->EX_ex_stat == 3) (*log) << "\t\t\t 3 = Referral:REF\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 450 << "] "<< "\t  Unique System ID (EX_uniq_sys_id)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_uniq_sys_id)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 466 << "] "<< "\t  Unique Service ID (EX_service_id)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_service_id)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 482 << "] "<< "\t  Mobile Location Number (EX_mobile_loc)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_mobile_loc)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 486 << "] "<< "\t  Study Entity Unique ID (EX_study_uid)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_study_uid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_EXAMHDR_ptr << ":" << 518 << "] "<< "\t  Spare Space (EX_ex_padding)\t <"
		 << String_Use(GAW_HeaderInstance_EXAMHDR->EX_ex_padding)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 0 << "] "<< "\t  Suite ID for this Series (SE_se_suid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_suid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 4 << "] "<< "\t  The Make-Unique Flag (SE_se_uniq)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_uniq
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 6 << "] "<< "\t  Disk ID for this Series (SE_se_diskid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_diskid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 8 << "] "<< "\t  Exam Number (SE_se_exno)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_exno
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 10 << "] "<< "\t  Series Number (SE_se_no)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_no
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 12 << "] "<< "\t  Allocation Series Date/Time stamp (SE_se_datetime)\t <"
		 <<          DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_datetime).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_datetime).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_datetime).getDD()
		 << " " << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_datetime).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_datetime).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_datetime).getSecond()
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 16 << "] "<< "\t  Actual Series Date/Time stamp (SE_se_actual_dt)\t <"
		 <<          DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_actual_dt).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_actual_dt).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_actual_dt).getDD()
		 << " " << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_actual_dt).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_actual_dt).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_actual_dt).getSecond()
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 20 << "] "<< "\t  Series Description (SE_se_desc)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_desc)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 50 << "] "<< "\t  Primary Receiver Suite and Host (SE_pr_sysid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_pr_sysid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 59 << "] "<< "\t  Archiver Suite and Host (SE_pansysid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_pansysid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 68 << "] "<< "\t  Series Type (SE_se_typ)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_typ
		 << ">\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 1) (*log) << "\t\t\t 1 = prospective:PROSP\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 2) (*log) << "\t\t\t 2 = Retrospective:RETRO\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 3) (*log) << "\t\t\t 3 = Scout Series:SCOUT\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 4) (*log) << "\t\t\t 4 = Reformatted:REFMT\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 5) (*log) << "\t\t\t 5 = Screensave:SSAVE\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 6) (*log) << "\t\t\t 6 = Xenon:XENON\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 7) (*log) << "\t\t\t 7 = Service:SERV\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_se_typ == 9) (*log) << "\t\t\t 9 = Projected:PJN\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 70 << "] "<< "\t  Series from which prescribed (SE_se_source)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_source
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 72 << "] "<< "\t  Most-like Plane (for L/S) (SE_se_plane)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_plane
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 74 << "] "<< "\t  Scout or Axial (for CT) (SE_scan_type)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_scan_type
		 << ">\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_scan_type == 1) (*log) << "\t\t\t 1 = Scout:SCT\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_scan_type == 2) (*log) << "\t\t\t 2 = Axial:AX\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_scan_type == 3) (*log) << "\t\t\t 3 = Screensave:SS\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 76 << "] "<< "\t  Patient Position (SE_position)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_position
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<0))?"Supine":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<1))?"Prone":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<2))?"Decubitus Left":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_SERIESHDR->SE_position&(1<<3))?"Decubitus Right":"none")
	     << "\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 80 << "] "<< "\t  Patient Entry (SE_entry)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_entry
		 << ">\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_entry == 1) (*log) << "\t\t\t 1 = Head First\n";
	if (GAW_HeaderInstance_SERIESHDR->SE_entry == 2) (*log) << "\t\t\t 2 = Feet First\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 84 << "] "<< "\t  Anatomical reference (SE_anref)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_anref)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 88 << "] "<< "\t  Horizontal Landmark (SE_lmhor)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_lmhor
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 92 << "] "<< "\t  Scan Protocol Name (SE_prtcl)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_prtcl)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 118 << "] "<< "\t  Non-zero if > 0 image used contrast(L/S) (SE_se_contrast)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_contrast
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 120 << "] "<< "\t  RAS letter for first scan location (L/S) (SE_start_ras)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_start_ras)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 124 << "] "<< "\t  First scan location (L/S) (SE_start_loc)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_start_loc
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 128 << "] "<< "\t  RAS letter for last scan location (L/S) (SE_end_ras)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_end_ras)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 132 << "] "<< "\t  Last scan location (L/S) (SE_end_loc)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_end_loc
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 136 << "] "<< "\t  Last Pulse Sequence Used (L/S) (SE_se_pseq)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_pseq
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 138 << "] "<< "\t  Image Sort Order (L/S) (SE_se_sortorder)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_sortorder
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 140 << "] "<< "\t  Landmark Counter (SE_se_lndmrkcnt)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_lndmrkcnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 144 << "] "<< "\t  Number of Acquisitions (SE_se_nacq)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_nacq
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 146 << "] "<< "\t  Starting number for baselines (SE_xbasest)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_xbasest
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 148 << "] "<< "\t  Ending number for baselines (SE_xbaseend)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_xbaseend
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 150 << "] "<< "\t  Starting number for enhanced scans (SE_xenhst)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_xenhst
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 152 << "] "<< "\t  Ending number for enhanced scans (SE_xenhend)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_xenhend
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 156 << "] "<< "\t  Date/Time of Last Change (SE_se_lastmod)\t <"
		 <<          DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_lastmod).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_lastmod).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_lastmod).getDD()
		 << " " << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_lastmod).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_lastmod).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_SERIESHDR->SE_se_lastmod).getSecond()
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 160 << "] "<< "\t  Process that allocated this record (SE_se_alloc_key)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_alloc_key)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 176 << "] "<< "\t  Indicates number of updates to header (SE_se_delta_cnt)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_delta_cnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 180 << "] "<< "\t  Genesis Version - Created (SE_se_verscre)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_verscre)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 182 << "] "<< "\t  Genesis Version - Now (SE_se_verscur)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_verscur)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 184 << "] "<< "\t  PixelData size - as stored (SE_se_pds_a)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_pds_a
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 188 << "] "<< "\t  PixelData size - Compressed (SE_se_pds_c)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_pds_c
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 192 << "] "<< "\t  PixelData size - UnCompressed (SE_se_pds_u)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_pds_u
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 196 << "] "<< "\t  Series Record checksum (SE_se_checksum)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_checksum
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 200 << "] "<< "\t  Series Complete Flag (SE_se_complete)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_complete
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 204 << "] "<< "\t  Number of Images Archived (SE_se_numarch)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_numarch
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 208 << "] "<< "\t  Last Image Number Used (SE_se_imagect)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_imagect
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 212 << "] "<< "\t  Number of Images Existing (SE_se_numimages)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_numimages
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 216 << "] "<< "\t  Image Keys for this Series - length (SE_se_images_l)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_images_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 220 << "] "<< "\t  Image Keys for this Series - data ptr (SE_se_images_d)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_images_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 224 << "] "<< "\t  Number of Unstored Images (SE_se_numunimg)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_numunimg
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 228 << "] "<< "\t  Unstored Image Keys for this Series - length (SE_se_unimages_l)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_unimages_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 232 << "] "<< "\t  Unstored Image Keys for this Series - data ptr (SE_se_unimages_d)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_unimages_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 236 << "] "<< "\t  Number of Unarchived Images (SE_se_toarchcnt)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_toarchcnt
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 240 << "] "<< "\t  Unarchived Image Keys for this Series - length (SE_se_toarchive_l)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_toarchive_l
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 244 << "] "<< "\t  Unarchived Image Keys for this Series - data ptr (SE_se_toarchive_d)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_se_toarchive_d
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 248 << "] "<< "\t  Echo 1 Alpha Value (SE_echo1_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo1_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 252 << "] "<< "\t  Echo 1 Beta Value (SE_echo1_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo1_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 256 << "] "<< "\t  Echo 1 Window Value (SE_echo1_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo1_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 258 << "] "<< "\t  Echo 1 Level Value (SE_echo1_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo1_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 260 << "] "<< "\t  Echo 2 Alpha Value (SE_echo2_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo2_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 264 << "] "<< "\t  Echo 2 Beta Value (SE_echo2_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo2_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 268 << "] "<< "\t  Echo 2 Window Value (SE_echo2_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo2_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 270 << "] "<< "\t  Echo 2 Level Value (SE_echo2_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo2_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 272 << "] "<< "\t  Echo 3 Alpha Value (SE_echo3_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo3_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 276 << "] "<< "\t  Echo 3 Beta Value (SE_echo3_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo3_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 280 << "] "<< "\t  Echo 3 Window Value (SE_echo3_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo3_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 282 << "] "<< "\t  Echo 3 Level Value (SE_echo3_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo3_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 284 << "] "<< "\t  Echo 4 Alpha Value (SE_echo4_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo4_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 288 << "] "<< "\t  Echo 4 Beta Value (SE_echo4_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo4_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 292 << "] "<< "\t  Echo 4 Window Value (SE_echo4_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo4_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 294 << "] "<< "\t  Echo 4 Level Value (SE_echo4_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo4_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 296 << "] "<< "\t  Echo 5 Alpha Value (SE_echo5_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo5_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 300 << "] "<< "\t  Echo 5 Beta Value (SE_echo5_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo5_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 304 << "] "<< "\t  Echo 5 Window Value (SE_echo5_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo5_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 306 << "] "<< "\t  Echo 5 Level Value (SE_echo5_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo5_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 308 << "] "<< "\t  Echo 6 Alpha Value (SE_echo6_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo6_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 312 << "] "<< "\t  Echo 6 Beta Value (SE_echo6_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo6_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 316 << "] "<< "\t  Echo 6 Window Value (SE_echo6_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo6_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 318 << "] "<< "\t  Echo 6 Level Value (SE_echo6_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo6_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 320 << "] "<< "\t  Echo 7 Alpha Value (SE_echo7_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo7_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 324 << "] "<< "\t  Echo 7 Beta Value (SE_echo7_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo7_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 328 << "] "<< "\t  Echo 7 Window Value (SE_echo7_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo7_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 330 << "] "<< "\t  Echo 7 Level Value (SE_echo7_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo7_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 332 << "] "<< "\t  Echo 8 Alpha Value (SE_echo8_alpha)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo8_alpha
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 336 << "] "<< "\t  Echo 8 Beta Value (SE_echo8_beta)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo8_beta
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 340 << "] "<< "\t  Echo 8 Window Value (SE_echo8_window)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo8_window
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 342 << "] "<< "\t  Echo 8 Level Value (SE_echo8_level)\t <"
		 << GAW_HeaderInstance_SERIESHDR->SE_echo8_level
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 344 << "] "<< "\t  Series Entity Unique ID (SE_series_uid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_series_uid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 376 << "] "<< "\t  Landmark Unique ID (SE_landmark_uid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_landmark_uid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 408 << "] "<< "\t  Equipment Unique ID (SE_equipmnt_uid)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_equipmnt_uid)
		 << ">\n";
	(*log)	 << "[" << GAW_Offset_SERIESHDR_ptr << ":" << 440 << "] "<< "\t  Spare Space (SE_se_padding)\t <"
		 << String_Use(GAW_HeaderInstance_SERIESHDR->SE_se_padding)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 0 << "] "<< "\t  Suite id for this image (CT_im_suid)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_im_suid)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 4 << "] "<< "\t  The Make-Unique Flag (CT_im_uniq)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_uniq
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 6 << "] "<< "\t  Disk ID for this Image (CT_im_diskid)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_im_diskid)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 8 << "] "<< "\t  Exam number for this image (CT_im_exno)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_exno
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 10 << "] "<< "\t  Series Number for this image (CT_im_seno)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_seno
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 12 << "] "<< "\t  Image Number (CT_im_no)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_no
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 16 << "] "<< "\t  Allocation Image date/time stamp (CT_im_datetime)\t <"
		 <<          DateTime(GAW_HeaderInstance_CTHDR->CT_im_datetime).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_datetime).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_datetime).getDD()
		 << " " << DateTime(GAW_HeaderInstance_CTHDR->CT_im_datetime).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_datetime).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_datetime).getSecond()
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 20 << "] "<< "\t  Actual Image date/time stamp (CT_im_actual_dt)\t <"
		 <<          DateTime(GAW_HeaderInstance_CTHDR->CT_im_actual_dt).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_actual_dt).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_actual_dt).getDD()
		 << " " << DateTime(GAW_HeaderInstance_CTHDR->CT_im_actual_dt).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_actual_dt).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_actual_dt).getSecond()
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 24 << "] "<< "\t  Duration of scan (secs) (CT_sctime)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_sctime
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 28 << "] "<< "\t  Slice Thickness (mm) (CT_slthick)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slthick
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 32 << "] "<< "\t  Image matrix size - X (CT_imatrix_X)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_imatrix_X
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 34 << "] "<< "\t  Image matrix size - Y (CT_imatrix_Y)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_imatrix_Y
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 36 << "] "<< "\t  Display field of view - X (mm) (CT_dfov)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_dfov
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 40 << "] "<< "\t  Display field of view - Y (if different) (CT_dfov_rect)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_dfov_rect
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 44 << "] "<< "\t  Image dimension - X (CT_dim_X)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_dim_X
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 48 << "] "<< "\t  Image dimension - Y (CT_dim_Y)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_dim_Y
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 52 << "] "<< "\t  Image pixel size - X (CT_pixsize_X)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pixsize_X
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 56 << "] "<< "\t  Image pixel size - Y (CT_pixsize_Y)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pixsize_Y
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 60 << "] "<< "\t  Pixel Data ID (CT_pdid)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_pdid)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 74 << "] "<< "\t  IV Contrast Agent (CT_contrastIV)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_contrastIV)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 91 << "] "<< "\t  Oral Contrast Agent (CT_contrastOral)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_contrastOral)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 108 << "] "<< "\t  Image Contrast Mode (CT_contmode)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_contmode
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_contmode&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_contmode&(1<<0))?"oral":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_contmode&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_contmode&(1<<1))?"intravenous":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 110 << "] "<< "\t  Series from which prescribed (CT_serrx)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_serrx
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 112 << "] "<< "\t  Image from which prescribed (CT_imgrx)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_imgrx
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 114 << "] "<< "\t  Screen Format(8/16 bit) (CT_screenformat)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_screenformat
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 116 << "] "<< "\t  Plane Type (CT_plane)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_plane
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<0))?"Scout Plane(SCT)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<1))?"Axial Plane(Ax)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<2))?"Sagittal Plane(Sag)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<3))?"Coronal Plane(Cor)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<4))?"Oblique Plane(O)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<5))?"ParAxial Plane(PAX)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<6))?"Reformatted Plane(RFMT)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 7 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<7))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<7))?"Projected Plane(PJN)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 8 "
	     << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<8))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_plane&(1<<8))?"Mixed Plane(MIXED)":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 120 << "] "<< "\t  Spacing between scans (mm?) (CT_scanspacing)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_scanspacing
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 124 << "] "<< "\t  Image compression type for allocation (CT_im_compress)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_compress
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 126 << "] "<< "\t  Scout Type (AP or lateral) (CT_im_scouttype)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_scouttype
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 128 << "] "<< "\t  RAS letter of image location (CT_loc_ras)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_loc_ras)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 132 << "] "<< "\t  Image location (CT_loc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_loc
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 136 << "] "<< "\t  Center R coord of plane image (CT_ctr_R)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ctr_R
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 140 << "] "<< "\t  Center A coord of plane image (CT_ctr_A)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ctr_A
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 144 << "] "<< "\t  Center S coord of plane image (CT_ctr_S)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ctr_S
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 148 << "] "<< "\t  Normal R coord (CT_norm_R)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_norm_R
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 152 << "] "<< "\t  Normal A coord (CT_norm_A)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_norm_A
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 156 << "] "<< "\t  Normal S coord (CT_norm_S)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_norm_S
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 160 << "] "<< "\t  R Coord of Top Left Hand (CT_tlhc_R)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_tlhc_R
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 164 << "] "<< "\t  A Coord of Top Left Hand (CT_tlhc_A)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_tlhc_A
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 168 << "] "<< "\t  S Coord of Top Left Hand (CT_tlhc_S)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_tlhc_S
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 172 << "] "<< "\t  R Coord of Top Right Hand (CT_trhc_R)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trhc_R
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 176 << "] "<< "\t  A Coord of Top Right Hand (CT_trhc_A)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trhc_A
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 180 << "] "<< "\t  S Coord of Top Right Hand (CT_trhc_S)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trhc_S
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 184 << "] "<< "\t  R Coord of Bottom Right Hand (CT_brhc_R)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_brhc_R
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 188 << "] "<< "\t  A Coord of Bottom Right Hand (CT_brhc_A)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_brhc_A
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 192 << "] "<< "\t  S Coord of Bottom Right Hand (CT_brhc_S)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_brhc_S
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 196 << "] "<< "\t  Foreign Image Revision (CT_forimgrev)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_forimgrev)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 200 << "] "<< "\t  Table Start Location (CT_sctstr)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_sctstr
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 204 << "] "<< "\t  Table End Location (CT_sctend)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_sctend
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 208 << "] "<< "\t  Table Speed (mm/sec) (CT_tblspd)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_tblspd
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 212 << "] "<< "\t  Table Height (CT_tblht)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_tblht
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 216 << "] "<< "\t  Mid Scan Time (CT_midstime)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_midstime
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 220 << "] "<< "\t  does midstime apply (CT_midsflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_midsflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 224 << "] "<< "\t  KVolt generator setting (CT_kvolt)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_kvolt
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 228 << "] "<< "\t  MAmp generator setting (CT_mamp)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_mamp
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 232 << "] "<< "\t  Gantry Tilt (degrees) (CT_gantilt)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_gantilt
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 236 << "] "<< "\t  Degrees of Azimuth (CT_azimuth)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_azimuth
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 240 << "] "<< "\t  Gantry Velocity (CT_ganvel)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ganvel
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 244 << "] "<< "\t  Gantry Filter Position (CT_ganfilt)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ganfilt
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 248 << "] "<< "\t  Trigger on Position (CT_trigon)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trigon
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 252 << "] "<< "\t  Degrees of rotation (CT_degrot)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_degrot
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 256 << "] "<< "\t  X-Ray On Position (CT_xrayon)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_xrayon
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 260 << "] "<< "\t  X-Ray Off Position (CT_xrayoff)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_xrayoff
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 264 << "] "<< "\t  Number of Triggers (CT_numtrig)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_numtrig
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 268 << "] "<< "\t  Total input views (CT_inviews)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_inviews
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 272 << "] "<< "\t  Angle of first view (CT_view1ang)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_view1ang
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 276 << "] "<< "\t  Trigger frequency (CT_trigfreq)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trigfreq
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 280 << "] "<< "\t  DAS trigger source (CT_trigsrc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trigsrc
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_trigsrc == 1) (*log) << "\t\t\t 1 = internal\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_trigsrc == 2) (*log) << "\t\t\t 2 = external\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 284 << "] "<< "\t  DAS fpa gain (CT_fpagain)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_fpagain
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<0))?"auto":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<1))?"X1":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<3))?"X8":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_fpagain&(1<<6))?"X64":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 288 << "] "<< "\t  Scan Type (CT_scanopmode)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_scanopmode
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<0))?"???":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<1))?"???":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<2))?"???":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<3))?"scout mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<4))?"axial Xron mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<5))?"axial Xroff mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<6))?"static Xron mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 7 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<7))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<7))?"static Xroff mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 8 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<8))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<8))?"tube heat mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 9 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<9))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<9))?"DAS mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 10 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<10))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<10))?"tube cal mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 11 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<11))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<11))?"biopsy mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 12 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<12))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<12))?"cine mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 13 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<13))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<13))?"helical mode":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 14 "
	     << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<14))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_scanopmode&(1<<14))?"rotgencal mode":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 292 << "] "<< "\t  DAS output source (CT_outsrc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_outsrc
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_outsrc == 1) (*log) << "\t\t\t 1 = AID\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_outsrc == 2) (*log) << "\t\t\t 2 = XM\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 296 << "] "<< "\t  DAS ad input (CT_adin)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_adin
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_adin == 1) (*log) << "\t\t\t 1 = DAS Filter Card\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_adin == 2) (*log) << "\t\t\t 2 = Aux\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 300 << "] "<< "\t  DAS cal mode (CT_calmode)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_calmode
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_calmode == 1) (*log) << "\t\t\t 1 = DC DAS Cal\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_calmode == 2) (*log) << "\t\t\t 2 = AC DAS Cal\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_calmode == 3) (*log) << "\t\t\t 3 = No DAS Cal\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 304 << "] "<< "\t  DAS cal frequency (CT_calfreq)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_calfreq
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_calfreq == 0) (*log) << "\t\t\t 0 = ?\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_calfreq == 1) (*log) << "\t\t\t 1 = ?\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 308 << "] "<< "\t  DAS reg xm (CT_regxm)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_regxm
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_regxm == 1) (*log) << "\t\t\t 1 = hold\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_regxm == 2) (*log) << "\t\t\t 2 = shift\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 312 << "] "<< "\t  DAS auto zero (CT_autozero)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_autozero
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 316 << "] "<< "\t  Axial Type (CT_sfovtyp)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_sfovtyp
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<0))?"Ped Head":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<1))?"Adult Head":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<2))?"Small":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<3))?"Medium":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<4))?"Large":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_sfovtyp&(1<<5))?"No Sfovtype":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 318 << "] "<< "\t  Calibration phantom size (CT_phantsize)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_phantsize
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phantsize == 1) (*log) << "\t\t\t 1 = No Psize\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phantsize == 2) (*log) << "\t\t\t 2 = Small Psize\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phantsize == 3) (*log) << "\t\t\t 3 = Medium Psize\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phantsize == 4) (*log) << "\t\t\t 4 = Large Psize\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 320 << "] "<< "\t  Calibration phantom type (CT_phanttyp)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_phanttyp
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phanttyp == 1) (*log) << "\t\t\t 1 = None\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phanttyp == 2) (*log) << "\t\t\t 2 = Air\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phanttyp == 3) (*log) << "\t\t\t 3 = Water\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_phanttyp == 4) (*log) << "\t\t\t 4 = Poly\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 322 << "] "<< "\t  Calibration filter type (CT_filttyp)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_filttyp
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_filttyp == 1) (*log) << "\t\t\t 1 = Air Filter\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_filttyp == 2) (*log) << "\t\t\t 2 = Body Filter\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_filttyp == 3) (*log) << "\t\t\t 3 = Bowtie Flat Filter:Adult Head\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_filttyp == 4) (*log) << "\t\t\t 4 = Flat Filter\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_filttyp == 5) (*log) << "\t\t\t 5 = High Filter:Adult Head/HF\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 324 << "] "<< "\t  Recon Algorithm (CT_reconalg)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_reconalg
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<0))?"smooth(SMTH)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<1))?"soft(SOFT)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<2))?"standard(STND)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<3))?"detail(DETL)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<4))?"bone(BONE)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<5))?"edge(EDGE)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<6))?"sharp(SHRP)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 7 "
	     << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<7))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_reconalg&(1<<7))?"experimental 2(EXP2)":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 326 << "] "<< "\t  Peristaltic flag (CT_perisflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_perisflag
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_perisflag == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_perisflag == 1) (*log) << "\t\t\t 1 = Yes:/P\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 328 << "] "<< "\t  IterBone flag (CT_iboneflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_iboneflag
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_iboneflag == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_iboneflag == 1) (*log) << "\t\t\t 1 = Yes:/I\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 330 << "] "<< "\t  Stat Recon flag (CT_statflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_statflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 332 << "] "<< "\t  Compute Type (CT_computetyp)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_computetyp
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_computetyp == 1) (*log) << "\t\t\t 1 = axial\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_computetyp == 2) (*log) << "\t\t\t 2 = calcheck\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_computetyp == 3) (*log) << "\t\t\t 3 = scout\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_computetyp == 4) (*log) << "\t\t\t 4 = ppscan\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_computetyp == 5) (*log) << "\t\t\t 5 = viewsvschannels\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 334 << "] "<< "\t  Segment Number (CT_segnum)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_segnum
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 336 << "] "<< "\t  Total Number of Segments Requested (CT_segstotal)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_segstotal
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 340 << "] "<< "\t  Inter scan delay (secs) (CT_isd)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_isd
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 344 << "] "<< "\t  Scan field of view (mm) (CT_sfovmm)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_sfovmm
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 348 << "] "<< "\t  Scan Number (CT_scannum)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_scannum
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 350 << "] "<< "\t  Starting Channel of View (CT_viewstrtchan)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_viewstrtchan
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 352 << "] "<< "\t  View Compression Factor (CT_viewcompfctr)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_viewcompfctr
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 354 << "] "<< "\t  Total Output Views (CT_outviews)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_outviews
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 356 << "] "<< "\t  Number of Overranges (CT_overranges)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_overranges
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 358 << "] "<< "\t  Total Number of Ref Channels (CT_totrefchan)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_totrefchan
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 360 << "] "<< "\t  data size for scan data (CT_scdatasize)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_scdatasize
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 364 << "] "<< "\t  z or q channel (CT_refchan1)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_refchan1
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 366 << "] "<< "\t  Reference channel 1 (CT_refchan2)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_refchan2
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 368 << "] "<< "\t  Reference channel 2 (CT_refchan3)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_refchan3
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 370 << "] "<< "\t  Reference channel 3 (CT_refchan4)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_refchan4
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 372 << "] "<< "\t  Reference channel 4 (CT_refchan5)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_refchan5
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 374 << "] "<< "\t  Reference channel 5 (CT_refchan6)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_refchan6
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 376 << "] "<< "\t  Recon post processing flag (CT_postproc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_postproc
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 380 << "] "<< "\t  DAS xm pattern (CT_xmpat)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_xmpat
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 384 << "] "<< "\t  Prescribed rotation type (CT_rottyp)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_rottyp
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<0))?"half scan(rotating)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<1))?"normal scan(rotating)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<2))?"over scan(rotating)":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_rottyp&(1<<3))?"stationary(stationary)":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 386 << "] "<< "\t  Save Raw Data Flag (CT_rawdataflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_rawdataflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 388 << "] "<< "\t  IBH Image scale factors (CT_ct_scalefact)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ct_scalefact
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 392 << "] "<< "\t  CT Water Number (CT_ct_water_num)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ct_water_num
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 394 << "] "<< "\t  CT Bone Number (CT_ct_bone_num)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ct_bone_num
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 396 << "] "<< "\t  BBH coefficient 1 (CT_bbh_coef1)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_bbh_coef1
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 400 << "] "<< "\t  BBH coefficient 2 (CT_bbh_coef2)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_bbh_coef2
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 404 << "] "<< "\t  BBH coefficient 3 (CT_bbh_coef3)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_bbh_coef3
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 408 << "] "<< "\t  Num of BBH channels to blend (CT_bbh_numblend)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_bbh_numblend
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 412 << "] "<< "\t  Starting channel (CT_firstchan)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_firstchan
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 416 << "] "<< "\t  Number of channels (1..512) (CT_numchan)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_numchan
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 420 << "] "<< "\t  Increment between channels (CT_chaninc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_chaninc
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 424 << "] "<< "\t  Starting view (CT_firstview)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_firstview
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 428 << "] "<< "\t  Number of views (CT_numview)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_numview
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 432 << "] "<< "\t  Increment between views (CT_viewinc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_viewinc
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 436 << "] "<< "\t  Window Range (0..4095) (CT_windowrange)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_windowrange
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 440 << "] "<< "\t  Scaling value of the image data (CT_scalemin)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_scalemin
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 444 << "] "<< "\t  Scaling value of the image data (CT_scalemax)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_scalemax
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 448 << "] "<< "\t  Amount of processing that will be (CT_datamod)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_datamod
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_datamod == 1) (*log) << "\t\t\t 1 = Raw\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_datamod == 2) (*log) << "\t\t\t 2 = Offset Corrected\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_datamod == 3) (*log) << "\t\t\t 3 = Normalized\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 452 << "] "<< "\t  Source of the qcal vectors (CT_qcalfile)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_qcalfile)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 465 << "] "<< "\t  Source of the cal vectors (CT_calmodfile)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_calmodfile)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 478 << "] "<< "\t  Number of words per view (CT_wordsperview)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_wordsperview
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 480 << "] "<< "\t  RAS letter for side of image (CT_rl_ras)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_rl_ras)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 481 << "] "<< "\t  RAS letter for anterior/posterior (CT_ap_ras)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_ap_ras)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 482 << "] "<< "\t  RAS letter for scout start loc (CT_sctstr_ras)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_sctstr_ras)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 483 << "] "<< "\t  RAS letter for scout end loc (CT_sctend_ras)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_sctend_ras)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 484 << "] "<< "\t  Anatomical reference for scout (CT_sct_anref)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_sct_anref)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 488 << "] "<< "\t  PpScan window range for output Scaling (CT_pps_scalwin)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pps_scalwin
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 490 << "] "<< "\t  PpScan Qcal modification flag (CT_pps_qcalflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pps_qcalflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 492 << "] "<< "\t  PpScan Pcal modification flag (CT_pps_pcalflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pps_pcalflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 494 << "] "<< "\t  PpScan Theta Fix (Angle Correction) (CT_pps_thetafix)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pps_thetafix
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 496 << "] "<< "\t  PpScan Beam Hardening Flag (CT_pps_bhflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_pps_bhflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 498 << "] "<< "\t  tube focal spot size (CT_spot_size)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_spot_size
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_spot_size == 1) (*log) << "\t\t\t 1 = small\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_spot_size == 2) (*log) << "\t\t\t 2 = large\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 500 << "] "<< "\t  tube focal spot position (CT_spot_pos)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_spot_pos
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_spot_pos == 1) (*log) << "\t\t\t 1 = left\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_spot_pos == 2) (*log) << "\t\t\t 2 = center\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_spot_pos == 3) (*log) << "\t\t\t 3 = right\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 502 << "] "<< "\t  Dependent on number of views processed (CT_recondataset)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_recondataset
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<0))?"half scan views":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<1))?"normal scan views":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<2))?"over scan views":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_recondataset&(1<<3))?"variable views":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 504 << "] "<< "\t  Field of view in detector cells (CT_ndetcellsfov)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ndetcellsfov
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 512 << "] "<< "\t  Start time(secs) of this scan (CT_strtscantime)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_strtscantime
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 520 << "] "<< "\t  Gantry Rotation Direction (CT_gandir)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_gandir
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_gandir == 1) (*log) << "\t\t\t 1 = Clockwise:CW\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_gandir == 2) (*log) << "\t\t\t 2 = CounterClockwise:CCW\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 522 << "] "<< "\t  Tube Rotor Speed (CT_rotorspeed)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_rotorspeed
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_rotorspeed == 1) (*log) << "\t\t\t 1 = off\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_rotorspeed == 2) (*log) << "\t\t\t 2 = low\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_rotorspeed == 3) (*log) << "\t\t\t 3 = medium\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_rotorspeed == 4) (*log) << "\t\t\t 4 = high\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 524 << "] "<< "\t  TGGC Trigger Mode (CT_trigmode)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_trigmode
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_trigmode == 1) (*log) << "\t\t\t 1 = Normal Trigger:XTTX\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_trigmode == 2) (*log) << "\t\t\t 2 = XRayoff Trigger:TT\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_trigmode == 3) (*log) << "\t\t\t 3 = TXXT\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_trigmode == 4) (*log) << "\t\t\t 4 = XXTT\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 528 << "] "<< "\t  Rx'd gantry tilt - not annotated (CT_sitilt)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_sitilt
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 532 << "] "<< "\t  R/L coordinate for target recon center (CT_targcen_R)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_targcen_R
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 536 << "] "<< "\t  A/P coordinate for target recon center (CT_targcen_A)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_targcen_A
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 540 << "] "<< "\t  Value of Back Projection button (CT_backprojflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_backprojflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 542 << "] "<< "\t  Set if fatq estimates were used (CT_fatqestflag)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_fatqestflag
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 544 << "] "<< "\t  Z chan avg over views (CT_zavg)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_zavg
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 548 << "] "<< "\t  avg of left ref chans over (CT_leftrefavg)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_leftrefavg
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 552 << "] "<< "\t  max left chan value over views (CT_leftrefmax)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_leftrefmax
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 556 << "] "<< "\t  avg of right ref chans over (CT_rightrefavg)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_rightrefavg
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 560 << "] "<< "\t  max right chan value over views (CT_rightrefmax)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_rightrefmax
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 564 << "] "<< "\t  process that last allocated this record (CT_im_alloc_key)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_im_alloc_key)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 580 << "] "<< "\t  Date/Time of Last Change (CT_im_lastmod)\t <"
		 <<          DateTime(GAW_HeaderInstance_CTHDR->CT_im_lastmod).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_lastmod).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_lastmod).getDD()
		 << " " << DateTime(GAW_HeaderInstance_CTHDR->CT_im_lastmod).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_lastmod).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_CTHDR->CT_im_lastmod).getSecond()
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 584 << "] "<< "\t  Genesis version - Created (CT_im_verscre)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_im_verscre)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 586 << "] "<< "\t  Genesis version - Now (CT_im_verscur)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_im_verscur)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 588 << "] "<< "\t  PixelData size - as stored (CT_im_pds_a)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_pds_a
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 592 << "] "<< "\t  PixelData size - Compressed (CT_im_pds_c)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_pds_c
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 596 << "] "<< "\t  PixelData size - UnCompressed (CT_im_pds_u)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_pds_u
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 600 << "] "<< "\t  AcqRecon record checksum (CT_im_checksum)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_checksum
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 604 << "] "<< "\t  Image Archive Flag (CT_im_archived)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_archived
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 608 << "] "<< "\t  Image Complete Flag (CT_im_complete)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_im_complete
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 612 << "] "<< "\t  Biopsy Position (CT_biop_pos)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_biop_pos
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_biop_pos&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_biop_pos&(1<<0))?"superior":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_biop_pos&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_biop_pos&(1<<1))?"centered":"none")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_biop_pos&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_biop_pos&(1<<2))?"inferior":"none")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 616 << "] "<< "\t  Biopsy T Location (CT_biop_tloc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_biop_tloc
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 620 << "] "<< "\t  Biopsy Ref Location (CT_biop_refloc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_biop_refloc
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 624 << "] "<< "\t  Reference Channel Used (CT_ref_chan)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ref_chan
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_ref_chan == 0) (*log) << "\t\t\t 0 = no\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_ref_chan == 1) (*log) << "\t\t\t 1 = yes\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 628 << "] "<< "\t  Back Projector Coefficient (CT_bp_coef)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_bp_coef
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 632 << "] "<< "\t  Primary Speed Correction Used (CT_psc)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_psc
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_psc == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_psc == 1) (*log) << "\t\t\t 1 = Yes\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 634 << "] "<< "\t  Overrange Correction Used (CT_overrng_corr)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_overrng_corr
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_overrng_corr == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_overrng_corr == 1) (*log) << "\t\t\t 1 = Yes\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 636 << "] "<< "\t  Dynamic Z Alpha Value (CT_dyn_z_alpha)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_dyn_z_alpha
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 640 << "] "<< "\t  Reference Image Field (CT_ref_img)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_ref_img)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 641 << "] "<< "\t  Summary Image Field (CT_sum_img)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_sum_img)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 642 << "] "<< "\t  Window Value (CT_img_window)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_img_window
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 644 << "] "<< "\t  Level Value (CT_img_level)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_img_level
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 648 << "] "<< "\t  Integer Slop Field 1 (CT_slop_int_1)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_int_1
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 652 << "] "<< "\t  Integer Slop Field 2 (CT_slop_int_2)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_int_2
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 656 << "] "<< "\t  Integer Slop Field 3 (CT_slop_int_3)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_int_3
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 660 << "] "<< "\t  Integer Slop Field 4 (CT_slop_int_4)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_int_4
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 664 << "] "<< "\t  Integer Slop Field 5 (CT_slop_int_5)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_int_5
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 668 << "] "<< "\t  Float Slop Field 1 (CT_slop_float_1)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_float_1
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 672 << "] "<< "\t  Float Slop Field 2 (CT_slop_float_2)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_float_2
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 676 << "] "<< "\t  Float Slop Field 3 (CT_slop_float_3)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_float_3
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 680 << "] "<< "\t  Float Slop Field 4 (CT_slop_float_4)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_float_4
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 684 << "] "<< "\t  Float Slop Field 5 (CT_slop_float_5)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_slop_float_5
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 688 << "] "<< "\t  String Slop Field 1 (CT_slop_str_1)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_slop_str_1)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 704 << "] "<< "\t  String Slop Field 2 (CT_slop_str_2)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_slop_str_2)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 720 << "] "<< "\t  Delta Start Time (CT_deltastart)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_deltastart
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 724 << "] "<< "\t  Max Overranges In A View (CT_maxOverrange)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_maxOverrange
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 728 << "] "<< "\t  Avg Overranges All Views (CT_avgOverrange)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_avgOverrange
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 732 << "] "<< "\t  Corrected Afterglow Terms (CT_afterglow)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_afterglow
		 << ">\n";
	if (GAW_isct) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<0))?"PSC term on":"PSC term off")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<1))?"Second term on":"Second term off")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<2))?"Third term on":"Third term off")
	     << "\n";
	if (GAW_isct) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_CTHDR->CT_afterglow&(1<<3))?"Fourth term on":"Fourth term off")
	     << "\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 734 << "] "<< "\t  No Views z Channel Blocked (CT_z_blocked)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_z_blocked
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 736 << "] "<< "\t  No Views Ref1 Channel Blocked (CT_ref1_blocked)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ref1_blocked
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 738 << "] "<< "\t  No Views Ref2 Channel Blocked (CT_ref2_blocked)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ref2_blocked
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 740 << "] "<< "\t  No Views Ref3 Channel Blocked (CT_ref3_blocked)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ref3_blocked
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 742 << "] "<< "\t  No Views Ref4 Channel Blocked (CT_ref4_blocked)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ref4_blocked
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 744 << "] "<< "\t  No Views Ref5 Channel Blocked (CT_ref5_blocked)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_ref5_blocked
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 746 << "] "<< "\t  GE Image Integrity (CT_integrity)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_integrity
		 << ">\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_integrity == 0) (*log) << "\t\t\t 0 = GE Image\n";
	if (GAW_isct) if (GAW_HeaderInstance_CTHDR->CT_integrity == 1) (*log) << "\t\t\t 1 = Imported Image\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 748 << "] "<< "\t  Scan Pitch Ratio (CT_pitchRatio)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_pitchRatio)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 756 << "] "<< "\t  Image Unique ID (CT_image_uid)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_image_uid)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 788 << "] "<< "\t  Service Obj Class Unique ID (CT_sop_uid)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_sop_uid)
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 820 << "] "<< "\t  Start Scan To XRay On Delay (CT_xraydelay)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_xraydelay
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 824 << "] "<< "\t  Duration Of XRay On (CT_xrayduration)\t <"
		 << GAW_HeaderInstance_CTHDR->CT_xrayduration
		 << ">\n";
	if (GAW_isct) (*log)	 << "[" << GAW_Offset_CTHDR_ptr << ":" << 828 << "] "<< "\t  Spare Space (CT_ct_padding)\t <"
		 << String_Use(GAW_HeaderInstance_CTHDR->CT_ct_padding)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 0 << "] "<< "\t  Suite id for this image (MR_im_suid)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_im_suid)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 4 << "] "<< "\t  The Make-Unique Flag (MR_im_uniq)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_uniq
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 6 << "] "<< "\t  Disk ID for this Image (MR_im_diskid)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_im_diskid)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 8 << "] "<< "\t  Exam number for this image (MR_im_exno)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_exno
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 10 << "] "<< "\t  Series Number for this image (MR_im_seno)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_seno
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 12 << "] "<< "\t  Image Number (MR_im_no)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_no
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 16 << "] "<< "\t  Allocation Image date/time stamp (MR_im_datetime)\t <"
		 <<          DateTime(GAW_HeaderInstance_MRHDR->MR_im_datetime).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_datetime).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_datetime).getDD()
		 << " " << DateTime(GAW_HeaderInstance_MRHDR->MR_im_datetime).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_datetime).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_datetime).getSecond()
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 20 << "] "<< "\t  Actual Image date/time stamp (MR_im_actual_dt)\t <"
		 <<          DateTime(GAW_HeaderInstance_MRHDR->MR_im_actual_dt).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_actual_dt).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_actual_dt).getDD()
		 << " " << DateTime(GAW_HeaderInstance_MRHDR->MR_im_actual_dt).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_actual_dt).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_actual_dt).getSecond()
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 24 << "] "<< "\t  Duration of scan (secs) (MR_sctime)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_sctime
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 28 << "] "<< "\t  Slice Thickness (mm) (MR_slthick)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slthick
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 32 << "] "<< "\t  Image matrix size - X (MR_imatrix_X)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_imatrix_X
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 34 << "] "<< "\t  Image matrix size - Y (MR_imatrix_Y)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_imatrix_Y
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 36 << "] "<< "\t  Display field of view - X (mm) (MR_dfov)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_dfov
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 40 << "] "<< "\t  Display field of view - Y (if different) (MR_dfov_rect)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_dfov_rect
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 44 << "] "<< "\t  Image dimension - X (MR_dim_X)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_dim_X
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 48 << "] "<< "\t  Image dimension - Y (MR_dim_Y)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_dim_Y
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 52 << "] "<< "\t  Image pixel size - X (MR_pixsize_X)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_pixsize_X
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 56 << "] "<< "\t  Image pixel size - Y (MR_pixsize_Y)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_pixsize_Y
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 60 << "] "<< "\t  Pixel Data ID (MR_pdid)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_pdid)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 74 << "] "<< "\t  IV Contrast Agent (MR_contrastIV)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_contrastIV)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 91 << "] "<< "\t  Oral Contrast Agent (MR_contrastOral)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_contrastOral)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 108 << "] "<< "\t  Image Contrast Mode (MR_contmode)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_contmode
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_contmode&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_contmode&(1<<0))?"oral":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_contmode&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_contmode&(1<<1))?"intravenous":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 110 << "] "<< "\t  Series from which prescribed (MR_serrx)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_serrx
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 112 << "] "<< "\t  Image from which prescribed (MR_imgrx)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_imgrx
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 114 << "] "<< "\t  Screen Format(8/16 bit) (MR_screenformat)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_screenformat
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 116 << "] "<< "\t  Plane Type (MR_plane)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_plane
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<0))?"Scout Plane(SCT)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<1))?"Axial Plane(Ax)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<2))?"Sagittal Plane(Sag)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<3))?"Coronal Plane(Cor)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<4))?"Oblique Plane(O)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<5))?"ParAxial Plane(PAX)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<6))?"Reformatted Plane(RFMT)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 7 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<7))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<7))?"Projected Plane(PJN)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 8 "
	     << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<8))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_plane&(1<<8))?"Mixed Plane(MIXED)":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 120 << "] "<< "\t  Spacing between scans (mm?) (MR_scanspacing)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_scanspacing
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 124 << "] "<< "\t  Image compression type for allocation (MR_im_compress)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_compress
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 126 << "] "<< "\t  Scout Type (AP or lateral) (MR_im_scouttype)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_scouttype
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 128 << "] "<< "\t  RAS letter of image location (MR_loc_ras)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_loc_ras)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 132 << "] "<< "\t  Image location (MR_loc)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_loc
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 136 << "] "<< "\t  Center R coord of plane image (MR_ctr_R)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ctr_R
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 140 << "] "<< "\t  Center A coord of plane image (MR_ctr_A)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ctr_A
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 144 << "] "<< "\t  Center S coord of plane image (MR_ctr_S)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ctr_S
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 148 << "] "<< "\t  Normal R coord (MR_norm_R)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_norm_R
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 152 << "] "<< "\t  Normal A coord (MR_norm_A)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_norm_A
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 156 << "] "<< "\t  Normal S coord (MR_norm_S)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_norm_S
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 160 << "] "<< "\t  R Coord of Top Left Hand Corner (MR_tlhc_R)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_tlhc_R
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 164 << "] "<< "\t  A Coord of Top Left Hand Corner (MR_tlhc_A)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_tlhc_A
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 168 << "] "<< "\t  S Coord of Top Left Hand Corner (MR_tlhc_S)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_tlhc_S
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 172 << "] "<< "\t  R Coord of Top Right Hand Corner (MR_trhc_R)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_trhc_R
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 176 << "] "<< "\t  A Coord of Top Right Hand Corner (MR_trhc_A)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_trhc_A
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 180 << "] "<< "\t  S Coord of Top Right Hand Corner (MR_trhc_S)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_trhc_S
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 184 << "] "<< "\t  R Coord of Bottom Right Hand Corner (MR_brhc_R)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_brhc_R
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 188 << "] "<< "\t  A Coord of Bottom Right Hand Corner (MR_brhc_A)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_brhc_A
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 192 << "] "<< "\t  S Coord of Bottom Right Hand Corner (MR_brhc_S)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_brhc_S
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 196 << "] "<< "\t  Foreign Image Revision (MR_forimgrev)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_forimgrev)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 200 << "] "<< "\t  Pulse repetition time(usec) (MR_tr)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_tr
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 204 << "] "<< "\t  Pulse inversion time(usec) (MR_ti)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ti
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 208 << "] "<< "\t  Pulse echo time(usec) (MR_te)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_te
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 212 << "] "<< "\t  Second echo echo (usec) (MR_te2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_te2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 216 << "] "<< "\t  Number of echoes (MR_numecho)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_numecho
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 218 << "] "<< "\t  Echo Number (MR_echonum)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_echonum
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 220 << "] "<< "\t  Table Delta (MR_tbldlta)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_tbldlta
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 224 << "] "<< "\t  Number of Excitations (MR_nex)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_nex
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 228 << "] "<< "\t  Continuous Slices Flag (MR_contig)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_contig
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_contig == 0) (*log) << "\t\t\t 0 = No:/I\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_contig == 1) (*log) << "\t\t\t 1 = Yes:/C\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 230 << "] "<< "\t  Cardiac Heart Rate (bpm) (MR_hrtrate)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_hrtrate
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 232 << "] "<< "\t  Delay time after trigger (msec) (MR_tdel)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_tdel
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 236 << "] "<< "\t  Average SAR (MR_saravg)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_saravg
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 240 << "] "<< "\t  Peak SAR (MR_sarpeak)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_sarpeak
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 244 << "] "<< "\t  Monitor SAR flag (MR_monsar)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_monsar
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 246 << "] "<< "\t  Trigger window (% of R-R interval) (MR_trgwindow)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_trgwindow
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 248 << "] "<< "\t  Cardiac repetition time (MR_reptime)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_reptime
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 252 << "] "<< "\t  Images per cardiac cycle (MR_imgpcyc)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_imgpcyc
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 254 << "] "<< "\t  Actual Transmit Gain (.1 db) (MR_xmtgain)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_xmtgain
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 256 << "] "<< "\t  Actual Receive Gain Analog (.1 db) (MR_rcvgain1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_rcvgain1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 258 << "] "<< "\t  Actual Receive Gain Digital (.1 db) (MR_rcvgain2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_rcvgain2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 260 << "] "<< "\t  Flip Angle for GRASS scans (deg.) (MR_mr_flip)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_mr_flip
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 264 << "] "<< "\t  Minimum Delay after Trigger (uSec) (MR_mindat)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_mindat
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 268 << "] "<< "\t  Total Cardiac Phase prescribed (MR_cphase)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_cphase
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 270 << "] "<< "\t  Swap Phase/Frequency Axis (MR_swappf)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_swappf
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_swappf == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_swappf == 1) (*log) << "\t\t\t 1 = Yes:SPF\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 272 << "] "<< "\t  Pause Interval (slices) (MR_pauseint)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_pauseint
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 276 << "] "<< "\t  Pause Time (MR_pausetime)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_pausetime
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 280 << "] "<< "\t  Oblique Plane (MR_obplane)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_obplane
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 284 << "] "<< "\t  Slice Offsets on Freq axis (MR_slocfov)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slocfov
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 288 << "] "<< "\t  Center Frequency (0.1 Hz) (MR_xmtfreq)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_xmtfreq
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 292 << "] "<< "\t  Auto Center Frequency (0.1 Hz) (MR_autoxmtfreq)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_autoxmtfreq
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 296 << "] "<< "\t  Auto Transmit Gain (0.1 dB) (MR_autoxmtgain)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_autoxmtgain
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 298 << "] "<< "\t  PreScan R1 - Analog (MR_prescan_r1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_prescan_r1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 300 << "] "<< "\t  PreScan R2 - Digital (MR_prescan_r2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_prescan_r2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 304 << "] "<< "\t  Bitmap defining user CVs (MR_user_bitmap)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user_bitmap
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 308 << "] "<< "\t  Center Frequency Method (MR_cenfreq)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_cenfreq
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 310 << "] "<< "\t  Imaging Mode (MR_imode)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_imode
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 1) (*log) << "\t\t\t 1 = Two D:2D\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 2) (*log) << "\t\t\t 2 = Three D Volume:3D\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 3) (*log) << "\t\t\t 3 = Three D Fourier:none\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 4) (*log) << "\t\t\t 4 = Cine:Cine\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 5) (*log) << "\t\t\t 5 = Angiography:ANGIO\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 6) (*log) << "\t\t\t 6 = Spectroscopy:SPECT\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 7) (*log) << "\t\t\t 7 = Flouroscopy:FLOURO\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_imode == 8) (*log) << "\t\t\t 8 = Research Mode:RM\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 312 << "] "<< "\t  Imaging Options (MR_iopt)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_iopt
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<0))?"EG":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<1))?"RESP":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<2))?"RC":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<3))?"FC":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<4))?"CL":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<5))?"ST":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<6))?"PG":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 7 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<7))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<7))?"NP":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 8 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<8))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<8))?"NF":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 9 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<9))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<9))?"RT":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 10 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<10))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<10))?"VB":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 11 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<11))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<11))?"ED":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 12 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<12))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<12))?"PM":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 13 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<13))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<13))?"SQ":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 14 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<14))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<14))?"CS":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 15 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<15))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<15))?"MP":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 16 "
	     << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<16))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_iopt&(1<<16))?"SQPIX":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 316 << "] "<< "\t  Pulse Sequence (MR_pseq)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_pseq
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 0) (*log) << "\t\t\t 0 = SE\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 1) (*log) << "\t\t\t 1 = IR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 2) (*log) << "\t\t\t 2 = RM:RM\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 3) (*log) << "\t\t\t 3 = RMGE:none\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 4) (*log) << "\t\t\t 4 = GRE:GR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 5) (*log) << "\t\t\t 5 = MPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 6) (*log) << "\t\t\t 6 = MPIRS:IR/s\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 7) (*log) << "\t\t\t 7 = MPIRI:IR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 8) (*log) << "\t\t\t 8 = VOGRE:3D/GR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 9) (*log) << "\t\t\t 9 = CINEGRE:Cine/GRE\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 10) (*log) << "\t\t\t 10 = SPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 11) (*log) << "\t\t\t 11 = SSFP\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 12) (*log) << "\t\t\t 12 = TF:TOF\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 13) (*log) << "\t\t\t 13 = PC\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 14) (*log) << "\t\t\t 14 = CINSPGR:Cine/SPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 15) (*log) << "\t\t\t 15 = TOFGR:TOG/GR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 16) (*log) << "\t\t\t 16 = TOFSPGR:TOF/SPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 17) (*log) << "\t\t\t 17 = PCGR:PC/GR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 18) (*log) << "\t\t\t 18 = PCSPGR:PC/SPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 19) (*log) << "\t\t\t 19 = FSE\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 20) (*log) << "\t\t\t 20 = FGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 21) (*log) << "\t\t\t 21 = FMPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 22) (*log) << "\t\t\t 22 = FSPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 23) (*log) << "\t\t\t 23 = FMPSPGR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 24) (*log) << "\t\t\t 24 = SPECT\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 25) (*log) << "\t\t\t 25 = PSEQ_MIXED:MIXED\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 26) (*log) << "\t\t\t 26 = FMPIR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 27) (*log) << "\t\t\t 27 = SPECSTEAM\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseq == 28) (*log) << "\t\t\t 28 = SPECPRESS\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 318 << "] "<< "\t  Pulse Sequence Mode (MR_pseqmode)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_pseqmode
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseqmode == 1) (*log) << "\t\t\t 1 = Product\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseqmode == 2) (*log) << "\t\t\t 2 = Research Mode\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_pseqmode == 3) (*log) << "\t\t\t 3 = Research Mode GE\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 320 << "] "<< "\t  Pulse Sequence Name (MR_psdname)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_psdname)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 356 << "] "<< "\t  PSD Creation Date and Time (MR_psd_datetime)\t <"
		 <<          DateTime(GAW_HeaderInstance_MRHDR->MR_psd_datetime).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_psd_datetime).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_psd_datetime).getDD()
		 << " " << DateTime(GAW_HeaderInstance_MRHDR->MR_psd_datetime).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_psd_datetime).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_psd_datetime).getSecond()
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 360 << "] "<< "\t  PSD name from inside PSD (MR_psd_iname)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_psd_iname)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 374 << "] "<< "\t  Coil Type (MR_ctyp)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ctyp
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_ctyp == 1) (*log) << "\t\t\t 1 = head\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_ctyp == 2) (*log) << "\t\t\t 2 = body\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_ctyp == 3) (*log) << "\t\t\t 3 = surface\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 376 << "] "<< "\t  Coil Name (MR_cname)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_cname)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 394 << "] "<< "\t  Surface Coil Type (MR_surfctyp)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_surfctyp
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 396 << "] "<< "\t  Extremity Coil Flag (MR_surfcext)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_surfcext
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 400 << "] "<< "\t  RawData Run Number (MR_rawrunnum)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_rawrunnum
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 404 << "] "<< "\t  Calibrated Field Strength (x10 uGauss) (MR_cal_fldstr)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_cal_fldstr
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 408 << "] "<< "\t  SAT fat/water/none (MR_supp_tech)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_supp_tech
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_supp_tech == 0) (*log) << "\t\t\t 0 = none\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_supp_tech == 1) (*log) << "\t\t\t 1 = fat:F\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_supp_tech == 2) (*log) << "\t\t\t 2 = water:W\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 412 << "] "<< "\t  Variable Bandwidth (Hz) (MR_vbw)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_vbw
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 416 << "] "<< "\t  Number of slices in this scan group (MR_slquant)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slquant
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 418 << "] "<< "\t  Graphically prescribed (MR_gpre)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_gpre
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_gpre == 0) (*log) << "\t\t\t 0 = No GRX\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_gpre == 1) (*log) << "\t\t\t 1 = GRX 1 localizer\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_gpre == 2) (*log) << "\t\t\t 2 = GRX 2 localizers\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 420 << "] "<< "\t  Interimage/interloc delay (uSec) (MR_intr_del)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_intr_del
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 424 << "] "<< "\t  User Variable 0 (MR_user0)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user0
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 428 << "] "<< "\t  User Variable 1 (MR_user1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 432 << "] "<< "\t  User Variable 2 (MR_user2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 436 << "] "<< "\t  User Variable 3 (MR_user3)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user3
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 440 << "] "<< "\t  User Variable 4 (MR_user4)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user4
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 444 << "] "<< "\t  User Variable 5 (MR_user5)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user5
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 448 << "] "<< "\t  User Variable 6 (MR_user6)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user6
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 452 << "] "<< "\t  User Variable 7 (MR_user7)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user7
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 456 << "] "<< "\t  User Variable 8 (MR_user8)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user8
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 460 << "] "<< "\t  User Variable 9 (MR_user9)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user9
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 464 << "] "<< "\t  User Variable 10 (MR_user10)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user10
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 468 << "] "<< "\t  User Variable 11 (MR_user11)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user11
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 472 << "] "<< "\t  User Variable 12 (MR_user12)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user12
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 476 << "] "<< "\t  User Variable 13 (MR_user13)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user13
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 480 << "] "<< "\t  User Variable 14 (MR_user14)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user14
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 484 << "] "<< "\t  User Variable 15 (MR_user15)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user15
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 488 << "] "<< "\t  User Variable 16 (MR_user16)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user16
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 492 << "] "<< "\t  User Variable 17 (MR_user17)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user17
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 496 << "] "<< "\t  User Variable 18 (MR_user18)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user18
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 500 << "] "<< "\t  User Variable 19 (MR_user19)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user19
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 504 << "] "<< "\t  User Variable 20 (MR_user20)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user20
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 508 << "] "<< "\t  User Variable 21 (MR_user21)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user21
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 512 << "] "<< "\t  User Variable 22 (MR_user22)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user22
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 516 << "] "<< "\t  Projection Angle (MR_user23)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user23
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 520 << "] "<< "\t  Concat Sat Type Flag (MR_user24)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user24
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 524 << "] "<< "\t  Process that allocated this record (MR_im_alloc_key)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_im_alloc_key)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 540 << "] "<< "\t  Date/Time of Last Change (MR_im_lastmod)\t <"
		 <<          DateTime(GAW_HeaderInstance_MRHDR->MR_im_lastmod).getYYYY()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_lastmod).getMMM()
		 << "/" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_lastmod).getDD()
		 << " " << DateTime(GAW_HeaderInstance_MRHDR->MR_im_lastmod).getHour()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_lastmod).getMinute()
		 << ":" << DateTime(GAW_HeaderInstance_MRHDR->MR_im_lastmod).getSecond()
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 544 << "] "<< "\t  Genesis version - Created (MR_im_verscre)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_im_verscre)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 546 << "] "<< "\t  Genesis version - Now (MR_im_verscur)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_im_verscur)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 548 << "] "<< "\t  PixelData size - as stored (MR_im_pds_a)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_pds_a
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 552 << "] "<< "\t  PixelData size -Compressed (MR_im_pds_c)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_pds_c
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 556 << "] "<< "\t  PixelData size -UnCompressed (MR_im_pds_u)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_pds_u
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 560 << "] "<< "\t  AcqRecon record checksum (MR_im_checksum)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_checksum
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 564 << "] "<< "\t  Image Archive Flag (MR_im_archived)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_archived
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 568 << "] "<< "\t  Image Complete Flag (MR_im_complete)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_im_complete
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 572 << "] "<< "\t  Bitmap of SAT selections (MR_satbits)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satbits
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<0))?"superior(S)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<1))?"inferior(I)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<2))?"right(R)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<3))?"left(R)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<4))?"anterior(A)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 5 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<5))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<5))?"posterior(P)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 6 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<6))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<6))?"superior(s)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 7 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<7))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<7))?"inferior(i)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 8 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<8))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<8))?"right(r)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 9 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<9))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<9))?"left(l)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 10 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<10))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<10))?"anterior(a)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 11 "
	     << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<11))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_satbits&(1<<11))?"posterior(p)":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 574 << "] "<< "\t  Surface Coil Intensity Correction Flag (MR_scic)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_scic
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_scic == 0) (*log) << "\t\t\t 0 = Off\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_scic == 1) (*log) << "\t\t\t 1 = On:IIC\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 576 << "] "<< "\t  R-side SAT pulse loc rel to lndmrk (MR_satxloc1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satxloc1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 578 << "] "<< "\t  L-side SAT pulse loc rel to lndmrk (MR_satxloc2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satxloc2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 580 << "] "<< "\t  A-side SAT pulse loc rel to lndmrk (MR_satyloc1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satyloc1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 582 << "] "<< "\t  P-side SAT pulse loc rel to lndmrk (MR_satyloc2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satyloc2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 584 << "] "<< "\t  S-side SAT pulse loc rel to lndmrk (MR_satzloc1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satzloc1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 586 << "] "<< "\t  I-side SAT pulse loc rel to lndmrk (MR_satzloc2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satzloc2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 588 << "] "<< "\t  Thickness of X-axis SAT pulse (MR_satxthick)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satxthick
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 590 << "] "<< "\t  Thickness of Y-axis SAT pulse (MR_satythick)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satythick
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 592 << "] "<< "\t  Thickness of Z-axis SAT pulse (MR_satzthick)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_satzthick
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 594 << "] "<< "\t  Phase contrast flow axis (MR_flax)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_flax
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<0))?"S/I":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<1))?"A/P":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<2))?"R/L":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_flax&(1<<3))?"SLC":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 596 << "] "<< "\t  Phase contrast velocity encoding (MR_venc)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_venc
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 598 << "] "<< "\t  Slice Thickness Disclaimer (MR_thk_disclmr)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_thk_disclmr
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_thk_disclmr == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_thk_disclmr == 1) (*log) << "\t\t\t 1 = Yes\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 600 << "] "<< "\t  Auto/Manual Prescan flag (MR_ps_flag)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ps_flag
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_flag&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_flag&(1<<0))?"AF(a)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_flag&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_flag&(1<<1))?"AS(A)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_flag&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_flag&(1<<2))?"M(M)":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 602 << "] "<< "\t  Bitmap of changed values (MR_ps_status)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_ps_status
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<0))?"CF":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<1))?"TA":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<2))?"R1":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_ps_status&(1<<3))?"R2":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 604 << "] "<< "\t  Magnitude, Phase, Imaginary,Real,Spectroscopy (MR_image_type)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_image_type
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_image_type == 0) (*log) << "\t\t\t 0 = Magnitude\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_image_type == 1) (*log) << "\t\t\t 1 = Phase:PHASE\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_image_type == 2) (*log) << "\t\t\t 2 = Real:REAL\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_image_type == 3) (*log) << "\t\t\t 3 = Imaginary:IMAGINARY\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_image_type == 4) (*log) << "\t\t\t 4 = Spectroscopy:SPECTRO\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 606 << "] "<< "\t  Collapse Image (MR_vas_collapse)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_vas_collapse
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 0) (*log) << "\t\t\t 0 = Off\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 1) (*log) << "\t\t\t 1 = :COL\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 2) (*log) << "\t\t\t 2 = :MAG\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 3) (*log) << "\t\t\t 3 = :R/L\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 4) (*log) << "\t\t\t 4 = :A/P\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 5) (*log) << "\t\t\t 5 = :S/I\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 6) (*log) << "\t\t\t 6 = :PJN\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_vas_collapse == 7) (*log) << "\t\t\t 7 = :ALL\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 608 << "] "<< "\t  User Variable 23 (MR_user23n)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user23n
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 612 << "] "<< "\t  User Variable 24 (MR_user24n)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_user24n
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 616 << "] "<< "\t  Projection Algorithm (MR_proj_alg)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_proj_alg
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_proj_alg == 0) (*log) << "\t\t\t 0 = None\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_proj_alg == 1) (*log) << "\t\t\t 1 = Prototype\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_proj_alg == 2) (*log) << "\t\t\t 2 = Minimum Pixel:Min\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_proj_alg == 3) (*log) << "\t\t\t 3 = Maximum Pixel:Max\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 618 << "] "<< "\t  Projection Algorithm Name (MR_proj_name)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_proj_name)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 632 << "] "<< "\t  X Axis Rotation (MR_x_axis_rot)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_x_axis_rot
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 636 << "] "<< "\t  Y Axis Rotation (MR_y_axis_rot)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_y_axis_rot
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 640 << "] "<< "\t  Z Axis Rotation (MR_z_axis_rot)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_z_axis_rot
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 644 << "] "<< "\t  Lower Range of Pixels 1 (MR_thresh_min1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_thresh_min1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 648 << "] "<< "\t  Upper Range of Pixels 1 (MR_thresh_max1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_thresh_max1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 652 << "] "<< "\t  Lower Range of Pixels 2 (MR_thresh_min2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_thresh_min2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 656 << "] "<< "\t  Upper Range of Pixels 2 (MR_thresh_max2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_thresh_max2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 660 << "] "<< "\t  Echo Train Length for Fast Spin Echo (MR_echo_trn_len)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_echo_trn_len
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 662 << "] "<< "\t  Effective TE Flag (MR_frac_echo)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_frac_echo
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_frac_echo&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_frac_echo&(1<<0))?"Fractional(Fr)":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_frac_echo&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_frac_echo&(1<<1))?"Effective(Ef)":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 664 << "] "<< "\t  Preparatory Pulse Option (MR_prep_pulse)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_prep_pulse
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_prep_pulse == 0) (*log) << "\t\t\t 0 = None\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_prep_pulse == 1) (*log) << "\t\t\t 1 = Inversion Recovery:IR\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_prep_pulse == 2) (*log) << "\t\t\t 2 = Driven Equilibrium:DE\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 666 << "] "<< "\t  Cardiac Phase Number (MR_cphasenum)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_cphasenum
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 668 << "] "<< "\t  Variable Echo Flag (MR_var_echo)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_var_echo
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_var_echo == 0) (*log) << "\t\t\t 0 = No\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_var_echo == 1) (*log) << "\t\t\t 1 = Yes:/V\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 670 << "] "<< "\t  Reference Image Field (MR_ref_img)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_ref_img)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 671 << "] "<< "\t  Summary Image Field (MR_sum_img)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_sum_img)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 672 << "] "<< "\t  Window Value (MR_img_window)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_img_window
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 674 << "] "<< "\t  Level Value (MR_img_level)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_img_level
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 676 << "] "<< "\t  Integer Slop Field 1 (MR_slop_int_1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_int_1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 680 << "] "<< "\t  Integer Slop Field 2 (MR_slop_int_2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_int_2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 684 << "] "<< "\t  Integer Slop Field 3 (MR_slop_int_3)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_int_3
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 688 << "] "<< "\t  Integer Slop Field 4 (MR_slop_int_4)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_int_4
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 692 << "] "<< "\t  Integer Slop Field 5 (MR_slop_int_5)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_int_5
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 696 << "] "<< "\t  Float Slop Field 1 (MR_slop_float_1)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_float_1
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 700 << "] "<< "\t  Float Slop Field 2 (MR_slop_float_2)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_float_2
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 704 << "] "<< "\t  Float Slop Field 3 (MR_slop_float_3)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_float_3
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 708 << "] "<< "\t  Float Slop Field 4 (MR_slop_float_4)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_float_4
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 712 << "] "<< "\t  Float Slop Field 5 (MR_slop_float_5)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_slop_float_5
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 716 << "] "<< "\t  String Slop Field 1 (MR_slop_str_1)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_slop_str_1)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 732 << "] "<< "\t  String Slop Field 2 (MR_slop_str_2)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_slop_str_2)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 748 << "] "<< "\t  Scan Acquisition Number (MR_scanactno)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_scanactno
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 750 << "] "<< "\t  Magnitude Weighting Flag (MR_vasflags)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_vasflags
		 << ">\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 0 "
	     << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<0))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<0))?"NOFLAGS":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 1 "
	     << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<1))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<1))?"MAGWEIGHT":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 2 "
	     << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<2))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<2))?"CD RECON":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 3 "
	     << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<3))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<3))?"PD RECON":"none")
	     << "\n";
	if (GAW_ismr) (*log) << "\t\t\t bit 4 "
	     << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<4))?"true ":"false") 
	     << " = " << ((GAW_HeaderInstance_MRHDR->MR_vasflags&(1<<4))?"PHASECOR OFF":"none")
	     << "\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 752 << "] "<< "\t  Scale Weighted Venc (MR_vencscale)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_vencscale
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 756 << "] "<< "\t  GE Image Integrity (MR_integrity)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_integrity
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_integrity == 0) (*log) << "\t\t\t 0 = GE Image\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_integrity == 1) (*log) << "\t\t\t 1 = Imported Image\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 760 << "] "<< "\t  Number Of Phases (MR_fphase)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_fphase
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 764 << "] "<< "\t  Frequency Direction (MR_freq_dir)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_freq_dir
		 << ">\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_freq_dir == 0) (*log) << "\t\t\t 0 = Unknown\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_freq_dir == 1) (*log) << "\t\t\t 1 = Row\n";
	if (GAW_ismr) if (GAW_HeaderInstance_MRHDR->MR_freq_dir == 2) (*log) << "\t\t\t 2 = Col\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 766 << "] "<< "\t  Vascular Mode (MR_vas_mode)\t <"
		 << GAW_HeaderInstance_MRHDR->MR_vas_mode
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 768 << "] "<< "\t  Image Unique ID (MR_image_uid)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_image_uid)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 800 << "] "<< "\t  Service Obj Class Unique ID (MR_sop_uid)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_sop_uid)
		 << ">\n";
	if (GAW_ismr) (*log)	 << "[" << GAW_Offset_MRHDR_ptr << ":" << 832 << "] "<< "\t  Spare Space (MR_mr_padding)\t <"
		 << String_Use(GAW_HeaderInstance_MRHDR->MR_mr_padding)
		 << ">\n";
}

