// Automatically generated from template - EDITS WILL BE LOST
//
// Generated by convert.awk with options or defaults ...
//
// 	 role=dump
// 	 prefix=IMTN_
// 	 dicomfunctionname=ToDicom_Template
// 	 dumpcommonfunctionname=DumpCommon
// 	 dumpselectedimagefunctionname=DumpSelectedImage
// 	 headeroffsetprefix=IMTN_Offset
// 	 headeroffsetsuffix=ptr
// 	 headerclassprefix=IMTN_HeaderClass
// 	 headerdicomclassprefix=IMTN_Header_BothClass
// 	 headerdumpclassprefix=IMTN_Header_BothClass
// 	 headerinstanceprefix=IMTN_HeaderInstance
// 	 methodnameprefix=IMTN_Method
// 	 methodconstructorargsprefix=IMTN_MethodConstructorArgs
// 	 headerclassparameters=

void 
IMTN_Header_BothClass::DumpCommon(TextOutputStream *log)
{
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 0 << "] "<< "\t Pointer to first block in the file header (FHENTRIES)\t <"
		 << IMTN_HeaderInstance_MAINHDR->FHENTRIES
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 2 << "] "<< "\t Number of entries in the file header (FHCOUNT)\t <"
		 << IMTN_HeaderInstance_MAINHDR->FHCOUNT
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 4 << "] "<< "\t Pointer to first block of the file header data (FHDATA)\t <"
		 << IMTN_HeaderInstance_MAINHDR->FHDATA
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 6 << "] "<< "\t Pointer to first block in the slice header (SLENTRIES)\t <"
		 << IMTN_HeaderInstance_MAINHDR->SLENTRIES
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 8 << "] "<< "\t Number of entries in the slice header (SLCOUNT)\t <"
		 << IMTN_HeaderInstance_MAINHDR->SLCOUNT
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 10 << "] "<< "\t Pointer to first block of the slice header position table (SLTBPOSN)\t <"
		 << IMTN_HeaderInstance_MAINHDR->SLTBPOSN
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 12 << "] "<< "\t Number of words in a header table entry (SLTBSIZE)\t <"
		 << IMTN_HeaderInstance_MAINHDR->SLTBSIZE
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 14 << "] "<< "\t File type version number (VERSION)\t <"
		 << IMTN_HeaderInstance_MAINHDR->VERSION
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 16 << "] "<< "\t Number of 512 byte blocks of detector offset data (BLKDETOFF)\t <"
		 << IMTN_HeaderInstance_MAINHDR->BLKDETOFF
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 18 << "] "<< "\t Number of 512 byte blocks in file header table (BLKFHENTRIES)\t <"
		 << IMTN_HeaderInstance_MAINHDR->BLKFHENTRIES
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 20 << "] "<< "\t Number of 512 byte blocks of file header data (BLKFHDATA)\t <"
		 << IMTN_HeaderInstance_MAINHDR->BLKFHDATA
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 22 << "] "<< "\t Number of 512 byte blocks in slice header (BLKSLENTRIES)\t <"
		 << IMTN_HeaderInstance_MAINHDR->BLKSLENTRIES
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 24 << "] "<< "\t Number of 512 byte blocks in slice header position table (BLKSLTBPOSN)\t <"
		 << IMTN_HeaderInstance_MAINHDR->BLKSLTBPOSN
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 26 << "] "<< "\t Number of 512 byte blocks for each section of slice header data (BLKSLTBDATA)\t <"
		 << IMTN_HeaderInstance_MAINHDR->BLKSLTBDATA
		 << ">\n";
	(*log)	 << "[" << IMTN_Offset_MAINHDR_ptr << ":" << 28 << "] "<< "\t Pointer to start of detector offset blocks (DETOFF)\t <"
		 << IMTN_HeaderInstance_MAINHDR->DETOFF
		 << ">\n";
	(*log)	 << "[FILEHDR:IFHLEN] "<< "\t number of 512 byte blocks in file header (IFHLEN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IFHLEN")
		 << ">\n";
	(*log)	 << "[FILEHDR:ISHLEN] "<< "\t number of 512 byte blocks in slice header (ISHLEN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISHLEN")
		 << ">\n";
	(*log)	 << "[FILEHDR:IAFN] "<< "\t file descriptor nnnnnn.eee (IAFN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IAFN")
		 << ">\n";
	(*log)	 << "[FILEHDR:IADATE] "<< "\t date (IADATE)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IADATE")
		 << ">\n";
	(*log)	 << "[FILEHDR:IATIME] "<< "\t time (IATIME)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IATIME")
		 << ">\n";
	(*log)	 << "[FILEHDR:IPATID] "<< "\t patient ID (IPATID)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IPATID")
		 << ">\n";
	(*log)	 << "[FILEHDR:IPATNA] "<< "\t patient name (IPATNA)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IPATNA")
		 << ">\n";
	(*log)	 << "[FILEHDR:ICMNTS] "<< "\t comments (ICMNTS)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("ICMNTS")
		 << ">\n";
	(*log)	 << "[FILEHDR:NDETS] "<< "\t number of detectors (432 or 864) (NDETS)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NDETS")
		 << ">\n";
	(*log)	 << "[FILEHDR:IDEMAP] "<< "\t detector status map (series of words, channel k IW=1+(k-1)/16,IBIT = k-(IW-1)*16-1)) (IDEMAP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDEMAP")
		 << ">\n";
	(*log)	 << "[FILEHDR:ISTOB] "<< "\t starting block for detector offset measurements (0 for none) (ISTOB)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTOB")
		 << ">\n";
	(*log)	 << "[FILEHDR:NSLICE] "<< "\t number of slices in file (NSLICE)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NSLICE")
		 << ">\n";
	(*log)	 << "[FILEHDR:IORGAN] "<< "\t file organization code (IORGAN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == -2) (*log) << "\t\t\t -2 = unsorted raw MM (AIR/PIN/OFFSET) \n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == -1) (*log) << "\t\t\t -1 = unsorted raw MM (Non-calibration)\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 0) (*log) << "\t\t\t 0 = source-fan data1=detector-fan\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 2) (*log) << "\t\t\t 2 = image\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 3) (*log) << "\t\t\t 3 = tuning point\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 4) (*log) << "\t\t\t 4 = deflection buffer\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 5) (*log) << "\t\t\t 5 = processed calibration\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 6) (*log) << "\t\t\t 6 = processed AIR data\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IORGAN") == 7) (*log) << "\t\t\t 7 = processed OFFSET\n";
	(*log)	 << "[FILEHDR:ITTICK] "<< "\t DAS clock period microseconds (ITTICK)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITTICK")
		 << ">\n";
	(*log)	 << "[FILEHDR:NPHVEW] "<< "\t number of phantoms (NPHVEW)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NPHVEW")
		 << ">\n";
	(*log)	 << "[FILEHDR:IDATYP] "<< "\t data type (IDATYP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 0) (*log) << "\t\t\t 0 = DAS output words (all RAW data)\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 1) (*log) << "\t\t\t 1 = Integer\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 2) (*log) << "\t\t\t 2 = Floating point (Sinogram/tuning/offsets)\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 3) (*log) << "\t\t\t 3 = Scaled 11-bit integer data (image and screen save)\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 4) (*log) << "\t\t\t 4 = AP400 block floating point mantissas\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 5) (*log) << "\t\t\t 5 = MM address data (calibration data)\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 6) (*log) << "\t\t\t 6 = Octal data (deflection buffer files)\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 7) (*log) << "\t\t\t 7 = Packed Fast Raw Averaged Data\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDATYP") == 8) (*log) << "\t\t\t 8 = Scaled 12-bit integer data (image and screen save)\n";
	(*log)	 << "[FILEHDR:NDETOM] "<< "\t Number of detector offset measurements (NDETOM)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NDETOM")
		 << ">\n";
	(*log)	 << "[FILEHDR:XMMTMU] "<< "\t Scale factor to change mm to MIP machine units (units are m.u./mm) (XMMTMU)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedFloat("XMMTMU")
		 << ">\n";
	(*log)	 << "[FILEHDR:IREP] "<< "\t number of DAS samples per detector per source fan (IREP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IREP")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IREP") == 3) (*log) << "\t\t\t 3 = Multi-slice (50ms) scan\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IREP") == 6) (*log) << "\t\t\t 6 = Single-slice (100ms) scan\n";
	(*log)	 << "[FILEHDR:PIXLEN] "<< "\t Pixel length mm from reconstruction (PIXLEN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedFloat("PIXLEN")
		 << ">\n";
	(*log)	 << "[FILEHDR:NLEVEL] "<< "\t Number of levels in file (NLEVEL)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NLEVEL")
		 << ">\n";
	(*log)	 << "[FILEHDR:NPLEVL] "<< "\t Number of images per level (NPLEVL)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NPLEVL")
		 << ">\n";
	(*log)	 << "[FILEHDR:IREF] "<< "\t description of the reference point (IREF)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IREF")
		 << ">\n";
	(*log)	 << "[FILEHDR:ISTUDY] "<< "\t study type (ISTUDY)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == -1) (*log) << "\t\t\t -1 = Screen save\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 0) (*log) << "\t\t\t 0 = Special\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 1) (*log) << "\t\t\t 1 = Localization\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 2) (*log) << "\t\t\t 2 = Flow\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 3) (*log) << "\t\t\t 3 = Movie\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 4) (*log) << "\t\t\t 4 = Average volume\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 5) (*log) << "\t\t\t 5 = Volume\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 6) (*log) << "\t\t\t 6 = Average flow\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 51) (*log) << "\t\t\t 51 = Image averaging\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 52) (*log) << "\t\t\t 52 = Reformat\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 53) (*log) << "\t\t\t 53 = FIP Maximum Difference\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 54) (*log) << "\t\t\t 54 = FIP Time to Peak\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 55) (*log) << "\t\t\t 55 = FIP Area Under the Curve\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") ==  56) (*log) << "\t\t\t  56 = FIP Center of Mass\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 102) (*log) << "\t\t\t 102 = Image subtraction flow\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 103) (*log) << "\t\t\t 103 = Image subtraction movie\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 105) (*log) << "\t\t\t 105 = Image subtraction volume\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTUDY") == 106) (*log) << "\t\t\t 106 = Image subtraction average flow\n";
	(*log)	 << "[FILEHDR:ICONTR] "<< "\t Type of contrast (ICONTR)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("ICONTR")
		 << ">\n";
	(*log)	 << "[FILEHDR:DOSECN] "<< "\t Contrast dose in cc (DOSECN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedFloat("DOSECN")
		 << ">\n";
	(*log)	 << "[FILEHDR:INJSIT] "<< "\t Injection Site (INJSIT)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("INJSIT")
		 << ">\n";
	(*log)	 << "[FILEHDR:ISTRES] "<< "\t Type of stress (ISTRES)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("ISTRES")
		 << ">\n";
	(*log)	 << "[FILEHDR:IRPHYS] "<< "\t Referring physician last name (IRPHYS)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IRPHYS")
		 << ">\n";
	(*log)	 << "[FILEHDR:IRADIO] "<< "\t Radiologist last name (IRADIO)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IRADIO")
		 << ">\n";
	(*log)	 << "[FILEHDR:ITECH] "<< "\t Radiation technologist initials (ITECH)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("ITECH")
		 << ">\n";
	(*log)	 << "[FILEHDR:IBDATE] "<< "\t patient DOB dd-mmm-yy (IBDATE)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IBDATE")
		 << ">\n";
	(*log)	 << "[FILEHDR:ISTHCK] "<< "\t Slice thickness in mm (ISTHCK)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTHCK")
		 << ">\n";
	(*log)	 << "[FILEHDR:ICALIB] "<< "\t Calibration number (ICALIB)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICALIB")
		 << ">\n";
	(*log)	 << "[FILEHDR:KERNEL] "<< "\t Desired kernel flag (KERNEL)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("KERNEL")
		 << ">\n";
	(*log)	 << "[FILEHDR:ITRTYP] "<< "\t trigger type (ITRTYP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITRTYP")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITRTYP") == 1) (*log) << "\t\t\t 1 = manual\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITRTYP") == 2) (*log) << "\t\t\t 2 = timed\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITRTYP") == 3) (*log) << "\t\t\t 3 = ecg without trace data\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITRTYP") == 4) (*log) << "\t\t\t 4 = ecg with trace data\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ITRTYP") == 5) (*log) << "\t\t\t 5 = undefined\n";
	(*log)	 << "[FILEHDR:IPATSZ] "<< "\t patient size (IPATSZ)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPATSZ")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPATSZ") == 1) (*log) << "\t\t\t 1 = small\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPATSZ") == 2) (*log) << "\t\t\t 2 = medium\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPATSZ") == 3) (*log) << "\t\t\t 3 = large\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPATSZ") == 4) (*log) << "\t\t\t 4 = shoulder or pelvis\n";
	(*log)	 << "[FILEHDR:IPRLVL] "<< "\t Regular reconstructions first level to reconstruct (IPRLVL)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPRLVL")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IPRLVL") == 0) (*log) << "\t\t\t 0 = none\n";
	(*log)	 << "[FILEHDR:IDIAG] "<< "\t Diagnosis comment (IDIAG)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IDIAG")
		 << ">\n";
	(*log)	 << "[FILEHDR:IHOSP] "<< "\t Hospital (actually scanner) (IHOSP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("IHOSP")
		 << ">\n";
	(*log)	 << "[FILEHDR:BOLTIM] "<< "\t Bolus times (BOLTIM)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedFloat("BOLTIM")
		 << ">\n";
	(*log)	 << "[FILEHDR:NSPLIT] "<< "\t Number of images to be created from each raw slice (NSPLIT)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NSPLIT")
		 << ">\n";
	(*log)	 << "[FILEHDR:IDLINP] "<< "\t Delete raw data flag (IDLINP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDLINP")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDLINP") == 0) (*log) << "\t\t\t 0 = do not delete after recon\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IDLINP") == 1) (*log) << "\t\t\t 1 = delete after complete recon\n";
	(*log)	 << "[FILEHDR:CDENS] "<< "\t Density of contrast (CDENS)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedFloat("CDENS")
		 << ">\n";
	(*log)	 << "[FILEHDR:IOFMIN] "<< "\t Time since midnight in minutes of last offsets (IOFMIN)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IOFMIN")
		 << ">\n";
	(*log)	 << "[FILEHDR:IOFDAT] "<< "\t Day since dec 31 of last offsets (IOFDAT)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IOFDAT")
		 << ">\n";
	(*log)	 << "[FILEHDR:NRINGS] "<< "\t Number of detector rings used (NRINGS)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NRINGS")
		 << ">\n";
	(*log)	 << "[FILEHDR:NTARGT] "<< "\t Number of targets used (NTARGT)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("NTARGT")
		 << ">\n";
	(*log)	 << "[FILEHDR:ICNREC] "<< "\t Cone beam algorithm (ICNREC)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICNREC")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICNREC") == 0) (*log) << "\t\t\t 0 = not suitable\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICNREC") == 1) (*log) << "\t\t\t 1 = suitable\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICNREC") == 2) (*log) << "\t\t\t 2 = suitable and used\n";
	(*log)	 << "[FILEHDR:KERNAM] "<< "\t Kernel name used (KERNAM)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedString("KERNAM")
		 << ">\n";
	(*log)	 << "[FILEHDR:ISNTYP] "<< "\t Sinogram type (ISNTYP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISNTYP")
		 << ">\n";
	(*log)	 << "[FILEHDR:IANTYP] "<< "\t Analysis type for ASA (IANTYP)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IANTYP")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IANTYP") == 1) (*log) << "\t\t\t 1 = Cone analysis\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IANTYP") == 2) (*log) << "\t\t\t 2 = Air analysis\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("IANTYP") == 3) (*log) << "\t\t\t 3 = Pin analysis\n";
	(*log)	 << "[FILEHDR:ISTHCF] "<< "\t Slice thickness in .01 mm (ISTHCF)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ISTHCF")
		 << ">\n";
	(*log)	 << "[FILEHDR:ICOLL] "<< "\t Collimator setting (ICOLL)\t <"
		 << IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICOLL")
		 << ">\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICOLL") == 1) (*log) << "\t\t\t 1 = 1.5mm\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICOLL") == 3) (*log) << "\t\t\t 3 = 3mm\n";
	if (IMTN_HeaderInstance_FILEHDR->IMTN_Method_ExtractTaggedInteger("ICOLL") == 6) (*log) << "\t\t\t 6 = 6mm\n";
}

void 
IMTN_Header_BothClass::DumpSelectedImage(TextOutputStream *log,unsigned imagenumber)
{
	(*log)	 << "[SLICEHDR:ISDATP] "<< "\t 512 byte block pointer to data for this slice (ISDATP)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ISDATP")
		 << ">\n";
	(*log)	 << "[SLICEHDR:R1MU] "<< "\t Linear attenuation co-efficient for water at this energy and current, ring 1 (R1MU)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"R1MU")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IROTA] "<< "\t rotation (IROTA)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IROTA")
		 << ">\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IROTA") == 1) (*log) << "\t\t\t 1 = clockwise\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IROTA") == -1) (*log) << "\t\t\t -1 = counter-clockwise\n";
	(*log)	 << "[SLICEHDR:HVDES] "<< "\t Desired high voltage for this scan, kV (HVDES)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"HVDES")
		 << ">\n";
	(*log)	 << "[SLICEHDR:HVACT] "<< "\t Actual high voltage for this scan, kV (HVACT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"HVACT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ICURNT] "<< "\t Actual electron beam current, mA (ICURNT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ICURNT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:FVDES] "<< "\t Desired filament voltage, volts (FVDES)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"FVDES")
		 << ">\n";
	(*log)	 << "[SLICEHDR:FVACT] "<< "\t Actual filament voltage, volts (FVACT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"FVACT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:FCACT] "<< "\t Actual filament current, mA (FCACT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"FCACT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IRING] "<< "\t detector ring (IRING)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IRING")
		 << ">\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IRING") == 0) (*log) << "\t\t\t 0 = raw slice with both rings interleaved\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IRING") == 1) (*log) << "\t\t\t 1 = ring 1 (closest to gun)\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IRING") == 2) (*log) << "\t\t\t 2 = ring 2 (farther from gun)\n";
	(*log)	 << "[SLICEHDR:ITARGT] "<< "\t target ring used (ITARGT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITARGT")
		 << ">\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITARGT") == 65) (*log) << "\t\t\t 65 = A\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITARGT") == 66) (*log) << "\t\t\t 66 = B\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITARGT") == 67) (*log) << "\t\t\t 67 = C\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITARGT") == 68) (*log) << "\t\t\t 68 = D\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITARGT") == 69) (*log) << "\t\t\t 69 = E\n";
	(*log)	 << "[SLICEHDR:NSLAVG] "<< "\t number of scans averaged to produce this slice (NSLAVG)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"NSLAVG")
		 << ">\n";
	(*log)	 << "[SLICEHDR:PICRAD] "<< "\t Picture radius in mm (PICRAD)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"PICRAD")
		 << ">\n";
	(*log)	 << "[SLICEHDR:XORG] "<< "\t X coordinate of reconstruction center (0.0 is isocenter) in mm (XORG)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"XORG")
		 << ">\n";
	(*log)	 << "[SLICEHDR:YORG] "<< "\t Y coordinate of reconstruction center (0.0 is isocenter) in mm (YORG)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"YORG")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ZOOM] "<< "\t Zoom factor (1.0 = no zoom) for reconstruction (also seems 0 = no zoom) (ZOOM)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"ZOOM")
		 << ">\n";
	(*log)	 << "[SLICEHDR:NROWS] "<< "\t rows (NROWS)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"NROWS")
		 << ">\n";
	(*log)	 << "[SLICEHDR:NCOLS] "<< "\t columns (NCOLS)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"NCOLS")
		 << ">\n";
	(*log)	 << "[SLICEHDR:VALMAX] "<< "\t Maximum value in the slice (VALMAX)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"VALMAX")
		 << ">\n";
	(*log)	 << "[SLICEHDR:VALMIN] "<< "\t Minimum value in the slice (VALMIN)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"VALMIN")
		 << ">\n";
	(*log)	 << "[SLICEHDR:RSCALE] "<< "\t Data has been scaled and biased such that actual data = data/RSCALE + RMIN (RSCALE)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"RSCALE")
		 << ">\n";
	(*log)	 << "[SLICEHDR:RMIN] "<< "\t Data has been scaled and biased such that actual data = data/RSCALE + RMIN (RMIN)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"RMIN")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IPATH] "<< "\t Holding path flag (IPATH)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATH")
		 << ">\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATH") == 0) (*log) << "\t\t\t 0 = path was holding path\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATH") == 1) (*log) << "\t\t\t 1 = path was the first for that pulse\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATH") == 2) (*log) << "\t\t\t 2 = slice was not the first of that pulse (slices 2-N for a movie or volume)\n";
	(*log)	 << "[SLICEHDR:ELAPSE] "<< "\t Time since the first scan, in seconds (ELAPSE)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"ELAPSE")
		 << ">\n";
	(*log)	 << "[SLICEHDR:LEVELN] "<< "\t Level number for a given slice (LEVELN)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"LEVELN")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ISTAGE] "<< "\t Old:2 word array,2nd word unused,1st word is >=0 if data is present and useful (ISTAGE)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ISTAGE")
		 << ">\n";
	(*log)	 << "[SLICEHDR:INOUT] "<< "\t In-out table position relative to reference in .1 mm (INOUT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"INOUT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IHITE] "<< "\t Up-down table position relative to referencein  mm (IHITE)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IHITE")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ITILT] "<< "\t Table tilt relative to horizontal in degrees (ITILT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITILT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ISLEW] "<< "\t Table slew relative to straight in degrees (ISLEW)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ISLEW")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ICPHAS] "<< "\t cardiac phase (% of R-R interval) (ICPHAS)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ICPHAS")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IBEAT] "<< "\t Heart beat number for this image (IBEAT)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IBEAT")
		 << ">\n";
	(*log)	 << "[SLICEHDR:HRATE] "<< "\t Heart rate in beats per minute (HRATE)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"HRATE")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IPATOR] "<< "\t Patient orientation (IPATOR)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR")
		 << ">\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == -8) (*log) << "\t\t\t -8 = decubitus left feet first flipped\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == -7) (*log) << "\t\t\t -7 = decubitus right feet first flipped\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == -6) (*log) << "\t\t\t -6 = prone feet first flipped\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == -5) (*log) << "\t\t\t -5 = supine feet first flipped\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == 0) (*log) << "\t\t\t 0 = unknown\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == 1) (*log) << "\t\t\t 1 = supine head first\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == 2) (*log) << "\t\t\t 2 = prone head first\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == 3) (*log) << "\t\t\t 3 = decubitus right head first\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == 4) (*log) << "\t\t\t 4 = decubitus left head first\n";
	if (IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IPATOR") == 5) (*log) << "\t\t\t 5 = prone head first flipped\n";
	(*log)	 << "[SLICEHDR:SLSIZE] "<< "\t Size of slice in words (SLSIZE)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"SLSIZE")
		 << ">\n";
	(*log)	 << "[SLICEHDR:ITN] "<< "\t Order of Chebychev polynomial applied to data (only if valid during calibration, 0 for normal recon) (ITN)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"ITN")
		 << ">\n";
	(*log)	 << "[SLICEHDR:R2MU] "<< "\t Linear attenuation coefficient for water at this energy and current, ring 2 (R2MU)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedFloat(imagenumber,"R2MU")
		 << ">\n";
	(*log)	 << "[SLICEHDR:IVMFLG] "<< "\t Bit-map of flags used by recon (IVMFLG)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"IVMFLG")
		 << ">\n";
	(*log)	 << "[SLICEHDR:NTARGS] "<< "\t Number of target sections of this target ring (NTARGS)\t <"
		 << IMTN_HeaderInstance_SLICEHDR->IMTN_Method_ExtractTaggedInteger(imagenumber,"NTARGS")
		 << ">\n";
}

