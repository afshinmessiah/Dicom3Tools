// Automatically generated from template - EDITS WILL BE LOST
//
// Generated by convert.awk with options or defaults ...
//
// 	 role=dump
// 	 prefix=SGN_
// 	 dicomfunctionname=ToDicom_Template
// 	 dumpcommonfunctionname=DumpCommon
// 	 dumpselectedimagefunctionname=DumpSelectedImage
// 	 headeroffsetprefix=SGN_Offset
// 	 headeroffsetsuffix=ptr
// 	 headerclassprefix=SGN_HeaderClass
// 	 headerdicomclassprefix=SGN_Header_BothClass
// 	 headerdumpclassprefix=SGN_Header_BothClass
// 	 headerinstanceprefix=SGN_HeaderInstance
// 	 methodnameprefix=SGN_Method
// 	 methodconstructorargsprefix=SGN_MethodConstructorArgs
// 	 headerclassparameters=

void 
SGN_Header_BothClass::DumpCommon(TextOutputStream *log)
{
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 0 << "] "<< "\t Study Header Identifier\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown4)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 14 << "] "<< "\t Study Header Revision Number xx.xx.xx\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown5)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 22 << "] "<< "\t Number of Study Header Blocks\t <"
		 << SGN_HeaderInstance_STUDYHDR->unknown6
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 24 << "] "<< "\t Study Header Creator (Process Name:PID)\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown7)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 56 << "] "<< "\t Study Header Creator (Task ID)\t <"
		 << SGN_HeaderInstance_STUDYHDR->unknown8
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 58 << "] "<< "\t Original Raw Data Study Number (null unless different from study number)\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown9)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 64 << "] "<< "\t Study Number (StudyNumber)\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->StudyNumber)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 70 << "] "<< "\t Raw Data System ID\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown11)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 74 << "] "<< "\t System Generation ID\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown12)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 78 << "] "<< "\t Date of Study (ascii dd-mmm-yy)\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown13)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 88 << "] "<< "\t Date of Study (integer day) (StudyDateDay)\t <"
		 << SGN_HeaderInstance_STUDYHDR->StudyDateDay
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 90 << "] "<< "\t Date of Study (integer month) (StudyDateMonth)\t <"
		 << SGN_HeaderInstance_STUDYHDR->StudyDateMonth
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 92 << "] "<< "\t Date of Study (integer year-1900) (StudyDateYear)\t <"
		 << SGN_HeaderInstance_STUDYHDR->StudyDateYear
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 94 << "] "<< "\t Time of Study (ascii hh:mm:ss)\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown17)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 102 << "] "<< "\t Time of Study (integer hr) (StudyTimeHour)\t <"
		 << SGN_HeaderInstance_STUDYHDR->StudyTimeHour
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 104 << "] "<< "\t Time of Study (integer min) (StudyTimeMin)\t <"
		 << SGN_HeaderInstance_STUDYHDR->StudyTimeMin
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 106 << "] "<< "\t Time of Study (integer sec) (StudyTimeSec)\t <"
		 << SGN_HeaderInstance_STUDYHDR->StudyTimeSec
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 108 << "] "<< "\t Patient Name\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown21)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 140 << "] "<< "\t Patient ID\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown22)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 152 << "] "<< "\t Patient ID padding for future exp.\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown23)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 156 << "] "<< "\t Age of patient - xxx years or xxx[dDwWmMyY] (PatientAge)\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->PatientAge)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 160 << "] "<< "\t Sex of patient - M or F\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown25)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 162 << "] "<< "\t Weight of the patient in grams (PatientWeightGrams)\t <"
		 << SGN_HeaderInstance_STUDYHDR->PatientWeightGrams
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 166 << "] "<< "\t Referred by\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown27)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 198 << "] "<< "\t Diagnostician\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown28)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 230 << "] "<< "\t Operator\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown29)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 262 << "] "<< "\t Description\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown30)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 322 << "] "<< "\t History\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown31)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 442 << "] "<< "\t Creation time in seconds.\t <"
		 << SGN_HeaderInstance_STUDYHDR->unknown32
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 446 << "] "<< "\t Hospital name\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown33)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 478 << "] "<< "\t Patient status\t <"
		 << SGN_HeaderInstance_STUDYHDR->unknown34
		 << ">\n";
	if (SGN_HeaderInstance_STUDYHDR->unknown34 == 0) (*log) << "\t\t\t 0 = inpatient\n";
	if (SGN_HeaderInstance_STUDYHDR->unknown34 == 1) (*log) << "\t\t\t 1 = outpatient\n";
	if (SGN_HeaderInstance_STUDYHDR->unknown34 == 2) (*log) << "\t\t\t 2 = emergency\n";
	if (SGN_HeaderInstance_STUDYHDR->unknown34 == 3) (*log) << "\t\t\t 3 = referral\n";
	if (SGN_HeaderInstance_STUDYHDR->unknown34 == 4) (*log) << "\t\t\t 4 = blank\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 480 << "] "<< "\t Req. Number from Scan Rx first page\t <"
		 << String_Use(SGN_HeaderInstance_STUDYHDR->unknown35)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_STUDYHDR_ptr << ":" << 1022 << "] "<< "\t checksum\t <"
		 << SGN_HeaderInstance_STUDYHDR->unknown36
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 0 << "] "<< "\t Series Header Identifier\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown39)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 14 << "] "<< "\t Series Header Revision Number xx.xx.xx\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown40)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 22 << "] "<< "\t Number of Series Header Blocks\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown41
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 24 << "] "<< "\t Series Header Creator (Process Name:PID)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown42)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 56 << "] "<< "\t Series Header Creator (Task ID)\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown43
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 58 << "] "<< "\t Original Series Number\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown44)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 62 << "] "<< "\t Series Number (SeriesNumber)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->SeriesNumber)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 66 << "] "<< "\t Raw Data System ID\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown46)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 70 << "] "<< "\t System Generation ID\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown47)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 74 << "] "<< "\t Date of Series (ascii dd-mmm-yy)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown48)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 84 << "] "<< "\t Date of Series (integer day) (SeriesDateDay)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesDateDay
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 86 << "] "<< "\t Date of Series (integer month) (SeriesDateMonth)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesDateMonth
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 88 << "] "<< "\t Date of Series (integer year-1900) (SeriesDateYear)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesDateYear
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 90 << "] "<< "\t Time of Series (ascii hh:mm:ss)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown52)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 98 << "] "<< "\t Time of Series (integer hr) (SeriesTimeHour)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesTimeHour
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 100 << "] "<< "\t Time of Series (integer min) (SeriesTimeMin)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesTimeMin
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 102 << "] "<< "\t Time of Series (integer sec) (SeriesTimeSec)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesTimeSec
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 104 << "] "<< "\t Series Description\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown56)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 224 << "] "<< "\t Series Type (SeriesType)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SeriesType
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->SeriesType == 0) (*log) << "\t\t\t 0 = normal\n";
	if (SGN_HeaderInstance_SERIESHDR->SeriesType == 1) (*log) << "\t\t\t 1 = screensave\n";
	if (SGN_HeaderInstance_SERIESHDR->SeriesType == 2) (*log) << "\t\t\t 2 = composite\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 226 << "] "<< "\t Coil Type (CoilType)\t <"
		 << SGN_HeaderInstance_SERIESHDR->CoilType
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->CoilType == 0) (*log) << "\t\t\t 0 = head\n";
	if (SGN_HeaderInstance_SERIESHDR->CoilType == 1) (*log) << "\t\t\t 1 = body\n";
	if (SGN_HeaderInstance_SERIESHDR->CoilType == 2) (*log) << "\t\t\t 2 = surface\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 228 << "] "<< "\t Coil Name (HEAD,BODY,coil name) (Not always present) (CoilName)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->CoilName)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 244 << "] "<< "\t Contrast Description\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown60)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 276 << "] "<< "\t Plane Type (PlaneType)\t <"
		 << SGN_HeaderInstance_SERIESHDR->PlaneType
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->PlaneType == 0) (*log) << "\t\t\t 0 = axial\n";
	if (SGN_HeaderInstance_SERIESHDR->PlaneType == 1) (*log) << "\t\t\t 1 = sagittal\n";
	if (SGN_HeaderInstance_SERIESHDR->PlaneType == 2) (*log) << "\t\t\t 2 = coronal\n";
	if (SGN_HeaderInstance_SERIESHDR->PlaneType == 3) (*log) << "\t\t\t 3 = oblique\n";
	if (SGN_HeaderInstance_SERIESHDR->PlaneType == 4) (*log) << "\t\t\t 4 = screensave\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 278 << "] "<< "\t Plane Name (AXIAL,SAGITTAL,CORONAL,OBLIQUE,SCREEN SAVE) (PlaneName)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->PlaneName)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 294 << "] "<< "\t Image Mode (ImageMode)\t <"
		 << SGN_HeaderInstance_SERIESHDR->ImageMode
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->ImageMode == 0) (*log) << "\t\t\t 0 = 2D Single\n";
	if (SGN_HeaderInstance_SERIESHDR->ImageMode == 1) (*log) << "\t\t\t 1 = 2D Multiple\n";
	if (SGN_HeaderInstance_SERIESHDR->ImageMode == 2) (*log) << "\t\t\t 2 = 3D Volume\n";
	if (SGN_HeaderInstance_SERIESHDR->ImageMode == 3) (*log) << "\t\t\t 3 = Cine\n";
	if (SGN_HeaderInstance_SERIESHDR->ImageMode == 4) (*log) << "\t\t\t 4 = Spectro\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 296 << "] "<< "\t Magnetic Field Strength (Gauss) (MagneticFieldStrengthGauss)\t <"
		 << SGN_HeaderInstance_SERIESHDR->MagneticFieldStrengthGauss
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 298 << "] "<< "\t Pulse Sequence (PulseSequence)\t <"
		 << SGN_HeaderInstance_SERIESHDR->PulseSequence
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 0) (*log) << "\t\t\t 0 = MEMP\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 1) (*log) << "\t\t\t 1 = IR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 2) (*log) << "\t\t\t 2 = PS\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 3) (*log) << "\t\t\t 3 = RM\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 4) (*log) << "\t\t\t 4 = RMGE\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 5) (*log) << "\t\t\t 5 = GRE\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 6) (*log) << "\t\t\t 6 = VEMP\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 7) (*log) << "\t\t\t 7 = MPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 8) (*log) << "\t\t\t 8 = MPGRV\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 9) (*log) << "\t\t\t 9 = MPIRS\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 10) (*log) << "\t\t\t 10 = MPIRI\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 11) (*log) << "\t\t\t 11 = 3D/GRE\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 12) (*log) << "\t\t\t 12 = CINE/GRE\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 13) (*log) << "\t\t\t 13 = SPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 14) (*log) << "\t\t\t 14 = SSFP\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 15) (*log) << "\t\t\t 15 = CINE/SPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 16) (*log) << "\t\t\t 16 = 3D/SPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 17) (*log) << "\t\t\t 17 = FSE\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 18) (*log) << "\t\t\t 18 = FVE\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 19) (*log) << "\t\t\t 19 = FSPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 20) (*log) << "\t\t\t 20 = FGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 21) (*log) << "\t\t\t 21 = FMPSPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 22) (*log) << "\t\t\t 22 = FMPGR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 23) (*log) << "\t\t\t 23 = FMPIR\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 24) (*log) << "\t\t\t 24 = PROBE.S\n";
	if (SGN_HeaderInstance_SERIESHDR->PulseSequence == 25) (*log) << "\t\t\t 25 = PROBE.P\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 300 << "] "<< "\t Pulse sequence subtype\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown66
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->unknown66 == 0) (*log) << "\t\t\t 0 = chopper\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 302 << "] "<< "\t Field of view mm (FieldOfView)\t <"
		 << SGN_HeaderInstance_SERIESHDR->FieldOfView
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 306 << "] "<< "\t Center RL R+ (relative to landmark) (CenterRL)\t <"
		 << SGN_HeaderInstance_SERIESHDR->CenterRL
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 310 << "] "<< "\t Center AP A+ (relative to landmark) (CenterAP)\t <"
		 << SGN_HeaderInstance_SERIESHDR->CenterAP
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 314 << "] "<< "\t Center SI S+ (relative to landmark) (CenterSI)\t <"
		 << SGN_HeaderInstance_SERIESHDR->CenterSI
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 318 << "] "<< "\t Orientation (0=supine,1=prone,2=lt decubitus,3=rt decubitus) (PatientOrientation)\t <"
		 << SGN_HeaderInstance_SERIESHDR->PatientOrientation
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 320 << "] "<< "\t Position (PatientPosition)\t <"
		 << SGN_HeaderInstance_SERIESHDR->PatientPosition
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->PatientPosition == 0) (*log) << "\t\t\t 0 = Head First\n";
	if (SGN_HeaderInstance_SERIESHDR->PatientPosition == 1) (*log) << "\t\t\t 1 = Feet First\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 322 << "] "<< "\t Longitudinal Anatomical Reference (LongitudinalReference)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->LongitudinalReference)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 354 << "] "<< "\t Vertical Anatomical Reference (VerticalReference)\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->VerticalReference)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 386 << "] "<< "\t Vertical Landmark (relative to tabletop) mm (VerticalLandmark)\t <"
		 << SGN_HeaderInstance_SERIESHDR->VerticalLandmark
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 390 << "] "<< "\t Horizontal Landmark (relative to table center) mm (HorizontalLandmark)\t <"
		 << SGN_HeaderInstance_SERIESHDR->HorizontalLandmark
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 394 << "] "<< "\t Physical Table Location relative to home (PhysicalTableLocation)\t <"
		 << SGN_HeaderInstance_SERIESHDR->PhysicalTableLocation
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 398 << "] "<< "\t Scan Matrix - X (ScanMatrixX)\t <"
		 << SGN_HeaderInstance_SERIESHDR->ScanMatrixX
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 400 << "] "<< "\t Scan Matrix - Y (ScanMatrixY)\t <"
		 << SGN_HeaderInstance_SERIESHDR->ScanMatrixY
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 402 << "] "<< "\t Image Matrix (ImageMatrix)\t <"
		 << SGN_HeaderInstance_SERIESHDR->ImageMatrix
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 404 << "] "<< "\t No. of Images Allocated\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown81
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 406 << "] "<< "\t Gating Type (GatingType)\t <"
		 << SGN_HeaderInstance_SERIESHDR->GatingType
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<0))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<0))?"EG":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<1))?"RESP":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<2))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<2))?"RC":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<3))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<3))?"FC":"none")
	     << "\n";
	(*log) << "\t\t\t bit 4 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<4))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<4))?"CL":"none")
	     << "\n";
	(*log) << "\t\t\t bit 5 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<5))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<5))?"ST":"none")
	     << "\n";
	(*log) << "\t\t\t bit 6 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<6))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<6))?"PG":"none")
	     << "\n";
	(*log) << "\t\t\t bit 7 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<7))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<7))?"NP":"none")
	     << "\n";
	(*log) << "\t\t\t bit 8 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<8))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<8))?"RF":"none")
	     << "\n";
	(*log) << "\t\t\t bit 9 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<9))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<9))?"RT":"none")
	     << "\n";
	(*log) << "\t\t\t bit 10 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<10))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<10))?"VB":"none")
	     << "\n";
	(*log) << "\t\t\t bit 11 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<11))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<11))?"ED":"none")
	     << "\n";
	(*log) << "\t\t\t bit 12 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<12))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<12))?"PM":"none")
	     << "\n";
	(*log) << "\t\t\t bit 15 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<15))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType&(1<<15))?"MP":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 408 << "] "<< "\t Pulse sequence mode (PSMode)\t <"
		 << SGN_HeaderInstance_SERIESHDR->PSMode
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->PSMode == 0) (*log) << "\t\t\t 0 = Product\n";
	if (SGN_HeaderInstance_SERIESHDR->PSMode == 1) (*log) << "\t\t\t 1 = Research\n";
	if (SGN_HeaderInstance_SERIESHDR->PSMode == 2) (*log) << "\t\t\t 2 = Research GE\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 410 << "] "<< "\t PSD name from NAME = aPPL psd name\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown84)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 422 << "] "<< "\t Landmark counter\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown85
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 426 << "] "<< "\t Protocol name for Scan\t <"
		 << String_Use(SGN_HeaderInstance_SERIESHDR->unknown86)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 446 << "] "<< "\t Surface coil type (SCoilType)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SCoilType
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->SCoilType == 0) (*log) << "\t\t\t 0 = receive\n";
	if (SGN_HeaderInstance_SERIESHDR->SCoilType == 1) (*log) << "\t\t\t 1 = transmit/receive\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 448 << "] "<< "\t Suppression technique (SuppTech)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SuppTech
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->SuppTech == 0) (*log) << "\t\t\t 0 = none\n";
	if (SGN_HeaderInstance_SERIESHDR->SuppTech == 1) (*log) << "\t\t\t 1 = fat:F\n";
	if (SGN_HeaderInstance_SERIESHDR->SuppTech == 2) (*log) << "\t\t\t 2 = water:W\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 450 << "] "<< "\t  Bitmap of SAT selections (Sat)\t <"
		 << SGN_HeaderInstance_SERIESHDR->Sat
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<0))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<0))?"superior(S)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<1))?"inferior(I)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<2))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<2))?"right(R)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<3))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<3))?"left(R)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 4 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<4))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<4))?"anterior(A)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 5 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<5))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<5))?"posterior(P)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 6 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<6))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<6))?"superior(s)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 7 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<7))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<7))?"inferior(i)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 8 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<8))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<8))?"right(r)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 9 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<9))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<9))?"left(l)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 10 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<10))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<10))?"anterior(a)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 11 "
	     << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<11))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->Sat&(1<<11))?"posterior(p)":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 452 << "] "<< "\t Surface Coil Intensity Correction Flag (SCIC)\t <"
		 << SGN_HeaderInstance_SERIESHDR->SCIC
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->SCIC == 0) (*log) << "\t\t\t 0 = off\n";
	if (SGN_HeaderInstance_SERIESHDR->SCIC == 1) (*log) << "\t\t\t 1 = on\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 454 << "] "<< "\t R saturation pulse location  - mm from landmark\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown91
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 456 << "] "<< "\t L saturation pulse location  - mm from landmark\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown92
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 458 << "] "<< "\t A saturation pulse location  - mm from landmark\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown93
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 460 << "] "<< "\t P saturation pulse location  - mm from landmark\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown94
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 462 << "] "<< "\t S saturation pulse location  - mm from landmark\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown95
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 464 << "] "<< "\t I saturation pulse location  - mm from landmark\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown96
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 466 << "] "<< "\t X saturation pulse thickness - mm\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown97
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 468 << "] "<< "\t Y saturation pulse thickness - mm\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown98
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 470 << "] "<< "\t Z saturation pulse thickness - mm\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown99
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 472 << "] "<< "\t Vascular mode (VasMode)\t <"
		 << SGN_HeaderInstance_SERIESHDR->VasMode
		 << ">\n";
	if (SGN_HeaderInstance_SERIESHDR->VasMode == 0) (*log) << "\t\t\t 0 = none\n";
	if (SGN_HeaderInstance_SERIESHDR->VasMode == 1) (*log) << "\t\t\t 1 = TOF\n";
	if (SGN_HeaderInstance_SERIESHDR->VasMode == 2) (*log) << "\t\t\t 2 = PC\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 474 << "] "<< "\t Phase contrast flow axis (FlowAxis)\t <"
		 << SGN_HeaderInstance_SERIESHDR->FlowAxis
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<0))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<0))?"S/I":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<1))?"R/L":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<2))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<2))?"A/P":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<3))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->FlowAxis&(1<<3))?"SLICE":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 476 << "] "<< "\t unused venc ... see image header\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown102
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 478 << "] "<< "\t more pulse sequence types (GatingType2)\t <"
		 << SGN_HeaderInstance_SERIESHDR->GatingType2
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType2&(1<<0))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType2&(1<<0))?"IR Prep":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_SERIESHDR->GatingType2&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_SERIESHDR->GatingType2&(1<<1))?"DE Prep":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_SERIESHDR_ptr << ":" << 1022 << "] "<< "\t checksum\t <"
		 << SGN_HeaderInstance_SERIESHDR->unknown104
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 0 << "] "<< "\t Image Header Identifier\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown107)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 14 << "] "<< "\t Image Header Revision Number xx.xx.xx\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown108)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 22 << "] "<< "\t Number of Image Header Blocks\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown109
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 24 << "] "<< "\t Image Header Creator (Process Name:PID)\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown110)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 56 << "] "<< "\t Image Header Creator (Task ID)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown111
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 58 << "] "<< "\t Date of Image (ascii dd-mmm-yy)\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown112)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 68 << "] "<< "\t Date of Image (integer day) (ImageDateDay)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ImageDateDay
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 70 << "] "<< "\t Date of Image (integer month) (ImageDateMonth)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ImageDateMonth
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 72 << "] "<< "\t Date of Image (integer year-1900) (ImageDateYear)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ImageDateYear
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 74 << "] "<< "\t Time of Image (ascii hh:mm:ss)\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown116)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 82 << "] "<< "\t Time of Image (integer hr) (ImageTimeHour)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ImageTimeHour
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 84 << "] "<< "\t Time of Image (integer min) (ImageTimeMin)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ImageTimeMin
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 86 << "] "<< "\t Time of Image (integer sec) (ImageTimeSec)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ImageTimeSec
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 88 << "] "<< "\t Image Number (ImageNumber)\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->ImageNumber)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 92 << "] "<< "\t Series Number of Image\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown121)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 96 << "] "<< "\t Raw Data System ID\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown122)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 100 << "] "<< "\t System Generation ID\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown123)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 104 << "] "<< "\t Start Location X, Right min (LocationRMin)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->LocationRMin
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 108 << "] "<< "\t End Location X, Right max (LocationRMax)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->LocationRMax
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 112 << "] "<< "\t Start Location Y, Anterior min (LocationAMin)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->LocationAMin
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 116 << "] "<< "\t End Location Y, Anterior max (LocationAMax)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->LocationAMax
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 120 << "] "<< "\t Start Location Z, Superior min (LocationSMin)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->LocationSMin
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 124 << "] "<< "\t End Location Z, Superior max (LocationSMax)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->LocationSMax
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 146 << "] "<< "\t Image Location relative to landmark (SliceLocation)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->SliceLocation
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 150 << "] "<< "\t Table Position (TablePosition)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TablePosition
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 154 << "] "<< "\t Thickness in mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown132
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 158 << "] "<< "\t Spacing in mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown133
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 162 << "] "<< "\t Round\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown134
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown134 == -1) (*log) << "\t\t\t -1 = round to nearest slice\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 164 << "] "<< "\t Repetition/Recovery Time uS (RepetitionTimeUS)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->RepetitionTimeUS
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 168 << "] "<< "\t Scan Time uS (ScanTimeUS)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ScanTimeUS
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 172 << "] "<< "\t Echo Delay uS (EchoTimeUS)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->EchoTimeUS
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 176 << "] "<< "\t Inversion Time uS (InversionTimeUS)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->InversionTimeUS
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 180 << "] "<< "\t Other time 0 - Reserved for future use.\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown139
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 184 << "] "<< "\t Other time 1 - Reserved for future use.\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown140
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 188 << "] "<< "\t Other time 2 - Reserved for future use.\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown141
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 192 << "] "<< "\t Other time 3 - Reserved for future use.\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown142
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 196 << "] "<< "\t Number of echos. (NumberOfEchoes)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->NumberOfEchoes
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 198 << "] "<< "\t Echo number.\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown144
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 200 << "] "<< "\t Number of slices in scan group.\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown145
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 202 << "] "<< "\t Number of averages (before fractional nex)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown146
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 204 << "] "<< "\t Research mode used\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown147
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown147 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown147 == -1) (*log) << "\t\t\t -1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 206 << "] "<< "\t Name of PSD file.\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown148)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 238 << "] "<< "\t Creation Date of PSD file dd\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown149
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 240 << "] "<< "\t Creation Date of PSD file mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown150
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 242 << "] "<< "\t Creation Date of PSD file yy-1900\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown151
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 244 << "] "<< "\t Creation Date of PSD file hh\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown152
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 246 << "] "<< "\t Creation Date of PSD file mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown153
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 248 << "] "<< "\t Creation Date of PSD file ss\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown154
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 250 << "] "<< "\t Graphically Prescribed (? any non-zero is yes)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown155
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown155 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown155 == -1) (*log) << "\t\t\t -1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 252 << "] "<< "\t Series Numbers [3*3] from which prescribed\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown156)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 262 << "] "<< "\t Image Numbers [3*3] from which prescribed\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown157)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 272 << "] "<< "\t Image Shape\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown158
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown158 == 0) (*log) << "\t\t\t 0 = box\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown158 == 1) (*log) << "\t\t\t 1 = ellipse\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 274 << "] "<< "\t X pixel dimension\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown159
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 276 << "] "<< "\t Y pixel dimension\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown160
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 278 << "] "<< "\t Pixel Size - mm (PixelSize)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->PixelSize
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 282 << "] "<< "\t Image Compressed (non-zero=technique)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown162
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown162 == 0) (*log) << "\t\t\t 0 = no\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 284 << "] "<< "\t Bits per Pixel - not always filled in\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown163
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 286 << "] "<< "\t Default Window (DefaultWindow)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->DefaultWindow
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 288 << "] "<< "\t Default Level (DefaultLevel)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->DefaultLevel
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 290 << "] "<< "\t Number of Blocks in File\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown166
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 292 << "] "<< "\t Number of excitations (presumably post-fractional NEX)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown167
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 296 << "] "<< "\t Value of peak SAR watts/kg\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown168
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 300 << "] "<< "\t Value of average SAR watts/kg\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown169
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 304 << "] "<< "\t SAR monitored\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown170
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown170 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown170 == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 306 << "] "<< "\t Contiguous slices (? any non-zero is yes)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown171
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown171 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown171 == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 308 << "] "<< "\t Cardiac Heart Rate\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown172
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 310 << "] "<< "\t Total Delay Time After Trigger - ms between QRS peak and 1st excitation pulse\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown173
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 314 << "] "<< "\t Arrhythmia Rejection Ratio - % of avg RR during which trigger is recognized\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown174
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 316 << "] "<< "\t Cardiac Rep Time - 1 pulse every beat, 2 pulse very 2nd beat, etc\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown175
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 318 << "] "<< "\t Images per Cardiac Cycle (single scan only)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown176
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 320 << "] "<< "\t Number of RR's during the Scan\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown177
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 324 << "] "<< "\t Transmit attenuator setting .1 dB\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown178
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 326 << "] "<< "\t Recieve attenuator setting .1dB\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown179
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 328 << "] "<< "\t Magnetic Field Strength 10 microgauss\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown180
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 332 << "] "<< "\t Image offset - frequency/phase offset [-256...256]\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown181
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 334 << "] "<< "\t Inter image/inter location delay - ms between excitation pulses within RR interval\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown182
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 338 << "] "<< "\t PSD name from NAME = aPPL psd name\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown183)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 350 << "] "<< "\t Flip angle for GRASS\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown184
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 352 << "] "<< "\t Type of correction for surface coils ?????\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown185)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 356 << "] "<< "\t Series no. of corrected/uncor images ?????\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown186)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 360 << "] "<< "\t Image no. of corrected/uncor images ?????\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown187)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 364 << "] "<< "\t Extremity coil\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown188
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown188 == 0) (*log) << "\t\t\t 0 = false\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown188 == 1) (*log) << "\t\t\t 1 = true\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 386 << "] "<< "\t Series no. of second localizer\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown189)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 390 << "] "<< "\t Image no. of second localizer\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown190)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 394 << "] "<< "\t R center coordinate on plane image mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown191
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 398 << "] "<< "\t A center coordinate on plane image mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown192
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 402 << "] "<< "\t S center coordinate on plane image mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown193
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 406 << "] "<< "\t R normal coordinate mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown194
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 410 << "] "<< "\t A normal coordinate mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown195
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 414 << "] "<< "\t S normal coordinate mm\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown196
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 418 << "] "<< "\t TLHC R coordinate mm (TLHC_R)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TLHC_R
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 422 << "] "<< "\t TLHC A coordinate mm (TLHC_A)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TLHC_A
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 426 << "] "<< "\t TLHC S coordinate mm (TLHC_S)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TLHC_S
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 430 << "] "<< "\t TRHC R coordinate mm (TRHC_R)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TRHC_R
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 434 << "] "<< "\t TRHC A coordinate mm (TRHC_A)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TRHC_A
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 438 << "] "<< "\t TRHC S coordinate mm (TRHC_S)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TRHC_S
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 442 << "] "<< "\t BLHC R coordinate mm (BLHC_R)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->BLHC_R
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 446 << "] "<< "\t BLHC A coordinate mm (BLHC_A)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->BLHC_A
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 450 << "] "<< "\t BLHC S coordinate mm (BLHC_S)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->BLHC_S
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 454 << "] "<< "\t Image header disclaimer\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown206
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 456 << "] "<< "\t Minimum delay after trigger ms\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown207
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 458 << "] "<< "\t Number of cardiac phases to reconstruct [1...32]\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown208
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 460 << "] "<< "\t TE2 (VEMP) us\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown209
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 464 << "] "<< "\t Swap phase/frequency axis - operators choice\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown210
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown210 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown210 == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 466 << "] "<< "\t Pause interval ms\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown211
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 468 << "] "<< "\t Pause time ms\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown212
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 472 << "] "<< "\t Bitmap defining users CVs\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown213
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 474 << "] "<< "\t PSD user variable 0\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown214
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 478 << "] "<< "\t PSD user variable 1\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown215
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 482 << "] "<< "\t PSD user variable 2\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown216
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 486 << "] "<< "\t PSD user variable 3\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown217
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 490 << "] "<< "\t PSD user variable 4\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown218
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 494 << "] "<< "\t PSD user variable 5\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown219
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 498 << "] "<< "\t PSD user variable 6\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown220
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 502 << "] "<< "\t PSD user variable 7\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown221
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 506 << "] "<< "\t PSD user variable 8\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown222
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 510 << "] "<< "\t PSD user variable 9\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown223
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 514 << "] "<< "\t Oblique plane (most like plane)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown224
		 << ">\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown224&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown224&(1<<1))?"Sagittal":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown224&(1<<2))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown224&(1<<2))?"Coronal":"none")
	     << "\n";
	(*log) << "\t\t\t bit 4 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown224&(1<<4))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown224&(1<<4))?"Oblique":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 516 << "] "<< "\t Contrast used (ContrastUsed)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->ContrastUsed
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->ContrastUsed == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->ContrastUsed == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 518 << "] "<< "\t Contrast agent\t <"
		 << String_Use(SGN_HeaderInstance_IMAGEHDR->unknown226)
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 528 << "] "<< "\t Contrast amount\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown227
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 532 << "] "<< "\t File format\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown228
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown228 == 0) (*log) << "\t\t\t 0 = pre 3.0\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown228 == 1) (*log) << "\t\t\t 1 = post 3.0\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 534 << "] "<< "\t Auto center frequency\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown229
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown229 == 0) (*log) << "\t\t\t 0 = current\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown229 == 1) (*log) << "\t\t\t 1 = midpoint\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown229 == 2) (*log) << "\t\t\t 2 = water\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown229 == 3) (*log) << "\t\t\t 3 = fat\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown229 == 4) (*log) << "\t\t\t 4 = peak\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown229 == 5) (*log) << "\t\t\t 5 = centroid\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 536 << "] "<< "\t Actual transmit freq used on scan Hz (TransmitFreq)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->TransmitFreq
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 540 << "] "<< "\t Actual receive freq used on scan Hz\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown231
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 544 << "] "<< "\t Recommended automated transmit freq Hz\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown232
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 548 << "] "<< "\t Recommended automated receive freq Hz\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown233
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 552 << "] "<< "\t Recommended automated transmit attenuation .1 dB\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown234
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 556 << "] "<< "\t Recommended automated receive attenuation .1 dB\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown235
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 560 << "] "<< "\t Histogram present in raw header?\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown236
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown236 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown236 == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 562 << "] "<< "\t Swapped phase/frequency - reality (rules or choice) (PFSwapped)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->PFSwapped
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->PFSwapped == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->PFSwapped == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 564 << "] "<< "\t R1 for prescan\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown238
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 566 << "] "<< "\t R2 for prescan\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown239
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 568 << "] "<< "\t Variable bandwidth - docs say enum=0=no,1=yes but seems to be kHz (VariableBandwidth)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->VariableBandwidth
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 570 << "] "<< "\t R1 manual\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown241
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 572 << "] "<< "\t R2 manual\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown242
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 574 << "] "<< "\t auto/manual prescan flag\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown243
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown243 == 0) (*log) << "\t\t\t 0 = none\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown243 == 1) (*log) << "\t\t\t 1 = auto failed\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown243 == 2) (*log) << "\t\t\t 2 = auto succeeded\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown243 == 3) (*log) << "\t\t\t 3 = manual\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown243 == 4) (*log) << "\t\t\t 4 = auto failed/manual\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown243 == 5) (*log) << "\t\t\t 5 = auto succeeded/manual\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 576 << "] "<< "\t Changed prescan values\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown244
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<0))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<0))?"CF":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<1))?"TA":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<2))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<2))?"R1":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<3))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->unknown244&(1<<3))?"R2":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 578 << "] "<< "\t Image type\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown245
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown245 == 0) (*log) << "\t\t\t 0 = Magnitude\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown245 == 1) (*log) << "\t\t\t 1 = Phase\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown245 == 2) (*log) << "\t\t\t 2 = Real\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown245 == 3) (*log) << "\t\t\t 3 = Imaginary\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 580 << "] "<< "\t Vascular collapse (VascCollapse)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->VascCollapse
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 0) (*log) << "\t\t\t 0 = Off\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 1) (*log) << "\t\t\t 1 = Col\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 2) (*log) << "\t\t\t 2 = Mag\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 3) (*log) << "\t\t\t 3 = R/L\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 4) (*log) << "\t\t\t 4 = A/P\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 5) (*log) << "\t\t\t 5 = S/I\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 6) (*log) << "\t\t\t 6 = Pjn\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 7) (*log) << "\t\t\t 7 = All\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 8) (*log) << "\t\t\t 8 = OMag\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 9) (*log) << "\t\t\t 9 = OR/L\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 10) (*log) << "\t\t\t 10 = OA/P\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 11) (*log) << "\t\t\t 11 = OS/I\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 12) (*log) << "\t\t\t 12 = OAll\n";
	if (SGN_HeaderInstance_IMAGEHDR->VascCollapse == 13) (*log) << "\t\t\t 13 = OCol\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 582 << "] "<< "\t Thickness disclaimer\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown247
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown247 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown247 == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 584 << "] "<< "\t PC venc mm/sec\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown248
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 586 << "] "<< "\t tardis projection angle - degrees\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown249
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 590 << "] "<< "\t concatenated sat selected\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown250
		 << ">\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown250 == 0) (*log) << "\t\t\t 0 = no\n";
	if (SGN_HeaderInstance_IMAGEHDR->unknown250 == 1) (*log) << "\t\t\t 1 = yes\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 592 << "] "<< "\t TE Flag (FracEcho)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->FracEcho
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((SGN_HeaderInstance_IMAGEHDR->FracEcho&(1<<0))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->FracEcho&(1<<0))?"Fractional(Fr)":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((SGN_HeaderInstance_IMAGEHDR->FracEcho&(1<<1))?"true ":"false") 
	     << " = " << ((SGN_HeaderInstance_IMAGEHDR->FracEcho&(1<<1))?"Effective(Ef)":"none")
	     << "\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 594 << "] "<< "\t Echo train length (EchoTrainLength)\t <"
		 << SGN_HeaderInstance_IMAGEHDR->EchoTrainLength
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 598 << "] "<< "\t Slice multiplier to obtain phases for FAST - MP option (multiphase) - number of phases per location\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown253
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 600 << "] "<< "\t Cardiac phase number of current image\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown254
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 602 << "] "<< "\t Number of Acquisitions in scan\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown255
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 604 << "] "<< "\t Vascular imaging flags\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown256
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 606 << "] "<< "\t VENC scaling factor\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown257
		 << ">\n";
	(*log)	 << "[" << SGN_Offset_IMAGEHDR_ptr << ":" << 1022 << "] "<< "\t checksum\t <"
		 << SGN_HeaderInstance_IMAGEHDR->unknown258
		 << ">\n";
}

