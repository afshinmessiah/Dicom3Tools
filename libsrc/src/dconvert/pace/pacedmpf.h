// Automatically generated from template - EDITS WILL BE LOST
//
// Generated by convert.awk with options or defaults ...
//
// 	 role=dump
// 	 prefix=PACE_
// 	 dicomfunctionname=ToDicom_Template
// 	 dumpcommonfunctionname=DumpCommon
// 	 dumpselectedimagefunctionname=DumpSelectedImage
// 	 headeroffsetprefix=PACE_Offset
// 	 headeroffsetsuffix=ptr
// 	 headerclassprefix=PACE_HeaderClass
// 	 headerdicomclassprefix=PACE_Header_BothClass
// 	 headerdumpclassprefix=PACE_Header_BothClass
// 	 headerinstanceprefix=PACE_HeaderInstance
// 	 methodnameprefix=PACE_Method
// 	 methodconstructorargsprefix=PACE_MethodConstructorArgs
// 	 headerclassparameters=

void 
PACE_Header_BothClass::DumpCommon(TextOutputStream *log)
{
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 0 << "] "<< "\t Eyecatcher !STD (STUDY)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->STUDY)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 6 << "] "<< "\t Model Number of Device - Modality (SMODELNO_Mod)\t <"
		 << PACE_HeaderInstance_STDHDR->SMODELNO_Mod
		 << ">\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mod == 1) (*log) << "\t\t\t 1 = CT\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mod == 2) (*log) << "\t\t\t 2 = MR\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mod == 3) (*log) << "\t\t\t 3 = Reserved\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 7 << "] "<< "\t Model Number of Device - Machine (SMODELNO_Mac)\t <"
		 << PACE_HeaderInstance_STDHDR->SMODELNO_Mac
		 << ">\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 1) (*log) << "\t\t\t 1 = CT8600\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 2) (*log) << "\t\t\t 2 = CT8800\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 3) (*log) << "\t\t\t 3 = CT9000\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 4) (*log) << "\t\t\t 4 = EMI\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 5) (*log) << "\t\t\t 5 = ImageMax\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 6) (*log) << "\t\t\t 6 = Resona(MR MAX)\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 7) (*log) << "\t\t\t 7 = Quantex(Pace)\n";
	if (PACE_HeaderInstance_STDHDR->SMODELNO_Mac == 8) (*log) << "\t\t\t 8 = Reserved\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 8 << "] "<< "\t Manufacturers Serial Number (SMACHINE)\t <"
		 << PACE_HeaderInstance_STDHDR->SMACHINE
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 10 << "] "<< "\t Study Number (SSTUDYNO)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SSTUDYNO)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 16 << "] "<< "\t Study Date yyyy/mm/dd (SDATE)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SDATE)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 26 << "] "<< "\t Study Time hh/mm/ss.xxx (STIME)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->STIME)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 38 << "] "<< "\t Patient ID (SPATID)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SPATID)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 54 << "] "<< "\t Patient Name (SPATNAME)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SPATNAME)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 80 << "] "<< "\t Patient Age yyy;mm (SAGE)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SAGE)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 86 << "] "<< "\t Patient weight kg (SWEIGHT)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SWEIGHT)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 92 << "] "<< "\t Patient sex (SSEX)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SSEX)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_STDHDR->SSEX),"M ",2)==0) (*log) << "\t\t 'M ' = Male\n";
	if (strncmp(String_Use(PACE_HeaderInstance_STDHDR->SSEX),"F ",2)==0) (*log) << "\t\t 'F ' = Female\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 96 << "] "<< "\t Manufacturers name (SMAKER)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SMAKER)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 120 << "] "<< "\t Model name (SMODELNM)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SMODELNM)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 144 << "] "<< "\t Hospital name (SHOSP)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SHOSP)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 176 << "] "<< "\t System version (SSYSVNO)\t <"
		 << PACE_HeaderInstance_STDHDR->SSYSVNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 177 << "] "<< "\t System revision (SSYSRNO)\t <"
		 << PACE_HeaderInstance_STDHDR->SSYSRNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 178 << "] "<< "\t Database version (SDATVNO)\t <"
		 << PACE_HeaderInstance_STDHDR->SDATVNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 179 << "] "<< "\t Database revision (SDATRNO)\t <"
		 << PACE_HeaderInstance_STDHDR->SDATRNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 180 << "] "<< "\t Study attributes (SATFRB)\t <"
		 << PACE_HeaderInstance_STDHDR->SATFRB
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<0))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<0))?"SATNOWT":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<1))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<1))?"SATDUMP":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<2))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<2))?"SATOLD":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<3))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<3))?"SATOFF":"none")
	     << "\n";
	(*log) << "\t\t\t bit 4 "
	     << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<4))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_STDHDR->SATFRB&(1<<4))?"SATNODL":"none")
	     << "\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 188 << "] "<< "\t Contrast media (SENHANCE)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SENHANCE)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_STDHDR->SENHANCE),"NO C",4)==0) (*log) << "\t\t 'NO C' = No Contrast\n";
	if (strncmp(String_Use(PACE_HeaderInstance_STDHDR->SENHANCE),"+C  ",4)==0) (*log) << "\t\t '+C  ' = With Contrast\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 206 << "] "<< "\t Optical Disk: Date for identification check of image number (SDATEOD)\t <"
		 <<          Date(PACE_HeaderInstance_STDHDR->SDATEOD).getYYYY()
		 << "/" << Date(PACE_HeaderInstance_STDHDR->SDATEOD).getMMM()
		 << "/" << Date(PACE_HeaderInstance_STDHDR->SDATEOD).getDD()
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 210 << "] "<< "\t Optical Disk: Time for identification check of image number (STIMEOD)\t <"
		 <<          Time(PACE_HeaderInstance_STDHDR->STIMEOD).getHour()
		 << ":" << Time(PACE_HeaderInstance_STDHDR->STIMEOD).getMinute()
		 << ":" << Time(PACE_HeaderInstance_STDHDR->STIMEOD).getSecond()
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 214 << "] "<< "\t Optical Disk: Number of start sectors in study information file (SSELFOD)\t <"
		 << PACE_HeaderInstance_STDHDR->SSELFOD
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 218 << "] "<< "\t Number of image information blocks (SNOBLK)\t <"
		 << PACE_HeaderInstance_STDHDR->SNOBLK
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 220 << "] "<< "\t File name of image information - volume name (SIMINFFL_Vol)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SIMINFFL_Vol)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 224 << "] "<< "\t File name of image information - user number (SIMINFFL_User)\t <"
		 << PACE_HeaderInstance_STDHDR->SIMINFFL_User
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 226 << "] "<< "\t File name of image information - catalog name (SIMINFFL_Cat)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SIMINFFL_Cat)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 234 << "] "<< "\t File name of image information - file name (SIMINFFL_File)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SIMINFFL_File)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 242 << "] "<< "\t File name of image information - extension (SIMINFFL_Ext)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SIMINFFL_Ext)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 244 << "] "<< "\t Relative sector number of image information (SPOINTIM)\t <"
		 << PACE_HeaderInstance_STDHDR->SPOINTIM
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 248 << "] "<< "\t Number of series in study (SNOSER)\t <"
		 << PACE_HeaderInstance_STDHDR->SNOSER
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 250 << "] "<< "\t Number of acquisitions in study (SNOACQ)\t <"
		 << PACE_HeaderInstance_STDHDR->SNOACQ
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 252 << "] "<< "\t Number of images in study (SNOIMG)\t <"
		 << PACE_HeaderInstance_STDHDR->SNOIMG
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 254 << "] "<< "\t Optical Disk: Start sector to write next image (SNEXTOD)\t <"
		 << PACE_HeaderInstance_STDHDR->SNEXTOD
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 256 << "] "<< "\t Study description - line 1 (SDESC1)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SDESC1)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 306 << "] "<< "\t Study description - line 2 (SDESC2)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SDESC2)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 356 << "] "<< "\t Study description - line 3 (SDESC3)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SDESC3)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 406 << "] "<< "\t Study description - line 4 (SDESC4)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SDESC4)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_STDHDR_ptr << ":" << 456 << "] "<< "\t Study description - line 5 (SDESC5)\t <"
		 << String_Use(PACE_HeaderInstance_STDHDR->SDESC5)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 0 << "] "<< "\t Eyecatcher !IMG (IMAGE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IMAGE)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 4 << "] "<< "\t Number of blocks of image information (IBLOCK)\t <"
		 << PACE_HeaderInstance_IMGHDR->IBLOCK
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 6 << "] "<< "\t Model Number of Device - Modality (IMODELNO_Mod)\t <"
		 << PACE_HeaderInstance_IMGHDR->IMODELNO_Mod
		 << ">\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mod == 1) (*log) << "\t\t\t 1 = CT\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mod == 2) (*log) << "\t\t\t 2 = MR\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mod == 3) (*log) << "\t\t\t 3 = Reserved\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 7 << "] "<< "\t Model Number of Device - Machine (IMODELNO_Mac)\t <"
		 << PACE_HeaderInstance_IMGHDR->IMODELNO_Mac
		 << ">\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 1) (*log) << "\t\t\t 1 = CT8600\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 2) (*log) << "\t\t\t 2 = CT8800\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 3) (*log) << "\t\t\t 3 = CT9000\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 4) (*log) << "\t\t\t 4 = EMI\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 5) (*log) << "\t\t\t 5 = ImageMax\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 6) (*log) << "\t\t\t 6 = Resona(MR MAX)\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 7) (*log) << "\t\t\t 7 = Quantex(Pace)\n";
	if (PACE_HeaderInstance_IMGHDR->IMODELNO_Mac == 8) (*log) << "\t\t\t 8 = Reserved\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 8 << "] "<< "\t Manufacturers Serial Number (IMACHINE)\t <"
		 << PACE_HeaderInstance_IMGHDR->IMACHINE
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 10 << "] "<< "\t Study Number (ISTUDYNO)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ISTUDYNO)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 16 << "] "<< "\t Series Number (ISERNO)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ISERNO)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 18 << "] "<< "\t Acquisition Number (IACQNO)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IACQNO)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 20 << "] "<< "\t Image Number (IIMGNO)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IIMGNO)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 28 << "] "<< "\t System version (ISYSVNO)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISYSVNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 29 << "] "<< "\t System revision (ISYSRNO)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISYSRNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 30 << "] "<< "\t Database version (IDATVNO)\t <"
		 << PACE_HeaderInstance_IMGHDR->IDATVNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 31 << "] "<< "\t Database revision (IDATRNO)\t <"
		 << PACE_HeaderInstance_IMGHDR->IDATRNO
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 32 << "] "<< "\t Image Date yyyy/mm/dd (IDATE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IDATE)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 42 << "] "<< "\t Image Time hh/mm/ss.xxx (ITIME)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ITIME)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 64 << "] "<< "\t  Patient position (IHFFIRST)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IHFFIRST)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IHFFIRST),"H ",2)==0) (*log) << "\t\t 'H ' = Head First\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IHFFIRST),"F ",2)==0) (*log) << "\t\t 'F ' = Feet First\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 66 << "] "<< "\t Patient orientation (IPATORI)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IPATORI)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPATORI),"SP",2)==0) (*log) << "\t\t 'SP' = Supine\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPATORI),"PR",2)==0) (*log) << "\t\t 'PR' = Prone\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPATORI),"LL",2)==0) (*log) << "\t\t 'LL' = Left Lateral Decubitus\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPATORI),"RL",2)==0) (*log) << "\t\t 'RL' = Right Lateral Decubitus\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPATORI),"OT",2)==0) (*log) << "\t\t 'OT' = Other\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 68 << "] "<< "\t Anatomic location (IANATOMY)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IANATOMY)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 74 << "] "<< "\t Anatomic reference HF (IAREFHF)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IAREFHF)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 76 << "] "<< "\t Anatomic reference AP (IAREFAP)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IAREFAP)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 78 << "] "<< "\t Anatomic reference LR (IAREFLR)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IAREFLR)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 80 << "] "<< "\t Datum plane (IPLANE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IPLANE)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPLANE),"AX  ",4)==0) (*log) << "\t\t 'AX  ' = Axial\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPLANE),"SAG ",4)==0) (*log) << "\t\t 'SAG ' = Sagittal\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IPLANE),"COR ",4)==0) (*log) << "\t\t 'COR ' = Coronal\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 84 << "] "<< "\t Slice position by body coords HF mm (ISLPOSHF)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISLPOSHF
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 88 << "] "<< "\t Slice position by body coords AP mm (ISLPOSAP)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISLPOSAP
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 92 << "] "<< "\t Slice position by body coords LR mm (ISLPOSLR)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISLPOSLR
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 96 << "] "<< "\t Scan center by machine coords X mm (ISCENTX)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISCENTX
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 100 << "] "<< "\t Scan center by machine coords Y mm (ISCENTY)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISCENTY
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 104 << "] "<< "\t Scan center by machine coords Z mm (ISCENTZ)\t <"
		 << PACE_HeaderInstance_IMGHDR->ISCENTZ
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 108 << "] "<< "\t Scan fov cm (ISFOV)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ISFOV)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 112 << "] "<< "\t Scan thickness mm (ISTHICK)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ISTHICK)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 124 << "] "<< "\t Table position measured from gantry (machine coords) (ITBLPOS)\t <"
		 << PACE_HeaderInstance_IMGHDR->ITBLPOS
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 128 << "] "<< "\t Scan sequence (ISCANSEQ)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ISCANSEQ)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 144 << "] "<< "\t Scan time CT xxx.x seconds MR mm:ss (ISCANTM)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ISCANTM)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 150 << "] "<< "\t Image type (IMTYPE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IMTYPE)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 160 << "] "<< "\t Contrast media (IENHANCE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IENHANCE)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IENHANCE),"NO C",4)==0) (*log) << "\t\t 'NO C' = No Contrast\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR->IENHANCE),"+C  ",4)==0) (*log) << "\t\t '+C  ' = With Contrast\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 164 << "] "<< "\t Start Injection Time hh/mm/ss.xxx (ICETIME)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ICETIME)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 176 << "] "<< "\t Generator power CT xx.x kW MR xxxx W (IGENPOW)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->IGENPOW)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 180 << "] "<< "\t Trigger time: start of R wave to first data mS (ITRIGGER)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR->ITRIGGER)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 188 << "] "<< "\t Over range count (IOVERCNT)\t <"
		 << PACE_HeaderInstance_IMGHDR->IOVERCNT
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR_ptr << ":" << 190 << "] "<< "\t Zero detect count (IZEROCNT)\t <"
		 << PACE_HeaderInstance_IMGHDR->IZEROCNT
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 0 << "] "<< "\t Table height machine coords mm (ITBLHGT)\t <"
		 << PACE_HeaderInstance_CTHDR->ITBLHGT
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 4 << "] "<< "\t Azimuth of scout degrees (IAZIMUTH)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IAZIMUTH)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 8 << "] "<< "\t Gantry tilt machine coords degrees (IGTILT)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IGTILT)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 16 << "] "<< "\t Initial location at scout body coords mm (ISCSTAPS)\t <"
		 << PACE_HeaderInstance_CTHDR->ISCSTAPS
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 20 << "] "<< "\t Final location at scout body coords mm (ISCENDPS)\t <"
		 << PACE_HeaderInstance_CTHDR->ISCENDPS
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 24 << "] "<< "\t Gantry tilt body coords degrees (IGTILTB)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IGTILTB)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 32 << "] "<< "\t Exposure time ms (IEXPTIME)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IEXPTIME)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 38 << "] "<< "\t Tube current mA (IEXPRATE)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IEXPRATE)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 42 << "] "<< "\t Exposure mAS (IEXPOSE)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IEXPOSE)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 48 << "] "<< "\t Generator output (IKVP)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IKVP)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 52 << "] "<< "\t Direction of rotation (IROTDIR)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IROTDIR)
		 << ">\n";
	if (PACE_isct) if (strncmp(String_Use(PACE_HeaderInstance_CTHDR->IROTDIR),"CW",2)==0) (*log) << "\t\t 'CW' = Clockwise\n";
	if (PACE_isct) if (strncmp(String_Use(PACE_HeaderInstance_CTHDR->IROTDIR),"CC",2)==0) (*log) << "\t\t 'CC' = CounterClockwise\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 54 << "] "<< "\t XRay filter (IFILTER)\t <"
		 << String_Use(PACE_HeaderInstance_CTHDR->IFILTER)
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 56 << "] "<< "\t Middle date of scan (IDATEC)\t <"
		 <<          Date(PACE_HeaderInstance_CTHDR->IDATEC).getYYYY()
		 << "/" << Date(PACE_HeaderInstance_CTHDR->IDATEC).getMMM()
		 << "/" << Date(PACE_HeaderInstance_CTHDR->IDATEC).getDD()
		 << ">\n";
	if (PACE_isct) (*log)	 << "[" << PACE_Offset_CTHDR_ptr << ":" << 60 << "] "<< "\t Middle time of scan (ITIMEC)\t <"
		 <<          Time(PACE_HeaderInstance_CTHDR->ITIMEC).getHour()
		 << ":" << Time(PACE_HeaderInstance_CTHDR->ITIMEC).getMinute()
		 << ":" << Time(PACE_HeaderInstance_CTHDR->ITIMEC).getSecond()
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 0 << "] "<< "\t Tilt ordered by user Axis+/-Angle [xx+/-xx] (IMRTILT)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IMRTILT)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 64 << "] "<< "\t Echo number (IECHO)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IECHO)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 66 << "] "<< "\t Number of echoes (INOOFECH)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->INOOFECH)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 68 << "] "<< "\t Slice number (ISLICE)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->ISLICE)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 70 << "] "<< "\t Number of slices (INOOFSL)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->INOOFSL)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 72 << "] "<< "\t Number of excitations (INEX)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->INEX)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 74 << "] "<< "\t Repetition time ms (ITR)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->ITR)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 80 << "] "<< "\t Inversion time ms (ITI)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->ITI)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 85 << "] "<< "\t Echo time ms (ITE)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->ITE)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 92 << "] "<< "\t Matrix horizontal [xxxH] (IMATRIXH)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IMATRIXH)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 96 << "] "<< "\t Matrix vertical [xxxV] (IMATRIXV)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IMATRIXV)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 100 << "] "<< "\t Matrix depth [xxxD] (IMATRIXD)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IMATRIXD)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 104 << "] "<< "\t Receiving coil type (IRCVCOIL_Type)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IRCVCOIL_Type)
		 << ">\n";
	if (PACE_ismr) if (strncmp(String_Use(PACE_HeaderInstance_MRHDR->IRCVCOIL_Type),"H",1)==0) (*log) << "\t\t 'H' = Head\n";
	if (PACE_ismr) if (strncmp(String_Use(PACE_HeaderInstance_MRHDR->IRCVCOIL_Type),"B",1)==0) (*log) << "\t\t 'B' = Body\n";
	if (PACE_ismr) if (strncmp(String_Use(PACE_HeaderInstance_MRHDR->IRCVCOIL_Type),"S",1)==0) (*log) << "\t\t 'S' = Surface\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 105 << "] "<< "\t Receiving coil number (IRCVCOIL_Num)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IRCVCOIL_Num)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 108 << "] "<< "\t Transmitting coil type (ITRSCOIL_Type)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->ITRSCOIL_Type)
		 << ">\n";
	if (PACE_ismr) if (strncmp(String_Use(PACE_HeaderInstance_MRHDR->ITRSCOIL_Type),"H",1)==0) (*log) << "\t\t 'H' = Head\n";
	if (PACE_ismr) if (strncmp(String_Use(PACE_HeaderInstance_MRHDR->ITRSCOIL_Type),"B",1)==0) (*log) << "\t\t 'B' = Body\n";
	if (PACE_ismr) if (strncmp(String_Use(PACE_HeaderInstance_MRHDR->ITRSCOIL_Type),"S",1)==0) (*log) << "\t\t 'S' = Surface\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 109 << "] "<< "\t Transmitting coil number (ITRSCOIL_Num)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->ITRSCOIL_Num)
		 << ">\n";
	if (PACE_ismr) (*log)	 << "[" << PACE_Offset_MRHDR_ptr << ":" << 112 << "] "<< "\t Magnetic flux density (T) (IMAGNET)\t <"
		 << String_Use(PACE_HeaderInstance_MRHDR->IMAGNET)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 0 << "] "<< "\t Calibration date (ICALDATE)\t <"
		 <<          Date(Date(PACE_HeaderInstance_IMGHDR2->ICALDATE)).getYYYY()
		 << "/" << Date(Date(PACE_HeaderInstance_IMGHDR2->ICALDATE)).getMMM()
		 << "/" << Date(Date(PACE_HeaderInstance_IMGHDR2->ICALDATE)).getDD()
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 4 << "] "<< "\t Calibration time (ICALTIME)\t <"
		 <<          Time(Time(PACE_HeaderInstance_IMGHDR2->ICALTIME)).getHour()
		 << ":" << Time(Time(PACE_HeaderInstance_IMGHDR2->ICALTIME)).getMinute()
		 << ":" << Time(Time(PACE_HeaderInstance_IMGHDR2->ICALTIME)).getSecond()
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 8 << "] "<< "\t Calibration FOV name (ICALFOV)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->ICALFOV)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 16 << "] "<< "\t Direction of patient on -X axis [HFAPLR] (IIMDIR_NX)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDIR_NX)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 19 << "] "<< "\t Direction of patient on +Y axis [HFAPLR] (IIMDIR_PY)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDIR_PY)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 22 << "] "<< "\t Direction of patient on +X axis [HFAPLR] (IIMDIR_PX)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDIR_PX)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 25 << "] "<< "\t Direction of patient on -Y axis [HFAPLR] (IIMDIR_NY)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDIR_NY)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 28 << "] "<< "\t Image center X machine coords mm (IIMPOSX)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMPOSX
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 32 << "] "<< "\t Image center Y machine coords mm (IIMPOSY)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMPOSY
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 36 << "] "<< "\t Image center Z machine coords mm (IIMPOSZ)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMPOSZ
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 40 << "] "<< "\t Direction cosine of display horizontal vs. X machine coords (IIMORIHX)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMORIHX
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 44 << "] "<< "\t Direction cosine of display horizontal vs. Y machine coords (IIMORIHY)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMORIHY
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 48 << "] "<< "\t Direction cosine of display horizontal vs. Z machine coords (IIMORIHZ)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMORIHZ
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 52 << "] "<< "\t Direction cosine of display vertical vs. X machine coords (IIMORIVX)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMORIVX
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 56 << "] "<< "\t Direction cosine of display vertical vs. Y machine coords (IIMORIVY)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMORIVY
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 60 << "] "<< "\t Direction cosine of display vertical vs. Z machine coords (IIMORIVZ)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMORIVZ
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 64 << "] "<< "\t Target type (ITCTYPE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->ITCTYPE)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR2->ITCTYPE),"P",1)==0) (*log) << "\t\t 'P' = Prospective\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR2->ITCTYPE),"R",1)==0) (*log) << "\t\t 'R' = Retrospective\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 66 << "] "<< "\t Reconstruction mode (IRMODE)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IRMODE)
		 << ">\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR2->IRMODE),"STND  ",6)==0) (*log) << "\t\t 'STND  ' = Standard\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR2->IRMODE),"BONY-X",6)==0) (*log) << "\t\t 'BONY-X' = Bony\n";
	if (strncmp(String_Use(PACE_HeaderInstance_IMGHDR2->IRMODE),"SOFT  ",6)==0) (*log) << "\t\t 'SOFT  ' = Soft Tissue\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 72 << "] "<< "\t Recon center X mm (CT: gantry coords, MR: display coords) (IRCENTX)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IRCENTX
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 76 << "] "<< "\t Recon center Y mm (CT: gantry coords, MR: display coords) (IRCENTY)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IRCENTY
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 80 << "] "<< "\t Recon FOV cm [xx.x] (IRFOV)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IRFOV)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 96 << "] "<< "\t Pixels in X-axis (IXAXIS)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IXAXIS
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 98 << "] "<< "\t Pixels in Y-axis (IYAXIS)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IYAXIS
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 100 << "] "<< "\t Pixel size mm (IPIXSIZE)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IPIXSIZE
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 104 << "] "<< "\t Window center (IWINDOWC)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IWINDOWC
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 106 << "] "<< "\t Window level (IWINDOWL)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IWINDOWL
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 108 << "] "<< "\t Image attributes (IATTRB)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IATTRB
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<0))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<0))?"IATDUMP - Dumping is over":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<1))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<1))?"IATOLD - Old image reloading":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<2))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<2))?"IATOFFR - Off center recon":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<3))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<3))?"IATWLED - Window level disable":"IATWLED - Window level enable")
	     << "\n";
	(*log) << "\t\t\t bit 4 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<4))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<4))?"IATNOWT - Image exists on OD":"none")
	     << "\n";
	(*log) << "\t\t\t bit 5 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<5))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<5))?"ATPTYP - ORIGINAL":"ATPTYP - DPCM")
	     << "\n";
	(*log) << "\t\t\t bit 15 "
	     << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<15))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->IATTRB&(1<<15))?"IATHZ - 60Hz":"IATHZ - 50Hz")
	     << "\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 112 << "] "<< "\t Mag center X mm display coords (IMAGCX)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMAGCX
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 116 << "] "<< "\t Mag center Y mm display coords (IMAGCY)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMAGCY
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 120 << "] "<< "\t Mag factor (IMAGFACT)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMAGFACT
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 124 << "] "<< "\t Transient information - orientation of display image (ITRANS)\t <"
		 << PACE_HeaderInstance_IMGHDR2->ITRANS
		 << ">\n";
	(*log) << "\t\t\t bit 0 "
	     << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<0))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<0))?"ITRRVSRL - R/L reverse":"none")
	     << "\n";
	(*log) << "\t\t\t bit 1 "
	     << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<1))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<1))?"ITRRVSTB - T/B reverse":"none")
	     << "\n";
	(*log) << "\t\t\t bit 2 "
	     << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<2))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<2))?"ITRROTCW - Clockwise 90 rotate":"none")
	     << "\n";
	(*log) << "\t\t\t bit 3 "
	     << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<3))?"true ":"false") 
	     << " = " << ((PACE_HeaderInstance_IMGHDR2->ITRANS&(1<<3))?"ITRROTCCW - CounterClockwise 90 rotate":"none")
	     << "\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 128 << "] "<< "\t ID of reference image 1 - series (IREFIMG1_Ser)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG1_Ser)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 131 << "] "<< "\t ID of reference image 1 - acquisition (IREFIMG1_Acq)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG1_Acq)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 134 << "] "<< "\t ID of reference image 1 - image (IREFIMG1_Img)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG1_Img)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 136 << "] "<< "\t ID of reference image 2 - series (IREFIMG2_Ser)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG2_Ser)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 139 << "] "<< "\t ID of reference image 2 - acquisition (IREFIMG2_Acq)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG2_Acq)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 142 << "] "<< "\t ID of reference image 2 - image (IREFIMG2_Img)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG2_Img)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 144 << "] "<< "\t ID of reference image 3 - series (IREFIMG3_Ser)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG3_Ser)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 147 << "] "<< "\t ID of reference image 3 - acquisition (IREFIMG3_Acq)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG3_Acq)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 150 << "] "<< "\t ID of reference image 3 - image (IREFIMG3_Img)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IREFIMG3_Img)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 152 << "] "<< "\t ID of mask image - modality (IMASKIMG_Modality)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMASKIMG_Modality
		 << ">\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Modality == 1) (*log) << "\t\t\t 1 = CT\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Modality == 2) (*log) << "\t\t\t 2 = MR\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Modality == 3) (*log) << "\t\t\t 3 = Reserved\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 153 << "] "<< "\t ID of mask image - model number (IMASKIMG_Model)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model
		 << ">\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 1) (*log) << "\t\t\t 1 = CT8600\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 2) (*log) << "\t\t\t 2 = CT8800\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 3) (*log) << "\t\t\t 3 = CT9000\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 4) (*log) << "\t\t\t 4 = EMI\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 5) (*log) << "\t\t\t 5 = ImageMax\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 6) (*log) << "\t\t\t 6 = Resona(MR MAX)\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 7) (*log) << "\t\t\t 7 = Quantex(Pace)\n";
	if (PACE_HeaderInstance_IMGHDR2->IMASKIMG_Model == 8) (*log) << "\t\t\t 8 = Reserved\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 154 << "] "<< "\t ID of mask image - serial number (IMASKIMG_Serial)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMASKIMG_Serial
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 156 << "] "<< "\t ID of mask image - study (IMASKIMG_Std)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IMASKIMG_Std)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 159 << "] "<< "\t ID of mask image - series (IMASKIMG_Ser)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMASKIMG_Ser
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 160 << "] "<< "\t ID of mask image - acquisition (IMASKIMG_Acq)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMASKIMG_Acq
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 161 << "] "<< "\t ID of mask image - image (IMASKIMG_Img)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IMASKIMG_Img
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 210 << "] "<< "\t OD: Start sector of image information (ISELFOD)\t <"
		 << PACE_HeaderInstance_IMGHDR2->ISELFOD
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 214 << "] "<< "\t Screen save bitplane pixels horizontal (IBITPLNH)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IBITPLNH
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 216 << "] "<< "\t Screen save bitplane pixels vertical (IBITPLNV)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IBITPLNV
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 218 << "] "<< "\t Bytes of packed image data (IPACKIM)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IPACKIM
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 224 << "] "<< "\t Bytes of packed image file (IPACKSZ)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IPACKSZ
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 228 << "] "<< "\t File name of image information - volume name (IIMFILE_Vol)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMFILE_Vol)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 232 << "] "<< "\t File name of image information - user number (IIMFILE_User)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IIMFILE_User
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 234 << "] "<< "\t File name of image information - catalog name (IIMFILE_Cat)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMFILE_Cat)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 242 << "] "<< "\t File name of image information - file name (IIMFILE_File)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMFILE_File)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 250 << "] "<< "\t File name of image information - extension (IIMFILE_Ext)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMFILE_Ext)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 252 << "] "<< "\t Disk: image pointer number; OD: relative sector number of image data (IPOINTIM)\t <"
		 << PACE_HeaderInstance_IMGHDR2->IPOINTIM
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 256 << "] "<< "\t Series description - part 1 (ISRDESC1)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->ISRDESC1)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 272 << "] "<< "\t Series description - part 2 (ISRDESC2)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->ISRDESC2)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 286 << "] "<< "\t Series description - part 3 (ISRDESC3)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->ISRDESC3)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 298 << "] "<< "\t Image description - part 1 (IIMDESC1)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDESC1)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 308 << "] "<< "\t Image description - part 2 (IIMDESC2)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDESC2)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 316 << "] "<< "\t Image description - part 3 (IIMDESC3)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IIMDESC3)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 324 << "] "<< "\t Extension description - line 1 (IEXDESC1)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC1)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 341 << "] "<< "\t Extension description - line 2 (IEXDESC2)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC2)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 358 << "] "<< "\t Extension description - line 3 (IEXDESC3)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC3)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 375 << "] "<< "\t Extension description - line 4 (IEXDESC4)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC4)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 392 << "] "<< "\t Extension description - line 5 (IEXDESC5)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC5)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 409 << "] "<< "\t Extension description - line 6 (IEXDESC6)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC6)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 426 << "] "<< "\t Extension description - line 7 (IEXDESC7)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC7)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 443 << "] "<< "\t Extension description - line 8 (IEXDESC8)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC8)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 460 << "] "<< "\t Extension description - line 9 (IEXDESC9)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC9)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 477 << "] "<< "\t Extension description - line 10 (IEXDESC10)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC10)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 494 << "] "<< "\t Extension description - line 11 (IEXDESC11)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC11)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 511 << "] "<< "\t Extension description - line 12 (IEXDESC12)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC12)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 528 << "] "<< "\t Extension description - line 13 (IEXDESC13)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC13)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 545 << "] "<< "\t Extension description - line 14 (IEXDESC14)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC14)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 562 << "] "<< "\t Extension description - line 15 (IEXDESC15)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC15)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 579 << "] "<< "\t Extension description - line 16 (IEXDESC16)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC16)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 596 << "] "<< "\t Extension description - line 17 (IEXDESC17)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC17)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 613 << "] "<< "\t Extension description - line 18 (IEXDESC18)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC18)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 630 << "] "<< "\t Extension description - line 19 (IEXDESC19)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC19)
		 << ">\n";
	(*log)	 << "[" << PACE_Offset_IMGHDR2_ptr << ":" << 647 << "] "<< "\t Extension description - line 20 (IEXDESC20)\t <"
		 << String_Use(PACE_HeaderInstance_IMGHDR2->IEXDESC20)
		 << ">\n";
}

