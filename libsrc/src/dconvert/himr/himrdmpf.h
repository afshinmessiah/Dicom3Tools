// Automatically generated from template - EDITS WILL BE LOST
//
// Generated by convert.awk with options or defaults ...
//
// 	 role=dump
// 	 prefix=HIMR_
// 	 dicomfunctionname=ToDicom_Template
// 	 dumpcommonfunctionname=DumpCommon
// 	 dumpselectedimagefunctionname=DumpSelectedImage
// 	 headeroffsetprefix=HIMR_Offset
// 	 headeroffsetsuffix=ptr
// 	 headerclassprefix=HIMR_HeaderClass
// 	 headerdicomclassprefix=HIMR_Header_BothClass
// 	 headerdumpclassprefix=HIMR_Header_BothClass
// 	 headerinstanceprefix=HIMR_HeaderInstance
// 	 methodnameprefix=HIMR_Method
// 	 methodconstructorargsprefix=HIMR_MethodConstructorArgs
// 	 headerclassparameters=

void 
HIMR_Header_BothClass::DumpCommon(TextOutputStream *log)
{
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 0 << "] "<< "\t Controller label (CONT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->CONT)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 4 << "] "<< "\t Retrieval key name (KKEYNAME)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->KKEYNAME)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 20 << "] "<< "\t Retrieval key extension (KKEYEXT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->KKEYEXT)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 28 << "] "<< "\t Date of preparation (DATE)\t <"
		 << HIMR_HeaderInstance_IMGHDR->DATE
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 32 << "] "<< "\t Time of preparation (TIME)\t <"
		 << HIMR_HeaderInstance_IMGHDR->TIME
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 36 << "] "<< "\t Top logical block num in MD (SLBN)\t <"
		 << HIMR_HeaderInstance_IMGHDR->SLBN
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 40 << "] "<< "\t End logical block num in MD (ELBN)\t <"
		 << HIMR_HeaderInstance_IMGHDR->ELBN
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 44 << "] "<< "\t Number of data-full blocks (256 byte) (BKSZ)\t <"
		 << HIMR_HeaderInstance_IMGHDR->BKSZ
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 48 << "] "<< "\t Number of extensions IDs (IDCT)\t <"
		 << HIMR_HeaderInstance_IMGHDR->IDCT
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 50 << "] "<< "\t Unit number (UTNO)\t <"
		 << HIMR_HeaderInstance_IMGHDR->UTNO
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 52 << "] "<< "\t Open mode (OPMD)\t <"
		 << HIMR_HeaderInstance_IMGHDR->OPMD
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 54 << "] "<< "\t End peak logical block number (USEB)\t <"
		 << HIMR_HeaderInstance_IMGHDR->USEB
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 58 << "] "<< "\t Open sign (== OPEN) (OPSN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->OPSN)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 62 << "] "<< "\t Number of blocks of one-data unit (BKSU)\t <"
		 << HIMR_HeaderInstance_IMGHDR->BKSU
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 64 << "] "<< "\t Number of data units (DTSU)\t <"
		 << HIMR_HeaderInstance_IMGHDR->DTSU
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 66 << "] "<< "\t X-directional matrix size (MATX)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MATX
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 68 << "] "<< "\t Y-directional matrix size (MATY)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MATY
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 70 << "] "<< "\t Attribute data type (DTTP)\t <"
		 << HIMR_HeaderInstance_IMGHDR->DTTP
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 71 << "] "<< "\t Attribute compression method/pixel depth (ASGF)\t <"
		 << HIMR_HeaderInstance_IMGHDR->ASGF
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 72 << "] "<< "\t Attribute image kind (GASY)\t <"
		 << HIMR_HeaderInstance_IMGHDR->GASY
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 74 << "] "<< "\t Attribute pixel size (um) (GASZ)\t <"
		 << HIMR_HeaderInstance_IMGHDR->GASZ
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 76 << "] "<< "\t Image compression (RWMD)\t <"
		 << HIMR_HeaderInstance_IMGHDR->RWMD
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 77 << "] "<< "\t spare (YOBI)\t <"
		 << HIMR_HeaderInstance_IMGHDR->YOBI
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 78 << "] "<< "\t Process code (PRCD)\t <"
		 << HIMR_HeaderInstance_IMGHDR->PRCD
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 80 << "] "<< "\t Mode (open) (MODE)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MODE
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 82 << "] "<< "\t Frame number (FRAM)\t <"
		 << HIMR_HeaderInstance_IMGHDR->FRAM
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 84 << "] "<< "\t Number of divisions (BUNK)\t <"
		 << HIMR_HeaderInstance_IMGHDR->BUNK
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 86 << "] "<< "\t Section number (SECT)\t <"
		 << HIMR_HeaderInstance_IMGHDR->SECT
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 88 << "] "<< "\t - (DMW6)\t <"
		 << HIMR_HeaderInstance_IMGHDR->DMW6
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 90 << "] "<< "\t Provisionally assigned record (KMMR)\t <"
		 << HIMR_HeaderInstance_IMGHDR->KMMR
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 92 << "] "<< "\t Trimmed end frame (EFRA)\t <"
		 << HIMR_HeaderInstance_IMGHDR->EFRA
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 94 << "] "<< "\t - (DMW9)\t <"
		 << HIMR_HeaderInstance_IMGHDR->DMW9
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 96 << "] "<< "\t - (DMWA)\t <"
		 << HIMR_HeaderInstance_IMGHDR->DMWA
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 98 << "] "<< "\t Return status (RETS)\t <"
		 << HIMR_HeaderInstance_IMGHDR->RETS
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 100 << "] "<< "\t System ID (XISYS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISYS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 104 << "] "<< "\t Version number (XIVN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIVN)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 108 << "] "<< "\t Data kind (XIKND)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIKND)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIKND),"I",1)==0) (*log) << "\t\t 'I' = Image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIKND),"R",1)==0) (*log) << "\t\t 'R' = Raw data\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 109 << "] "<< "\t Scanogram code (XISCAN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCAN)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCAN),"S",1)==0) (*log) << "\t\t 'S' = Scanogram\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCAN),"C",1)==0) (*log) << "\t\t 'C' = Normal scan image\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 110 << "] "<< "\t Pulse sequence (MISQ)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MISQ)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISQ),"SR",2)==0) (*log) << "\t\t 'SR' = SR sequence (same as SE)\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISQ),"SE",2)==0) (*log) << "\t\t 'SE' = Spin echo\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISQ),"IR",2)==0) (*log) << "\t\t 'IR' = Inversion recovery\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISQ),"GE",2)==0) (*log) << "\t\t 'GE' = Gradient echo\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISQ),"GR",2)==0) (*log) << "\t\t 'GR' = Gradient echo with rephasing\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 112 << "] "<< "\t Image data type (MIITYP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIITYP)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIITYP),"A",1)==0) (*log) << "\t\t 'A' = Absolute value image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIITYP),"R",1)==0) (*log) << "\t\t 'R' = Real part image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIITYP),"I",1)==0) (*log) << "\t\t 'I' = Imaginary part image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIITYP),"P",1)==0) (*log) << "\t\t 'P' = Phase image\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 113 << "] "<< "\t Calculation image (MICAL)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MICAL)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MICAL),"0",1)==0) (*log) << "\t\t '0' = Proton density image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MICAL),"1",1)==0) (*log) << "\t\t '1' = T1 value image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MICAL),"2",1)==0) (*log) << "\t\t '2' = T2 value image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MICAL)," ",1)==0) (*log) << "\t\t ' ' = Normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 114 << "] "<< "\t Subtraction image (XISUB)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISUB)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISUB),"S",1)==0) (*log) << "\t\t 'S' = Subtraction image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISUB)," ",1)==0) (*log) << "\t\t ' ' = Normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 115 << "] "<< "\t Synthesized image (MISYN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MISYN)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISYN),"S",1)==0) (*log) << "\t\t 'S' = Synthesized image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISYN)," ",1)==0) (*log) << "\t\t ' ' = Normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 116 << "] "<< "\t Analysis image (3D display etc.) (MIANA)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIANA)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIANA),"A",1)==0) (*log) << "\t\t 'A' = Analysis image\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIANA)," ",1)==0) (*log) << "\t\t ' ' = Normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 117 << "] "<< "\t spare (XIY3)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIY3)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 118 << "] "<< "\t Image kind code (MIICLS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIICLS)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIICLS),"R ",2)==0) (*log) << "\t\t 'R ' = Image with rephasing\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIICLS),"TF",2)==0) (*log) << "\t\t 'TF' = Image of TOF angiography\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 120 << "] "<< "\t Image compression code (1 to 6) (XIPRS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPRS)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPRS)," ",1)==0) (*log) << "\t\t ' ' = normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 121 << "] "<< "\t Orientation indication for MPR (R,L,A,P) (XIY61)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIY61)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 122 << "] "<< "\t System type (XISYTP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISYTP)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISYTP),"MR70",4)==0) (*log) << "\t\t 'MR70' = MRP7000\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISYTP),"MR20",4)==0) (*log) << "\t\t 'MR20' = MRP20\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 126 << "] "<< "\t spare (XIY64)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIY64)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 128 << "] "<< "\t Hospital name (XIHP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIHP)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 148 << "] "<< "\t Patients name (XINM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XINM)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 174 << "] "<< "\t Patients ID number (XIPN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPN)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 183 << "] "<< "\t spare (XIY7)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIY7)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 184 << "] "<< "\t Slice number (XISN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISN)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 188 << "] "<< "\t Slice kind (for display) (XIAB)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIAB)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIAB),"H",1)==0) (*log) << "\t\t 'H' = Cardiac gate\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIAB),"R",1)==0) (*log) << "\t\t 'R' = Respiratory gate\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIAB),"T",1)==0) (*log) << "\t\t 'T' = 3D display\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIAB),"W",1)==0) (*log) << "\t\t 'W' = Contour image for 3D display\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIAB),"A",1)==0) (*log) << "\t\t 'A' = Angiogram\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIAB),"M",1)==0) (*log) << "\t\t 'M' = MPR image\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 189 << "] "<< "\t Patients sex (XISX)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISX)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 190 << "] "<< "\t Birthday year (XIBYY)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIBYY)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 192 << "] "<< "\t Birthday month (XIBMM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIBMM)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 194 << "] "<< "\t Birthday day (XIBDD)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIBDD)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 196 << "] "<< "\t Exam year (XIYY)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIYY)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 198 << "] "<< "\t Exam month (XIMM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIMM)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 200 << "] "<< "\t Exam day (XIDD)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIDD)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 202 << "] "<< "\t Hours (hours) (XITH)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XITH)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 204 << "] "<< "\t Hours (minutes) (XITM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XITM)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 206 << "] "<< "\t Hours (seconds) (XITS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XITS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 208 << "] "<< "\t Stopwatch (hours) (XISTH)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISTH)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 210 << "] "<< "\t Stopwatch (minutes) (XISTM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISTM)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 212 << "] "<< "\t Stopwatch (seconds) (XISTS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISTS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 214 << "] "<< "\t Slice thickness (mm) (XISLS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISLS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 218 << "] "<< "\t TR (ms) (XITR)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XITR)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 222 << "] "<< "\t Stopwatch designation (XIST)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIST)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIST),"S",1)==0) (*log) << "\t\t 'S' = yes\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIST)," ",1)==0) (*log) << "\t\t ' ' = no\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 223 << "] "<< "\t Use of contrast media (XICM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICM)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XICM),"C",1)==0) (*log) << "\t\t 'C' = yes\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XICM)," ",1)==0) (*log) << "\t\t ' ' = no\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 224 << "] "<< "\t TE (ms) (MITE)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MITE)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 227 << "] "<< "\t Scan direction code (MISNDRCT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MISNDRCT)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 228 << "] "<< "\t TI (ms) (MITI)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MITI)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 231 << "] "<< "\t Image rotation state code (XIIROT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIIROT)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIIROT)," ",1)==0) (*log) << "\t\t ' ' = initial\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIIROT),"0",1)==0) (*log) << "\t\t '0' = during processing\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIIROT),"1",1)==0) (*log) << "\t\t '1' = during processing\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIIROT),"2",1)==0) (*log) << "\t\t '2' = during processing\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIIROT),"3",1)==0) (*log) << "\t\t '3' = during processing\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 232 << "] "<< "\t Slice position (0.1mm) (XIPOS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPOS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 256 << "] "<< "\t Number of multislices (MIMSMAX)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIMSMAX)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 259 << "] "<< "\t Number of multiechoes (MIMEMAX)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIMEMAX)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 260 << "] "<< "\t Multislices number (MIMS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIMS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 263 << "] "<< "\t Multiecho number (MIME)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIME)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 264 << "] "<< "\t Reconstruction matrix (XIMTX)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIMTX)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 268 << "] "<< "\t Slice plane (MISLPL)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MISLPL)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISLPL),"S",1)==0) (*log) << "\t\t 'S' = Sagittal\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISLPL),"C",1)==0) (*log) << "\t\t 'C' = Coronal\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MISLPL),"T",1)==0) (*log) << "\t\t 'T' = Transverse\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 269 << "] "<< "\t Oblique flag (MIOBL)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIOBL)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIOBL)," ",1)==0) (*log) << "\t\t ' ' = Non oblique\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIOBL),"1",1)==0) (*log) << "\t\t '1' = Single oblique\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIOBL),"2",1)==0) (*log) << "\t\t '2' = Double oblique\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 270 << "] "<< "\t Oblique flag (XIRL)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIRL)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIRL)," ",1)==0) (*log) << "\t\t ' ' = Not transverse\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIRL),"L",1)==0) (*log) << "\t\t 'L' = Right of image is left of patient\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIRL),"R",1)==0) (*log) << "\t\t 'R' = Right of image is right of patient\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 271 << "] "<< "\t Display direction of head image (XIHVIW)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIHVIW)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIHVIW),"H",1)==0) (*log) << "\t\t 'H' = Toward head (top view)\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIHVIW),"B",1)==0) (*log) << "\t\t 'B' = Toward foot (bottom view)\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 272 << "] "<< "\t Patient inserting direction (XIPSD)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPSD)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPSD),"HF",2)==0) (*log) << "\t\t 'HF' = Head first\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPSD),"FF",2)==0) (*log) << "\t\t 'FF' = Feet first\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 274 << "] "<< "\t Patient position (XIPSP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPSP)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPSP),"S ",2)==0) (*log) << "\t\t 'S ' = Supine\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPSP),"P ",2)==0) (*log) << "\t\t 'P ' = Prone\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPSP),"LD",2)==0) (*log) << "\t\t 'LD' = Left decubitus\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XIPSP),"RD",2)==0) (*log) << "\t\t 'RD' = Right decubitus\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 276 << "] "<< "\t Comment in 1st line (XICMT1)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICMT1)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 302 << "] "<< "\t Comment in 2nd line (XICMT2)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICMT2)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 328 << "] "<< "\t Comment in 3rd line (XICMT3)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICMT3)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 354 << "] "<< "\t Comment in 4th line (XICMT4)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICMT4)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 380 << "] "<< "\t Comment in 5th line (XICMT5)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICMT5)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 406 << "] "<< "\t Protocol Number 1st digit (Sequence) (XIPROTS)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPROTS)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 407 << "] "<< "\t Protocol Number 2nd digit (Region) (XIPROTR)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIPROTR)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 408 << "] "<< "\t Protocol upper window level (XIPUL)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIPUL
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 410 << "] "<< "\t Protocol upper window width (XIPUW)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIPUW
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 412 << "] "<< "\t Protocol lower window level (XIPLL)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIPLL
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 414 << "] "<< "\t Protocol lower window width (XIPLW)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIPLW
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 416 << "] "<< "\t Original image pixel size X in um (XIPSX)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIPSX
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 418 << "] "<< "\t Original image pixel size Y in um (XIPSY)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIPSY
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 420 << "] "<< "\t Magnification factor x1000 (XIMAG)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIMAG
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 422 << "] "<< "\t X direction mag center deviation (in 512 matrix, x16) (XIZCNX)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIZCNX
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 424 << "] "<< "\t Y direction mag center deviation (in 512 matrix, x16) (XIZCNY)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIZCNY
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 426 << "] "<< "\t Edge enhancement (XISHAP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISHAP)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISHAP),"+ ",2)==0) (*log) << "\t\t '+ ' = Enhancement\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISHAP),"- ",2)==0) (*log) << "\t\t '- ' = Smoothing\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 428 << "] "<< "\t Display field of view (XIDFOV)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIDFOV)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 432 << "] "<< "\t spare (XILNNO)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XILNNO)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 433 << "] "<< "\t scan line display class (XILNDP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XILNDP)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XILNDP),"T",1)==0) (*log) << "\t\t 'T' = slice position\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XILNDP),"N",1)==0) (*log) << "\t\t 'N' = slice number\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 434 << "] "<< "\t Start slice position (XISPO)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISPO)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 736 << "] "<< "\t Center frequency (END) (MIFREQOE)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIFREQOE
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 740 << "] "<< "\t Sample time (ms) (MISMPLTM)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISMPLTM
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 742 << "] "<< "\t 1st select slice number (XISCSN1)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCSN1)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 746 << "] "<< "\t 2nd select slice number (XISCSN2)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCSN2)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 750 << "] "<< "\t 1st select slice flag (XISCANO1)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO1)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO1),"A",1)==0) (*log) << "\t\t 'A' = yes\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO1),"N",1)==0) (*log) << "\t\t 'N' = no\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 751 << "] "<< "\t 2nd select slice flag (XISCANO2)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO2)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO2),"A",1)==0) (*log) << "\t\t 'A' = yes\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO2),"N",1)==0) (*log) << "\t\t 'N' = no\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 824 << "] "<< "\t Slice number of positioning image (XISCSN)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCSN)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 826 << "] "<< "\t Execution of positioning (XISCANO)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO),"A",1)==0) (*log) << "\t\t 'A' = yes\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XISCANO),"N",1)==0) (*log) << "\t\t 'N' = no\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 827 << "] "<< "\t Number of signals averaged (NSA) (MIAVG)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIAVG
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 828 << "] "<< "\t Center frequency (Hz) (MIFREQO)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIFREQO
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 832 << "] "<< "\t Value of variable capacitance (MIVRCAP)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIVRCAP
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 834 << "] "<< "\t X gradient field strength	 (MIGX)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIGX
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 836 << "] "<< "\t Y gradient field strength	 (MIGY)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIGY
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 838 << "] "<< "\t Z gradient field strength	 (MIGZ)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIGZ
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 840 << "] "<< "\t Number of bit shifts for 2DFT	 (MISHIFT)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISHIFT
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 842 << "] "<< "\t Frequency encoding direction (MIENCD)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIENCD)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIENCD),"AP",2)==0) (*log) << "\t\t 'AP' = anterior-posterior\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIENCD),"HF",2)==0) (*log) << "\t\t 'HF' = head-feet\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIENCD),"RL",2)==0) (*log) << "\t\t 'RL' = right-left\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 844 << "] "<< "\t Number of samples (frequency)	 (MISMPL)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISMPL
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 846 << "] "<< "\t Number of projections (phase)	 (MIPROJ)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIPROJ
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 848 << "] "<< "\t Signal attenuation (dB)	 (MIGAIN)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIGAIN
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 850 << "] "<< "\t Static field strength (0.01T)	 (MIBO)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIBO
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 852 << "] "<< "\t Cardiac gated image (XICCT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICCT)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XICCT),"1",1)==0) (*log) << "\t\t '1' = cardiac gated\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->XICCT)," ",1)==0) (*log) << "\t\t ' ' = normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 853 << "] "<< "\t Heart rate beats per minute (MIBPM)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIBPM
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 854 << "] "<< "\t Delay time from R-wave (MIECGDL)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIECGDL
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 856 << "] "<< "\t spare (XICOMNT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XICOMNT)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 951 << "] "<< "\t R-L RVSL, CLKW (XIY11)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIY11)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 952 << "] "<< "\t Used receiver coil (MICOIL)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MICOIL)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 954 << "] "<< "\t Flip angle (MIFLANG)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIFLANG
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 956 << "] "<< "\t Number of noise elimination data (MINECNT)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MINECNT
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 958 << "] "<< "\t Slice encoding GC (MIGS)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIGS
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 960 << "] "<< "\t Rectangular FOV size (phase encoding direction) 256 equals to XIFOV (MIVFSIZE)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIVFSIZE
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 962 << "] "<< "\t Rectangular FOV execution code (1-6 is rectangular scan) (MIVFFG)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIVFFG
		 << ">\n";
	if (HIMR_HeaderInstance_IMGHDR->MIVFFG == 0) (*log) << "\t\t\t 0 = Normal\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 963 << "] "<< "\t Auto window process scan (MIAWSET)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIAWSET)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIAWSET)," ",1)==0) (*log) << "\t\t ' ' = no\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIAWSET),"1",1)==0) (*log) << "\t\t '1' = yes\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 964 << "] "<< "\t Auto window scan (MIAWGAIN)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIAWGAIN
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 966 << "] "<< "\t Original number of projection effective in rectangular FOV (MIVFOPRJ)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIVFOPRJ
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 968 << "] "<< "\t 3D acquisition (MI3D)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MI3D)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MI3D),"0",1)==0) (*log) << "\t\t '0' = no\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MI3D),"1",1)==0) (*log) << "\t\t '1' = yes\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 969 << "] "<< "\t Number of bit shifts for FFT of slice encoding (MI3DSFT)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MI3DSFT
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 970 << "] "<< "\t Multislab number (MISLAB)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISLAB
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 971 << "] "<< "\t Number of multislabs (MISLABMX)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISLABMX
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 972 << "] "<< "\t Sequence number (MISQNO)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISQNO
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 973 << "] "<< "\t Sequence code (MISQCODE)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISQCODE
		 << ">\n";
	if (HIMR_HeaderInstance_IMGHDR->MISQCODE == 1) (*log) << "\t\t\t 1 = with rephasing pulse\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 974 << "] "<< "\t Rejection sequnec time (ms) (MIRJCTM)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIRJCTM
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 975 << "] "<< "\t Number of gate counts effective in cardiac gate image (MIECGGT)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIECGGT
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 976 << "] "<< "\t Respiratory gating (MIRESP)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIRESP)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIRESP),"I",1)==0) (*log) << "\t\t 'I' = inspiration\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIRESP),"E",1)==0) (*log) << "\t\t 'E' = expiration\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 977 << "] "<< "\t Number of pre-saturation pulses (MIPSATNO)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIPSATNO
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 978 << "] "<< "\t Scan time (ms) (MISCANTM)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MISCANTM
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 982 << "] "<< "\t Name of receiver coil (MICILNAM)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MICILNAM)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 998 << "] "<< "\t Signal attenuation for double RF receiver line (dB) (MIRFATT)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIRFATT)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 999 << "] "<< "\t Selection of RF receiver line (MIRFLINE)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIRFLINE)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1000 << "] "<< "\t Rotation direction of angiogram (MIAGHV)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->MIAGHV)
		 << ">\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIAGHV),"H",1)==0) (*log) << "\t\t 'H' = horizontal\n";
	if (strncmp(String_Use(HIMR_HeaderInstance_IMGHDR->MIAGHV),"V",1)==0) (*log) << "\t\t 'V' = vertical\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1001 << "] "<< "\t Half scan flag (MIHFFG)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIHFFG
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1002 << "] "<< "\t NSA (before rectangular) (MIVFOAVG)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIVFOAVG
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1003 << "] "<< "\t spare (MIYOBI)\t <"
		 << HIMR_HeaderInstance_IMGHDR->MIYOBI
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1004 << "] "<< "\t Patient ID (16 digits) (XIFD16)\t <"
		 << String_Use(HIMR_HeaderInstance_IMGHDR->XIFD16)
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1020 << "] "<< "\t Window level (XIWL1)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIWL1
		 << ">\n";
	(*log)	 << "[" << HIMR_Offset_IMGHDR_ptr << ":" << 1022 << "] "<< "\t Window width (XIWW1)\t <"
		 << HIMR_HeaderInstance_IMGHDR->XIWW1
		 << ">\n";
}

