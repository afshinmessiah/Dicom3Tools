// Automatically generated from template - EDITS WILL BE LOST

// Generated by iodcomp.awk with options build iodcompb

#ifndef __Header_iodcompb__
#define __Header_iodcompb__

CompositeIOD_CRImage::CompositeIOD_CRImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	CRSeries = new Module_CRSeries(list,SeriesIE);
	Assert(CRSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	CRImage = new Module_CRImage(list,ImageIE);
	Assert(CRImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,ImageIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_CTImage::CompositeIOD_CTImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePlane = new Module_ImagePlane(list,ImageIE);
	Assert(ImagePlane);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	CTImage = new Module_CTImage(list,ImageIE);
	Assert(CTImage);

	if (Condition_IsMultienergyCTAcquisition(list,0,list)) {
		MultienergyCTImage = new Module_MultienergyCTImage(list,ImageIE);
		Assert(MultienergyCTImage);
	}
	else
		MultienergyCTImage=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_MRImage::CompositeIOD_MRImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePlane = new Module_ImagePlane(list,ImageIE);
	Assert(ImagePlane);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	MRImage = new Module_MRImage(list,ImageIE);
	Assert(MRImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_NMImage::CompositeIOD_NMImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	NMPETPatientOrientation = new Module_NMPETPatientOrientation(list,SeriesIE);
	Assert(NMPETPatientOrientation);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleAcquisitionContext(list,0,list)) {
		AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
		Assert(AcquisitionContext);
	}
	else
		AcquisitionContext=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	NMImagePixel = new Module_NMImagePixel(list,ImageIE);
	Assert(NMImagePixel);

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	NMMultiFrame = new Module_NMMultiFrame(list,ImageIE);
	Assert(NMMultiFrame);

	NMImage = new Module_NMImage(list,ImageIE);
	Assert(NMImage);

	NMIsotope = new Module_NMIsotope(list,ImageIE);
	Assert(NMIsotope);

	NMDetector = new Module_NMDetector(list,ImageIE);
	Assert(NMDetector);

	if (Condition_NeedModuleNMTomoAcquisition(list,0,list)) {
		NMTomoAcquisition = new Module_NMTomoAcquisition(list,ImageIE);
		Assert(NMTomoAcquisition);
	}
	else
		NMTomoAcquisition=0;

	if (Condition_NeedModuleNMMultiGatedAcquisition(list,0,list)) {
		NMMultiGatedAcquisition = new Module_NMMultiGatedAcquisition(list,ImageIE);
		Assert(NMMultiGatedAcquisition);
	}
	else
		NMMultiGatedAcquisition=0;

	if (Condition_NeedModuleNMPhase(list,0,list)) {
		NMPhase = new Module_NMPhase(list,ImageIE);
		Assert(NMPhase);
	}
	else
		NMPhase=0;

	if (Condition_NeedModuleNMReconstruction(list,0,list)) {
		NMReconstruction = new Module_NMReconstruction(list,ImageIE);
		Assert(NMReconstruction);
	}
	else
		NMReconstruction=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleMultiFrameOverlay(list,0,list)) {
		MultiFrameOverlay = new Module_MultiFrameOverlay(list,ImageIE);
		Assert(MultiFrameOverlay);
	}
	else
		MultiFrameOverlay=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_USImage::CompositeIOD_USImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_PhotometricInterpretationIsPaletteColor(list,0,list)) {
		PaletteColorLookupTable = new Module_PaletteColorLookupTable(list,ImageIE);
		Assert(PaletteColorLookupTable);
	}
	else
		PaletteColorLookupTable=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleUSRegionCalibration(list,0,list)) {
		USRegionCalibration = new Module_USRegionCalibration(list,ImageIE);
		Assert(USRegionCalibration);
	}
	else
		USRegionCalibration=0;

	USImage = new Module_USImage(list,ImageIE);
	Assert(USImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_USMultiFrameImage::CompositeIOD_USMultiFrameImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedModuleSynchronizationForIVUS(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	Cine = new Module_Cine(list,ImageIE);
	Assert(Cine);

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	if (Condition_NeedModuleFramePointers(list,0,list)) {
		FramePointers = new Module_FramePointers(list,ImageIE);
		Assert(FramePointers);
	}
	else
		FramePointers=0;

	if (Condition_PhotometricInterpretationIsPaletteColor(list,0,list)) {
		PaletteColorLookupTable = new Module_PaletteColorLookupTable(list,ImageIE);
		Assert(PaletteColorLookupTable);
	}
	else
		PaletteColorLookupTable=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleUSRegionCalibration(list,0,list)) {
		USRegionCalibration = new Module_USRegionCalibration(list,ImageIE);
		Assert(USRegionCalibration);
	}
	else
		USRegionCalibration=0;

	USImage = new Module_USImage(list,ImageIE);
	Assert(USImage);

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_SCImage::CompositeIOD_SCImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleGeneralEquipment(list,0,list)) {
		GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
		Assert(GeneralEquipment);
	}
	else
		GeneralEquipment=0;

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SCImage = new Module_SCImage(list,ImageIE);
	Assert(SCImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,ImageIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_MultiframeSingleBitSCImage::CompositeIOD_MultiframeSingleBitSCImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleGeneralEquipment(list,0,list)) {
		GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
		Assert(GeneralEquipment);
	}
	else
		GeneralEquipment=0;

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleCineForSC(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	if (Condition_NeedModuleFramePointers(list,0,list)) {
		FramePointers = new Module_FramePointers(list,ImageIE);
		Assert(FramePointers);
	}
	else
		FramePointers=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SCImage = new Module_SCImage(list,ImageIE);
	Assert(SCImage);

	SCMultiFrameImage = new Module_SCMultiFrameImage(list,ImageIE);
	Assert(SCMultiFrameImage);

	if (Condition_NumberOfFramesGreaterThanOne(list,0,list)) {
		SCMultiFrameVector = new Module_SCMultiFrameVector(list,ImageIE);
		Assert(SCMultiFrameVector);
	}
	else
		SCMultiFrameVector=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

	MultiframeSingleBitSCImagePseudo = new Module_MultiframeSingleBitSCImagePseudo(list,ImageIE);
	Assert(MultiframeSingleBitSCImagePseudo);

}

CompositeIOD_MultiframeGrayscaleByteSCImage::CompositeIOD_MultiframeGrayscaleByteSCImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	if (Condition_NeedModuleGeneralEquipment(list,0,list)) {
		GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
		Assert(GeneralEquipment);
	}
	else
		GeneralEquipment=0;

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleCineForSC(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	if (Condition_NeedModuleFramePointers(list,0,list)) {
		FramePointers = new Module_FramePointers(list,ImageIE);
		Assert(FramePointers);
	}
	else
		FramePointers=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_MultiFrameFunctionalGroupsModuleIsPresent(list,0,list)) {
		MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsCommon);
	}
	else
		MultiFrameFunctionalGroupsCommon=0;

	if (Condition_MultiFrameFunctionalGroupsModuleIsPresent(list,0,list)) {
		MultiFrameFunctionalGroupsForMFSC = new Module_MultiFrameFunctionalGroupsForMFSC(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsForMFSC);
	}
	else
		MultiFrameFunctionalGroupsForMFSC=0;

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SCImage = new Module_SCImage(list,ImageIE);
	Assert(SCImage);

	SCMultiFrameImage = new Module_SCMultiFrameImage(list,ImageIE);
	Assert(SCMultiFrameImage);

	if (Condition_NumberOfFramesGreaterThanOne(list,0,list)) {
		SCMultiFrameVector = new Module_SCMultiFrameVector(list,ImageIE);
		Assert(SCMultiFrameVector);
	}
	else
		SCMultiFrameVector=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

	MultiframeGrayscaleByteSCImagePseudo = new Module_MultiframeGrayscaleByteSCImagePseudo(list,ImageIE);
	Assert(MultiframeGrayscaleByteSCImagePseudo);

}

CompositeIOD_MultiframeGrayscaleWordSCImage::CompositeIOD_MultiframeGrayscaleWordSCImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	if (Condition_NeedModuleGeneralEquipment(list,0,list)) {
		GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
		Assert(GeneralEquipment);
	}
	else
		GeneralEquipment=0;

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleCineForSC(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	FramePointers = new Module_FramePointers(list,ImageIE);
	Assert(FramePointers);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_MultiFrameFunctionalGroupsModuleIsPresent(list,0,list)) {
		MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsCommon);
	}
	else
		MultiFrameFunctionalGroupsCommon=0;

	if (Condition_MultiFrameFunctionalGroupsModuleIsPresent(list,0,list)) {
		MultiFrameFunctionalGroupsForMFSC = new Module_MultiFrameFunctionalGroupsForMFSC(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsForMFSC);
	}
	else
		MultiFrameFunctionalGroupsForMFSC=0;

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SCImage = new Module_SCImage(list,ImageIE);
	Assert(SCImage);

	SCMultiFrameImage = new Module_SCMultiFrameImage(list,ImageIE);
	Assert(SCMultiFrameImage);

	if (Condition_NumberOfFramesGreaterThanOne(list,0,list)) {
		SCMultiFrameVector = new Module_SCMultiFrameVector(list,ImageIE);
		Assert(SCMultiFrameVector);
	}
	else
		SCMultiFrameVector=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

	MultiframeGrayscaleWordSCImagePseudo = new Module_MultiframeGrayscaleWordSCImagePseudo(list,ImageIE);
	Assert(MultiframeGrayscaleWordSCImagePseudo);

}

CompositeIOD_MultiframeTrueColorSCImage::CompositeIOD_MultiframeTrueColorSCImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	if (Condition_NeedModuleGeneralEquipment(list,0,list)) {
		GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
		Assert(GeneralEquipment);
	}
	else
		GeneralEquipment=0;

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleCineForSC(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	FramePointers = new Module_FramePointers(list,ImageIE);
	Assert(FramePointers);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_MultiFrameFunctionalGroupsModuleIsPresent(list,0,list)) {
		MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsCommon);
	}
	else
		MultiFrameFunctionalGroupsCommon=0;

	if (Condition_MultiFrameFunctionalGroupsModuleIsPresent(list,0,list)) {
		MultiFrameFunctionalGroupsForMFSC = new Module_MultiFrameFunctionalGroupsForMFSC(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsForMFSC);
	}
	else
		MultiFrameFunctionalGroupsForMFSC=0;

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SCImage = new Module_SCImage(list,ImageIE);
	Assert(SCImage);

	SCMultiFrameImage = new Module_SCMultiFrameImage(list,ImageIE);
	Assert(SCMultiFrameImage);

	if (Condition_NumberOfFramesGreaterThanOne(list,0,list)) {
		SCMultiFrameVector = new Module_SCMultiFrameVector(list,ImageIE);
		Assert(SCMultiFrameVector);
	}
	else
		SCMultiFrameVector=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

	MultiframeTrueColorSCImagePseudo = new Module_MultiframeTrueColorSCImagePseudo(list,ImageIE);
	Assert(MultiframeTrueColorSCImagePseudo);

}

CompositeIOD_StandaloneOverlay::CompositeIOD_StandaloneOverlay(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	OverlayIdentification = new Module_OverlayIdentification(list,OverlayIE);
	Assert(OverlayIdentification);

	OverlayPlane = new Module_OverlayPlane(list,OverlayIE);
	Assert(OverlayPlane);

	SOPCommon = new Module_SOPCommon(list,OverlayIE);
	Assert(SOPCommon);

}

CompositeIOD_StandaloneCurve::CompositeIOD_StandaloneCurve(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	CurveIdentification = new Module_CurveIdentification(list,CurveIE);
	Assert(CurveIdentification);

	Curve = new Module_Curve(list,CurveIE);
	Assert(Curve);

	SOPCommon = new Module_SOPCommon(list,CurveIE);
	Assert(SOPCommon);

}

CompositeIOD_StandaloneModalityLUT::CompositeIOD_StandaloneModalityLUT(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	ModalityLUT = new Module_ModalityLUT(list,ModalityLUTIE);
	Assert(ModalityLUT);

	LUTIdentification = new Module_LUTIdentification(list,ModalityLUTIE);
	Assert(LUTIdentification);

	SOPCommon = new Module_SOPCommon(list,ModalityLUTIE);
	Assert(SOPCommon);

}

CompositeIOD_StandaloneVOILUT::CompositeIOD_StandaloneVOILUT(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	VOILUT = new Module_VOILUT(list,VOILUTIE);
	Assert(VOILUT);

	LUTIdentification = new Module_LUTIdentification(list,VOILUTIE);
	Assert(LUTIdentification);

	SOPCommon = new Module_SOPCommon(list,VOILUTIE);
	Assert(SOPCommon);

}

CompositeIOD_Segmentation::CompositeIOD_Segmentation(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	SegmentationSeries = new Module_SegmentationSeries(list,SeriesIE);
	Assert(SegmentationSeries);

	if (Condition_DerivationImageFunctionalGroupNotPresentOrFrameOfReferenceUIDPresent(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	SegmentationImage = new Module_SegmentationImage(list,ImageIE);
	Assert(SegmentationImage);

	if (Condition_DerivationImageFunctionalGroupPresent(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForSegmentation = new Module_MultiFrameFunctionalGroupsForSegmentation(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForSegmentation);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_SurfaceSegmentation::CompositeIOD_SurfaceSegmentation(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	SegmentationSeries = new Module_SegmentationSeries(list,SeriesIE);
	Assert(SegmentationSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	SurfaceSegmentation = new Module_SurfaceSegmentation(list,SurfaceIE);
	Assert(SurfaceSegmentation);

	SurfaceMesh = new Module_SurfaceMesh(list,SurfaceIE);
	Assert(SurfaceMesh);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,SurfaceIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,SurfaceIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,SurfaceIE);
	Assert(SOPCommon);

}

CompositeIOD_SpatialRegistration::CompositeIOD_SpatialRegistration(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	SpatialRegistrationSeries = new Module_SpatialRegistrationSeries(list,SeriesIE);
	Assert(SpatialRegistrationSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SpatialRegistration = new Module_SpatialRegistration(list,SpatialRegistrationIE);
	Assert(SpatialRegistration);

	CommonInstanceReference = new Module_CommonInstanceReference(list,SpatialRegistrationIE);
	Assert(CommonInstanceReference);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,SpatialRegistrationIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,SpatialRegistrationIE);
	Assert(SOPCommon);

}

CompositeIOD_DeformableSpatialRegistration::CompositeIOD_DeformableSpatialRegistration(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	SpatialRegistrationSeries = new Module_SpatialRegistrationSeries(list,SeriesIE);
	Assert(SpatialRegistrationSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	DeformableSpatialRegistration = new Module_DeformableSpatialRegistration(list,SpatialRegistrationIE);
	Assert(DeformableSpatialRegistration);

	CommonInstanceReference = new Module_CommonInstanceReference(list,SpatialRegistrationIE);
	Assert(CommonInstanceReference);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,SpatialRegistrationIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,SpatialRegistrationIE);
	Assert(SOPCommon);

}

CompositeIOD_SpatialFiducials::CompositeIOD_SpatialFiducials(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	SpatialFiducialsSeries = new Module_SpatialFiducialsSeries(list,SeriesIE);
	Assert(SpatialFiducialsSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SpatialFiducials = new Module_SpatialFiducials(list,SpatialFiducialsIE);
	Assert(SpatialFiducials);

	CommonInstanceReference = new Module_CommonInstanceReference(list,SpatialFiducialsIE);
	Assert(CommonInstanceReference);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,SpatialFiducialsIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,SpatialFiducialsIE);
	Assert(SOPCommon);

}

CompositeIOD_EncapsulatedPDF::CompositeIOD_EncapsulatedPDF(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	EncapsulatedDocumentSeries = new Module_EncapsulatedDocumentSeries(list,SeriesIE);
	Assert(EncapsulatedDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	EncapsulatedDocument = new Module_EncapsulatedDocument(list,EncapsulatedDocumentIE);
	Assert(EncapsulatedDocument);

	EncapsulatedDocumentPDFPseudo = new Module_EncapsulatedDocumentPDFPseudo(list,EncapsulatedDocumentIE);
	Assert(EncapsulatedDocumentPDFPseudo);

	SOPCommon = new Module_SOPCommon(list,EncapsulatedDocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_EncapsulatedCDA::CompositeIOD_EncapsulatedCDA(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	EncapsulatedDocumentSeries = new Module_EncapsulatedDocumentSeries(list,SeriesIE);
	Assert(EncapsulatedDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SCEquipment = new Module_SCEquipment(list,EquipmentIE);
	Assert(SCEquipment);

	EncapsulatedDocument = new Module_EncapsulatedDocument(list,EncapsulatedDocumentIE);
	Assert(EncapsulatedDocument);

	EncapsulatedDocumentCDAPseudo = new Module_EncapsulatedDocumentCDAPseudo(list,EncapsulatedDocumentIE);
	Assert(EncapsulatedDocumentCDAPseudo);

	SOPCommon = new Module_SOPCommon(list,EncapsulatedDocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_EncapsulatedSTL::CompositeIOD_EncapsulatedSTL(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	EncapsulatedDocumentSeries = new Module_EncapsulatedDocumentSeries(list,SeriesIE);
	Assert(EncapsulatedDocumentSeries);

	EncapsulatedDocumentSTLSeriesPseudo = new Module_EncapsulatedDocumentSTLSeriesPseudo(list,SeriesIE);
	Assert(EncapsulatedDocumentSTLSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	EncapsulatedDocument = new Module_EncapsulatedDocument(list,EncapsulatedDocumentIE);
	Assert(EncapsulatedDocument);

	EncapsulatedDocumentSTLPseudo = new Module_EncapsulatedDocumentSTLPseudo(list,EncapsulatedDocumentIE);
	Assert(EncapsulatedDocumentSTLPseudo);

	Manufacturing3DModel = new Module_Manufacturing3DModel(list,EncapsulatedDocumentIE);
	Assert(Manufacturing3DModel);

	SOPCommon = new Module_SOPCommon(list,EncapsulatedDocumentIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,EncapsulatedDocumentIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RealWorldValueMapping::CompositeIOD_RealWorldValueMapping(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	RealWorldValueMappingSeries = new Module_RealWorldValueMappingSeries(list,SeriesIE);
	Assert(RealWorldValueMappingSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RealWorldValueMapping = new Module_RealWorldValueMapping(list,RealWorldValueMappingIE);
	Assert(RealWorldValueMapping);

	CommonInstanceReference = new Module_CommonInstanceReference(list,RealWorldValueMappingIE);
	Assert(CommonInstanceReference);

	SOPCommon = new Module_SOPCommon(list,RealWorldValueMappingIE);
	Assert(SOPCommon);

}

CompositeIOD_IVOCTImage::CompositeIOD_IVOCTImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	IntravascularOCTSeries = new Module_IntravascularOCTSeries(list,SeriesIE);
	Assert(IntravascularOCTSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleSupplementalPaletteColorLUT(list,0,list)) {
		SupplementalPaletteColorLUT = new Module_SupplementalPaletteColorLUT(list,ImageIE);
		Assert(SupplementalPaletteColorLUT);
	}
	else
		SupplementalPaletteColorLUT=0;

	EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
	Assert(EnhancedContrastBolus);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	if (Condition_PresentationIntentTypeIsForPresentation(list,0,list)) {
		MultiFrameFunctionalGroupsForIVOCTImageForPresentation = new Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsForIVOCTImageForPresentation);
	}
	else
		MultiFrameFunctionalGroupsForIVOCTImageForPresentation=0;

	if (Condition_PresentationIntentTypeIsForProcessing(list,0,list)) {
		MultiFrameFunctionalGroupsForIVOCTImageForProcessing = new Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing(list,ImageIE);
		Assert(MultiFrameFunctionalGroupsForIVOCTImageForProcessing);
	}
	else
		MultiFrameFunctionalGroupsForIVOCTImageForProcessing=0;

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	IntravascularOCTImage = new Module_IntravascularOCTImage(list,ImageIE);
	Assert(IntravascularOCTImage);

	IntravascularOCTAcquisitionParameters = new Module_IntravascularOCTAcquisitionParameters(list,ImageIE);
	Assert(IntravascularOCTAcquisitionParameters);

	if (Condition_PresentationIntentTypeIsForProcessing(list,0,list)) {
		IntravascularOCTProcessingParameters = new Module_IntravascularOCTProcessingParameters(list,ImageIE);
		Assert(IntravascularOCTProcessingParameters);
	}
	else
		IntravascularOCTProcessingParameters=0;

	IntravascularImageAcquisitionParameters = new Module_IntravascularImageAcquisitionParameters(list,ImageIE);
	Assert(IntravascularImageAcquisitionParameters);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
	Assert(CommonInstanceReference);

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_ParametricMap::CompositeIOD_ParametricMap(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	ParametricMapSeries = new Module_ParametricMapSeries(list,SeriesIE);
	Assert(ParametricMapSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	if (Condition_PixelDataPresent(list,0,list)) {
		ImagePixel = new Module_ImagePixel(list,ImageIE);
		Assert(ImagePixel);
	}
	else
		ImagePixel=0;

	if (Condition_FloatPixelDataPresent(list,0,list)) {
		FloatingPointImagePixel = new Module_FloatingPointImagePixel(list,ImageIE);
		Assert(FloatingPointImagePixel);
	}
	else
		FloatingPointImagePixel=0;

	if (Condition_DoubleFloatPixelDataPresent(list,0,list)) {
		DoubleFloatingPointImagePixel = new Module_DoubleFloatingPointImagePixel(list,ImageIE);
		Assert(DoubleFloatingPointImagePixel);
	}
	else
		DoubleFloatingPointImagePixel=0;

	ParametricMapImage = new Module_ParametricMapImage(list,ImageIE);
	Assert(ParametricMapImage);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForParametricMap = new Module_MultiFrameFunctionalGroupsForParametricMap(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForParametricMap);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_PixelPresentationIsColorRangeAndPaletteColorLookupTableUIDAbsent(list,0,list)) {
		PaletteColorLookupTable = new Module_PaletteColorLookupTable(list,ImageIE);
		Assert(PaletteColorLookupTable);
	}
	else
		PaletteColorLookupTable=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleBulkMotion(list,0,list)) {
		BulkMotionSynchronization = new Module_BulkMotionSynchronization(list,ImageIE);
		Assert(BulkMotionSynchronization);
	}
	else
		BulkMotionSynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_BasicDirectory::CompositeIOD_BasicDirectory(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	FileSetIdentification = new Module_FileSetIdentification(list,DirectoryIE);
	Assert(FileSetIdentification);

	DirectoryInformation = new Module_DirectoryInformation(list,DirectoryIE);
	Assert(DirectoryInformation);

}

CompositeIOD_BasicDirectoryDental::CompositeIOD_BasicDirectoryDental(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	FileSetIdentification = new Module_FileSetIdentification(list,DirectoryIE);
	Assert(FileSetIdentification);

	DirectoryInformation = new Module_DirectoryInformation(list,DirectoryIE);
	Assert(DirectoryInformation);

	DirectoryInformationDental = new Module_DirectoryInformationDental(list,DirectoryIE);
	Assert(DirectoryInformationDental);

}

CompositeIOD_XAImage::CompositeIOD_XAImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleCine(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	if (Condition_NeedModuleMultiFrame(list,0,list)) {
		MultiFrame = new Module_MultiFrame(list,ImageIE);
		Assert(MultiFrame);
	}
	else
		MultiFrame=0;

	if (Condition_NeedModuleFramePointers(list,0,list)) {
		FramePointers = new Module_FramePointers(list,ImageIE);
		Assert(FramePointers);
	}
	else
		FramePointers=0;

	if (Condition_NeedModuleMask(list,0,list)) {
		Mask = new Module_Mask(list,ImageIE);
		Assert(Mask);
	}
	else
		Mask=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	XRayImage = new Module_XRayImage(list,ImageIE);
	Assert(XRayImage);

	XRayAcquisition = new Module_XRayAcquisition(list,ImageIE);
	Assert(XRayAcquisition);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleXRayTable(list,0,list)) {
		XRayTable = new Module_XRayTable(list,ImageIE);
		Assert(XRayTable);
	}
	else
		XRayTable=0;

	XAPositioner = new Module_XAPositioner(list,ImageIE);
	Assert(XAPositioner);

	if (Condition_NeedModuleDXDetector(list,0,list)) {
		DXDetector = new Module_DXDetector(list,ImageIE);
		Assert(DXDetector);
	}
	else
		DXDetector=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleMultiFrameOverlay(list,0,list)) {
		MultiFrameOverlay = new Module_MultiFrameOverlay(list,ImageIE);
		Assert(MultiFrameOverlay);
	}
	else
		MultiFrameOverlay=0;

	if (Condition_XRayNeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,ImageIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_XRFImage::CompositeIOD_XRFImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleCine(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	if (Condition_NeedModuleMultiFrame(list,0,list)) {
		MultiFrame = new Module_MultiFrame(list,ImageIE);
		Assert(MultiFrame);
	}
	else
		MultiFrame=0;

	if (Condition_NeedModuleFramePointers(list,0,list)) {
		FramePointers = new Module_FramePointers(list,ImageIE);
		Assert(FramePointers);
	}
	else
		FramePointers=0;

	if (Condition_NeedModuleMask(list,0,list)) {
		Mask = new Module_Mask(list,ImageIE);
		Assert(Mask);
	}
	else
		Mask=0;

	XRayImage = new Module_XRayImage(list,ImageIE);
	Assert(XRayImage);

	XRayAcquisition = new Module_XRayAcquisition(list,ImageIE);
	Assert(XRayAcquisition);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleXRayTable(list,0,list)) {
		XRayTable = new Module_XRayTable(list,ImageIE);
		Assert(XRayTable);
	}
	else
		XRayTable=0;

	XRFPositioner = new Module_XRFPositioner(list,ImageIE);
	Assert(XRFPositioner);

	if (Condition_NeedModuleXRayTomographyAcquisitionBasedOnScanOptions(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleDXDetector(list,0,list)) {
		DXDetector = new Module_DXDetector(list,ImageIE);
		Assert(DXDetector);
	}
	else
		DXDetector=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleMultiFrameOverlay(list,0,list)) {
		MultiFrameOverlay = new Module_MultiFrameOverlay(list,ImageIE);
		Assert(MultiFrameOverlay);
	}
	else
		MultiFrameOverlay=0;

	if (Condition_XRayNeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,ImageIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_EnhancedXAImage::CompositeIOD_EnhancedXAImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	XAXRFSeries = new Module_XAXRFSeries(list,SeriesIE);
	Assert(XAXRFSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_CArmPositionerTabletopRelationshipIsYes(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_CArmPositionerTabletopRelationshipIsYes(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleMask(list,0,list)) {
		Mask = new Module_Mask(list,ImageIE);
		Assert(Mask);
	}
	else
		Mask=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedXAImage = new Module_MultiFrameFunctionalGroupsForEnhancedXAImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedXAImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	EnhancedXAXRFImage = new Module_EnhancedXAXRFImage(list,ImageIE);
	Assert(EnhancedXAXRFImage);

	if (Condition_ImageTypeValue1Original(list,0,list)) {
		XAXRFAcquisition = new Module_XAXRFAcquisition(list,ImageIE);
		Assert(XAXRFAcquisition);
	}
	else
		XAXRFAcquisition=0;

	if (Condition_XRayReceptorTypeIsImageIntensifier(list,0,list)) {
		XRayImageIntensifier = new Module_XRayImageIntensifier(list,ImageIE);
		Assert(XRayImageIntensifier);
	}
	else
		XRayImageIntensifier=0;

	if (Condition_XRayReceptorTypeIsDigitalDetector(list,0,list)) {
		XRayDetector = new Module_XRayDetector(list,ImageIE);
		Assert(XRayDetector);
	}
	else
		XRayDetector=0;

	if (Condition_NeedModuleXAXRFMultiFramePresentation(list,0,list)) {
		XAXRFMultiFramePresentation = new Module_XAXRFMultiFramePresentation(list,ImageIE);
		Assert(XAXRFMultiFramePresentation);
	}
	else
		XAXRFMultiFramePresentation=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_EnhancedXRFImage::CompositeIOD_EnhancedXRFImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	XAXRFSeries = new Module_XAXRFSeries(list,SeriesIE);
	Assert(XAXRFSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleMask(list,0,list)) {
		Mask = new Module_Mask(list,ImageIE);
		Assert(Mask);
	}
	else
		Mask=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedXRFImage = new Module_MultiFrameFunctionalGroupsForEnhancedXRFImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedXRFImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	EnhancedXAXRFImage = new Module_EnhancedXAXRFImage(list,ImageIE);
	Assert(EnhancedXAXRFImage);

	if (Condition_ImageTypeValue1Original(list,0,list)) {
		XAXRFAcquisition = new Module_XAXRFAcquisition(list,ImageIE);
		Assert(XAXRFAcquisition);
	}
	else
		XAXRFAcquisition=0;

	if (Condition_XRayReceptorTypeIsImageIntensifier(list,0,list)) {
		XRayImageIntensifier = new Module_XRayImageIntensifier(list,ImageIE);
		Assert(XRayImageIntensifier);
	}
	else
		XRayImageIntensifier=0;

	if (Condition_XRayReceptorTypeIsDigitalDetector(list,0,list)) {
		XRayDetector = new Module_XRayDetector(list,ImageIE);
		Assert(XRayDetector);
	}
	else
		XRayDetector=0;

	if (Condition_NeedModuleXAXRFMultiFramePresentation(list,0,list)) {
		XAXRFMultiFramePresentation = new Module_XAXRFMultiFramePresentation(list,ImageIE);
		Assert(XAXRFMultiFramePresentation);
	}
	else
		XAXRFMultiFramePresentation=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_XRay3DAngiographicImage::CompositeIOD_XRay3DAngiographicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedSeries = new Module_EnhancedSeries(list,SeriesIE);
	Assert(EnhancedSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForXRay3DAngiographicImage = new Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForXRay3DAngiographicImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModulePatientOrientation(list,0,list)) {
		PatientOrientation = new Module_PatientOrientation(list,ImageIE);
		Assert(PatientOrientation);
	}
	else
		PatientOrientation=0;

	if (Condition_NeedModuleImageEquipmentCoordinateRelationship(list,0,list)) {
		ImageEquipmentCoordinateRelationship = new Module_ImageEquipmentCoordinateRelationship(list,ImageIE);
		Assert(ImageEquipmentCoordinateRelationship);
	}
	else
		ImageEquipmentCoordinateRelationship=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	XRay3DImage = new Module_XRay3DImage(list,ImageIE);
	Assert(XRay3DImage);

	if (Condition_NeedModuleXRay3DAngiographicImageContributingSources(list,0,list)) {
		XRay3DAngiographicImageContributingSources = new Module_XRay3DAngiographicImageContributingSources(list,ImageIE);
		Assert(XRay3DAngiographicImageContributingSources);
	}
	else
		XRay3DAngiographicImageContributingSources=0;

	if (Condition_NeedModuleXRay3DAngiographicAcquisition(list,0,list)) {
		XRay3DAngiographicAcquisition = new Module_XRay3DAngiographicAcquisition(list,ImageIE);
		Assert(XRay3DAngiographicAcquisition);
	}
	else
		XRay3DAngiographicAcquisition=0;

	if (Condition_NeedModuleXRay3DReconstruction(list,0,list)) {
		XRay3DReconstruction = new Module_XRay3DReconstruction(list,ImageIE);
		Assert(XRay3DReconstruction);
	}
	else
		XRay3DReconstruction=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_XRay3DCraniofacialImage::CompositeIOD_XRay3DCraniofacialImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedSeries = new Module_EnhancedSeries(list,SeriesIE);
	Assert(EnhancedSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForXRay3DCraniofacialImage = new Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForXRay3DCraniofacialImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModulePatientOrientation(list,0,list)) {
		PatientOrientation = new Module_PatientOrientation(list,ImageIE);
		Assert(PatientOrientation);
	}
	else
		PatientOrientation=0;

	if (Condition_NeedModuleImageEquipmentCoordinateRelationship(list,0,list)) {
		ImageEquipmentCoordinateRelationship = new Module_ImageEquipmentCoordinateRelationship(list,ImageIE);
		Assert(ImageEquipmentCoordinateRelationship);
	}
	else
		ImageEquipmentCoordinateRelationship=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	XRay3DImage = new Module_XRay3DImage(list,ImageIE);
	Assert(XRay3DImage);

	if (Condition_NeedModuleXRay3DCraniofacialImageContributingSources(list,0,list)) {
		XRay3DCraniofacialImageContributingSources = new Module_XRay3DCraniofacialImageContributingSources(list,ImageIE);
		Assert(XRay3DCraniofacialImageContributingSources);
	}
	else
		XRay3DCraniofacialImageContributingSources=0;

	if (Condition_NeedModuleXRay3DCraniofacialAcquisition(list,0,list)) {
		XRay3DCraniofacialAcquisition = new Module_XRay3DCraniofacialAcquisition(list,ImageIE);
		Assert(XRay3DCraniofacialAcquisition);
	}
	else
		XRay3DCraniofacialAcquisition=0;

	if (Condition_NeedModuleXRay3DReconstruction(list,0,list)) {
		XRay3DReconstruction = new Module_XRay3DReconstruction(list,ImageIE);
		Assert(XRay3DReconstruction);
	}
	else
		XRay3DReconstruction=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_PETImage::CompositeIOD_PETImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	PETSeries = new Module_PETSeries(list,SeriesIE);
	Assert(PETSeries);

	PETIsotope = new Module_PETIsotope(list,SeriesIE);
	Assert(PETIsotope);

	if (Condition_NeedModulePETMultigatedAcquisition(list,0,list)) {
		PETMultigatedAcquisition = new Module_PETMultigatedAcquisition(list,SeriesIE);
		Assert(PETMultigatedAcquisition);
	}
	else
		PETMultigatedAcquisition=0;

	NMPETPatientOrientation = new Module_NMPETPatientOrientation(list,SeriesIE);
	Assert(NMPETPatientOrientation);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePlane = new Module_ImagePlane(list,ImageIE);
	Assert(ImagePlane);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	PETImage = new Module_PETImage(list,ImageIE);
	Assert(PETImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleAcquisitionContext(list,0,list)) {
		AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
		Assert(AcquisitionContext);
	}
	else
		AcquisitionContext=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_EnhancedPETImage::CompositeIOD_EnhancedPETImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedPETSeries = new Module_EnhancedPETSeries(list,SeriesIE);
	Assert(EnhancedPETSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedPETImage = new Module_MultiFrameFunctionalGroupsForEnhancedPETImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedPETImage);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedPETIsotope = new Module_EnhancedPETIsotope(list,ImageIE);
	Assert(EnhancedPETIsotope);

	EnhancedPETAcquisition = new Module_EnhancedPETAcquisition(list,ImageIE);
	Assert(EnhancedPETAcquisition);

	EnhancedPETImage = new Module_EnhancedPETImage(list,ImageIE);
	Assert(EnhancedPETImage);

	EnhancedPETCorrections = new Module_EnhancedPETCorrections(list,ImageIE);
	Assert(EnhancedPETCorrections);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_LegacyConvertedEnhancedPETImage::CompositeIOD_LegacyConvertedEnhancedPETImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedPETSeries = new Module_EnhancedPETSeries(list,SeriesIE);
	Assert(EnhancedPETSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage = new Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedPETImage = new Module_EnhancedPETImage(list,ImageIE);
	Assert(EnhancedPETImage);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedPETImage::CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedPETImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedPETSeries = new Module_EnhancedPETSeries(list,SeriesIE);
	Assert(EnhancedPETSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage = new Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedPETImage = new Module_EnhancedPETImage(list,ImageIE);
	Assert(EnhancedPETImage);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_RTImage::CompositeIOD_RTImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleCine(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	if (Condition_NeedModuleMultiFrame(list,0,list)) {
		MultiFrame = new Module_MultiFrame(list,ImageIE);
		Assert(MultiFrame);
	}
	else
		MultiFrame=0;

	RTImage = new Module_RTImage(list,ImageIE);
	Assert(RTImage);

	if (Condition_NeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,ImageIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleApproval(list,0,list)) {
		Approval = new Module_Approval(list,ImageIE);
		Assert(Approval);
	}
	else
		Approval=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_RTDose::CompositeIOD_RTDose(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_DoseDataGridbased(list,0,list)) {
		GeneralImage = new Module_GeneralImage(list,ImageIE);
		Assert(GeneralImage);
	}
	else
		GeneralImage=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	if (Condition_DoseDataGridbased(list,0,list)) {
		ImagePlane = new Module_ImagePlane(list,ImageIE);
		Assert(ImagePlane);
	}
	else
		ImagePlane=0;

	if (Condition_DoseDataGridbased(list,0,list)) {
		ImagePixel = new Module_ImagePixel(list,ImageIE);
		Assert(ImagePixel);
	}
	else
		ImagePixel=0;

	if (Condition_DoseDataGridbasedAndNeedModuleMultiFrame(list,0,list)) {
		MultiFrame = new Module_MultiFrame(list,ImageIE);
		Assert(MultiFrame);
	}
	else
		MultiFrame=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleMultiFrameOverlay(list,0,list)) {
		MultiFrameOverlay = new Module_MultiFrameOverlay(list,ImageIE);
		Assert(MultiFrameOverlay);
	}
	else
		MultiFrameOverlay=0;

	if (Condition_NeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,ImageIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	RTDose = new Module_RTDose(list,ImageIE);
	Assert(RTDose);

	if (Condition_NeedModuleRTDVH(list,0,list)) {
		RTDVH = new Module_RTDVH(list,ImageIE);
		Assert(RTDVH);
	}
	else
		RTDVH=0;

	if (Condition_DoseDataPointsOrCurves(list,0,list)) {
		StructureSet = new Module_StructureSet(list,ImageIE);
		Assert(StructureSet);
	}
	else
		StructureSet=0;

	if (Condition_DoseDataPointsOrCurves(list,0,list)) {
		ROIContour = new Module_ROIContour(list,ImageIE);
		Assert(ROIContour);
	}
	else
		ROIContour=0;

	if (Condition_DoseDataPointsOrCurves(list,0,list)) {
		RTDoseROI = new Module_RTDoseROI(list,ImageIE);
		Assert(RTDoseROI);
	}
	else
		RTDoseROI=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_RTStructureSet::CompositeIOD_RTStructureSet(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	StructureSet = new Module_StructureSet(list,StructureSetIE);
	Assert(StructureSet);

	ROIContour = new Module_ROIContour(list,StructureSetIE);
	Assert(ROIContour);

	RTROIObservations = new Module_RTROIObservations(list,StructureSetIE);
	Assert(RTROIObservations);

	if (Condition_NeedModuleApproval(list,0,list)) {
		Approval = new Module_Approval(list,StructureSetIE);
		Assert(Approval);
	}
	else
		Approval=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,StructureSetIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,StructureSetIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,StructureSetIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RTPlan::CompositeIOD_RTPlan(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RTGeneralPlan = new Module_RTGeneralPlan(list,PlanIE);
	Assert(RTGeneralPlan);

	if (Condition_NeedModuleRTPrescription(list,0,list)) {
		RTPrescription = new Module_RTPrescription(list,PlanIE);
		Assert(RTPrescription);
	}
	else
		RTPrescription=0;

	if (Condition_NeedModuleRTToleranceTables(list,0,list)) {
		RTToleranceTables = new Module_RTToleranceTables(list,PlanIE);
		Assert(RTToleranceTables);
	}
	else
		RTToleranceTables=0;

	if (Condition_NeedModuleRTPatientSetup(list,0,list)) {
		RTPatientSetup = new Module_RTPatientSetup(list,PlanIE);
		Assert(RTPatientSetup);
	}
	else
		RTPatientSetup=0;

	if (Condition_NeedModuleRTFractionScheme(list,0,list)) {
		RTFractionScheme = new Module_RTFractionScheme(list,PlanIE);
		Assert(RTFractionScheme);
	}
	else
		RTFractionScheme=0;

	if (Condition_NeedRTBeams(list,0,list)) {
		RTBeams = new Module_RTBeams(list,PlanIE);
		Assert(RTBeams);
	}
	else
		RTBeams=0;

	if (Condition_NeedRTBrachyApplicationSetups(list,0,list)) {
		RTBrachyApplicationSetups = new Module_RTBrachyApplicationSetups(list,PlanIE);
		Assert(RTBrachyApplicationSetups);
	}
	else
		RTBrachyApplicationSetups=0;

	if (Condition_NeedModuleApproval(list,0,list)) {
		Approval = new Module_Approval(list,PlanIE);
		Assert(Approval);
	}
	else
		Approval=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,PlanIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,PlanIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,PlanIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RTBeamsTreatmentRecord::CompositeIOD_RTBeamsTreatmentRecord(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RTGeneralTreatmentRecord = new Module_RTGeneralTreatmentRecord(list,TreatmentRecordIE);
	Assert(RTGeneralTreatmentRecord);

	if (Condition_NeedModuleRTPatientSetup(list,0,list)) {
		RTPatientSetup = new Module_RTPatientSetup(list,TreatmentRecordIE);
		Assert(RTPatientSetup);
	}
	else
		RTPatientSetup=0;

	RTTreatmentMachineRecord = new Module_RTTreatmentMachineRecord(list,TreatmentRecordIE);
	Assert(RTTreatmentMachineRecord);

	if (Condition_NeedModuleMeasuredDoseReferenceRecord(list,0,list)) {
		MeasuredDoseReferenceRecord = new Module_MeasuredDoseReferenceRecord(list,TreatmentRecordIE);
		Assert(MeasuredDoseReferenceRecord);
	}
	else
		MeasuredDoseReferenceRecord=0;

	if (Condition_NeedModuleCalculatedDoseReferenceRecord(list,0,list)) {
		CalculatedDoseReferenceRecord = new Module_CalculatedDoseReferenceRecord(list,TreatmentRecordIE);
		Assert(CalculatedDoseReferenceRecord);
	}
	else
		CalculatedDoseReferenceRecord=0;

	RTBeamsSessionRecord = new Module_RTBeamsSessionRecord(list,TreatmentRecordIE);
	Assert(RTBeamsSessionRecord);

	if (Condition_NeedModuleRTTreatmentSummaryRecord(list,0,list)) {
		RTTreatmentSummaryRecord = new Module_RTTreatmentSummaryRecord(list,TreatmentRecordIE);
		Assert(RTTreatmentSummaryRecord);
	}
	else
		RTTreatmentSummaryRecord=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,TreatmentRecordIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,TreatmentRecordIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,TreatmentRecordIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RTBrachyTreatmentRecord::CompositeIOD_RTBrachyTreatmentRecord(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RTGeneralTreatmentRecord = new Module_RTGeneralTreatmentRecord(list,TreatmentRecordIE);
	Assert(RTGeneralTreatmentRecord);

	if (Condition_NeedModuleRTPatientSetup(list,0,list)) {
		RTPatientSetup = new Module_RTPatientSetup(list,TreatmentRecordIE);
		Assert(RTPatientSetup);
	}
	else
		RTPatientSetup=0;

	RTTreatmentMachineRecord = new Module_RTTreatmentMachineRecord(list,TreatmentRecordIE);
	Assert(RTTreatmentMachineRecord);

	if (Condition_NeedModuleMeasuredDoseReferenceRecord(list,0,list)) {
		MeasuredDoseReferenceRecord = new Module_MeasuredDoseReferenceRecord(list,TreatmentRecordIE);
		Assert(MeasuredDoseReferenceRecord);
	}
	else
		MeasuredDoseReferenceRecord=0;

	if (Condition_NeedModuleCalculatedDoseReferenceRecord(list,0,list)) {
		CalculatedDoseReferenceRecord = new Module_CalculatedDoseReferenceRecord(list,TreatmentRecordIE);
		Assert(CalculatedDoseReferenceRecord);
	}
	else
		CalculatedDoseReferenceRecord=0;

	RTBrachySessionRecord = new Module_RTBrachySessionRecord(list,TreatmentRecordIE);
	Assert(RTBrachySessionRecord);

	if (Condition_NeedModuleRTTreatmentSummaryRecord(list,0,list)) {
		RTTreatmentSummaryRecord = new Module_RTTreatmentSummaryRecord(list,TreatmentRecordIE);
		Assert(RTTreatmentSummaryRecord);
	}
	else
		RTTreatmentSummaryRecord=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,TreatmentRecordIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,TreatmentRecordIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,TreatmentRecordIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RTTreatmentSummaryRecord::CompositeIOD_RTTreatmentSummaryRecord(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RTGeneralTreatmentRecord = new Module_RTGeneralTreatmentRecord(list,TreatmentRecordIE);
	Assert(RTGeneralTreatmentRecord);

	if (Condition_NeedModuleRTTreatmentSummaryRecord(list,0,list)) {
		RTTreatmentSummaryRecord = new Module_RTTreatmentSummaryRecord(list,TreatmentRecordIE);
		Assert(RTTreatmentSummaryRecord);
	}
	else
		RTTreatmentSummaryRecord=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,TreatmentRecordIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,TreatmentRecordIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,TreatmentRecordIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RTIonPlan::CompositeIOD_RTIonPlan(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RTGeneralPlan = new Module_RTGeneralPlan(list,PlanIE);
	Assert(RTGeneralPlan);

	if (Condition_NeedModuleRTPrescription(list,0,list)) {
		RTPrescription = new Module_RTPrescription(list,PlanIE);
		Assert(RTPrescription);
	}
	else
		RTPrescription=0;

	if (Condition_NeedModuleRTIonToleranceTables(list,0,list)) {
		RTIonToleranceTables = new Module_RTIonToleranceTables(list,PlanIE);
		Assert(RTIonToleranceTables);
	}
	else
		RTIonToleranceTables=0;

	if (Condition_NeedModuleRTPatientSetup(list,0,list)) {
		RTPatientSetup = new Module_RTPatientSetup(list,PlanIE);
		Assert(RTPatientSetup);
	}
	else
		RTPatientSetup=0;

	if (Condition_NeedModuleRTFractionScheme(list,0,list)) {
		RTFractionScheme = new Module_RTFractionScheme(list,PlanIE);
		Assert(RTFractionScheme);
	}
	else
		RTFractionScheme=0;

	if (Condition_NeedRTIonBeams(list,0,list)) {
		RTIonBeams = new Module_RTIonBeams(list,PlanIE);
		Assert(RTIonBeams);
	}
	else
		RTIonBeams=0;

	if (Condition_NeedModuleApproval(list,0,list)) {
		Approval = new Module_Approval(list,PlanIE);
		Assert(Approval);
	}
	else
		Approval=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,PlanIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,PlanIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,PlanIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_RTIonBeamsTreatmentRecord::CompositeIOD_RTIonBeamsTreatmentRecord(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	RTSeries = new Module_RTSeries(list,SeriesIE);
	Assert(RTSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	RTGeneralTreatmentRecord = new Module_RTGeneralTreatmentRecord(list,TreatmentRecordIE);
	Assert(RTGeneralTreatmentRecord);

	if (Condition_NeedModuleRTPatientSetup(list,0,list)) {
		RTPatientSetup = new Module_RTPatientSetup(list,TreatmentRecordIE);
		Assert(RTPatientSetup);
	}
	else
		RTPatientSetup=0;

	RTTreatmentMachineRecord = new Module_RTTreatmentMachineRecord(list,TreatmentRecordIE);
	Assert(RTTreatmentMachineRecord);

	if (Condition_NeedModuleMeasuredDoseReferenceRecord(list,0,list)) {
		MeasuredDoseReferenceRecord = new Module_MeasuredDoseReferenceRecord(list,TreatmentRecordIE);
		Assert(MeasuredDoseReferenceRecord);
	}
	else
		MeasuredDoseReferenceRecord=0;

	if (Condition_NeedModuleCalculatedDoseReferenceRecord(list,0,list)) {
		CalculatedDoseReferenceRecord = new Module_CalculatedDoseReferenceRecord(list,TreatmentRecordIE);
		Assert(CalculatedDoseReferenceRecord);
	}
	else
		CalculatedDoseReferenceRecord=0;

	RTIonBeamsSessionRecord = new Module_RTIonBeamsSessionRecord(list,TreatmentRecordIE);
	Assert(RTIonBeamsSessionRecord);

	if (Condition_NeedModuleRTTreatmentSummaryRecord(list,0,list)) {
		RTTreatmentSummaryRecord = new Module_RTTreatmentSummaryRecord(list,TreatmentRecordIE);
		Assert(RTTreatmentSummaryRecord);
	}
	else
		RTTreatmentSummaryRecord=0;

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,TreatmentRecordIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	SOPCommon = new Module_SOPCommon(list,TreatmentRecordIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,TreatmentRecordIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_DXImageForProcessing::CompositeIOD_DXImageForProcessing(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_DXImageForPresentation::CompositeIOD_DXImageForPresentation(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_MammographyImageForProcessing::CompositeIOD_MammographyImageForProcessing(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	MammographySeries = new Module_MammographySeries(list,SeriesIE);
	Assert(MammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	MammographyImage = new Module_MammographyImage(list,ImageIE);
	Assert(MammographyImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_MammographyImageForPresentation::CompositeIOD_MammographyImageForPresentation(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	MammographySeries = new Module_MammographySeries(list,SeriesIE);
	Assert(MammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	MammographyImage = new Module_MammographyImage(list,ImageIE);
	Assert(MammographyImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_MammographyImageForProcessingIHEMammo::CompositeIOD_MammographyImageForProcessingIHEMammo(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	MammographySeries = new Module_MammographySeries(list,SeriesIE);
	Assert(MammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	MammographyImage = new Module_MammographyImage(list,ImageIE);
	Assert(MammographyImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	IHEMammoProfile = new Module_IHEMammoProfile(list,ImageIE);
	Assert(IHEMammoProfile);

	IHEMammoProfileWithoutPartialViewOption = new Module_IHEMammoProfileWithoutPartialViewOption(list,ImageIE);
	Assert(IHEMammoProfileWithoutPartialViewOption);

}

CompositeIOD_MammographyImageForProcessingIHEMammoPartialViewOption::CompositeIOD_MammographyImageForProcessingIHEMammoPartialViewOption(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	MammographySeries = new Module_MammographySeries(list,SeriesIE);
	Assert(MammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	MammographyImage = new Module_MammographyImage(list,ImageIE);
	Assert(MammographyImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	IHEMammoProfile = new Module_IHEMammoProfile(list,ImageIE);
	Assert(IHEMammoProfile);

	IHEMammoProfileWithPartialViewOption = new Module_IHEMammoProfileWithPartialViewOption(list,ImageIE);
	Assert(IHEMammoProfileWithPartialViewOption);

}

CompositeIOD_MammographyImageForPresentationIHEMammo::CompositeIOD_MammographyImageForPresentationIHEMammo(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	MammographySeries = new Module_MammographySeries(list,SeriesIE);
	Assert(MammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	MammographyImage = new Module_MammographyImage(list,ImageIE);
	Assert(MammographyImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	IHEMammoProfile = new Module_IHEMammoProfile(list,ImageIE);
	Assert(IHEMammoProfile);

	IHEMammoProfileWithoutPartialViewOption = new Module_IHEMammoProfileWithoutPartialViewOption(list,ImageIE);
	Assert(IHEMammoProfileWithoutPartialViewOption);

	IHEMammoProfileForPresentationOnly = new Module_IHEMammoProfileForPresentationOnly(list,ImageIE);
	Assert(IHEMammoProfileForPresentationOnly);

}

CompositeIOD_MammographyImageForPresentationIHEMammoPartialViewOption::CompositeIOD_MammographyImageForPresentationIHEMammoPartialViewOption(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	MammographySeries = new Module_MammographySeries(list,SeriesIE);
	Assert(MammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	MammographyImage = new Module_MammographyImage(list,ImageIE);
	Assert(MammographyImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	IHEMammoProfile = new Module_IHEMammoProfile(list,ImageIE);
	Assert(IHEMammoProfile);

	IHEMammoProfileWithPartialViewOption = new Module_IHEMammoProfileWithPartialViewOption(list,ImageIE);
	Assert(IHEMammoProfileWithPartialViewOption);

	IHEMammoProfileForPresentationOnly = new Module_IHEMammoProfileForPresentationOnly(list,ImageIE);
	Assert(IHEMammoProfileForPresentationOnly);

}

CompositeIOD_IntraoralImageForProcessing::CompositeIOD_IntraoralImageForProcessing(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	IntraoralSeries = new Module_IntraoralSeries(list,SeriesIE);
	Assert(IntraoralSeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	IntraoralImage = new Module_IntraoralImage(list,ImageIE);
	Assert(IntraoralImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_IntraoralImageForPresentation::CompositeIOD_IntraoralImageForPresentation(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	IntraoralSeries = new Module_IntraoralSeries(list,SeriesIE);
	Assert(IntraoralSeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	IntraoralImage = new Module_IntraoralImage(list,ImageIE);
	Assert(IntraoralImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

}

CompositeIOD_IntraoralImageForPresentationDentalMedia::CompositeIOD_IntraoralImageForPresentationDentalMedia(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	IntraoralSeries = new Module_IntraoralSeries(list,SeriesIE);
	Assert(IntraoralSeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	IntraoralImage = new Module_IntraoralImage(list,ImageIE);
	Assert(IntraoralImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	DentalImageOnMediaProfile = new Module_DentalImageOnMediaProfile(list,ImageIE);
	Assert(DentalImageOnMediaProfile);

}

CompositeIOD_DXImageForPresentationDentalMedia::CompositeIOD_DXImageForPresentationDentalMedia(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,ImageIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	DXAnatomyImaged = new Module_DXAnatomyImaged(list,ImageIE);
	Assert(DXAnatomyImaged);

	DXImage = new Module_DXImage(list,ImageIE);
	Assert(DXImage);

	DXDetector = new Module_DXDetector(list,ImageIE);
	Assert(DXDetector);

	if (Condition_NeedModuleXRayCollimator(list,0,list)) {
		XRayCollimator = new Module_XRayCollimator(list,ImageIE);
		Assert(XRayCollimator);
	}
	else
		XRayCollimator=0;

	if (Condition_NeedModuleDXPositioning(list,0,list)) {
		DXPositioning = new Module_DXPositioning(list,ImageIE);
		Assert(DXPositioning);
	}
	else
		DXPositioning=0;

	if (Condition_NeedToCheckModuleXRayTomographyAcquisition(list,0,list)) {
		XRayTomographyAcquisition = new Module_XRayTomographyAcquisition(list,ImageIE);
		Assert(XRayTomographyAcquisition);
	}
	else
		XRayTomographyAcquisition=0;

	if (Condition_NeedModuleXRayAcquisitionDose(list,0,list)) {
		XRayAcquisitionDose = new Module_XRayAcquisitionDose(list,ImageIE);
		Assert(XRayAcquisitionDose);
	}
	else
		XRayAcquisitionDose=0;

	if (Condition_NeedModuleXRayGeneration(list,0,list)) {
		XRayGeneration = new Module_XRayGeneration(list,ImageIE);
		Assert(XRayGeneration);
	}
	else
		XRayGeneration=0;

	if (Condition_NeedModuleXRayFiltration(list,0,list)) {
		XRayFiltration = new Module_XRayFiltration(list,ImageIE);
		Assert(XRayFiltration);
	}
	else
		XRayFiltration=0;

	if (Condition_NeedModuleXRayGrid(list,0,list)) {
		XRayGrid = new Module_XRayGrid(list,ImageIE);
		Assert(XRayGrid);
	}
	else
		XRayGrid=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_DXNeedModuleVOILUT(list,0,list)) {
		VOILUT = new Module_VOILUT(list,ImageIE);
		Assert(VOILUT);
	}
	else
		VOILUT=0;

	if (Condition_NeedModuleImageHistogram(list,0,list)) {
		ImageHistogram = new Module_ImageHistogram(list,ImageIE);
		Assert(ImageHistogram);
	}
	else
		ImageHistogram=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	DentalImageOnMediaProfile = new Module_DentalImageOnMediaProfile(list,ImageIE);
	Assert(DentalImageOnMediaProfile);

}

CompositeIOD_BreastTomosynthesisImage::CompositeIOD_BreastTomosynthesisImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedMammographySeries = new Module_EnhancedMammographySeries(list,SeriesIE);
	Assert(EnhancedMammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForBreastTomosynthesisImage = new Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForBreastTomosynthesisImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleImageEquipmentCoordinateRelationship(list,0,list)) {
		ImageEquipmentCoordinateRelationship = new Module_ImageEquipmentCoordinateRelationship(list,ImageIE);
		Assert(ImageEquipmentCoordinateRelationship);
	}
	else
		ImageEquipmentCoordinateRelationship=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	XRay3DImage = new Module_XRay3DImage(list,ImageIE);
	Assert(XRay3DImage);

	if (Condition_NeedModuleBreastTomosynthesisContributingSources(list,0,list)) {
		BreastTomosynthesisContributingSources = new Module_BreastTomosynthesisContributingSources(list,ImageIE);
		Assert(BreastTomosynthesisContributingSources);
	}
	else
		BreastTomosynthesisContributingSources=0;

	if (Condition_NeedModuleBreastTomosynthesisAcquisition(list,0,list)) {
		BreastTomosynthesisAcquisition = new Module_BreastTomosynthesisAcquisition(list,ImageIE);
		Assert(BreastTomosynthesisAcquisition);
	}
	else
		BreastTomosynthesisAcquisition=0;

	if (Condition_NeedModuleXRay3DReconstruction(list,0,list)) {
		XRay3DReconstruction = new Module_XRay3DReconstruction(list,ImageIE);
		Assert(XRay3DReconstruction);
	}
	else
		XRay3DReconstruction=0;

	BreastView = new Module_BreastView(list,ImageIE);
	Assert(BreastView);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_BreastTomosynthesisImageIHEDBT::CompositeIOD_BreastTomosynthesisImageIHEDBT(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedMammographySeries = new Module_EnhancedMammographySeries(list,SeriesIE);
	Assert(EnhancedMammographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForBreastTomosynthesisImage = new Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForBreastTomosynthesisImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleImageEquipmentCoordinateRelationship(list,0,list)) {
		ImageEquipmentCoordinateRelationship = new Module_ImageEquipmentCoordinateRelationship(list,ImageIE);
		Assert(ImageEquipmentCoordinateRelationship);
	}
	else
		ImageEquipmentCoordinateRelationship=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	XRay3DImage = new Module_XRay3DImage(list,ImageIE);
	Assert(XRay3DImage);

	if (Condition_NeedModuleBreastTomosynthesisContributingSources(list,0,list)) {
		BreastTomosynthesisContributingSources = new Module_BreastTomosynthesisContributingSources(list,ImageIE);
		Assert(BreastTomosynthesisContributingSources);
	}
	else
		BreastTomosynthesisContributingSources=0;

	if (Condition_NeedModuleBreastTomosynthesisAcquisition(list,0,list)) {
		BreastTomosynthesisAcquisition = new Module_BreastTomosynthesisAcquisition(list,ImageIE);
		Assert(BreastTomosynthesisAcquisition);
	}
	else
		BreastTomosynthesisAcquisition=0;

	if (Condition_NeedModuleXRay3DReconstruction(list,0,list)) {
		XRay3DReconstruction = new Module_XRay3DReconstruction(list,ImageIE);
		Assert(XRay3DReconstruction);
	}
	else
		XRay3DReconstruction=0;

	BreastView = new Module_BreastView(list,ImageIE);
	Assert(BreastView);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

	IHEDBTProfile = new Module_IHEDBTProfile(list,ImageIE);
	Assert(IHEDBTProfile);

}

CompositeIOD_BreastProjectionXRayImage::CompositeIOD_BreastProjectionXRayImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	DXSeries = new Module_DXSeries(list,SeriesIE);
	Assert(DXSeries);

	EnhancedMammographySeries = new Module_EnhancedMammographySeries(list,SeriesIE);
	Assert(EnhancedMammographySeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	EnhancedMammographyImage = new Module_EnhancedMammographyImage(list,ImageIE);
	Assert(EnhancedMammographyImage);

	BreastView = new Module_BreastView(list,ImageIE);
	Assert(BreastView);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleIntervention(list,0,list)) {
		Intervention = new Module_Intervention(list,ImageIE);
		Assert(Intervention);
	}
	else
		Intervention=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForBreastProjectionXRayImage = new Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForBreastProjectionXRayImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	PatientOrientation = new Module_PatientOrientation(list,ImageIE);
	Assert(PatientOrientation);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_VLEndoscopicImage::CompositeIOD_VLEndoscopicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLEndoscopicSeriesPseudo = new Module_VLEndoscopicSeriesPseudo(list,SeriesIE);
	Assert(VLEndoscopicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_VLMicroscopicImage::CompositeIOD_VLMicroscopicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLMicroscopicSeriesPseudo = new Module_VLMicroscopicSeriesPseudo(list,SeriesIE);
	Assert(VLMicroscopicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	if (Condition_NeedModuleOpticalPath(list,0,list)) {
		OpticalPath = new Module_OpticalPath(list,ImageIE);
		Assert(OpticalPath);
	}
	else
		OpticalPath=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_VLSlideCoordinatesMicroscopicImage::CompositeIOD_VLSlideCoordinatesMicroscopicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLSlideCoordinatesMicroscopicSeriesPseudo = new Module_VLSlideCoordinatesMicroscopicSeriesPseudo(list,SeriesIE);
	Assert(VLSlideCoordinatesMicroscopicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	Specimen = new Module_Specimen(list,ImageIE);
	Assert(Specimen);

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	SlideCoordinates = new Module_SlideCoordinates(list,ImageIE);
	Assert(SlideCoordinates);

	if (Condition_NeedModuleOpticalPath(list,0,list)) {
		OpticalPath = new Module_OpticalPath(list,ImageIE);
		Assert(OpticalPath);
	}
	else
		OpticalPath=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_VLPhotographicImage::CompositeIOD_VLPhotographicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLPhotographicSeriesPseudo = new Module_VLPhotographicSeriesPseudo(list,SeriesIE);
	Assert(VLPhotographicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,ImageIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	CheckSingleFramePseudo = new Module_CheckSingleFramePseudo(list,ImageIE);
	Assert(CheckSingleFramePseudo);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

}

CompositeIOD_VideoEndoscopicImage::CompositeIOD_VideoEndoscopicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLEndoscopicSeriesPseudo = new Module_VLEndoscopicSeriesPseudo(list,SeriesIE);
	Assert(VLEndoscopicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	Cine = new Module_Cine(list,ImageIE);
	Assert(Cine);

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_VideoMicroscopicImage::CompositeIOD_VideoMicroscopicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLMicroscopicSeriesPseudo = new Module_VLMicroscopicSeriesPseudo(list,SeriesIE);
	Assert(VLMicroscopicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	Cine = new Module_Cine(list,ImageIE);
	Assert(Cine);

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_VideoPhotographicImage::CompositeIOD_VideoPhotographicImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VLPhotographicSeriesPseudo = new Module_VLPhotographicSeriesPseudo(list,SeriesIE);
	Assert(VLPhotographicSeriesPseudo);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	Cine = new Module_Cine(list,ImageIE);
	Assert(Cine);

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	VLImage = new Module_VLImage(list,ImageIE);
	Assert(VLImage);

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_OphthalmicPhotography8BitImage::CompositeIOD_OphthalmicPhotography8BitImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	OphthalmicPhotographySeries = new Module_OphthalmicPhotographySeries(list,SeriesIE);
	Assert(OphthalmicPhotographySeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
	Assert(Synchronization);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleCine(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	if (Condition_NeedModuleAcquisitionContext(list,0,list)) {
		AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
		Assert(AcquisitionContext);
	}
	else
		AcquisitionContext=0;

	OphthalmicPhotographyImage = new Module_OphthalmicPhotographyImage(list,ImageIE);
	Assert(OphthalmicPhotographyImage);

	OphthalmicPhotography8BitImagePseudo = new Module_OphthalmicPhotography8BitImagePseudo(list,ImageIE);
	Assert(OphthalmicPhotography8BitImagePseudo);

	OcularRegionImaged = new Module_OcularRegionImaged(list,ImageIE);
	Assert(OcularRegionImaged);

	OphthalmicPhotographyAcquisitionParameters = new Module_OphthalmicPhotographyAcquisitionParameters(list,ImageIE);
	Assert(OphthalmicPhotographyAcquisitionParameters);

	OphthalmicPhotographicParameters = new Module_OphthalmicPhotographicParameters(list,ImageIE);
	Assert(OphthalmicPhotographicParameters);

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_OphthalmicPhotography16BitImage::CompositeIOD_OphthalmicPhotography16BitImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	OphthalmicPhotographySeries = new Module_OphthalmicPhotographySeries(list,SeriesIE);
	Assert(OphthalmicPhotographySeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
	Assert(Synchronization);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	if (Condition_NeedModuleCine(list,0,list)) {
		Cine = new Module_Cine(list,ImageIE);
		Assert(Cine);
	}
	else
		Cine=0;

	MultiFrame = new Module_MultiFrame(list,ImageIE);
	Assert(MultiFrame);

	if (Condition_NeedModuleAcquisitionContext(list,0,list)) {
		AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
		Assert(AcquisitionContext);
	}
	else
		AcquisitionContext=0;

	OphthalmicPhotographyImage = new Module_OphthalmicPhotographyImage(list,ImageIE);
	Assert(OphthalmicPhotographyImage);

	OphthalmicPhotography16BitImagePseudo = new Module_OphthalmicPhotography16BitImagePseudo(list,ImageIE);
	Assert(OphthalmicPhotography16BitImagePseudo);

	OcularRegionImaged = new Module_OcularRegionImaged(list,ImageIE);
	Assert(OcularRegionImaged);

	OphthalmicPhotographyAcquisitionParameters = new Module_OphthalmicPhotographyAcquisitionParameters(list,ImageIE);
	Assert(OphthalmicPhotographyAcquisitionParameters);

	OphthalmicPhotographicParameters = new Module_OphthalmicPhotographicParameters(list,ImageIE);
	Assert(OphthalmicPhotographicParameters);

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_StereometricRelationship::CompositeIOD_StereometricRelationship(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	StereometricSeries = new Module_StereometricSeries(list,SeriesIE);
	Assert(StereometricSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	StereometricRelationship = new Module_StereometricRelationship(list,ImageIE);
	Assert(StereometricRelationship);

	CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
	Assert(CommonInstanceReference);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

}

CompositeIOD_OphthalmicTomographyImage::CompositeIOD_OphthalmicTomographyImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	OphthalmicTomographySeries = new Module_OphthalmicTomographySeries(list,SeriesIE);
	Assert(OphthalmicTomographySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForOphthalmicTomography = new Module_MultiFrameFunctionalGroupsForOphthalmicTomography(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForOphthalmicTomography);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	OphthalmicTomographyImage = new Module_OphthalmicTomographyImage(list,ImageIE);
	Assert(OphthalmicTomographyImage);

	OphthalmicTomographyAcquisitionParameters = new Module_OphthalmicTomographyAcquisitionParameters(list,ImageIE);
	Assert(OphthalmicTomographyAcquisitionParameters);

	OphthalmicTomographyParameters = new Module_OphthalmicTomographyParameters(list,ImageIE);
	Assert(OphthalmicTomographyParameters);

	OcularRegionImaged = new Module_OcularRegionImaged(list,ImageIE);
	Assert(OcularRegionImaged);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_VLWholeSlideMicroscopyImage::CompositeIOD_VLWholeSlideMicroscopyImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	WholeSlideMicroscopySeries = new Module_WholeSlideMicroscopySeries(list,SeriesIE);
	Assert(WholeSlideMicroscopySeries);

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForWholeSlideMicroscopy = new Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForWholeSlideMicroscopy);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	Specimen = new Module_Specimen(list,ImageIE);
	Assert(Specimen);

	WholeSlideMicroscopyImage = new Module_WholeSlideMicroscopyImage(list,ImageIE);
	Assert(WholeSlideMicroscopyImage);

	OpticalPath = new Module_OpticalPath(list,ImageIE);
	Assert(OpticalPath);

	if (Condition_ImageTypeValue3Localizer(list,0,list)) {
		MultiResolutionNavigation = new Module_MultiResolutionNavigation(list,ImageIE);
		Assert(MultiResolutionNavigation);
	}
	else
		MultiResolutionNavigation=0;

	if (Condition_NeedModuleSlideLabel(list,0,list)) {
		SlideLabel = new Module_SlideLabel(list,ImageIE);
		Assert(SlideLabel);
	}
	else
		SlideLabel=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
	Assert(CommonInstanceReference);

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_LensometryMeasurements::CompositeIOD_LensometryMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	LensometryMeasurementsSeries = new Module_LensometryMeasurementsSeries(list,SeriesIE);
	Assert(LensometryMeasurementsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	LensometryMeasurements = new Module_LensometryMeasurements(list,MeasurementsIE);
	Assert(LensometryMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_AutorefractionMeasurements::CompositeIOD_AutorefractionMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	AutorefractionMeasurementsSeries = new Module_AutorefractionMeasurementsSeries(list,SeriesIE);
	Assert(AutorefractionMeasurementsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	AutorefractionMeasurements = new Module_AutorefractionMeasurements(list,MeasurementsIE);
	Assert(AutorefractionMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_KeratometryMeasurements::CompositeIOD_KeratometryMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	KeratometryMeasurementsSeries = new Module_KeratometryMeasurementsSeries(list,SeriesIE);
	Assert(KeratometryMeasurementsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	KeratometryMeasurements = new Module_KeratometryMeasurements(list,MeasurementsIE);
	Assert(KeratometryMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_SubjectiveRefractionMeasurements::CompositeIOD_SubjectiveRefractionMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	SubjectiveRefractionMeasurementsSeries = new Module_SubjectiveRefractionMeasurementsSeries(list,SeriesIE);
	Assert(SubjectiveRefractionMeasurementsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	SubjectiveRefractionMeasurements = new Module_SubjectiveRefractionMeasurements(list,MeasurementsIE);
	Assert(SubjectiveRefractionMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_VisualAcuityMeasurements::CompositeIOD_VisualAcuityMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	VisualAcuityMeasurementsSeries = new Module_VisualAcuityMeasurementsSeries(list,SeriesIE);
	Assert(VisualAcuityMeasurementsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	VisualAcuityMeasurements = new Module_VisualAcuityMeasurements(list,MeasurementsIE);
	Assert(VisualAcuityMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_OphthalmicAxialMeasurements::CompositeIOD_OphthalmicAxialMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	OphthalmicAxialMeasurementsSeries = new Module_OphthalmicAxialMeasurementsSeries(list,SeriesIE);
	Assert(OphthalmicAxialMeasurementsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	OphthalmicAxialMeasurements = new Module_OphthalmicAxialMeasurements(list,MeasurementsIE);
	Assert(OphthalmicAxialMeasurements);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_IntraocularLensCalculations::CompositeIOD_IntraocularLensCalculations(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	IntraocularLensCalculationsSeries = new Module_IntraocularLensCalculationsSeries(list,SeriesIE);
	Assert(IntraocularLensCalculationsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	IntraocularLensCalculations = new Module_IntraocularLensCalculations(list,MeasurementsIE);
	Assert(IntraocularLensCalculations);

	GeneralOphthalmicRefractiveMeasurements = new Module_GeneralOphthalmicRefractiveMeasurements(list,MeasurementsIE);
	Assert(GeneralOphthalmicRefractiveMeasurements);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_OphthalmicVisualFieldStaticPerimetryMeasurements::CompositeIOD_OphthalmicVisualFieldStaticPerimetryMeasurements(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	VisualFieldStaticPerimetryMeasurementsSeries = new Module_VisualFieldStaticPerimetryMeasurementsSeries(list,SeriesIE);
	Assert(VisualFieldStaticPerimetryMeasurementsSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	VisualFieldStaticPerimetryTestParameters = new Module_VisualFieldStaticPerimetryTestParameters(list,MeasurementsIE);
	Assert(VisualFieldStaticPerimetryTestParameters);

	VisualFieldStaticPerimetryTestReliability = new Module_VisualFieldStaticPerimetryTestReliability(list,MeasurementsIE);
	Assert(VisualFieldStaticPerimetryTestReliability);

	VisualFieldStaticPerimetryTestMeasurements = new Module_VisualFieldStaticPerimetryTestMeasurements(list,MeasurementsIE);
	Assert(VisualFieldStaticPerimetryTestMeasurements);

	VisualFieldStaticPerimetryTestResults = new Module_VisualFieldStaticPerimetryTestResults(list,MeasurementsIE);
	Assert(VisualFieldStaticPerimetryTestResults);

	OphthalmicPatientClinicalInformationandTestLensParameters = new Module_OphthalmicPatientClinicalInformationandTestLensParameters(list,MeasurementsIE);
	Assert(OphthalmicPatientClinicalInformationandTestLensParameters);

	SOPCommon = new Module_SOPCommon(list,MeasurementsIE);
	Assert(SOPCommon);

}

CompositeIOD_BasicVoice::CompositeIOD_BasicVoice(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	WaveformIdentification = new Module_WaveformIdentification(list,WaveformIE);
	Assert(WaveformIdentification);

	Waveform = new Module_Waveform(list,WaveformIE);
	Assert(Waveform);

	AcquisitionContext = new Module_AcquisitionContext(list,WaveformIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleWaveformAnnotation(list,0,list)) {
		WaveformAnnotation = new Module_WaveformAnnotation(list,WaveformIE);
		Assert(WaveformAnnotation);
	}
	else
		WaveformAnnotation=0;

	SOPCommon = new Module_SOPCommon(list,WaveformIE);
	Assert(SOPCommon);

}

CompositeIOD_TwelveLeadECG::CompositeIOD_TwelveLeadECG(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	WaveformIdentification = new Module_WaveformIdentification(list,WaveformIE);
	Assert(WaveformIdentification);

	Waveform = new Module_Waveform(list,WaveformIE);
	Assert(Waveform);

	AcquisitionContext = new Module_AcquisitionContext(list,WaveformIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleWaveformAnnotation(list,0,list)) {
		WaveformAnnotation = new Module_WaveformAnnotation(list,WaveformIE);
		Assert(WaveformAnnotation);
	}
	else
		WaveformAnnotation=0;

	SOPCommon = new Module_SOPCommon(list,WaveformIE);
	Assert(SOPCommon);

}

CompositeIOD_GeneralECG::CompositeIOD_GeneralECG(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	WaveformIdentification = new Module_WaveformIdentification(list,WaveformIE);
	Assert(WaveformIdentification);

	Waveform = new Module_Waveform(list,WaveformIE);
	Assert(Waveform);

	AcquisitionContext = new Module_AcquisitionContext(list,WaveformIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleWaveformAnnotation(list,0,list)) {
		WaveformAnnotation = new Module_WaveformAnnotation(list,WaveformIE);
		Assert(WaveformAnnotation);
	}
	else
		WaveformAnnotation=0;

	SOPCommon = new Module_SOPCommon(list,WaveformIE);
	Assert(SOPCommon);

}

CompositeIOD_AmbulatoryECG::CompositeIOD_AmbulatoryECG(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	WaveformIdentification = new Module_WaveformIdentification(list,WaveformIE);
	Assert(WaveformIdentification);

	Waveform = new Module_Waveform(list,WaveformIE);
	Assert(Waveform);

	AcquisitionContext = new Module_AcquisitionContext(list,WaveformIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleWaveformAnnotation(list,0,list)) {
		WaveformAnnotation = new Module_WaveformAnnotation(list,WaveformIE);
		Assert(WaveformAnnotation);
	}
	else
		WaveformAnnotation=0;

	SOPCommon = new Module_SOPCommon(list,WaveformIE);
	Assert(SOPCommon);

}

CompositeIOD_HemodynamicWaveform::CompositeIOD_HemodynamicWaveform(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_ReallyNeedModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	WaveformIdentification = new Module_WaveformIdentification(list,WaveformIE);
	Assert(WaveformIdentification);

	Waveform = new Module_Waveform(list,WaveformIE);
	Assert(Waveform);

	AcquisitionContext = new Module_AcquisitionContext(list,WaveformIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleWaveformAnnotation(list,0,list)) {
		WaveformAnnotation = new Module_WaveformAnnotation(list,WaveformIE);
		Assert(WaveformAnnotation);
	}
	else
		WaveformAnnotation=0;

	SOPCommon = new Module_SOPCommon(list,WaveformIE);
	Assert(SOPCommon);

}

CompositeIOD_CardiacElectrophysiologyWaveform::CompositeIOD_CardiacElectrophysiologyWaveform(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_ReallyNeedModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	WaveformIdentification = new Module_WaveformIdentification(list,WaveformIE);
	Assert(WaveformIdentification);

	Waveform = new Module_Waveform(list,WaveformIE);
	Assert(Waveform);

	AcquisitionContext = new Module_AcquisitionContext(list,WaveformIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleWaveformAnnotation(list,0,list)) {
		WaveformAnnotation = new Module_WaveformAnnotation(list,WaveformIE);
		Assert(WaveformAnnotation);
	}
	else
		WaveformAnnotation=0;

	SOPCommon = new Module_SOPCommon(list,WaveformIE);
	Assert(SOPCommon);

}

CompositeIOD_BasicTextSR::CompositeIOD_BasicTextSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_EnhancedSR::CompositeIOD_EnhancedSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_ComprehensiveSR::CompositeIOD_ComprehensiveSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_Comprehensive3DSR::CompositeIOD_Comprehensive3DSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_KeyObjectSelectionDocument::CompositeIOD_KeyObjectSelectionDocument(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	KeyObjectDocumentSeries = new Module_KeyObjectDocumentSeries(list,SeriesIE);
	Assert(KeyObjectDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	KeyObjectDocument = new Module_KeyObjectDocument(list,DocumentIE);
	Assert(KeyObjectDocument);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_KeyObjectSelectionDocumentIHEXDSIManifest::CompositeIOD_KeyObjectSelectionDocumentIHEXDSIManifest(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	KeyObjectDocumentSeries = new Module_KeyObjectDocumentSeries(list,SeriesIE);
	Assert(KeyObjectDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	KeyObjectDocument = new Module_KeyObjectDocument(list,DocumentIE);
	Assert(KeyObjectDocument);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

	IHEXDSIManifestProfile = new Module_IHEXDSIManifestProfile(list,DocumentIE);
	Assert(IHEXDSIManifestProfile);

}

CompositeIOD_MammographyCADSR::CompositeIOD_MammographyCADSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_ChestCADSR::CompositeIOD_ChestCADSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_ProcedureLog::CompositeIOD_ProcedureLog(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
	Assert(Synchronization);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_XRayRadiationDoseSR::CompositeIOD_XRayRadiationDoseSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_XRayRadiationDoseSRIHEREM::CompositeIOD_XRayRadiationDoseSRIHEREM(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

	IHEREMProfile = new Module_IHEREMProfile(list,DocumentIE);
	Assert(IHEREMProfile);

}

CompositeIOD_RadiopharmaceuticalRadiationDoseSR::CompositeIOD_RadiopharmaceuticalRadiationDoseSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_SpectaclePrescriptionReport::CompositeIOD_SpectaclePrescriptionReport(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
	Assert(ClinicalTrialSubject);

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
	Assert(ClinicalTrialStudy);

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
	Assert(ClinicalTrialSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_AcquisitionContextSR::CompositeIOD_AcquisitionContextSR(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	SRDocumentSeries = new Module_SRDocumentSeries(list,SeriesIE);
	Assert(SRDocumentSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	SRDocumentGeneral = new Module_SRDocumentGeneral(list,DocumentIE);
	Assert(SRDocumentGeneral);

	SRDocumentContent = new Module_SRDocumentContent(list,DocumentIE);
	Assert(SRDocumentContent);

	SOPCommon = new Module_SOPCommon(list,DocumentIE);
	Assert(SOPCommon);

}

CompositeIOD_GrayscaleSoftcopyPresentationState::CompositeIOD_GrayscaleSoftcopyPresentationState(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	PresentationSeries = new Module_PresentationSeries(list,SeriesIE);
	Assert(PresentationSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	PresentationStateIdentification = new Module_PresentationStateIdentification(list,PresentationIE);
	Assert(PresentationStateIdentification);

	PresentationStateRelationship = new Module_PresentationStateRelationship(list,PresentationIE);
	Assert(PresentationStateRelationship);

	PresentationStateShutter = new Module_PresentationStateShutter(list,PresentationIE);
	Assert(PresentationStateShutter);

	PresentationStateMask = new Module_PresentationStateMask(list,PresentationIE);
	Assert(PresentationStateMask);

	if (Condition_NeedModuleMask(list,0,list)) {
		Mask = new Module_Mask(list,PresentationIE);
		Assert(Mask);
	}
	else
		Mask=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,PresentationIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleBitmapDisplayShutter(list,0,list)) {
		BitmapDisplayShutter = new Module_BitmapDisplayShutter(list,PresentationIE);
		Assert(BitmapDisplayShutter);
	}
	else
		BitmapDisplayShutter=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,PresentationIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleOverlayActivation(list,0,list)) {
		OverlayActivation = new Module_OverlayActivation(list,PresentationIE);
		Assert(OverlayActivation);
	}
	else
		OverlayActivation=0;

	DisplayedArea = new Module_DisplayedArea(list,PresentationIE);
	Assert(DisplayedArea);

	if (Condition_NeedModuleGraphicAnnotation(list,0,list)) {
		GraphicAnnotation = new Module_GraphicAnnotation(list,PresentationIE);
		Assert(GraphicAnnotation);
	}
	else
		GraphicAnnotation=0;

	if (Condition_NeedModuleSpatialTransformation(list,0,list)) {
		SpatialTransformation = new Module_SpatialTransformation(list,PresentationIE);
		Assert(SpatialTransformation);
	}
	else
		SpatialTransformation=0;

	if (Condition_NeedModuleGraphicLayer(list,0,list)) {
		GraphicLayer = new Module_GraphicLayer(list,PresentationIE);
		Assert(GraphicLayer);
	}
	else
		GraphicLayer=0;

	if (Condition_NeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,PresentationIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleSoftcopyVOILUT(list,0,list)) {
		SoftcopyVOILUT = new Module_SoftcopyVOILUT(list,PresentationIE);
		Assert(SoftcopyVOILUT);
	}
	else
		SoftcopyVOILUT=0;

	SoftcopyPresentationLUT = new Module_SoftcopyPresentationLUT(list,PresentationIE);
	Assert(SoftcopyPresentationLUT);

	SOPCommon = new Module_SOPCommon(list,PresentationIE);
	Assert(SOPCommon);

}

CompositeIOD_ColorSoftcopyPresentationState::CompositeIOD_ColorSoftcopyPresentationState(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	PresentationSeries = new Module_PresentationSeries(list,SeriesIE);
	Assert(PresentationSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	PresentationStateIdentification = new Module_PresentationStateIdentification(list,PresentationIE);
	Assert(PresentationStateIdentification);

	PresentationStateRelationship = new Module_PresentationStateRelationship(list,PresentationIE);
	Assert(PresentationStateRelationship);

	PresentationStateShutter = new Module_PresentationStateShutter(list,PresentationIE);
	Assert(PresentationStateShutter);

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,PresentationIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleBitmapDisplayShutter(list,0,list)) {
		BitmapDisplayShutter = new Module_BitmapDisplayShutter(list,PresentationIE);
		Assert(BitmapDisplayShutter);
	}
	else
		BitmapDisplayShutter=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,PresentationIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleOverlayActivation(list,0,list)) {
		OverlayActivation = new Module_OverlayActivation(list,PresentationIE);
		Assert(OverlayActivation);
	}
	else
		OverlayActivation=0;

	DisplayedArea = new Module_DisplayedArea(list,PresentationIE);
	Assert(DisplayedArea);

	if (Condition_NeedModuleGraphicAnnotation(list,0,list)) {
		GraphicAnnotation = new Module_GraphicAnnotation(list,PresentationIE);
		Assert(GraphicAnnotation);
	}
	else
		GraphicAnnotation=0;

	if (Condition_NeedModuleSpatialTransformation(list,0,list)) {
		SpatialTransformation = new Module_SpatialTransformation(list,PresentationIE);
		Assert(SpatialTransformation);
	}
	else
		SpatialTransformation=0;

	if (Condition_NeedModuleGraphicLayer(list,0,list)) {
		GraphicLayer = new Module_GraphicLayer(list,PresentationIE);
		Assert(GraphicLayer);
	}
	else
		GraphicLayer=0;

	ICCProfile = new Module_ICCProfile(list,PresentationIE);
	Assert(ICCProfile);

	SOPCommon = new Module_SOPCommon(list,PresentationIE);
	Assert(SOPCommon);

}

CompositeIOD_PseudoColorSoftcopyPresentationState::CompositeIOD_PseudoColorSoftcopyPresentationState(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	PresentationSeries = new Module_PresentationSeries(list,SeriesIE);
	Assert(PresentationSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	PresentationStateIdentification = new Module_PresentationStateIdentification(list,PresentationIE);
	Assert(PresentationStateIdentification);

	PresentationStateRelationship = new Module_PresentationStateRelationship(list,PresentationIE);
	Assert(PresentationStateRelationship);

	PresentationStateShutter = new Module_PresentationStateShutter(list,PresentationIE);
	Assert(PresentationStateShutter);

	PresentationStateMask = new Module_PresentationStateMask(list,PresentationIE);
	Assert(PresentationStateMask);

	if (Condition_NeedModuleMask(list,0,list)) {
		Mask = new Module_Mask(list,PresentationIE);
		Assert(Mask);
	}
	else
		Mask=0;

	if (Condition_NeedModuleDisplayShutter(list,0,list)) {
		DisplayShutter = new Module_DisplayShutter(list,PresentationIE);
		Assert(DisplayShutter);
	}
	else
		DisplayShutter=0;

	if (Condition_NeedModuleBitmapDisplayShutter(list,0,list)) {
		BitmapDisplayShutter = new Module_BitmapDisplayShutter(list,PresentationIE);
		Assert(BitmapDisplayShutter);
	}
	else
		BitmapDisplayShutter=0;

	if (Condition_NeedModuleOverlayPlane(list,0,list)) {
		OverlayPlane = new Module_OverlayPlane(list,PresentationIE);
		Assert(OverlayPlane);
	}
	else
		OverlayPlane=0;

	if (Condition_NeedModuleOverlayActivation(list,0,list)) {
		OverlayActivation = new Module_OverlayActivation(list,PresentationIE);
		Assert(OverlayActivation);
	}
	else
		OverlayActivation=0;

	DisplayedArea = new Module_DisplayedArea(list,PresentationIE);
	Assert(DisplayedArea);

	if (Condition_NeedModuleGraphicAnnotation(list,0,list)) {
		GraphicAnnotation = new Module_GraphicAnnotation(list,PresentationIE);
		Assert(GraphicAnnotation);
	}
	else
		GraphicAnnotation=0;

	if (Condition_NeedModuleSpatialTransformation(list,0,list)) {
		SpatialTransformation = new Module_SpatialTransformation(list,PresentationIE);
		Assert(SpatialTransformation);
	}
	else
		SpatialTransformation=0;

	if (Condition_NeedModuleGraphicLayer(list,0,list)) {
		GraphicLayer = new Module_GraphicLayer(list,PresentationIE);
		Assert(GraphicLayer);
	}
	else
		GraphicLayer=0;

	if (Condition_NeedModuleModalityLUT(list,0,list)) {
		ModalityLUT = new Module_ModalityLUT(list,PresentationIE);
		Assert(ModalityLUT);
	}
	else
		ModalityLUT=0;

	if (Condition_NeedModuleSoftcopyVOILUT(list,0,list)) {
		SoftcopyVOILUT = new Module_SoftcopyVOILUT(list,PresentationIE);
		Assert(SoftcopyVOILUT);
	}
	else
		SoftcopyVOILUT=0;

	PaletteColorLookupTable = new Module_PaletteColorLookupTable(list,PresentationIE);
	Assert(PaletteColorLookupTable);

	ICCProfile = new Module_ICCProfile(list,PresentationIE);
	Assert(ICCProfile);

	SOPCommon = new Module_SOPCommon(list,PresentationIE);
	Assert(SOPCommon);

}

CompositeIOD_BlendingSoftcopyPresentationState::CompositeIOD_BlendingSoftcopyPresentationState(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	PresentationSeries = new Module_PresentationSeries(list,SeriesIE);
	Assert(PresentationSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	PresentationStateIdentification = new Module_PresentationStateIdentification(list,PresentationIE);
	Assert(PresentationStateIdentification);

	PresentationStateBlending = new Module_PresentationStateBlending(list,PresentationIE);
	Assert(PresentationStateBlending);

	DisplayedArea = new Module_DisplayedArea(list,PresentationIE);
	Assert(DisplayedArea);

	if (Condition_NeedModuleGraphicAnnotation(list,0,list)) {
		GraphicAnnotation = new Module_GraphicAnnotation(list,PresentationIE);
		Assert(GraphicAnnotation);
	}
	else
		GraphicAnnotation=0;

	if (Condition_NeedModuleSpatialTransformation(list,0,list)) {
		SpatialTransformation = new Module_SpatialTransformation(list,PresentationIE);
		Assert(SpatialTransformation);
	}
	else
		SpatialTransformation=0;

	if (Condition_NeedModuleGraphicLayer(list,0,list)) {
		GraphicLayer = new Module_GraphicLayer(list,PresentationIE);
		Assert(GraphicLayer);
	}
	else
		GraphicLayer=0;

	PaletteColorLookupTable = new Module_PaletteColorLookupTable(list,PresentationIE);
	Assert(PaletteColorLookupTable);

	ICCProfile = new Module_ICCProfile(list,PresentationIE);
	Assert(ICCProfile);

	SOPCommon = new Module_SOPCommon(list,PresentationIE);
	Assert(SOPCommon);

}

CompositeIOD_HangingProtocol::CompositeIOD_HangingProtocol(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	HangingProtocolDefinition = new Module_HangingProtocolDefinition(list,HangingProtocolIE);
	Assert(HangingProtocolDefinition);

	HangingProtocolEnvironment = new Module_HangingProtocolEnvironment(list,HangingProtocolIE);
	Assert(HangingProtocolEnvironment);

	HangingProtocolDisplay = new Module_HangingProtocolDisplay(list,HangingProtocolIE);
	Assert(HangingProtocolDisplay);

	SOPCommon = new Module_SOPCommon(list,HangingProtocolIE);
	Assert(SOPCommon);

}

CompositeIOD_ColorPalette::CompositeIOD_ColorPalette(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	ColorPaletteDefinition = new Module_ColorPaletteDefinition(list,ColorPaletteIE);
	Assert(ColorPaletteDefinition);

	PaletteColorLookupTable = new Module_PaletteColorLookupTable(list,ColorPaletteIE);
	Assert(PaletteColorLookupTable);

	ICCProfile = new Module_ICCProfile(list,ColorPaletteIE);
	Assert(ICCProfile);

	SOPCommon = new Module_SOPCommon(list,ColorPaletteIE);
	Assert(SOPCommon);

}

CompositeIOD_BasicStructuredDisplay::CompositeIOD_BasicStructuredDisplay(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	PresentationSeries = new Module_PresentationSeries(list,SeriesIE);
	Assert(PresentationSeries);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	StructuredDisplay = new Module_StructuredDisplay(list,PresentationIE);
	Assert(StructuredDisplay);

	StructuredDisplayImageBox = new Module_StructuredDisplayImageBox(list,PresentationIE);
	Assert(StructuredDisplayImageBox);

	if (Condition_NeedModuleStructuredDisplayAnnotation(list,0,list)) {
		StructuredDisplayAnnotation = new Module_StructuredDisplayAnnotation(list,PresentationIE);
		Assert(StructuredDisplayAnnotation);
	}
	else
		StructuredDisplayAnnotation=0;

	CommonInstanceReference = new Module_CommonInstanceReference(list,PresentationIE);
	Assert(CommonInstanceReference);

	SOPCommon = new Module_SOPCommon(list,PresentationIE);
	Assert(SOPCommon);

}

CompositeIOD_EnhancedMRImage::CompositeIOD_EnhancedMRImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	MRSeries = new Module_MRSeries(list,SeriesIE);
	Assert(MRSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedMRImage = new Module_MultiFrameFunctionalGroupsForEnhancedMRImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedMRImage);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleBulkMotion(list,0,list)) {
		BulkMotionSynchronization = new Module_BulkMotionSynchronization(list,ImageIE);
		Assert(BulkMotionSynchronization);
	}
	else
		BulkMotionSynchronization=0;

	if (Condition_NeedModuleSupplementalPaletteColorLUT(list,0,list)) {
		SupplementalPaletteColorLUT = new Module_SupplementalPaletteColorLUT(list,ImageIE);
		Assert(SupplementalPaletteColorLUT);
	}
	else
		SupplementalPaletteColorLUT=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedMRImage = new Module_EnhancedMRImage(list,ImageIE);
	Assert(EnhancedMRImage);

	if (Condition_NeedModuleMRPulseSequence(list,0,list)) {
		MRPulseSequence = new Module_MRPulseSequence(list,ImageIE);
		Assert(MRPulseSequence);
	}
	else
		MRPulseSequence=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_EnhancedMRColorImage::CompositeIOD_EnhancedMRColorImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	MRSeries = new Module_MRSeries(list,SeriesIE);
	Assert(MRSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedMRImage = new Module_MultiFrameFunctionalGroupsForEnhancedMRImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedMRImage);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleBulkMotion(list,0,list)) {
		BulkMotionSynchronization = new Module_BulkMotionSynchronization(list,ImageIE);
		Assert(BulkMotionSynchronization);
	}
	else
		BulkMotionSynchronization=0;

	if (Condition_NeedModuleSupplementalPaletteColorLUT(list,0,list)) {
		SupplementalPaletteColorLUT = new Module_SupplementalPaletteColorLUT(list,ImageIE);
		Assert(SupplementalPaletteColorLUT);
	}
	else
		SupplementalPaletteColorLUT=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedMRImage = new Module_EnhancedMRImage(list,ImageIE);
	Assert(EnhancedMRImage);

	if (Condition_NeedModuleMRPulseSequence(list,0,list)) {
		MRPulseSequence = new Module_MRPulseSequence(list,ImageIE);
		Assert(MRPulseSequence);
	}
	else
		MRPulseSequence=0;

	ICCProfile = new Module_ICCProfile(list,ImageIE);
	Assert(ICCProfile);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_MRSpectroscopy::CompositeIOD_MRSpectroscopy(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	MRSeries = new Module_MRSeries(list,SeriesIE);
	Assert(MRSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,MRSpectroscopyIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,MRSpectroscopyIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForMRSpectroscopy = new Module_MultiFrameFunctionalGroupsForMRSpectroscopy(list,MRSpectroscopyIE);
	Assert(MultiFrameFunctionalGroupsForMRSpectroscopy);

	MultiFrameDimension = new Module_MultiFrameDimension(list,MRSpectroscopyIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,MRSpectroscopyIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,MRSpectroscopyIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleBulkMotion(list,0,list)) {
		BulkMotionSynchronization = new Module_BulkMotionSynchronization(list,MRSpectroscopyIE);
		Assert(BulkMotionSynchronization);
	}
	else
		BulkMotionSynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,MRSpectroscopyIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,MRSpectroscopyIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	MRSpectroscopy = new Module_MRSpectroscopy(list,MRSpectroscopyIE);
	Assert(MRSpectroscopy);

	if (Condition_NeedModuleMRSpectroscopyPulseSequence(list,0,list)) {
		MRSpectroscopyPulseSequence = new Module_MRSpectroscopyPulseSequence(list,MRSpectroscopyIE);
		Assert(MRSpectroscopyPulseSequence);
	}
	else
		MRSpectroscopyPulseSequence=0;

	MRSpectroscopyData = new Module_MRSpectroscopyData(list,MRSpectroscopyIE);
	Assert(MRSpectroscopyData);

	SOPCommon = new Module_SOPCommon(list,MRSpectroscopyIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,MRSpectroscopyIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_RawData::CompositeIOD_RawData(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	if (Condition_NeedModuleFrameOfReference(list,0,list)) {
		FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
		Assert(FrameOfReference);
	}
	else
		FrameOfReference=0;

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	AcquisitionContext = new Module_AcquisitionContext(list,RawDataIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,RawDataIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	RawData = new Module_RawData(list,RawDataIE);
	Assert(RawData);

	SOPCommon = new Module_SOPCommon(list,RawDataIE);
	Assert(SOPCommon);

}

CompositeIOD_LegacyConvertedEnhancedMRImage::CompositeIOD_LegacyConvertedEnhancedMRImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	MRSeries = new Module_MRSeries(list,SeriesIE);
	Assert(MRSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage = new Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleBulkMotion(list,0,list)) {
		BulkMotionSynchronization = new Module_BulkMotionSynchronization(list,ImageIE);
		Assert(BulkMotionSynchronization);
	}
	else
		BulkMotionSynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedMRImage = new Module_EnhancedMRImage(list,ImageIE);
	Assert(EnhancedMRImage);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedMRImage::CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedMRImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	MRSeries = new Module_MRSeries(list,SeriesIE);
	Assert(MRSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage = new Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleBulkMotion(list,0,list)) {
		BulkMotionSynchronization = new Module_BulkMotionSynchronization(list,ImageIE);
		Assert(BulkMotionSynchronization);
	}
	else
		BulkMotionSynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedMRImage = new Module_EnhancedMRImage(list,ImageIE);
	Assert(EnhancedMRImage);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_TractographyResults::CompositeIOD_TractographyResults(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	TractographyResultsSeries = new Module_TractographyResultsSeries(list,SeriesIE);
	Assert(TractographyResultsSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	TractographyResults = new Module_TractographyResults(list,TractographyResultsIE);
	Assert(TractographyResults);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,TractographyResultsIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	CommonInstanceReference = new Module_CommonInstanceReference(list,TractographyResultsIE);
	Assert(CommonInstanceReference);

	SOPCommon = new Module_SOPCommon(list,TractographyResultsIE);
	Assert(SOPCommon);

}

CompositeIOD_EnhancedCTImage::CompositeIOD_EnhancedCTImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	CTSeries = new Module_CTSeries(list,SeriesIE);
	Assert(CTSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedCTImage = new Module_MultiFrameFunctionalGroupsForEnhancedCTImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedCTImage);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleSupplementalPaletteColorLUT(list,0,list)) {
		SupplementalPaletteColorLUT = new Module_SupplementalPaletteColorLUT(list,ImageIE);
		Assert(SupplementalPaletteColorLUT);
	}
	else
		SupplementalPaletteColorLUT=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedCTImage = new Module_EnhancedCTImage(list,ImageIE);
	Assert(EnhancedCTImage);

	if (Condition_IsMultienergyCTAcquisition(list,0,list)) {
		EnhancedMultienergyCTAcquisition = new Module_EnhancedMultienergyCTAcquisition(list,ImageIE);
		Assert(EnhancedMultienergyCTAcquisition);
	}
	else
		EnhancedMultienergyCTAcquisition=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_LegacyConvertedEnhancedCTImage::CompositeIOD_LegacyConvertedEnhancedCTImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	CTSeries = new Module_CTSeries(list,SeriesIE);
	Assert(CTSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage = new Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedCTImage = new Module_EnhancedCTImage(list,ImageIE);
	Assert(EnhancedCTImage);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedCTImage::CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedCTImage(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	CTSeries = new Module_CTSeries(list,SeriesIE);
	Assert(CTSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	if (Condition_NeedToCheckModuleSynchronization(list,0,list)) {
		Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
		Assert(Synchronization);
	}
	else
		Synchronization=0;

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	if (Condition_EnhancedGeneralEquipmentIsPresent(list,0,list)) {
		EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
		Assert(EnhancedGeneralEquipment);
	}
	else
		EnhancedGeneralEquipment=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleContrastBolus(list,0,list)) {
		ContrastBolus = new Module_ContrastBolus(list,ImageIE);
		Assert(ContrastBolus);
	}
	else
		ContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage = new Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage);

	if (Condition_NeedModuleMultiFrameDimension(list,0,list)) {
		MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
		Assert(MultiFrameDimension);
	}
	else
		MultiFrameDimension=0;

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	EnhancedCTImage = new Module_EnhancedCTImage(list,ImageIE);
	Assert(EnhancedCTImage);

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_EnhancedUltrasoundVolume::CompositeIOD_EnhancedUltrasoundVolume(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedUSSeries = new Module_EnhancedUSSeries(list,SeriesIE);
	Assert(EnhancedUSSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	UltrasoundFrameOfReference = new Module_UltrasoundFrameOfReference(list,FrameOfReferenceIE);
	Assert(UltrasoundFrameOfReference);

	Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
	Assert(Synchronization);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedUSVolume = new Module_MultiFrameFunctionalGroupsForEnhancedUSVolume(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedUSVolume);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleEnhancedPaletteColorLookupTable(list,0,list)) {
		EnhancedPaletteColorLookupTable = new Module_EnhancedPaletteColorLookupTable(list,ImageIE);
		Assert(EnhancedPaletteColorLookupTable);
	}
	else
		EnhancedPaletteColorLookupTable=0;

	EnhancedUSImage = new Module_EnhancedUSImage(list,ImageIE);
	Assert(EnhancedUSImage);

	if (Condition_ModalityIsIVUS(list,0,list)) {
		IVUSImage = new Module_IVUSImage(list,ImageIE);
		Assert(IVUSImage);
	}
	else
		IVUSImage=0;

	if (Condition_NeedModuleExcludedIntervals(list,0,list)) {
		ExcludedIntervals = new Module_ExcludedIntervals(list,ImageIE);
		Assert(ExcludedIntervals);
	}
	else
		ExcludedIntervals=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

}

CompositeIOD_EnhancedUltrasoundVolumeQTUS::CompositeIOD_EnhancedUltrasoundVolumeQTUS(AttributeList *list)
{
	(void)list; // Quiets compiler in case iodcomp empty
	Assert(list);

	if (Condition_NeedModuleFileMetaInformation(list,0,list)) {
		FileMetaInformation = new Module_FileMetaInformation(list,FileIE);
		Assert(FileMetaInformation);
	}
	else
		FileMetaInformation=0;

	Patient = new Module_Patient(list,PatientIE);
	Assert(Patient);

	if (Condition_NeedModuleClinicalTrialSubject(list,0,list)) {
		ClinicalTrialSubject = new Module_ClinicalTrialSubject(list,PatientIE);
		Assert(ClinicalTrialSubject);
	}
	else
		ClinicalTrialSubject=0;

	GeneralStudy = new Module_GeneralStudy(list,StudyIE);
	Assert(GeneralStudy);

	PatientStudy = new Module_PatientStudy(list,StudyIE);
	Assert(PatientStudy);

	if (Condition_NeedModuleClinicalTrialStudy(list,0,list)) {
		ClinicalTrialStudy = new Module_ClinicalTrialStudy(list,StudyIE);
		Assert(ClinicalTrialStudy);
	}
	else
		ClinicalTrialStudy=0;

	QTUSEnhancedUltrasoundVolumeProfileStudy = new Module_QTUSEnhancedUltrasoundVolumeProfileStudy(list,StudyIE);
	Assert(QTUSEnhancedUltrasoundVolumeProfileStudy);

	GeneralSeries = new Module_GeneralSeries(list,SeriesIE);
	Assert(GeneralSeries);

	if (Condition_NeedModuleClinicalTrialSeries(list,0,list)) {
		ClinicalTrialSeries = new Module_ClinicalTrialSeries(list,SeriesIE);
		Assert(ClinicalTrialSeries);
	}
	else
		ClinicalTrialSeries=0;

	EnhancedUSSeries = new Module_EnhancedUSSeries(list,SeriesIE);
	Assert(EnhancedUSSeries);

	QTUSEnhancedUltrasoundVolumeProfileSeries = new Module_QTUSEnhancedUltrasoundVolumeProfileSeries(list,SeriesIE);
	Assert(QTUSEnhancedUltrasoundVolumeProfileSeries);

	FrameOfReference = new Module_FrameOfReference(list,FrameOfReferenceIE);
	Assert(FrameOfReference);

	UltrasoundFrameOfReference = new Module_UltrasoundFrameOfReference(list,FrameOfReferenceIE);
	Assert(UltrasoundFrameOfReference);

	Synchronization = new Module_Synchronization(list,FrameOfReferenceIE);
	Assert(Synchronization);

	QTUSEnhancedUltrasoundVolumeProfileFrameOfReference = new Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference(list,FrameOfReferenceIE);
	Assert(QTUSEnhancedUltrasoundVolumeProfileFrameOfReference);

	GeneralEquipment = new Module_GeneralEquipment(list,EquipmentIE);
	Assert(GeneralEquipment);

	EnhancedGeneralEquipment = new Module_EnhancedGeneralEquipment(list,EquipmentIE);
	Assert(EnhancedGeneralEquipment);

	QTUSEnhancedUltrasoundVolumeProfileEquipment = new Module_QTUSEnhancedUltrasoundVolumeProfileEquipment(list,EquipmentIE);
	Assert(QTUSEnhancedUltrasoundVolumeProfileEquipment);

	GeneralImage = new Module_GeneralImage(list,ImageIE);
	Assert(GeneralImage);

	if (Condition_NeedModuleGeneralReference(list,0,list)) {
		GeneralReference = new Module_GeneralReference(list,ImageIE);
		Assert(GeneralReference);
	}
	else
		GeneralReference=0;

	ImagePixel = new Module_ImagePixel(list,ImageIE);
	Assert(ImagePixel);

	if (Condition_NeedModuleEnhancedContrastBolus(list,0,list)) {
		EnhancedContrastBolus = new Module_EnhancedContrastBolus(list,ImageIE);
		Assert(EnhancedContrastBolus);
	}
	else
		EnhancedContrastBolus=0;

	MultiFrameFunctionalGroupsCommon = new Module_MultiFrameFunctionalGroupsCommon(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsCommon);

	MultiFrameFunctionalGroupsForEnhancedUSVolume = new Module_MultiFrameFunctionalGroupsForEnhancedUSVolume(list,ImageIE);
	Assert(MultiFrameFunctionalGroupsForEnhancedUSVolume);

	MultiFrameDimension = new Module_MultiFrameDimension(list,ImageIE);
	Assert(MultiFrameDimension);

	if (Condition_NeedModuleCardiacSynchronization(list,0,list)) {
		CardiacSynchronization = new Module_CardiacSynchronization(list,ImageIE);
		Assert(CardiacSynchronization);
	}
	else
		CardiacSynchronization=0;

	if (Condition_NeedModuleRespiratorySynchronization(list,0,list)) {
		RespiratorySynchronization = new Module_RespiratorySynchronization(list,ImageIE);
		Assert(RespiratorySynchronization);
	}
	else
		RespiratorySynchronization=0;

	if (Condition_NeedModuleDevice(list,0,list)) {
		Device = new Module_Device(list,ImageIE);
		Assert(Device);
	}
	else
		Device=0;

	AcquisitionContext = new Module_AcquisitionContext(list,ImageIE);
	Assert(AcquisitionContext);

	if (Condition_NeedModuleSpecimen(list,0,list)) {
		Specimen = new Module_Specimen(list,ImageIE);
		Assert(Specimen);
	}
	else
		Specimen=0;

	if (Condition_NeedModuleEnhancedPaletteColorLookupTable(list,0,list)) {
		EnhancedPaletteColorLookupTable = new Module_EnhancedPaletteColorLookupTable(list,ImageIE);
		Assert(EnhancedPaletteColorLookupTable);
	}
	else
		EnhancedPaletteColorLookupTable=0;

	EnhancedUSImage = new Module_EnhancedUSImage(list,ImageIE);
	Assert(EnhancedUSImage);

	if (Condition_ModalityIsIVUS(list,0,list)) {
		IVUSImage = new Module_IVUSImage(list,ImageIE);
		Assert(IVUSImage);
	}
	else
		IVUSImage=0;

	if (Condition_NeedModuleExcludedIntervals(list,0,list)) {
		ExcludedIntervals = new Module_ExcludedIntervals(list,ImageIE);
		Assert(ExcludedIntervals);
	}
	else
		ExcludedIntervals=0;

	if (Condition_NeedModuleICCProfile(list,0,list)) {
		ICCProfile = new Module_ICCProfile(list,ImageIE);
		Assert(ICCProfile);
	}
	else
		ICCProfile=0;

	SOPCommon = new Module_SOPCommon(list,ImageIE);
	Assert(SOPCommon);

	if (Condition_NeedModuleCommonInstanceReference(list,0,list)) {
		CommonInstanceReference = new Module_CommonInstanceReference(list,ImageIE);
		Assert(CommonInstanceReference);
	}
	else
		CommonInstanceReference=0;

	if (Condition_NeedModuleFrameExtraction(list,0,list)) {
		FrameExtraction = new Module_FrameExtraction(list,ImageIE);
		Assert(FrameExtraction);
	}
	else
		FrameExtraction=0;

	QTUSEnhancedUltrasoundVolumeProfileInstance = new Module_QTUSEnhancedUltrasoundVolumeProfileInstance(list,ImageIE);
	Assert(QTUSEnhancedUltrasoundVolumeProfileInstance);

}


#endif /* __Header_iodcompb__ */
