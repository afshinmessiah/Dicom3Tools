// Automatically generated from template - EDITS WILL BE LOST

// Generated by strval.awk with options define strvald

#ifndef __Header_strvald__
#define __Header_strvald__

static struct StringValueEntry
StringValueTable_TrueFalseFull[] = {
	"TRUE",	"",
	"FALSE",	"",
	0,0
};

char *
StringValueDescription_TrueFalseFull(char * value)
{
	return StringValueDescription(StringValueTable_TrueFalseFull,value);
}

static struct StringValueEntry
StringValueTable_YesNoLetter[] = {
	"Y",	"Yes",
	"N",	"No",
	0,0
};

char *
StringValueDescription_YesNoLetter(char * value)
{
	return StringValueDescription(StringValueTable_YesNoLetter,value);
}

static struct StringValueEntry
StringValueTable_YesNoFull[] = {
	"YES",	"",
	"NO",	"",
	0,0
};

char *
StringValueDescription_YesNoFull(char * value)
{
	return StringValueDescription(StringValueTable_YesNoFull,value);
}

static struct StringValueEntry
StringValueTable_YesNoFullUnknown[] = {
	"YES",	"",
	"NO",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_YesNoFullUnknown(char * value)
{
	return StringValueDescription(StringValueTable_YesNoFullUnknown,value);
}

static struct StringValueEntry
StringValueTable_YesNoFullUndefined[] = {
	"YES",	"",
	"NO",	"",
	"UNDEFINED",	"",
	0,0
};

char *
StringValueDescription_YesNoFullUndefined(char * value)
{
	return StringValueDescription(StringValueTable_YesNoFullUndefined,value);
}

static struct StringValueEntry
StringValueTable_YesLetter[] = {
	"Y",	"Yes",
	0,0
};

char *
StringValueDescription_YesLetter(char * value)
{
	return StringValueDescription(StringValueTable_YesLetter,value);
}

static struct StringValueEntry
StringValueTable_NoLetter[] = {
	"N",	"No",
	0,0
};

char *
StringValueDescription_NoLetter(char * value)
{
	return StringValueDescription(StringValueTable_NoLetter,value);
}

static struct StringValueEntry
StringValueTable_YesFull[] = {
	"YES",	"",
	0,0
};

char *
StringValueDescription_YesFull(char * value)
{
	return StringValueDescription(StringValueTable_YesFull,value);
}

static struct StringValueEntry
StringValueTable_NoFull[] = {
	"NO",	"",
	0,0
};

char *
StringValueDescription_NoFull(char * value)
{
	return StringValueDescription(StringValueTable_NoFull,value);
}

static struct StringValueEntry
StringValueTable_Priority[] = {
	"LOW",	"",
	"MED",	"",
	"HIGH",	"",
	0,0
};

char *
StringValueDescription_Priority(char * value)
{
	return StringValueDescription(StringValueTable_Priority,value);
}

static struct StringValueEntry
StringValueTable_SmokingStatus[] = {
	"YES",	"",
	"NO",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_SmokingStatus(char * value)
{
	return StringValueDescription(StringValueTable_SmokingStatus,value);
}

static struct StringValueEntry
StringValueTable_Orientation[] = {
	"LANDSCAPE",	"",
	"PORTRAIT",	"",
	0,0
};

char *
StringValueDescription_Orientation(char * value)
{
	return StringValueDescription(StringValueTable_Orientation,value);
}

static struct StringValueEntry
StringValueTable_DiagnosticCodingSchemes[] = {
	"ACR",	"ACR Index for Radiological Diagnosis",
	"CE",	"CEN ECG Diagnostic Codes",
	"E",	"Euclides",
	"I9",	"ICD9",
	"I9C",	"ICD9-CM",
	"I10",	"ICD10",
	"LB",	"Local Billing Code",
	"RC",	"Read Classification",
	"SNM",	"SNOMED",
	"S3",	"SNOMED III",
	"UML",	"Unified Medical Language",
	0,0
};

char *
StringValueDescription_DiagnosticCodingSchemes(char * value)
{
	return StringValueDescription(StringValueTable_DiagnosticCodingSchemes,value);
}

static struct StringValueEntry
StringValueTable_ProcedureCodeScheme[] = {
	"AS4",	"ASTM",
	"C4",	"CPT-4",
	"C5",	"CPT-5",
	"E",	"Euclides",
	"FDK",	"FDA K10",
	"HB",	"HIBCC",
	"ICS",	"ICCS",
	"I9C",	"ICD-9CM",
	"IBT",	"ISBT",
	"IUC",	"IUPAC/IFCC",
	"MCR",	"Medicare",
	"MCD",	"Madicaid",
	"UC",	"UCDS",
	"JC8",	"Japanese Chemistry",
	"HI",	"Health Outcomes",
	"E6",	"Euclides Lab Method Codes",
	"E7",	"Euclides Lab Equipment Codes",
	"E5",	"Euclides Kind Of Quantity Codes",
	"CAS",	"Chemical Abstract Codes",
	"NDC",	"National Drug Codes",
	"W1",	"WHO Record Number 6 Digit Drug Codes",
	"W2",	"WHO Record Number 8 Digit Drug Codes",
	"W4",	"WHO Record Number With ASTM Extensions",
	"WC",	"WHO ATC",
	"UMD",	"MDNS",
	0,0
};

char *
StringValueDescription_ProcedureCodeScheme(char * value)
{
	return StringValueDescription(StringValueTable_ProcedureCodeScheme,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeDesignatorForSNOMED[] = {
	"SNM3",	"SNOMED",
	0,0
};

char *
StringValueDescription_CodingSchemeDesignatorForSNOMED(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeDesignatorForSNOMED,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeDesignatorForSRT[] = {
	"SRT",	"SNOMED",
	0,0
};

char *
StringValueDescription_CodingSchemeDesignatorForSRT(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeDesignatorForSRT,value);
}

static struct StringValueEntry
StringValueTable_GeneralUnitsCodingSchemeForCG82[] = {
	"UCUM",	"Unified Code for Units of Measure",
	0,0
};

char *
StringValueDescription_GeneralUnitsCodingSchemeForCG82(char * value)
{
	return StringValueDescription(StringValueTable_GeneralUnitsCodingSchemeForCG82,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForACR[] = {
	"2.16.840.1.113883.6.76",	"ACR",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForACR(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForACR,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForASTMSigpurpose[] = {
	"1.2.840.10065.1.12",	"ASTM-sigpurpose",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForASTMSigpurpose(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForASTMSigpurpose,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForC4[] = {
	"2.16.840.1.113883.6.12",	"C4",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForC4(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForC4,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForC5[] = {
	"2.16.840.1.113883.6.82",	"C5",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForC5(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForC5,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForCD2[] = {
	"2.16.840.1.113883.6.13",	"CD2",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForCD2(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForCD2,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForDCM[] = {
	"1.2.840.10008.2.16.4",	"DCM",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForDCM(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForDCM,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForDCMUID[] = {
	"1.2.840.10008.2.6.1",	"DCMUID",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForDCMUID(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForDCMUID,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForHPC[] = {
	"2.16.840.1.113883.6.14",	"HPC",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForHPC(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForHPC,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForI10[] = {
	"2.16.840.1.113883.6.3",	"I10",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForI10(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForI10,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForI10P[] = {
	"2.16.840.1.113883.6.4",	"I10P",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForI10P(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForI10P,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForI9[] = {
	"2.16.840.1.113883.6.42",	"I9",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForI9(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForI9,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForI9C[] = {
	"2.16.840.1.113883.6.2",	"I9C",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForI9C(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForI9C,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForISO3166_1[] = {
	"2.16.1",	"ISO3166_1",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForISO3166_1(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForISO3166_1,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForISO639_1[] = {
	"2.16.840.1.113883.6.99",	"ISO639_1",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForISO639_1(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForISO639_1,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForISO639_2[] = {
	"2.16.840.1.113883.6.100",	"ISO639_2",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForISO639_2(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForISO639_2,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForLN[] = {
	"2.16.840.1.113883.6.1",	"LN",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForLN(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForLN,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForPOS[] = {
	"2.16.840.1.113883.6.50",	"POS",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForPOS(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForPOS,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForRFC3066[] = {
	"2.16.840.1.113883.6.121",	"RFC3066",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForRFC3066(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForRFC3066,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForSNM3[] = {
	"2.16.840.1.113883.6.51",	"SNM3",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForSNM3(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForSNM3,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForSCT[] = {
	"2.16.840.1.113883.6.96",	"SCT",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForSCT(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForSCT,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForSRT[] = {
	"2.16.840.1.113883.6.96",	"SRT",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForSRT(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForSRT,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForCTV3[] = {
	"2.16.840.1.113883.6.6",	"CTV3",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForCTV3(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForCTV3,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForUCUM[] = {
	"2.16.840.1.113883.6.8",	"UCUM",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForUCUM(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForUCUM,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForUMLS[] = {
	"2.16.840.1.113883.6.86",	"UMLS",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForUMLS(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForUMLS,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeUIDForUPC[] = {
	"2.16.840.1.113883.6.55",	"UPC",
	0,0
};

char *
StringValueDescription_CodingSchemeUIDForUPC(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeUIDForUPC,value);
}

static struct StringValueEntry
StringValueTable_MiscellaneousCodingSchemeUIDs[] = {
	"2.16.840.1.113883.6.76",	"ACR",
	"1.2.840.10065.1.12",	"ASTM-sigpurpose",
	"2.16.840.1.113883.6.12",	"C4",
	"2.16.840.1.113883.6.82",	"C5",
	"2.16.840.1.113883.6.13",	"CD2",
	"2.16.840.1.113883.6.6",	"CTV3",
	"1.2.840.10008.2.16.4",	"DCM",
	"1.2.840.10008.2.6.1",	"DCMUID",
	"2.16.840.1.113883.6.14",	"HPC",
	"2.16.840.1.113883.6.3",	"I10",
	"2.16.840.1.113883.6.4",	"I10P",
	"2.16.840.1.113883.6.42",	"I9",
	"2.16.840.1.113883.6.2",	"I9C",
	"2.16.1",	"ISO3166_1",
	"2.16.840.1.113883.6.99",	"ISO639_1",
	"2.16.840.1.113883.6.100",	"ISO639_2",
	"1.2.840.10008.2.16.7",	"ITIS_TSN",
	"2.16.840.1.113883.6.1",	"LN",
	"1.2.840.10008.2.16.5",	"MA",
	"1.2.840.10008.2.16.8",	"MGI",
	"2.16.840.1.113883.3.26.1.1",	"NCIt",
	"2.16.840.1.113883.6.50",	"POS",
	"2.16.840.1.113883.6.256",	"RADLEX",
	"2.16.840.1.113883.6.121",	"RFC3066",
	"2.16.840.1.113883.6.51",	"SNM3",
	"2.16.840.1.113883.6.96",	"SRT/SCT",
	"1.2.840.10008.2.16.6",	"UBERON",
	"2.16.840.1.113883.6.8",	"UCUM",
	"2.16.840.1.113883.6.86",	"UMLS",
	"2.16.840.1.113883.6.55",	"UPC",
	"1.2.276.0.7230010.3.0.0.1",	"99_OFFIS_DCMTK",
	"1.3.6.1.4.1.5962.98.1",	"99PMP",
	"1.3.6.1.4.1.5962.98.2",	"99IPCMR",
	"1.3.6.1.4.1.43046.3.0.0",	"99QIICR",
	0,0
};

char *
StringValueDescription_MiscellaneousCodingSchemeUIDs(char * value)
{
	return StringValueDescription(StringValueTable_MiscellaneousCodingSchemeUIDs,value);
}

static struct StringValueEntry
StringValueTable_MiscellaneousCodingSchemeDesignators[] = {
	"99_OFFIS_DCMTK",	"OFFIS DCMTK",
	"99QIICR",	"NCI QIICR Project 3DSlicer BWH",
	"99HOLX",	"Hologic",
	"99IHE",	"IHE Connectathon",
	"99PDL-rad",	"PointDX",
	"99GEMS",	"GE",
	"99_MI",	"Siemens",
	"99NMG",	"Siemens NM",
	"99SMS_CTMR",	"Siemens CT MR",
	"99PMSBLUS",	"Philips Ultrasound",
	"99RPH",	"RadPharm",
	"99RPANATLOC",	"RadPharm anatomical locations",
	"99RPH_USERS",	"RadPharm users",
	"99PMP",	"PixelMed Publishing",
	"99PMPMRMF",	"PixelMed Publishing NEMA MRMF",
	"99IPCMR",	"Imaging Procedure Code Mapping Resource",
	"99SDM",	"SNOMED DICOM Microglossary",
	"99NCIAIM",	"NCI Annotation Imaging Markup",
	"99HOLXDXA",	"Hologic DXA",
	"99KINETDX",	"Siemens Acuson Ultrasound",
	"99NUMA",	"NUMA",
	"ACR",	"ACR Index for Radiological Diagnosis",
	"ART",	"WHO Adverse Reaction terms",
	"AS4",	"ASTM",
	"ASTM-sigpurpose",	"ASTM E 2084 Signature Purpose codes",
	"ATC",	"American Type Culture Collection",
	"BARI",	"Bypass Angiography Revascularization Inverstigation",
	"BI",	"BI-RADS",
	"C4",	"CPT-4",
	"C5",	"CPT-5",
	"caDSR",	"Cancer Data Standard Repository",
	"CAS",	"Chemical Abstract Codes",
	"CD2",	"American Dental Association Current Dental Terminology 2",
	"CDCA",	"CDC Analyte Codes",
	"CDCM",	"CDC Methods/Instruments Codes",
	"CDS",	"CDC Surveillance Codes",
	"CE",	"CEN ECG Diagnostic Codes",
	"CST",	"COSTART coding system for adverse drug reactions",
	"CTV3",	"NHS Clinical Terms Version 3 (Read Codes)",
	"DC",	"Dublin Core",
	"DCM",	"DICOM Controlled Terminology",
	"DCMUID",	"DICOM UID Registry",
	"E",	"Euclides AFP codes",
	"E5",	"Euclides Kind Of Quantity Codes",
	"E6",	"Euclides Lab Method Codes",
	"E7",	"Euclides Lab Equipment Codes",
	"ENZC",	"Enzyme Codes",
	"FDK",	"FDA K10",
	"FMA",	"Digital Anatomist Foundational Model of Anatomy",
	"HB",	"HIBCC",
	"HHCC",	"Home Health Care Classification System",
	"HI",	"Health Outcomes Institute codes for outcome variables",
	"HPC",	"Healthcare Financing Administration (HCFA) Common Procedure CodingSystem (HCPCS)",
	"JC8",	"Japanese Chemistry",
	"ICS",	"ICCS",
	"I9",	"ICD9",
	"I9C",	"ICD9-CM",
	"I10",	"ICD10",
	"I10P",	"ICD10 Procedure Coding System",
	"IBT",	"ISBT",
	"ICS",	"ICCS",
	"IETF4646",	"IETF RFC 4646 language codes",
	"ISO3166_1",	"ISO 2 letter country codes",
	"ISO639_1",	"ISO 2 letter language codes",
	"ISO639_2",	"ISO 3 letter language codes",
	"ISO_OID",	"ISO OSI Object Identifier Tree",
	"ITIS_TSN",	"Integrated Taxonomic Information System Taxonomic Serial Number",
	"IUC",	"IUPAC/IFCC Recommendations of Quantities and Units in Clinical Chemistry",
	"IUPC",	"IUPAC component (analyte) codes",
	"IUPP",	"IUPAC property codes",
	"JC8",	"Japanese Chemistry Clinical examination classification code",
	"LN",	"LOINC",
	"MA",	"Adult Mouse Anatomy Ontology",
	"MCD",	"Medicaid billing codes/names",
	"MCR",	"Medicare billing codes/names",
	"MDC",	"ISO/IEEE 11073 Medical Device Nomenclature",
	"MDDX",	"Medispan diagnostic codes",
	"MDNS",	"Universal Medical Device Nomenclature System",
	"MEDC",	"Medical Economics Drug Codes",
	"MEDR",	"Medical Dictionary for Drug Regulatory Affairs (MEDDRA)",
	"MEDX",	"Medical Economics Diagnostic Codes",
	"MGI",	"Mouse Genome Initiative",
	"MGPI",	"Medispan GPI hierarchical drug codes",
	"MSH",	"NLM Medical Subject Headings",
	"MVX",	"CDC Vaccine Codes",
	"NBD",	"NASPE/BPEG Defibrillator Code",
	"NBG",	"NASPE/BPEG Generic Pacemaker Code",
	"NCDR",	"American College of Cardiology National Cardiovascular Data Registry Cath Lab Module",
	"NCIt",	"NCI Thesaurus",
	"NDC",	"National Drug Codes FDA",
	"NEU",	"NeuroNames",
	"NIC",	"Nursing Interventions Iowa Intervention Project",
	"NICIP",	"UK National Health Service National Interim Clinical Imaging Procedures (NICIP) Short Code",
	"NPI",	"HCFA National Provider Identifier",
	"POS",	"HCFA Place of Service (POS) Codes for Professional Claims",
	"PUBCHEM_CID",	"US National Center for Biotechnology Information (NCBI) PubChem Compound CID",
	"RADLEX",	"RadLex",
	"RC",	"Read Clinical Classification of Medicine",
	"RFC3066",	"IETF RFC 3066 language codes",
	"RFC5646",	"IETF RFC 5646 language codes",
	"SCPECG",	"Standard Communications Protocol for Computer-Assisted Electrocardiography",
	"SNM3",	"SNOMED International Version 3",
	"SCT",	"SNOMED-CT",
	"SRT",	"SNOMED-RT",
	"UBERON",	"Uberon integrated cross-species ontology",
	"UC",	"UCDS",
	"UCUM",	"Unified Code for Units of Measure",
	"UMD",	"Universal Medical Device Nomenclature System MDNS",
	"UML",	"Unified Medical Language",
	"UMLS",	"UMLS codes as CUIs making up the values in a coding system",
	"UPC",	"Universal Product Code - Universal Code Council",
	"UPIN",	"HCFA Universal Physician Identification Numbers",
	"W1",	"WHO Record Number 6 Digit Drug Codes",
	"W2",	"WHO Record Number 8 Digit Drug Codes",
	"W4",	"WHO Record Number With ASTM Extensions",
	"WC",	"WHO ATC",
	0,0
};

char *
StringValueDescription_MiscellaneousCodingSchemeDesignators(char * value)
{
	return StringValueDescription(StringValueTable_MiscellaneousCodingSchemeDesignators,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeDesignatorUCUM[] = {
	"UCUM",	"Unified Code for Units of Measure",
	0,0
};

char *
StringValueDescription_CodingSchemeDesignatorUCUM(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeDesignatorUCUM,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeDesignatorLOINC[] = {
	"LN",	"LOINC",
	0,0
};

char *
StringValueDescription_CodingSchemeDesignatorLOINC(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeDesignatorLOINC,value);
}

static struct StringValueEntry
StringValueTable_VisitStatusID[] = {
	"CREATED",	"",
	"SCHEDULED",	"",
	"ADMITTED",	"",
	"DISCHARGED",	"",
	0,0
};

char *
StringValueDescription_VisitStatusID(char * value)
{
	return StringValueDescription(StringValueTable_VisitStatusID,value);
}

static struct StringValueEntry
StringValueTable_StudyStatusID[] = {
	"CREATED",	"",
	"SCHEDULED",	"",
	"ARRIVED",	"",
	"STARTED",	"",
	"COMPLETED",	"",
	"VERIFIED",	"",
	"READ",	"",
	0,0
};

char *
StringValueDescription_StudyStatusID(char * value)
{
	return StringValueDescription(StringValueTable_StudyStatusID,value);
}

static struct StringValueEntry
StringValueTable_StudyComponentStatusID[] = {
	"CREATED",	"",
	"INCOMPLETE",	"",
	"COMPLETED",	"",
	"VERIFIED",	"",
	"POSTINTERPRET",	"",
	0,0
};

char *
StringValueDescription_StudyComponentStatusID(char * value)
{
	return StringValueDescription(StringValueTable_StudyComponentStatusID,value);
}

static struct StringValueEntry
StringValueTable_InterpretationTypeID[] = {
	"REPORT",	"",
	"AMMENDMENT",	"",
	0,0
};

char *
StringValueDescription_InterpretationTypeID(char * value)
{
	return StringValueDescription(StringValueTable_InterpretationTypeID,value);
}

static struct StringValueEntry
StringValueTable_InterpretationStatusID[] = {
	"CREATED",	"",
	"RECORDED",	"",
	"TRANSCRIBED",	"",
	"APPROVED",	"",
	0,0
};

char *
StringValueDescription_InterpretationStatusID(char * value)
{
	return StringValueDescription(StringValueTable_InterpretationStatusID,value);
}

static struct StringValueEntry
StringValueTable_Sex[] = {
	"M",	"Male",
	"F",	"Female",
	"O",	"Other",
	"",	"",
	0,0
};

char *
StringValueDescription_Sex(char * value)
{
	return StringValueDescription(StringValueTable_Sex,value);
}

static struct StringValueEntry
StringValueTable_Laterality[] = {
	"R",	"Right",
	"L",	"Left",
	0,0
};

char *
StringValueDescription_Laterality(char * value)
{
	return StringValueDescription(StringValueTable_Laterality,value);
}

static struct StringValueEntry
StringValueTable_BodyPartExaminedHuman[] = {
	"ABDOMEN",	"",
	"ABDOMENPELVIS",	"",
	"ADRENAL",	"",
	"ANKLE",	"",
	"AORTA",	"",
	"ARM",	"",
	"AXILLA",	"",
	"BACK",	"",
	"BLADDER",	"",
	"BRAIN",	"",
	"BREAST",	"",
	"BRONCHUS",	"",
	"BUTTOCK",	"",
	"CALCANEUS",	"",
	"CALF",	"",
	"CAROTID",	"",
	"CEREBELLUM",	"",
	"CSPINE",	"",
	"CTSPINE",	"",
	"CERVIX",	"",
	"CHEEK",	"",
	"CHEST",	"",
	"CHESTABDOMEN",	"",
	"CHESTABDPELVIS",	"",
	"CIRCLEOFWILLIS",	"",
	"CLAVICLE",	"",
	"COCCYX",	"",
	"COLON",	"",
	"CORNEA",	"",
	"CORONARYARTERY",	"",
	"DUODENUM",	"",
	"EAR",	"",
	"ELBOW",	"",
	"WHOLEBODY",	"",
	"ESOPHAGUS",	"",
	"EXTREMITY",	"",
	"EYE",	"",
	"EYELID",	"",
	"FACE",	"",
	"FEMUR",	"",
	"FINGER",	"",
	"FOOT",	"",
	"GALLBLADDER",	"",
	"HAND",	"",
	"HEAD",	"",
	"HEADNECK",	"",
	"HEART",	"",
	"HIP",	"",
	"HUMERUS",	"",
	"ILEUM",	"",
	"ILIUM",	"",
	"IAC",	"",
	"JAW",	"",
	"JEJUNUM",	"",
	"KIDNEY",	"",
	"KNEE",	"",
	"LARYNX",	"",
	"LEG",	"",
	"LIVER",	"",
	"LSPINE",	"",
	"LSSPINE",	"",
	"LUNG",	"",
	"JAW",	"",
	"MAXILLA",	"",
	"MEDIASTINUM",	"",
	"MOUTH",	"",
	"NECK",	"",
	"NECKCHEST",	"",
	"NECKCHESTABDOMEN",	"",
	"NECKCHESTABDPELV",	"",
	"NOSE",	"",
	"ORBIT",	"",
	"OVARY",	"",
	"PANCREAS",	"",
	"PAROTID",	"",
	"PATELLA",	"",
	"PELVIS",	"",
	"PENIS",	"",
	"PHARYNX",	"",
	"PROSTATE",	"",
	"RECTUM",	"",
	"RIB",	"",
	"SSPINE",	"",
	"SCALP",	"",
	"SCAPULA",	"",
	"SCLERA",	"",
	"SCROTUM",	"",
	"SHOULDER",	"",
	"SKULL",	"",
	"SPINE",	"",
	"SPLEEN",	"",
	"STERNUM",	"",
	"STOMACH",	"",
	"SUBMANDIBULAR",	"",
	"TMJ",	"",
	"TESTIS",	"",
	"THIGH",	"",
	"TSPINE",	"",
	"TLSPINE",	"",
	"THUMB",	"",
	"THYMUS",	"",
	"THYROID",	"",
	"TOE",	"",
	"TONGUE",	"",
	"TRACHEA",	"",
	"URETER",	"",
	"URETHRA",	"",
	"UTERUS",	"",
	"VAGINA",	"",
	"VULVA",	"",
	"WRIST",	"",
	"ZYGOMA",	"",
	0,0
};

char *
StringValueDescription_BodyPartExaminedHuman(char * value)
{
	return StringValueDescription(StringValueTable_BodyPartExaminedHuman,value);
}

static struct StringValueEntry
StringValueTable_BodyPartExaminedAnimal[] = {
	"ABDOMEN",	"",
	"LEGS",	"",
	"ATLANTOAXIAL",	"",
	"ATLANTOOCCIPITAL",	"",
	"BLADDER",	"",
	"CARPUS",	"",
	"CSPINE",	"",
	"CTSPINE",	"",
	"CHEST",	"",
	"CHESTABDOMEN",	"",
	"TAIL",	"",
	"COLON",	"",
	"DIGIT",	"",
	"DISTALPHALANX",	"",
	"ELBOW",	"",
	"WHOLEBODY",	"",
	"ESOPHAGUS",	"",
	"FEMUR",	"",
	"FOREFETLOCK",	"",
	"HINDFETLOCK",	"",
	"FOREFOOT",	"",
	"FRONTALSINUS",	"",
	"HINDFOOT",	"",
	"HIP",	"",
	"HUMERUS",	"",
	"LSPINE",	"",
	"LSSPINE",	"",
	"JAW",	"",
	"METACARPUS",	"",
	"METATARSUS",	"",
	"NAVICULAR",	"",
	"FOREPASTERN",	"",
	"HINDPASTERN",	"",
	"PATELLA",	"",
	"PELVIS",	"",
	"RADIUSULNA",	"",
	"SSPINE",	"",
	"SHOULDER",	"",
	"SKULL",	"",
	"STIFLE",	"",
	"TARSUS",	"",
	"TSPINE",	"",
	"TLSPINE",	"",
	"TIBIAFIBULA",	"",
	"UGITRACT",	"",
	"URETHRA",	"",
	"URINARYTRACT",	"",
	"WING",	"",
	0,0
};

char *
StringValueDescription_BodyPartExaminedAnimal(char * value)
{
	return StringValueDescription(StringValueTable_BodyPartExaminedAnimal,value);
}

static struct StringValueEntry
StringValueTable_Modality[] = {
	"AR",	"Autorefraction",
	"AU",	"Audio",
	"BI",	"Biomagnetic Imaging",
	"BDUS",	"Bone Densitometry (ultrasound)",
	"BMD",	"Bone Densitometry (X-ray)",
	"CR",	"Computed Radiography",
	"CT",	"Computed Tomography",
	"DG",	"Diaphanography",
	"DOC",	"Document",
	"DX",	"Digital Radiography",
	"ECG",	"Electrocardiography",
	"EPS",	"Cardiac Electrophysiology",
	"ES",	"Endoscopy",
	"FID",	"Fiducials",
	"GM",	"General Microscopy",
	"HC",	"Hard Copy",
	"HD",	"Hemodynamic Waveform",
	"IO",	"Intra-oral Radiography",
	"IOL",	"Intraocular Lens Data",
	"IVOCT",	"Intravascular Optical Coherence Tomography",
	"IVUS",	"Intravascular Ultrasound",
	"KER",	"Keratometry",
	"KO",	"Key Object Selection",
	"LEN",	"Lensometry",
	"LS",	"Laser Surface Scan",
	"M3D",	"Model for 3D Manufacturing",
	"MG",	"Mammography",
	"MR",	"Magnetic Resonance",
	"NM",	"Nuclear Medicine",
	"OAM",	"Ophthalmic Axial Measurements",
	"OCT",	"Optical Coherence Tomography (non-Ophthalmic)",
	"OP",	"Ophthalmic Photography",
	"OPM",	"Ophthalmic Mapping",
	"OPT",	"Ophthalmic Tomography",
	"OPTBSV",	"Ophthalmic Tomography B-scan Volume Analysis",
	"OPTENF",	"Ophthalmic Tomography En Face",
	"OPV",	"Ophthalmic Visual Field",
	"OT",	"Other",
	"PLAN",	"Plan",
	"PR",	"Presentation State",
	"PT",	"Positron Emmission Tomography",
	"PX",	"Panoramic X-Ray",
	"REG",	"Registration",
	"RESP",	"Respiratory Waveform",
	"RF",	"RadioFluoroscopy",
	"RG",	"Radiographic Imaging Conventional Film Screen",
	"RTDOSE",	"RT Dose",
	"RTIMAGE",	"RT Image",
	"RTPLAN",	"RT Plan",
	"RTRECORD",	"RT Treatment Record",
	"RTSTRUCT",	"RT Structure Set",
	"RWV",	"Real World Value",
	"SEG",	"Segmentation",
	"SM",	"Slide Microscopy",
	"SMR",	"Stereometric Relationship",
	"SR",	"SR Document",
	"SRF",	"Subjective Refraction",
	"STAIN",	"Automated Slide Stainer",
	"TG",	"Thermography",
	"US",	"Ultrasound",
	"VA",	"Visual Acuity",
	"XA",	"X-Ray Angiography",
	"XC",	"External Camera Photography",
	0,0
};

char *
StringValueDescription_Modality(char * value)
{
	return StringValueDescription(StringValueTable_Modality,value);
}

static struct StringValueEntry
StringValueTable_PatientPosition[] = {
	"HFP",	"Head First Prone",
	"HFS",	"Head First Supine",
	"HFDR",	"Head First Decubitus Right",
	"HFDL",	"Head First Decubitus Right",
	"FFP",	"Feet First Prone",
	"FFS",	"Feet First Supine",
	"FFDR",	"Feet First Decubitus Right",
	"FFDL",	"Feet First Decubitus Right",
	"LFP",	"Left First-Prone",
	"LFS",	"Left First-Supine",
	"RFP",	"Right First-Prone",
	"RFS",	"Right First-Supine",
	"AFDR",	"Anterior First Decubitus Right",
	"AFDL",	"Anterior First Decubitus Left",
	"PFDR",	"Posterior First Decubitus Right",
	"PFDL",	"Posterior First Decubitus Left",
	0,0
};

char *
StringValueDescription_PatientPosition(char * value)
{
	return StringValueDescription(StringValueTable_PatientPosition,value);
}

static struct StringValueEntry
StringValueTable_ViewPositionHuman[] = {
	"AP",	"Anterior Posterior",
	"PA",	"Posterior Anterior",
	"LL",	"Left Lateral",
	"RL",	"Right Lateral",
	"RLD",	"Right Lateral Decubitus",
	"LLD",	"Left Lateral Decubitus",
	"RLO",	"Right Lateral Oblique",
	"LLO",	"Left Lateral Oblique",
	0,0
};

char *
StringValueDescription_ViewPositionHuman(char * value)
{
	return StringValueDescription(StringValueTable_ViewPositionHuman,value);
}

static struct StringValueEntry
StringValueTable_ViewPositionAnimal[] = {
	"CDDI_CRPRO",	"",
	"CD10DI_CRPRO",	"",
	"CDCR",	"",
	"DV",	"",
	"DL_PAMO",	"",
	"D35L_PAMO",	"",
	"D40L_PAMO",	"",
	"D60L_PAMO",	"",
	"DL_PLMO",	"",
	"D35L_PLMO",	"",
	"D40L_PLMO",	"",
	"D45L_PLMO",	"",
	"D60L_PLMO",	"",
	"DM_PALO",	"",
	"D35M_PALO",	"",
	"D40M_PALO",	"",
	"D45M_PALO",	"",
	"D60M_PALO",	"",
	"DM_PLLO",	"",
	"D35M_PLLO",	"",
	"D40M_PLLO",	"",
	"D45M_PLLO",	"",
	"D60M_PLLO",	"",
	"DPA",	"",
	"DPL",	"",
	"DPR_PADIO",	"",
	"D65PR_PADIO",	"",
	"DPR_PLDIO",	"",
	"D65PR_PLDIO",	"",
	"DR_VCDO",	"",
	"D20R_VCDO",	"",
	"LDPR_MPADIO",	"",
	"L45D50PR_MPADIO",	"",
	"LDPR_MPLDIO",	"",
	"L45D50PR_MPLDIO",	"",
	"LM",	"",
	"LECD_RTRO",	"",
	"LE30CD_RTRO",	"",
	"LED_RTVO",	"",
	"LE20D_RTVO",	"",
	"LE45D_RTVO",	"",
	"LER_RTCDO",	"",
	"LE20R_RTCDO",	"",
	"LEV_RTDO",	"",
	"LE20V_RTDO",	"",
	"LE45V_RTDO",	"",
	"LERTL",	"",
	"ML",	"",
	"PAM_DLO",	"",
	"PA45M_DLO",	"",
	"PAPR_DDIO",	"",
	"PA75PR_DDIO",	"",
	"PLL_DMO",	"",
	"PL60L_DMO",	"",
	"PLPR_DDIO",	"",
	"PL75PR_DDIO",	"",
	"PRDI",	"",
	"RTCD_LERO",	"",
	"RT30CD_LERO",	"",
	"RTD_LEVO",	"",
	"RT20D_LEVO",	"",
	"RT45D_LEVO",	"",
	"RTR_LECDO",	"",
	"RT20R_LECDO",	"",
	"RTV_LEDO",	"",
	"RT20V_LEDO",	"",
	"RT45V_LEDO",	"",
	"RTLEL",	"",
	"RCD",	"",
	"RD_CDVO",	"",
	"R20D_CDVO",	"",
	"RV_CDDO",	"",
	"R30V_CDDO",	"",
	"VLE_DRTO",	"",
	"V30LE_DRTO",	"",
	"VRT_DLEO",	"",
	"V30RT_DLEO",	"",
	"VD",	"",
	"VR_DCDO",	"",
	"V20R_DCDO",	"",
	0,0
};

char *
StringValueDescription_ViewPositionAnimal(char * value)
{
	return StringValueDescription(StringValueTable_ViewPositionAnimal,value);
}

static struct StringValueEntry
StringValueTable_CassetteSize[] = {
	"18CMX24CM",	"",
	"8INX10IN",	"",
	"24CMX30CM",	"",
	"10INX12IN",	"",
	"30CMX35CM",	"",
	"30CMX40CM",	"",
	"11INX14IN",	"",
	"35CMX35CM",	"",
	"14INX14IN",	"",
	"35CMX43CM",	"",
	"14INX17IN",	"",
	0,0
};

char *
StringValueDescription_CassetteSize(char * value)
{
	return StringValueDescription(StringValueTable_CassetteSize,value);
}

static struct StringValueEntry
StringValueTable_RotationDirection[] = {
	"CW",	"Clockwise",
	"CC",	"CounterClockwise",
	0,0
};

char *
StringValueDescription_RotationDirection(char * value)
{
	return StringValueDescription(StringValueTable_RotationDirection,value);
}

static struct StringValueEntry
StringValueTable_RotationDirectionWithNone[] = {
	"CW",	"Clockwise",
	"CC",	"CounterClockwise",
	"NONE",	"No Rotation",
	0,0
};

char *
StringValueDescription_RotationDirectionWithNone(char * value)
{
	return StringValueDescription(StringValueTable_RotationDirectionWithNone,value);
}

static struct StringValueEntry
StringValueTable_ScanningSequence[] = {
	"SE",	"Spin Echo",
	"IR",	"Inversion Recovery",
	"GR",	"Gradient Recalled",
	"EP",	"Echo Planar",
	"RM",	"Research Mode",
	0,0
};

char *
StringValueDescription_ScanningSequence(char * value)
{
	return StringValueDescription(StringValueTable_ScanningSequence,value);
}

static struct StringValueEntry
StringValueTable_SequenceVariant[] = {
	"SK",	"Segmented K Space",
	"MTC",	"Magnetization Transfer CDontrast",
	"SS",	"Steady State",
	"TRSS",	"Time Reversed Steady State",
	"SP",	"Spoiled",
	"MP",	"Magnetization Prepared",
	"OSP",	"Oversampling Phase",
	"NONE",	"No Sequence Variant",
	0,0
};

char *
StringValueDescription_SequenceVariant(char * value)
{
	return StringValueDescription(StringValueTable_SequenceVariant,value);
}

static struct StringValueEntry
StringValueTable_ScanOptions[] = {
	"PER",	"Phase Encode Reordering",
	"RG",	"Respiratory Gating",
	"CG",	"Cardiac Gating",
	"PPG",	"Peripheral Pulse Gating",
	"FC",	"Flow Compensation",
	"PFF",	"Partial Fourier Frequency",
	"PFP",	"Partial Fourier Phase",
	"SP",	"Spatial Presaturation",
	"FS",	"Fat Saturation",
	0,0
};

char *
StringValueDescription_ScanOptions(char * value)
{
	return StringValueDescription(StringValueTable_ScanOptions,value);
}

static struct StringValueEntry
StringValueTable_MRAcquisitionType[] = {
	"2D",	"Frequency x Phase",
	"3D",	"Frequency x Phase x Phase",
	0,0
};

char *
StringValueDescription_MRAcquisitionType(char * value)
{
	return StringValueDescription(StringValueTable_MRAcquisitionType,value);
}

static struct StringValueEntry
StringValueTable_AngioFlag[] = {
	"Y",	"Image is Angio",
	"N",	"Image is not Angio",
	0,0
};

char *
StringValueDescription_AngioFlag(char * value)
{
	return StringValueDescription(StringValueTable_AngioFlag,value);
}

static struct StringValueEntry
StringValueTable_PhaseEncodingDirection[] = {
	"ROW",	"Phase Encoded in Rows",
	"COL",	"Phase Encoded in Columns",
	0,0
};

char *
StringValueDescription_PhaseEncodingDirection(char * value)
{
	return StringValueDescription(StringValueTable_PhaseEncodingDirection,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretation[] = {
	"MONOCHROME1",	"",
	"MONOCHROME2",	"",
	"PALETTE COLOR",	"",
	"RGB",	"",
	"YBR_FULL",	"",
	"YBR_FULL_422",	"",
	"YBR_PARTIAL_422",	"",
	"YBR_PARTIAL_420",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretation(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretation,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome[] = {
	"MONOCHROME1",	"",
	"MONOCHROME2",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome2[] = {
	"MONOCHROME2",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome2(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome2,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochromeOrPaletteColor[] = {
	"MONOCHROME1",	"",
	"MONOCHROME2",	"",
	"PALETTE COLOR",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochromeOrPaletteColor(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochromeOrPaletteColor,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationRGB[] = {
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationRGB(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationRGB,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome2OrRGB[] = {
	"MONOCHROME2",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome2OrRGB(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome2OrRGB,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome2OrRGBOrYBR_FULL422[] = {
	"MONOCHROME2",	"",
	"YBR_FULL_422",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome2OrRGBOrYBR_FULL422(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome2OrRGBOrYBR_FULL422,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRFull422[] = {
	"YBR_FULL_422",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRFull422(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRFull422,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRFull422OrRGB[] = {
	"YBR_FULL_422",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRFull422OrRGB(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRFull422OrRGB,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRICT[] = {
	"YBR_ICT",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRICT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRICT,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRRCT[] = {
	"YBR_RCT",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRRCT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRRCT,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRRCTOrRGB[] = {
	"YBR_RCT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRRCTOrRGB(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRRCTOrRGB,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRRCTOrICT[] = {
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRRCTOrICT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRRCTOrICT,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRRCTOrICTOrRGB[] = {
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRRCTOrICTOrRGB(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRRCTOrICTOrRGB,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRPartial420[] = {
	"YBR_PARTIAL_420",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRPartial420(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRPartial420,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRFull[] = {
	"YBR_FULL",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRFull(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRFull,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRFullOrRGBOrYBR_RCTOrYBR_ICT[] = {
	"YBR_FULL",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRFullOrRGBOrYBR_RCTOrYBR_ICT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRFullOrRGBOrYBR_RCTOrYBR_ICT,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationRGBOrYBR_FULL_422OrYBR_RCTOrYBR_ICTOrYBR_PARTIAL_420[] = {
	"YBR_FULL_422",	"",
	"YBR_PARTIAL_420",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationRGBOrYBR_FULL_422OrYBR_RCTOrYBR_ICTOrYBR_PARTIAL_420(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationRGBOrYBR_FULL_422OrYBR_RCTOrYBR_ICTOrYBR_PARTIAL_420,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome2OrRGBOrYBR_FULL_422OrYBR_RCTOrYBR_ICTOrYBR_PARTIAL_420[] = {
	"MONOCHROME2",	"",
	"YBR_FULL_422",	"",
	"YBR_PARTIAL_420",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome2OrRGBOrYBR_FULL_422OrYBR_RCTOrYBR_ICTOrYBR_PARTIAL_420(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome2OrRGBOrYBR_FULL_422OrYBR_RCTOrYBR_ICTOrYBR_PARTIAL_420,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationRGBOrYBR_RCT[] = {
	"YBR_RCT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationRGBOrYBR_RCT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationRGBOrYBR_RCT,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRFullOrRGB[] = {
	"YBR_FULL",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRFullOrRGB(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRFullOrRGB,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationYBRFullOrRGBOrYBR_RCT[] = {
	"YBR_FULL",	"",
	"YBR_RCT",	"",
	"RGB",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationYBRFullOrRGBOrYBR_RCT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationYBRFullOrRGBOrYBR_RCT,value);
}

static struct StringValueEntry
StringValueTable_ImageType1[] = {
	"ORIGINAL",	"",
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_ImageType1(char * value)
{
	return StringValueDescription(StringValueTable_ImageType1,value);
}

static struct StringValueEntry
StringValueTable_ImageType1OriginalOnly[] = {
	"ORIGINAL",	"",
	0,0
};

char *
StringValueDescription_ImageType1OriginalOnly(char * value)
{
	return StringValueDescription(StringValueTable_ImageType1OriginalOnly,value);
}

static struct StringValueEntry
StringValueTable_ImageType1DerivedOnly[] = {
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_ImageType1DerivedOnly(char * value)
{
	return StringValueDescription(StringValueTable_ImageType1DerivedOnly,value);
}

static struct StringValueEntry
StringValueTable_ImageType2[] = {
	"PRIMARY",	"",
	"SECONDARY",	"",
	0,0
};

char *
StringValueDescription_ImageType2(char * value)
{
	return StringValueDescription(StringValueTable_ImageType2,value);
}

static struct StringValueEntry
StringValueTable_ImageType2PrimaryOnly[] = {
	"PRIMARY",	"",
	0,0
};

char *
StringValueDescription_ImageType2PrimaryOnly(char * value)
{
	return StringValueDescription(StringValueTable_ImageType2PrimaryOnly,value);
}

static struct StringValueEntry
StringValueTable_CTImageType3[] = {
	"AXIAL",	"",
	"LOCALIZER",	"",
	0,0
};

char *
StringValueDescription_CTImageType3(char * value)
{
	return StringValueDescription(StringValueTable_CTImageType3,value);
}

static struct StringValueEntry
StringValueTable_CTImageType4[] = {
	"VMI",	"",
	"MAT_SPECIFIC",	"",
	"MAT_REMOVED",	"",
	"MAT_FRACTIONAL",	"",
	"EFF_ATOMIC_NUM",	"",
	"ELECTRON_DENSITY",	"",
	"MAT_MODIFIED",	"",
	"MAT_VALUE_BASED",	"",
	"",	"",
	0,0
};

char *
StringValueDescription_CTImageType4(char * value)
{
	return StringValueDescription(StringValueTable_CTImageType4,value);
}

static struct StringValueEntry
StringValueTable_MRImageType3[] = {
	"MPR",	"",
	"PROJECTION IMAGE",	"",
	"T1 MAP",	"",
	"T2 MAP",	"",
	"DIFFUSION MAP",	"",
	"DENSITY MAP",	"",
	"PHASE MAP",	"",
	"VELOCITY MAP",	"",
	"IMAGE ADDITION",	"",
	"PHASE SUBTRACT",	"",
	"MODULUS SUBTRACT",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_MRImageType3(char * value)
{
	return StringValueDescription(StringValueTable_MRImageType3,value);
}

static struct StringValueEntry
StringValueTable_ConversionType[] = {
	"DV",	"Digitized Video",
	"DI",	"Digital Interface",
	"DF",	"Digitized Film",
	"WSD",	"Workstation",
	"SD",	"Scanned Document",
	"SI",	"Scanned Image",
	"DRW",	"Drawing",
	"SYN",	"Synthetic Image",
	0,0
};

char *
StringValueDescription_ConversionType(char * value)
{
	return StringValueDescription(StringValueTable_ConversionType,value);
}

static struct StringValueEntry
StringValueTable_OverlayType[] = {
	"G",	"Graphics",
	"R",	"ROI",
	0,0
};

char *
StringValueDescription_OverlayType(char * value)
{
	return StringValueDescription(StringValueTable_OverlayType,value);
}

static struct StringValueEntry
StringValueTable_CurveTypeOfData[] = {
	"TAC",	"Time Activity Curve",
	"PROF",	"Image Profile",
	"HIST",	"Histogram",
	"ROI",	"Polygraphic Region Of Interest",
	"TABL",	"Table of Values",
	"FILT",	"Filter Kernel",
	"POLY",	"Poly Line",
	"ECG",	"ECG Data",
	"PRESSURE",	"Pressure Data",
	"FLOW",	"Flow Data",
	"PHYSIO",	"Physiological Data",
	"RESP",	"Respiration Trace",
	0,0
};

char *
StringValueDescription_CurveTypeOfData(char * value)
{
	return StringValueDescription(StringValueTable_CurveTypeOfData,value);
}

static struct StringValueEntry
StringValueTable_CurveAxisUnits[] = {
	"SEC",	"Seconds",
	"CNTS",	"Counts",
	"MM",	"millimeters",
	"PIXL",	"Pixels",
	"NONE",	"Unitless",
	"BPM",	"beats/min",
	"CM",	"centimeters",
	"CMS",	"centimeters/second",
	"CM2",	"cm**2",
	"CM2S",	"cm**2/second",
	"CM3",	"cm**3",
	"CM3S",	"cm**3/second",
	"CMS2",	"cm/second**2",
	"DB",	"dB",
	"DBS",	"dB/second",
	"DEG",	"degrees",
	"GM",	"gram",
	"GMM2",	"gram/meter**2",
	"HZ",	"Hertz",
	"IN",	"inch",
	"KG",	"kg",
	"LMIN",	"liters/minute",
	"LMINM2",	"liters/minute/meter**2",
	"M2",	"meters **2",
	"MS2",	"meters/sec**2",
	"MLM2",	"milliliters/meter**2",
	"MILS",	"milliseconds",
	"MILV",	"millivolts",
	"MMHG",	"mmHg",
	"PCNT",	"percent",
	"LB",	"pound",
	0,0
};

char *
StringValueDescription_CurveAxisUnits(char * value)
{
	return StringValueDescription(StringValueTable_CurveAxisUnits,value);
}

static struct StringValueEntry
StringValueTable_ModalityLUTType[] = {
	"OD",	"Optical Density (thousandths)",
	"HU",	"Hounsfield Units",
	"US",	"Unspecified",
	0,0
};

char *
StringValueDescription_ModalityLUTType(char * value)
{
	return StringValueDescription(StringValueTable_ModalityLUTType,value);
}

static struct StringValueEntry
StringValueTable_ModalityLUTTypeUnspecified[] = {
	"US",	"Unspecified",
	0,0
};

char *
StringValueDescription_ModalityLUTTypeUnspecified(char * value)
{
	return StringValueDescription(StringValueTable_ModalityLUTTypeUnspecified,value);
}

static struct StringValueEntry
StringValueTable_LossyImageCompression[] = {
	"00",	"Image has not been subjected to lossy compression",
	"01",	"Image has been subjected to lossy compression",
	0,0
};

char *
StringValueDescription_LossyImageCompression(char * value)
{
	return StringValueDescription(StringValueTable_LossyImageCompression,value);
}

static struct StringValueEntry
StringValueTable_PerformedProcedureStepStatus[] = {
	"IN PROGRESS",	"",
	"DISCONTINUED",	"",
	"COMPLETED",	"",
	0,0
};

char *
StringValueDescription_PerformedProcedureStepStatus(char * value)
{
	return StringValueDescription(StringValueTable_PerformedProcedureStepStatus,value);
}

static struct StringValueEntry
StringValueTable_SecondaryCapturePresentationLUTShape[] = {
	"IDENTITY",	"",
	0,0
};

char *
StringValueDescription_SecondaryCapturePresentationLUTShape(char * value)
{
	return StringValueDescription(StringValueTable_SecondaryCapturePresentationLUTShape,value);
}

static struct StringValueEntry
StringValueTable_RescaleTypeUnspecified[] = {
	"US",	"",
	0,0
};

char *
StringValueDescription_RescaleTypeUnspecified(char * value)
{
	return StringValueDescription(StringValueTable_RescaleTypeUnspecified,value);
}

static struct StringValueEntry
StringValueTable_TransportDirection[] = {
	"ROW",	"",
	"COLUMN",	"",
	0,0
};

char *
StringValueDescription_TransportDirection(char * value)
{
	return StringValueDescription(StringValueTable_TransportDirection,value);
}

static struct StringValueEntry
StringValueTable_MACAlgorithm[] = {
	"RIPEMD160",	"",
	"MD5",	"",
	"SHA1",	"",
	0,0
};

char *
StringValueDescription_MACAlgorithm(char * value)
{
	return StringValueDescription(StringValueTable_MACAlgorithm,value);
}

static struct StringValueEntry
StringValueTable_CertificateType[] = {
	"X509_1993_SIG",	"",
	0,0
};

char *
StringValueDescription_CertificateType(char * value)
{
	return StringValueDescription(StringValueTable_CertificateType,value);
}

static struct StringValueEntry
StringValueTable_CertifiedTimestampType[] = {
	"CMS_TSP",	"",
	0,0
};

char *
StringValueDescription_CertifiedTimestampType(char * value)
{
	return StringValueDescription(StringValueTable_CertifiedTimestampType,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeRegistries[] = {
	"HL7",	"",
	0,0
};

char *
StringValueDescription_CodingSchemeRegistries(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeRegistries,value);
}

static struct StringValueEntry
StringValueTable_SEGModality[] = {
	"SEG",	"",
	0,0
};

char *
StringValueDescription_SEGModality(char * value)
{
	return StringValueDescription(StringValueTable_SEGModality,value);
}

static struct StringValueEntry
StringValueTable_REGModality[] = {
	"REG",	"",
	0,0
};

char *
StringValueDescription_REGModality(char * value)
{
	return StringValueDescription(StringValueTable_REGModality,value);
}

static struct StringValueEntry
StringValueTable_FIDModality[] = {
	"FID",	"",
	0,0
};

char *
StringValueDescription_FIDModality(char * value)
{
	return StringValueDescription(StringValueTable_FIDModality,value);
}

static struct StringValueEntry
StringValueTable_FrameOfReferenceTransformationMatrixType[] = {
	"RIGID",	"",
	"RIGID_SCALE",	"",
	"AFFINE",	"",
	0,0
};

char *
StringValueDescription_FrameOfReferenceTransformationMatrixType(char * value)
{
	return StringValueDescription(StringValueTable_FrameOfReferenceTransformationMatrixType,value);
}

static struct StringValueEntry
StringValueTable_FiducialShapeType[] = {
	"POINT",	"",
	"LINE",	"",
	"PLANE",	"",
	"SURFACE",	"",
	"RULER",	"",
	"L_SHAPE",	"",
	"T_SHAPE",	"",
	"SHAPE",	"",
	0,0
};

char *
StringValueDescription_FiducialShapeType(char * value)
{
	return StringValueDescription(StringValueTable_FiducialShapeType,value);
}

static struct StringValueEntry
StringValueTable_IdentityPresentationLUTShape[] = {
	"IDENTITY",	"",
	0,0
};

char *
StringValueDescription_IdentityPresentationLUTShape(char * value)
{
	return StringValueDescription(StringValueTable_IdentityPresentationLUTShape,value);
}

static struct StringValueEntry
StringValueTable_InversePresentationLUTShape[] = {
	"INVERSE",	"",
	0,0
};

char *
StringValueDescription_InversePresentationLUTShape(char * value)
{
	return StringValueDescription(StringValueTable_InversePresentationLUTShape,value);
}

static struct StringValueEntry
StringValueTable_IdentityOrInversePresentationLUTShape[] = {
	"IDENTITY",	"",
	"INVERSE",	"",
	0,0
};

char *
StringValueDescription_IdentityOrInversePresentationLUTShape(char * value)
{
	return StringValueDescription(StringValueTable_IdentityOrInversePresentationLUTShape,value);
}

static struct StringValueEntry
StringValueTable_MIMETypeApplicationPDF[] = {
	"application/pdf",	"",
	"application/PDF",	"",
	"Application/PDF",	"",
	"APPLICATION/PDF",	"",
	0,0
};

char *
StringValueDescription_MIMETypeApplicationPDF(char * value)
{
	return StringValueDescription(StringValueTable_MIMETypeApplicationPDF,value);
}

static struct StringValueEntry
StringValueTable_MIMETypeApplicationCDA[] = {
	"text/xml",	"",
	"text/XML",	"",
	"Text/XML",	"",
	"TEXT/XML",	"",
	0,0
};

char *
StringValueDescription_MIMETypeApplicationCDA(char * value)
{
	return StringValueDescription(StringValueTable_MIMETypeApplicationCDA,value);
}

static struct StringValueEntry
StringValueTable_MIMETypeApplicationSTL[] = {
	"model/stl",	"",
	"model/STL",	"",
	"Model/STL",	"",
	"MODEL/STL",	"",
	0,0
};

char *
StringValueDescription_MIMETypeApplicationSTL(char * value)
{
	return StringValueDescription(StringValueTable_MIMETypeApplicationSTL,value);
}

static struct StringValueEntry
StringValueTable_LossyImageCompressionMethod[] = {
	"ISO_10918_1",	"JPEG Lossy Compression",
	"ISO_14495_1",	"JPEG-LS Near-lossless Compression",
	"ISO_15444_1",	"JPEG 2000 Irreversible Compression",
	"ISO_13818_2",	"MPEG2 Compression",
	"ISO_14496_10",	"MPEG-4 AVC/H.264 Compression",
	0,0
};

char *
StringValueDescription_LossyImageCompressionMethod(char * value)
{
	return StringValueDescription(StringValueTable_LossyImageCompressionMethod,value);
}

static struct StringValueEntry
StringValueTable_ContentItemValueTypes[] = {
	"DATETIME",	"",
	"DATE",	"",
	"TIME",	"",
	"PNAME",	"",
	"UIDREF",	"",
	"TEXT",	"",
	"CODE",	"",
	"NUMERIC",	"",
	"IMAGE",	"",
	"COMPOSITE",	"",
	0,0
};

char *
StringValueDescription_ContentItemValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_ContentItemValueTypes,value);
}

static struct StringValueEntry
StringValueTable_PixelIntensityRelationshipLUTFunction[] = {
	"TO_LOG",	"",
	"TO_LINEAR",	"",
	0,0
};

char *
StringValueDescription_PixelIntensityRelationshipLUTFunction(char * value)
{
	return StringValueDescription(StringValueTable_PixelIntensityRelationshipLUTFunction,value);
}

static struct StringValueEntry
StringValueTable_OverlaySubtype[] = {
	"USER",	"User created graphic annotation",
	"AUTOMATED",	"Machine created graphic annotation",
	0,0
};

char *
StringValueDescription_OverlaySubtype(char * value)
{
	return StringValueDescription(StringValueTable_OverlaySubtype,value);
}

static struct StringValueEntry
StringValueTable_RealWorldValueMappingModality[] = {
	"RWV",	"",
	0,0
};

char *
StringValueDescription_RealWorldValueMappingModality(char * value)
{
	return StringValueDescription(StringValueTable_RealWorldValueMappingModality,value);
}

static struct StringValueEntry
StringValueTable_TypeOfPatientID[] = {
	"TEXT",	"",
	"RFID",	"",
	"BARCODE",	"",
	0,0
};

char *
StringValueDescription_TypeOfPatientID(char * value)
{
	return StringValueDescription(StringValueTable_TypeOfPatientID,value);
}

static struct StringValueEntry
StringValueTable_ResponsiblePersonRole[] = {
	"OWNER",	"",
	"PARENT",	"",
	"CHILD",	"",
	"SPOUSE",	"",
	"SIBLING",	"",
	"RELATIVE",	"",
	"GUARDIAN",	"",
	"CUSTODIAN",	"",
	"AGENT",	"",
	"INVESTIGATOR",	"",
	"VETERINARIAN",	"",
	0,0
};

char *
StringValueDescription_ResponsiblePersonRole(char * value)
{
	return StringValueDescription(StringValueTable_ResponsiblePersonRole,value);
}

static struct StringValueEntry
StringValueTable_PatientSexNeutered[] = {
	"ALTERED",	"",
	"UNALTERED",	"",
	0,0
};

char *
StringValueDescription_PatientSexNeutered(char * value)
{
	return StringValueDescription(StringValueTable_PatientSexNeutered,value);
}

static struct StringValueEntry
StringValueTable_YesNoReorientedOnly[] = {
	"YES",	"",
	"NO",	"",
	"REORIENTED_ONLY",	"",
	0,0
};

char *
StringValueDescription_YesNoReorientedOnly(char * value)
{
	return StringValueDescription(StringValueTable_YesNoReorientedOnly,value);
}

static struct StringValueEntry
StringValueTable_EquipmentCoordinateSystemIdentification[] = {
	"ISOCENTER",	"",
	0,0
};

char *
StringValueDescription_EquipmentCoordinateSystemIdentification(char * value)
{
	return StringValueDescription(StringValueTable_EquipmentCoordinateSystemIdentification,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedImageType1[] = {
	"ORIGINAL",	"",
	"DERIVED",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedImageType1(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedImageType1,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedFrameType1[] = {
	"ORIGINAL",	"",
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedFrameType1(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedFrameType1,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedImageAndFrameType2[] = {
	"PRIMARY",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedImageAndFrameType2(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedImageAndFrameType2,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedImageAndFrameType3[] = {
	"ANGIO",	"",
	"CARDIAC",	"",
	"CARDIAC_GATED",	"",
	"CARDRESP_GATED",	"",
	"DYNAMIC",	"",
	"FLUOROSCOPY",	"",
	"LOCALIZER",	"",
	"MOTION",	"",
	"PERFUSION",	"",
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	"RESP_GATED",	"",
	"REST",	"",
	"STATIC",	"",
	"STRESS",	"",
	"VOLUME",	"",
	"NON_PARALLEL",	"",
	"PARALLEL",	"",
	"WHOLE_BODY",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedImageAndFrameType3(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedImageAndFrameType3,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedImageType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MASKED",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MTT",	"",
	"MULTIPLICATION",	"",
	"RCBF",	"",
	"RCBV",	"",
	"RESAMPLED",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"T_TEST",	"",
	"TTP",	"",
	"Z_SCORE",	"",
	"NONE",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedImageType4(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedImageType4,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedFrameType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MASKED",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MTT",	"",
	"MULTIPLICATION",	"",
	"RCBF",	"",
	"RCBV",	"",
	"RESAMPLED",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"T_TEST",	"",
	"TTP",	"",
	"Z_SCORE",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedFrameType4(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedFrameType4,value);
}

static struct StringValueEntry
StringValueTable_RespiratoryPhase[] = {
	"INSPIRATION",	"",
	"MAXIMUM",	"",
	"EXPIRATION",	"",
	"MINIMUM",	"",
	0,0
};

char *
StringValueDescription_RespiratoryPhase(char * value)
{
	return StringValueDescription(StringValueTable_RespiratoryPhase,value);
}

static struct StringValueEntry
StringValueTable_CardiacFramingType[] = {
	"FORW",	"time forward from trigger",
	"BACK",	"time back before trigger",
	"PCNT",	"percentage of R-R forward from trigger",
	0,0
};

char *
StringValueDescription_CardiacFramingType(char * value)
{
	return StringValueDescription(StringValueTable_CardiacFramingType,value);
}

static struct StringValueEntry
StringValueTable_RespiratoryTriggerType[] = {
	"TIME",	"",
	"AMPLITUDE",	"",
	"BOTH",	"",
	0,0
};

char *
StringValueDescription_RespiratoryTriggerType(char * value)
{
	return StringValueDescription(StringValueTable_RespiratoryTriggerType,value);
}

static struct StringValueEntry
StringValueTable_UniversalEntityIDType[] = {
	"DNS",	"An Internet dotted name either in ASCII or as integers",
	"EUI64",	"An IEEE Extended Unique Identifier",
	"ISO",	"An International Standards Organization Object Identifier",
	"URI",	"Uniform Resource Identifier",
	"UUID",	"The DCE Universal Unique Identifier",
	"X400",	"An X.400 MHS identifier",
	"X500",	"An X.500 directory name",
	0,0
};

char *
StringValueDescription_UniversalEntityIDType(char * value)
{
	return StringValueDescription(StringValueTable_UniversalEntityIDType,value);
}

static struct StringValueEntry
StringValueTable_HL7Table0203IdentifierType[] = {
	"AM",	"American Express",
	"AN",	"Account number",
	"ANON",	"Anonymous identifier",
	"ANC",	"Account number Creditor",
	"AND",	"Account number debitor",
	"ANT",	"Temporary Account Number",
	"APRN",	"Advanced Practice Registered Nurse number",
	"BA",	"Bank Account Number",
	"BC",	"Bank Card Number",
	"BR",	"Birth registry number",
	"BRN",	"Breed Registry Number",
	"CC",	"Cost Center number",
	"CY",	"County number",
	"DDS",	"Dentist license number",
	"DEA",	"Drug Enforcement Administration registration number",
	"DI",	"Diner’s Club card",
	"DFN",	"Drug Furnishing or prescriptive authority Number",
	"DL",	"Driver’s license number",
	"DN",	"Doctor number",
	"DPM",	"Podiatrist license number",
	"DO",	"Osteopathic License number",
	"DR",	"Donor Registration Number",
	"DS",	"Discover Card",
	"EI",	"Employee number",
	"EN",	"Employer number",
	"FI",	"Facility ID",
	"GI",	"Guarantor internal identifier",
	"GL",	"General ledger number",
	"GN",	"Guarantor external  identifier",
	"HC",	"Health Card Number",
	"JHN",	"Jurisdictional health number Canada",
	"IND",	"Indigenous/Aboriginal",
	"LI",	"Labor and industries number",
	"LN",	"License number",
	"LR",	"Local Registry ID",
	"MA",	"Patient Medicaid number",
	"MB",	"Member Number",
	"MC",	"Patients Medicare number",
	"MCD",	"Practitioner Medicaid number",
	"MCN",	"Microchip Number",
	"MCR",	"Practitioner Medicare number",
	"MD",	"Medical License number",
	"MI",	"Military ID number",
	"MR",	"Medical record number",
	"MRT",	"Temporary Medical Record Number",
	"MS",	"MasterCard",
	"NE",	"National employer identifier",
	"NH",	"National Health Plan Identifier",
	"NI",	"National unique individual identifier",
	"NII",	"National Insurance Organization Identifier",
	"NIIP",	"National Insurance Payor Identifier",
	"NNxxx",	"National Person Identifier where the xxx is the ISO table 3166 3-character alphabetic country code",
	"NNUSA",	"National Person Identifier USA",
	"NP",	"Nurse practitioner number",
	"NPI",	"National provider identifier",
	"OD",	"Optometrist license number",
	"PA",	"Physician Assistant number",
	"PCN",	"Penitentiary correctional institution Number",
	"PE",	"Living Subject Enterprise Number",
	"PEN",	"Pension Number",
	"PI",	"Patient internal identifier",
	"PN",	"Person number",
	"PNT",	"Temporary Living Subject Number",
	"PPN",	"Passport number",
	"PRC",	"Permanent Resident Card Number",
	"PRN",	"Provider number",
	"PT",	"Patient external identifier",
	"QA",	"QA number",
	"RI",	"Resource identifier",
	"RPH",	"Pharmacist license number",
	"RN",	"Registered Nurse Number",
	"RR",	"Railroad Retirement number",
	"RRI",	"Regional registry ID",
	"SL",	"State license",
	"SN",	"Subscriber Number",
	"SR",	"State registry ID",
	"SS",	"Social Security number",
	"TAX",	"Tax ID number",
	"TN",	"Treaty Number Canada",
	"U",	"Unspecified identifier",
	"UPIN",	"Medicare CMS Universal Physician Identification numbers",
	"VN",	"Visit number",
	"VS",	"VISA",
	"WC",	"WIC identifier",
	"WCN",	"Workers Comp Number",
	"XX",	"Organization identifier",
	0,0
};

char *
StringValueDescription_HL7Table0203IdentifierType(char * value)
{
	return StringValueDescription(StringValueTable_HL7Table0203IdentifierType,value);
}

static struct StringValueEntry
StringValueTable_SegmentationType[] = {
	"BINARY",	"",
	"FRACTIONAL",	"",
	0,0
};

char *
StringValueDescription_SegmentationType(char * value)
{
	return StringValueDescription(StringValueTable_SegmentationType,value);
}

static struct StringValueEntry
StringValueTable_SegmentationFractionalType[] = {
	"PROBABILITY",	"",
	"OCCUPANCY",	"",
	0,0
};

char *
StringValueDescription_SegmentationFractionalType(char * value)
{
	return StringValueDescription(StringValueTable_SegmentationFractionalType,value);
}

static struct StringValueEntry
StringValueTable_SegmentAlgorithmType[] = {
	"AUTOMATIC",	"",
	"SEMIAUTOMATIC",	"",
	"MANUAL",	"",
	0,0
};

char *
StringValueDescription_SegmentAlgorithmType(char * value)
{
	return StringValueDescription(StringValueTable_SegmentAlgorithmType,value);
}

static struct StringValueEntry
StringValueTable_RecommendedPresentationType[] = {
	"SURFACE",	"",
	"WIREFRAME",	"",
	"POINTS",	"",
	0,0
};

char *
StringValueDescription_RecommendedPresentationType(char * value)
{
	return StringValueDescription(StringValueTable_RecommendedPresentationType,value);
}

static struct StringValueEntry
StringValueTable_DistributionType[] = {
	"NAMED_PROTOCOL",	"",
	"RESTRICTED_REUSE",	"",
	"PUBLIC_RELEASE",	"",
	0,0
};

char *
StringValueDescription_DistributionType(char * value)
{
	return StringValueDescription(StringValueTable_DistributionType,value);
}

static struct StringValueEntry
StringValueTable_ConsentForDistributionFlag[] = {
	"NO",	"",
	"YES",	"",
	"WITHDRAWN",	"",
	0,0
};

char *
StringValueDescription_ConsentForDistributionFlag(char * value)
{
	return StringValueDescription(StringValueTable_ConsentForDistributionFlag,value);
}

static struct StringValueEntry
StringValueTable_AnatomicalOrientationType[] = {
	"BIPED",	"",
	"QUADRUPED",	"",
	0,0
};

char *
StringValueDescription_AnatomicalOrientationType(char * value)
{
	return StringValueDescription(StringValueTable_AnatomicalOrientationType,value);
}

static struct StringValueEntry
StringValueTable_ContainerComponentMaterial[] = {
	"GLASS",	"",
	"PLASTIC",	"",
	"METAL",	"",
	0,0
};

char *
StringValueDescription_ContainerComponentMaterial(char * value)
{
	return StringValueDescription(StringValueTable_ContainerComponentMaterial,value);
}

static struct StringValueEntry
StringValueTable_LongitudinalTemporalInformationModified[] = {
	"UNMODIFIED",	"",
	"MODIFIED",	"",
	"REMOVED",	"",
	0,0
};

char *
StringValueDescription_LongitudinalTemporalInformationModified(char * value)
{
	return StringValueDescription(StringValueTable_LongitudinalTemporalInformationModified,value);
}

static struct StringValueEntry
StringValueTable_DimensionOrganizationType[] = {
	"3D",	"",
	"3D_TEMPORAL",	"",
	"TILED_FULL",	"",
	"TILED_SPARSE",	"",
	0,0
};

char *
StringValueDescription_DimensionOrganizationType(char * value)
{
	return StringValueDescription(StringValueTable_DimensionOrganizationType,value);
}

static struct StringValueEntry
StringValueTable_DimensionOrganizationType3D[] = {
	"3D",	"",
	0,0
};

char *
StringValueDescription_DimensionOrganizationType3D(char * value)
{
	return StringValueDescription(StringValueTable_DimensionOrganizationType3D,value);
}

static struct StringValueEntry
StringValueTable_IVOCTModality[] = {
	"IVOCT",	"",
	0,0
};

char *
StringValueDescription_IVOCTModality(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTModality,value);
}

static struct StringValueEntry
StringValueTable_IVOCTPixelPresentationImageLevel[] = {
	"COLOR",	"",
	"COLOR_REF",	"",
	"MONOCHROME",	"",
	0,0
};

char *
StringValueDescription_IVOCTPixelPresentationImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTPixelPresentationImageLevel,value);
}

static struct StringValueEntry
StringValueTable_IVOCTImageAndFrameTypeValue3[] = {
	"AXIAL",	"",
	"LONGITUDINAL",	"",
	0,0
};

char *
StringValueDescription_IVOCTImageAndFrameTypeValue3(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTImageAndFrameTypeValue3,value);
}

static struct StringValueEntry
StringValueTable_IVOCTVolumetricProperties[] = {
	"DISTORTED",	"",
	0,0
};

char *
StringValueDescription_IVOCTVolumetricProperties(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTVolumetricProperties,value);
}

static struct StringValueEntry
StringValueTable_IVOCTInterpolationType[] = {
	"REPLICATE",	"",
	"CUBIC",	"",
	"BILINEAR",	"",
	0,0
};

char *
StringValueDescription_IVOCTInterpolationType(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTInterpolationType,value);
}

static struct StringValueEntry
StringValueTable_OCTAcquisitionDomain[] = {
	"TIME",	"",
	"FREQUENCY",	"",
	"SPECTRAL",	"",
	0,0
};

char *
StringValueDescription_OCTAcquisitionDomain(char * value)
{
	return StringValueDescription(StringValueTable_OCTAcquisitionDomain,value);
}

static struct StringValueEntry
StringValueTable_IVOCTIVUSAcquisition[] = {
	"MOTORIZED",	"",
	"MANUAL",	"",
	"SELECTIVE",	"",
	"MEASURED",	"",
	0,0
};

char *
StringValueDescription_IVOCTIVUSAcquisition(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTIVUSAcquisition,value);
}

static struct StringValueEntry
StringValueTable_IVOCTPixelIntensityRelationship[] = {
	"LIN",	"",
	"LOG",	"",
	0,0
};

char *
StringValueDescription_IVOCTPixelIntensityRelationship(char * value)
{
	return StringValueDescription(StringValueTable_IVOCTPixelIntensityRelationship,value);
}

static struct StringValueEntry
StringValueTable_CatheterDirectionOfRotation[] = {
	"CW",	"",
	"CC",	"",
	0,0
};

char *
StringValueDescription_CatheterDirectionOfRotation(char * value)
{
	return StringValueDescription(StringValueTable_CatheterDirectionOfRotation,value);
}

static struct StringValueEntry
StringValueTable_WellKnownColorPaletteInstanceUIDs[] = {
	"1.2.840.10008.1.5.1",	"Hot Iron Color Palette SOP Instance",
	"1.2.840.10008.1.5.2",	"PET Color Palette SOP Instance",
	"1.2.840.10008.1.5.3",	"Hot Metal Blue Color Palette SOP Instance",
	"1.2.840.10008.1.5.4",	"PET 20 Step Color Palette SOP Instance",
	0,0
};

char *
StringValueDescription_WellKnownColorPaletteInstanceUIDs(char * value)
{
	return StringValueDescription(StringValueTable_WellKnownColorPaletteInstanceUIDs,value);
}

static struct StringValueEntry
StringValueTable_Volume[] = {
	"VOLUME",	"",
	0,0
};

char *
StringValueDescription_Volume(char * value)
{
	return StringValueDescription(StringValueTable_Volume,value);
}

static struct StringValueEntry
StringValueTable_None[] = {
	"NONE",	"",
	0,0
};

char *
StringValueDescription_None(char * value)
{
	return StringValueDescription(StringValueTable_None,value);
}

static struct StringValueEntry
StringValueTable_EmptyValue[] = {
	"",	"",
	0,0
};

char *
StringValueDescription_EmptyValue(char * value)
{
	return StringValueDescription(StringValueTable_EmptyValue,value);
}

static struct StringValueEntry
StringValueTable_DigitOne[] = {
	"1",	"",
	0,0
};

char *
StringValueDescription_DigitOne(char * value)
{
	return StringValueDescription(StringValueTable_DigitOne,value);
}

static struct StringValueEntry
StringValueTable_ParametricMapImageAndFrameType1[] = {
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_ParametricMapImageAndFrameType1(char * value)
{
	return StringValueDescription(StringValueTable_ParametricMapImageAndFrameType1,value);
}

static struct StringValueEntry
StringValueTable_MappingResources[] = {
	"DCMR",	"",
	0,0
};

char *
StringValueDescription_MappingResources(char * value)
{
	return StringValueDescription(StringValueTable_MappingResources,value);
}

static struct StringValueEntry
StringValueTable_MappingResourceUIDs[] = {
	"1.2.840.10008.8.1.1",	"",
	0,0
};

char *
StringValueDescription_MappingResourceUIDs(char * value)
{
	return StringValueDescription(StringValueTable_MappingResourceUIDs,value);
}

static struct StringValueEntry
StringValueTable_MappingResourceNames[] = {
	"DICOM Content Mapping Resource",	"",
	0,0
};

char *
StringValueDescription_MappingResourceNames(char * value)
{
	return StringValueDescription(StringValueTable_MappingResourceNames,value);
}

static struct StringValueEntry
StringValueTable_QueryRetrieveView[] = {
	"CLASSIC",	"",
	"ENHANCED",	"",
	0,0
};

char *
StringValueDescription_QueryRetrieveView(char * value)
{
	return StringValueDescription(StringValueTable_QueryRetrieveView,value);
}

static struct StringValueEntry
StringValueTable_ParametricMapImagePixelPresentation[] = {
	"COLOR_RANGE",	"",
	"MONOCHROME",	"",
	0,0
};

char *
StringValueDescription_ParametricMapImagePixelPresentation(char * value)
{
	return StringValueDescription(StringValueTable_ParametricMapImagePixelPresentation,value);
}

static struct StringValueEntry
StringValueTable_CodingSchemeURLType[] = {
	"DOC",	"",
	"OWL",	"",
	"CSV",	"",
	0,0
};

char *
StringValueDescription_CodingSchemeURLType(char * value)
{
	return StringValueDescription(StringValueTable_CodingSchemeURLType,value);
}

static struct StringValueEntry
StringValueTable_LongitudinalTemporalEventType[] = {
	"ENROLLMENT",	"",
	"BASELINE",	"",
	0,0
};

char *
StringValueDescription_LongitudinalTemporalEventType(char * value)
{
	return StringValueDescription(StringValueTable_LongitudinalTemporalEventType,value);
}

static struct StringValueEntry
StringValueTable_M3DModality[] = {
	"M3D",	"",
	0,0
};

char *
StringValueDescription_M3DModality(char * value)
{
	return StringValueDescription(StringValueTable_M3DModality,value);
}

static struct StringValueEntry
StringValueTable_InstanceOriginStatus[] = {
	"LOCAL",	"",
	"IMPORTED",	"",
	0,0
};

char *
StringValueDescription_InstanceOriginStatus(char * value)
{
	return StringValueDescription(StringValueTable_InstanceOriginStatus,value);
}

static struct StringValueEntry
StringValueTable_ValueRepresentations[] = {
	"AE",	"",
	"AS",	"",
	"AT",	"",
	"CS",	"",
	"DA",	"",
	"DS",	"",
	"DT",	"",
	"FL",	"",
	"DF",	"",
	"IS",	"",
	"LO",	"",
	"LT",	"",
	"OB",	"",
	"OD",	"",
	"OF",	"",
	"OL",	"",
	"OW",	"",
	"PN",	"",
	"SH",	"",
	"SL",	"",
	"SQ",	"",
	"SS",	"",
	"ST",	"",
	"TM",	"",
	"UC",	"",
	"UI",	"",
	"UL",	"",
	"UN",	"",
	"UR",	"",
	"US",	"",
	"UT",	"",
	0,0
};

char *
StringValueDescription_ValueRepresentations(char * value)
{
	return StringValueDescription(StringValueTable_ValueRepresentations,value);
}

static struct StringValueEntry
StringValueTable_BlockIdentifyingInformationStatus[] = {
	"SAFE",	"",
	"UNSAFE",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_BlockIdentifyingInformationStatus(char * value)
{
	return StringValueDescription(StringValueTable_BlockIdentifyingInformationStatus,value);
}

static struct StringValueEntry
StringValueTable_DeidentificationAction[] = {
	"D",	"",
	"Z",	"",
	"X",	"",
	"U",	"",
	0,0
};

char *
StringValueDescription_DeidentificationAction(char * value)
{
	return StringValueDescription(StringValueTable_DeidentificationAction,value);
}

static struct StringValueEntry
StringValueTable_PatientAlternativeCalendar[] = {
	"PROLEPTIC GREGN",	"",
	"JULIAN",	"",
	"PROLEPTIC JULIAN",	"",
	"EGYPTIAN REGNAL",	"",
	"HEBREW",	"",
	"HIJRI",	"",
	0,0
};

char *
StringValueDescription_PatientAlternativeCalendar(char * value)
{
	return StringValueDescription(StringValueTable_PatientAlternativeCalendar,value);
}

static struct StringValueEntry
StringValueTable_TypeOfInstances[] = {
	"DICOM",	"",
	"CDA",	"",
	0,0
};

char *
StringValueDescription_TypeOfInstances(char * value)
{
	return StringValueDescription(StringValueTable_TypeOfInstances,value);
}

static struct StringValueEntry
StringValueTable_SpecificCharacterSet[] = {
	"",	"Default ASCII",
	"ISO_IR 100",	"Latin alphabet No. 1",
	"ISO_IR 101",	"Latin alphabet No. 2",
	"ISO_IR 109",	"Latin alphabet No. 3",
	"ISO_IR 110",	"Latin alphabet No. 4",
	"ISO_IR 144",	"Cyrillic",
	"ISO_IR 127",	"Arabic",
	"ISO_IR 126",	"Greek",
	"ISO_IR 138",	"Hebrew",
	"ISO_IR 148",	"Latin alphabet No. 5",
	"ISO_IR 13",	"Japanese",
	"ISO_IR 166",	"Thai",
	"ISO 2022 IR 6",	"Code extension Single byte Default repertoire",
	"ISO 2022 IR 100",	"Code extension Single byte Latin alphabet No. 1",
	"ISO 2022 IR 101",	"Code extension Single byte Latin alphabet No. 2",
	"ISO 2022 IR 109",	"Code extension Single byte Latin alphabet No. 3",
	"ISO 2022 IR 110",	"Code extension Single byte Latin alphabet No. 4",
	"ISO 2022 IR 144",	"Code extension Single byte Cyrillic",
	"ISO 2022 IR 127",	"Code extension Single byte Arabic",
	"ISO 2022 IR 126",	"Code extension Single byte Greek",
	"ISO 2022 IR 138",	"Code extension Single byte Hebrew",
	"ISO 2022 IR 148",	"Code extension Single byte Latin alphabet No. 5",
	"ISO 2022 IR 13",	"Code extension Single byte Japanese Katakana and Romaji",
	"ISO 2022 IR 166",	"Code extension Single byte Thai",
	"ISO 2022 IR 87",	"Code extension Multi byte Japanese Kanji",
	"ISO 2022 IR 159",	"Code extension Multi byte Japanese Supplementary Kanji",
	"ISO 2022 IR 149",	"Code extension Multi byte Korean",
	"ISO 2022 IR 58",	"Code extension Multi byte Simplified Chinese",
	"ISO_IR 192",	"Unicode UTF-8",
	"GB18030",	"Chinese",
	"GBK",	"Simplified Chinese",
	0,0
};

char *
StringValueDescription_SpecificCharacterSet(char * value)
{
	return StringValueDescription(StringValueTable_SpecificCharacterSet,value);
}

static struct StringValueEntry
StringValueTable_SpecificCharacterSetISOIR100[] = {
	"ISO_IR 100",	"Latin alphabet No. 1",
	0,0
};

char *
StringValueDescription_SpecificCharacterSetISOIR100(char * value)
{
	return StringValueDescription(StringValueTable_SpecificCharacterSetISOIR100,value);
}

static struct StringValueEntry
StringValueTable_IconImagePhotometricInterpretation[] = {
	"MONOCHROME1",	"",
	"MONOCHROME2",	"",
	"PALETTE COLOR",	"",
	0,0
};

char *
StringValueDescription_IconImagePhotometricInterpretation(char * value)
{
	return StringValueDescription(StringValueTable_IconImagePhotometricInterpretation,value);
}

static struct StringValueEntry
StringValueTable_DirectoryRecordType[] = {
	"PATIENT",	"",
	"STUDY",	"",
	"SERIES",	"",
	"IMAGE",	"",
	"RADIOTHERAPY",	"",
	"RT DOSE",	"",
	"RT STRUCTURE SET",	"",
	"RT PLAN",	"",
	"RT TREAT RECORD",	"",
	"PRESENTATION",	"",
	"SR DOCUMENT",	"",
	"KEY OBJECT DOC",	"",
	"WAVEFORM",	"",
	"SPECTROSCOPY",	"",
	"RAW DATA",	"",
	"REGISTRATION",	"",
	"FIDUCIAL",	"",
	"HANGING PROTOCOL",	"",
	"ENCAP DOC",	"",
	"HL7 STRUC DOC",	"",
	"STEREOMETRIC",	"",
	"VALUE MAP",	"",
	"PALETTE",	"",
	"IMPLANT",	"",
	"IMPLANT GROUP",	"",
	"IMPLANT ASSY",	"",
	"MEASUREMENT",	"",
	"SURFACE",	"",
	"PRIVATE",	"",
	0,0
};

char *
StringValueDescription_DirectoryRecordType(char * value)
{
	return StringValueDescription(StringValueTable_DirectoryRecordType,value);
}

static struct StringValueEntry
StringValueTable_DentalMediaProfileSOPClasses[] = {
	"1.2.840.10008.5.1.4.1.1.1.3",	"",
	"1.2.840.10008.5.1.4.1.1.1.1",	"",
	0,0
};

char *
StringValueDescription_DentalMediaProfileSOPClasses(char * value)
{
	return StringValueDescription(StringValueTable_DentalMediaProfileSOPClasses,value);
}

static struct StringValueEntry
StringValueTable_DentalMediaProfileTransferSyntaxes[] = {
	"1.2.840.10008.1.2.1",	"",
	0,0
};

char *
StringValueDescription_DentalMediaProfileTransferSyntaxes(char * value)
{
	return StringValueDescription(StringValueTable_DentalMediaProfileTransferSyntaxes,value);
}

static struct StringValueEntry
StringValueTable_XRayFieldOfViewShape[] = {
	"ROUND",	"",
	"RECTANGLE",	"",
	0,0
};

char *
StringValueDescription_XRayFieldOfViewShape(char * value)
{
	return StringValueDescription(StringValueTable_XRayFieldOfViewShape,value);
}

static struct StringValueEntry
StringValueTable_Grid[] = {
	"IN",	"Grid is positioned",
	"NONE",	"No Grid is used",
	0,0
};

char *
StringValueDescription_Grid(char * value)
{
	return StringValueDescription(StringValueTable_Grid,value);
}

static struct StringValueEntry
StringValueTable_RadiationSetting[] = {
	"SC",	"low dose exposure for preparation",
	"GR",	"high dose exposure for diagnostic quality image acquisition",
	0,0
};

char *
StringValueDescription_RadiationSetting(char * value)
{
	return StringValueDescription(StringValueTable_RadiationSetting,value);
}

static struct StringValueEntry
StringValueTable_XRayImageScanOptions[] = {
	"EKG",	"EKG Event Trigger",
	"PHY",	"Physiological Event Trigger",
	"TOMO",	"Tomography",
	"CHASE",	"Bolus Chasing",
	"STEP",	"Stepping",
	"ROTA",	"Rotation",
	0,0
};

char *
StringValueDescription_XRayImageScanOptions(char * value)
{
	return StringValueDescription(StringValueTable_XRayImageScanOptions,value);
}

static struct StringValueEntry
StringValueTable_PixelIntensityRelationship[] = {
	"LIN",	"Approximately proportional to X-Ray beam intensity",
	"LOG",	"Non-linear Log Function",
	"DISP",	"Ready to be displayed",
	0,0
};

char *
StringValueDescription_PixelIntensityRelationship(char * value)
{
	return StringValueDescription(StringValueTable_PixelIntensityRelationship,value);
}

static struct StringValueEntry
StringValueTable_XRayImageTypeValue3[] = {
	"SINGLE PLANE",	"Image is a single plane acquisition",
	"BIPLANE A",	"Image is the first plane of a Bi-plane acquisition",
	"BIPLANE B",	"Image is the second plane of a Bi-plane acquisition",
	"BIPLANE",	"Image is both planes of a Bi-plane acquisition",
	0,0
};

char *
StringValueDescription_XRayImageTypeValue3(char * value)
{
	return StringValueDescription(StringValueTable_XRayImageTypeValue3,value);
}

static struct StringValueEntry
StringValueTable_InterventionStatus[] = {
	"PRE",	"",
	"INTERMEDIATE",	"",
	"POST",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_InterventionStatus(char * value)
{
	return StringValueDescription(StringValueTable_InterventionStatus,value);
}

static struct StringValueEntry
StringValueTable_DeviceDiameterUnits[] = {
	"FR",	"French",
	"GA",	"Gauge",
	"IN",	"Inch",
	"MM",	"Millimeter",
	0,0
};

char *
StringValueDescription_DeviceDiameterUnits(char * value)
{
	return StringValueDescription(StringValueTable_DeviceDiameterUnits,value);
}

static struct StringValueEntry
StringValueTable_ShutterShape[] = {
	"RECTANGULAR",	"",
	"CIRCULAR",	"",
	"POLYGONAL",	"",
	0,0
};

char *
StringValueDescription_ShutterShape(char * value)
{
	return StringValueDescription(StringValueTable_ShutterShape,value);
}

static struct StringValueEntry
StringValueTable_BitmapShutterShape[] = {
	"BITMAP",	"",
	0,0
};

char *
StringValueDescription_BitmapShutterShape(char * value)
{
	return StringValueDescription(StringValueTable_BitmapShutterShape,value);
}

static struct StringValueEntry
StringValueTable_CollimatorShape[] = {
	"RECTANGULAR",	"",
	"CIRCULAR",	"",
	"POLYGONAL",	"",
	0,0
};

char *
StringValueDescription_CollimatorShape(char * value)
{
	return StringValueDescription(StringValueTable_CollimatorShape,value);
}

static struct StringValueEntry
StringValueTable_MaskOperation[] = {
	"NONE",	"No Subtraction",
	"AVG_SUB",	"Average Subtraction",
	"TID",	"Time Interval Differencing",
	"REV_TID",	"Reversed Time Interval Differencing",
	0,0
};

char *
StringValueDescription_MaskOperation(char * value)
{
	return StringValueDescription(StringValueTable_MaskOperation,value);
}

static struct StringValueEntry
StringValueTable_RecommendedViewingMode[] = {
	"SUB",	"for subtraction with mask images",
	"NAT",	"native viewing of image as sent",
	0,0
};

char *
StringValueDescription_RecommendedViewingMode(char * value)
{
	return StringValueDescription(StringValueTable_RecommendedViewingMode,value);
}

static struct StringValueEntry
StringValueTable_RadiationMode[] = {
	"CONTINUOUS",	"",
	"PULSED",	"",
	0,0
};

char *
StringValueDescription_RadiationMode(char * value)
{
	return StringValueDescription(StringValueTable_RadiationMode,value);
}

static struct StringValueEntry
StringValueTable_MaskSelectionMode[] = {
	"SYSTEM",	"",
	"USER",	"",
	0,0
};

char *
StringValueDescription_MaskSelectionMode(char * value)
{
	return StringValueDescription(StringValueTable_MaskSelectionMode,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFModality[] = {
	"XA",	"",
	"XRF",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFModality(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFModality,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFImageType1[] = {
	"ORIGINAL",	"",
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFImageType1(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFImageType1,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFImageType2[] = {
	"PRIMARY",	"",
	"SECONDARY",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFImageType2(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFImageType2,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFImageType3[] = {
	"ANGIO",	"",
	"CARDIAC",	"",
	"CARDIAC_GATED",	"",
	"CARDRESP_GATED",	"",
	"DYNAMIC",	"",
	"FLUOROSCOPY",	"",
	"LOCALIZER",	"",
	"MOTION",	"",
	"PERFUSION",	"",
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	"RESP_GATED",	"",
	"REST",	"",
	"STATIC",	"",
	"STRESS",	"",
	"VOLUME",	"",
	"NON_PARALLEL",	"",
	"PARALLEL",	"",
	"WHOLE_BODY",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFImageType3(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFImageType3,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFImageType4[] = {
	"NONE",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFImageType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFImageType4,value);
}

static struct StringValueEntry
StringValueTable_PlanesInAcquisition[] = {
	"SINGLE PLANE",	"",
	"BIPLANE",	"",
	"UNDEFINED",	"",
	0,0
};

char *
StringValueDescription_PlanesInAcquisition(char * value)
{
	return StringValueDescription(StringValueTable_PlanesInAcquisition,value);
}

static struct StringValueEntry
StringValueTable_PlaneIdentification[] = {
	"MONOPLANE",	"",
	"PLANE A",	"",
	"PLANE B",	"",
	0,0
};

char *
StringValueDescription_PlaneIdentification(char * value)
{
	return StringValueDescription(StringValueTable_PlaneIdentification,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFScanOptions[] = {
	"TOMO",	"",
	"CHASE",	"",
	"STEP",	"",
	"ROTA",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFScanOptions(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFScanOptions,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFRadiationSetting[] = {
	"SC",	"",
	"GR",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFRadiationSetting(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFRadiationSetting,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFRadiationMode[] = {
	"CONTINUOUS",	"",
	"PULSED",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFRadiationMode(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFRadiationMode,value);
}

static struct StringValueEntry
StringValueTable_XRayReceptorType[] = {
	"IMG_INTENSIFIER",	"",
	"DIGITAL_DETECTOR",	"",
	0,0
};

char *
StringValueDescription_XRayReceptorType(char * value)
{
	return StringValueDescription(StringValueTable_XRayReceptorType,value);
}

static struct StringValueEntry
StringValueTable_XRayReceptorTypeAngio[] = {
	"IMG_INTENSIFIER",	"",
	"DIGITAL_DETECTOR",	"",
	0,0
};

char *
StringValueDescription_XRayReceptorTypeAngio(char * value)
{
	return StringValueDescription(StringValueTable_XRayReceptorTypeAngio,value);
}

static struct StringValueEntry
StringValueTable_XRayReceptorTypeCranio[] = {
	"DIGITAL_DETECTOR",	"",
	0,0
};

char *
StringValueDescription_XRayReceptorTypeCranio(char * value)
{
	return StringValueDescription(StringValueTable_XRayReceptorTypeCranio,value);
}

static struct StringValueEntry
StringValueTable_EnhancedXAXRFPositionerType[] = {
	"CARM",	"",
	"COLUMN",	"",
	0,0
};

char *
StringValueDescription_EnhancedXAXRFPositionerType(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedXAXRFPositionerType,value);
}

static struct StringValueEntry
StringValueTable_IntensifierActiveShape[] = {
	"RECTANGLE",	"",
	"ROUND",	"",
	"HEXAGONAL",	"",
	0,0
};

char *
StringValueDescription_IntensifierActiveShape(char * value)
{
	return StringValueDescription(StringValueTable_IntensifierActiveShape,value);
}

static struct StringValueEntry
StringValueTable_FieldOfViewShape[] = {
	"RECTANGLE",	"",
	"ROUND",	"",
	"HEXAGONAL",	"",
	0,0
};

char *
StringValueDescription_FieldOfViewShape(char * value)
{
	return StringValueDescription(StringValueTable_FieldOfViewShape,value);
}

static struct StringValueEntry
StringValueTable_ExposureControlSensingRegionShape[] = {
	"RECTANGULAR",	"",
	"CIRCULAR",	"",
	"POLYGONAL",	"",
	0,0
};

char *
StringValueDescription_ExposureControlSensingRegionShape(char * value)
{
	return StringValueDescription(StringValueTable_ExposureControlSensingRegionShape,value);
}

static struct StringValueEntry
StringValueTable_XAXRFPixelIntensityRelationship[] = {
	"LIN",	"",
	"LOG",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_XAXRFPixelIntensityRelationship(char * value)
{
	return StringValueDescription(StringValueTable_XAXRFPixelIntensityRelationship,value);
}

static struct StringValueEntry
StringValueTable_XAXRFGeometricalProperties[] = {
	"UNIFORM",	"",
	"NON_UNIFORM",	"",
	0,0
};

char *
StringValueDescription_XAXRFGeometricalProperties(char * value)
{
	return StringValueDescription(StringValueTable_XAXRFGeometricalProperties,value);
}

static struct StringValueEntry
StringValueTable_XAXRFImageProcessingApplied[] = {
	"DIGITAL_SUBTR",	"",
	"HIGH_PASS_FILTER",	"",
	"LOW_PASS_FILTER",	"",
	"MULTI_BAND_FLTR",	"",
	"FRAME_AVERAGING",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_XAXRFImageProcessingApplied(char * value)
{
	return StringValueDescription(StringValueTable_XAXRFImageProcessingApplied,value);
}

static struct StringValueEntry
StringValueTable_SkipFrameRangeFlag[] = {
	"DISPLAY",	"",
	"SKIP",	"",
	0,0
};

char *
StringValueDescription_SkipFrameRangeFlag(char * value)
{
	return StringValueDescription(StringValueTable_SkipFrameRangeFlag,value);
}

static struct StringValueEntry
StringValueTable_XRay3DImageAndFrameType4[] = {
	"NONE",	"",
	0,0
};

char *
StringValueDescription_XRay3DImageAndFrameType4(char * value)
{
	return StringValueDescription(StringValueTable_XRay3DImageAndFrameType4,value);
}

static struct StringValueEntry
StringValueTable_XRay3DReconstructionAlgorithmType[] = {
	"FILTER_BACK_PROJ",	"",
	"ITERATIVE",	"",
	0,0
};

char *
StringValueDescription_XRay3DReconstructionAlgorithmType(char * value)
{
	return StringValueDescription(StringValueTable_XRay3DReconstructionAlgorithmType,value);
}

static struct StringValueEntry
StringValueTable_PositionerMotionStatic[] = {
	"STATIC",	"",
	0,0
};

char *
StringValueDescription_PositionerMotionStatic(char * value)
{
	return StringValueDescription(StringValueTable_PositionerMotionStatic,value);
}

static struct StringValueEntry
StringValueTable_XRay3DImageVolumeBasedCalculationTechniqueImageLevel[] = {
	"MAX_IP",	"",
	"MIN_IP",	"",
	"VOLUME_RENDER",	"",
	"SURFACE_RENDER",	"",
	"MPR",	"",
	"CURVED_MPR",	"",
	"NONE",	"",
	"MIXED",	"",
	"TOMOSYNTHESIS",	"",
	0,0
};

char *
StringValueDescription_XRay3DImageVolumeBasedCalculationTechniqueImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_XRay3DImageVolumeBasedCalculationTechniqueImageLevel,value);
}

static struct StringValueEntry
StringValueTable_XRay3DImageVolumeBasedCalculationTechniqueFrameLevel[] = {
	"MAX_IP",	"",
	"MIN_IP",	"",
	"VOLUME_RENDER",	"",
	"SURFACE_RENDER",	"",
	"MPR",	"",
	"CURVED_MPR",	"",
	"NONE",	"",
	"TOMOSYNTHESIS",	"",
	0,0
};

char *
StringValueDescription_XRay3DImageVolumeBasedCalculationTechniqueFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_XRay3DImageVolumeBasedCalculationTechniqueFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_OverlaySubtypeUS[] = {
	"ACTIVE 2D/BMODE IMAGE AREA",	"Identification of the active area of a 2D/B-mode image",
	0,0
};

char *
StringValueDescription_OverlaySubtypeUS(char * value)
{
	return StringValueDescription(StringValueTable_OverlaySubtypeUS,value);
}

static struct StringValueEntry
StringValueTable_USPhotometricInterpretation[] = {
	"MONOCHROME2",	"",
	"PALETTE COLOR",	"",
	"RGB",	"",
	"ARGB",	"",
	"YBR_FULL",	"",
	"YBR_FULL_422",	"",
	"YBR_PARTIAL_422",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	0,0
};

char *
StringValueDescription_USPhotometricInterpretation(char * value)
{
	return StringValueDescription(StringValueTable_USPhotometricInterpretation,value);
}

static struct StringValueEntry
StringValueTable_USImageType3[] = {
	"ABDOMINAL",	"",
	"BREAST",	"",
	"CHEST",	"",
	"ENDOCAVITARY",	"",
	"ENDORECTAL",	"",
	"ENDOVAGINAL",	"",
	"EPICARDIAL",	"",
	"FETAL HEART",	"",
	"GYNECOLOGY",	"",
	"INTRACARDIAC",	"",
	"INTRAOPERATIVE",	"",
	"INTRAVASCULAR",	"",
	"MUSCULOSKELETAL",	"",
	"NEONATAL HEAD",	"",
	"OBSTETRICAL",	"",
	"OPHTHALMIC",	"",
	"PEDIATRIC",	"",
	"PELVIC",	"",
	"RETROPERITONEAL",	"",
	"SCROTAL",	"",
	"SMALL PARTS",	"",
	"TEE",	"",
	"THYROID",	"",
	"TRANSCRANIAL",	"",
	"TTE",	"",
	"USBIOPSY",	"",
	"VASCULAR",	"",
	0,0
};

char *
StringValueDescription_USImageType3(char * value)
{
	return StringValueDescription(StringValueTable_USImageType3,value);
}

static struct StringValueEntry
StringValueTable_USTransducerPosition[] = {
	"ANTERIOR",	"",
	"AORTA",	"",
	"APICAL",	"",
	"ARTERY",	"",
	"BASAL ESOPHAGUS",	"",
	"BYPASS GRAFT",	"",
	"CAUDAL",	"",
	"CRANIAL",	"",
	"DISTAL",	"",
	"ENDOVAGINAL",	"",
	"ENDORECTAL",	"",
	"EPICARDIAL",	"",
	"ESOPHAGUS",	"",
	"GASTRIC",	"",
	"INFERIOR",	"",
	"L ATRIUM",	"",
	"L CORONARY ART",	"",
	"L LIQ",	"",
	"L LOQ",	"",
	"L PARASTERN",	"",
	"L SUBCLAVIAN",	"",
	"L SUPRACLAVICULAR",	"",
	"L UIQ",	"",
	"L UOQ",	"",
	"L VENTRICLE LATER",	"",
	"LEFT",	"",
	"LEFT PARA",	"",
	"LOWER ESOPHAGUS",	"",
	"MEDIAL",	"",
	"MID ESOPHAGUS",	"",
	"MIDLINE",	"",
	"OCCIPITAL",	"",
	"POSTERIOR",	"",
	"PROXIMAL",	"",
	"PULMONARY ART",	"",
	"R ATRIUM",	"",
	"R CORONARY ART",	"",
	"R LIQ",	"",
	"R LOQ",	"",
	"R PARASTERN",	"",
	"R SUBCLAVIAN",	"",
	"RSUPRACLAVICULAR",	"",
	"R UIQ",	"",
	"R UOQ",	"",
	"R VENTRICLE",	"",
	"RIGHT",	"",
	"RIGHT PARA",	"",
	"SUBCLAVIAN",	"",
	"SUBCOSTAL",	"",
	"SUP STERN NOTCH",	"",
	"SUPERIOR",	"",
	"SUPRACLAVICULAR",	"",
	"SURFACE",	"",
	"TRANSGASTRIC",	"",
	"TRANSORBITAL",	"",
	"TRANSTEMPORAL",	"",
	"UPPER ESOPHAGUS",	"",
	"VEIN",	"",
	0,0
};

char *
StringValueDescription_USTransducerPosition(char * value)
{
	return StringValueDescription(StringValueTable_USTransducerPosition,value);
}

static struct StringValueEntry
StringValueTable_USTransducerOrientation[] = {
	"2 CHAMBER",	"",
	"4 CHAMBER",	"",
	"5 CHAMBER",	"",
	"AXIAL",	"",
	"CORONAL",	"",
	"L PARASAG",	"",
	"LONG AXIS",	"",
	"LONGITUDINAL",	"",
	"OBLIQUE",	"",
	"R PARASAG",	"",
	"SAGITTAL",	"",
	"SHORT AXIS",	"",
	"TRANSVERSE",	"",
	0,0
};

char *
StringValueDescription_USTransducerOrientation(char * value)
{
	return StringValueDescription(StringValueTable_USTransducerOrientation,value);
}

static struct StringValueEntry
StringValueTable_USAnatomicStructure[] = {
	"4 CH HEART",	"",
	"3RD VENTRICLE",	"",
	"4TH VENTRICLE",	"",
	"AC",	"",
	"ADRENAL",	"",
	"AMNIOTIC FLUID",	"",
	"AORTA",	"",
	"APPENDIX",	"",
	"ASCENDING COLON",	"",
	"BASILAR ART",	"",
	"BILE DUCT",	"",
	"BLADDER",	"",
	"BPD",	"",
	"C SPINE",	"",
	"CELIAC ART",	"",
	"CENTRAL ZONE",	"",
	"CEREBELLUM",	"",
	"CEREB HEMISPHERE",	"",
	"CERVIX",	"",
	"COLON",	"",
	"CUL DE SAC",	"",
	"DESCENDING COLON",	"",
	"DUODENUM",	"",
	"ENDOMETRIUM",	"",
	"FETAL ARMS",	"",
	"FETAL DIGITS",	"",
	"FETAL HEART",	"",
	"FETAL LEGS",	"",
	"FETAL POLE",	"",
	"FEMUR LENGTH",	"",
	"FUNDUS",	"",
	"GALLBLADDER",	"",
	"GEST SAC",	"",
	"HC",	"",
	"HEPATIC ART",	"",
	"ILEUM",	"",
	"ISTHMUS",	"",
	"INF MES ART",	"",
	"INF VENA CAVA",	"",
	"L ACA",	"",
	"L AXILLARY A",	"",
	"L AXILLARY V",	"",
	"L BRACHIAL A",	"",
	"L BRACHIAL V",	"",
	"L BREAST",	"",
	"L BULB",	"",
	"L CCA",	"",
	"L CFA",	"",
	"L CFV",	"",
	"L CHOROID PLEXUS",	"",
	"L COM ILIAC ART",	"",
	"L COM ILIAC V",	"",
	"L ECA",	"",
	"L EPIDIDYMIS",	"",
	"L EXT ILIAC A",	"",
	"L EXT ILIAC V",	"",
	"L EXT JUG V",	"",
	"L EYE",	"",
	"L FEMUR",	"",
	"L GSV",	"",
	"L HEPATIC V",	"",
	"L HUMERUS",	"",
	"L ICA",	"",
	"L ILIAC A",	"",
	"L ILIAC V",	"",
	"L INT JUG V",	"",
	"L KIDNEY",	"",
	"L MCA",	"",
	"L OVARY",	"",
	"L PCA",	"",
	"L POP A",	"",
	"L POP V",	"",
	"L PROF FEM A",	"",
	"L PROF FEM V",	"",
	"L RADIAL A",	"",
	"L RADIUS",	"",
	"L RENAL ART",	"",
	"L RENAL V",	"",
	"L SEM VESICLE",	"",
	"L SAPH V",	"",
	"L SFA",	"",
	"L SFV",	"",
	"L SPINE",	"",
	"L SUBCLAVIAN A",	"",
	"L SUBCLAVIAN V",	"",
	"L TESTIS",	"",
	"L THALAMUS",	"",
	"L TIB FIB",	"",
	"L ULNA",	"",
	"L ULNAR ART",	"",
	"L VENTRICLE",	"",
	"L VERT",	"",
	"LAT VENTRICLES",	"",
	"LIVER",	"",
	"L PORTAL V",	"",
	"MID HEPATIC V",	"",
	"MORRISONS POUCH",	"",
	"OFD",	"",
	"PANCREAS",	"",
	"PENILE VESSELS",	"",
	"PERIPHERAL ZONE",	"",
	"PLACENTA",	"",
	"PORTAL V",	"",
	"PROSTATE",	"",
	"R ACA",	"",
	"R AXILLARY A",	"",
	"R AXILLARY V",	"",
	"R BRACHIAL A",	"",
	"R BRACHIAL V",	"",
	"R BREAST",	"",
	"R BULB",	"",
	"R CCA",	"",
	"R CFA",	"",
	"R CFV",	"",
	"R CHOROID PLEXUS",	"",
	"R COM ILIAC ART",	"",
	"R COM ILIAC V",	"",
	"R ECA",	"",
	"R EYE",	"",
	"R EPIDIDYMIS",	"",
	"R EXT ILIAC A",	"",
	"R EXT ILIAC V",	"",
	"R EXT JUV V",	"",
	"R FEMUR",	"",
	"R GSV",	"",
	"R HEPATIC V",	"",
	"R HUMERUS",	"",
	"R ICA",	"",
	"R ILIAC A",	"",
	"R ILIAC V",	"",
	"R INT JUG V",	"",
	"R KIDNEY",	"",
	"R MCA",	"",
	"R OVARY",	"",
	"R PCAR POP A",	"",
	"R POP V",	"",
	"R PROF FEM A",	"",
	"R PROF FEM V",	"",
	"R RADIAL A",	"",
	"R RADIUS",	"",
	"R RENAL ART",	"",
	"R RENAL V",	"",
	"R SAPH V",	"",
	"R SEM VESICLE",	"",
	"R SFA",	"",
	"R SFV",	"",
	"R SUBCLAVIAN A",	"",
	"R SUBCLAVIAN V",	"",
	"R TESTIS",	"",
	"R THALAMUS",	"",
	"R TIB FIB",	"",
	"R ULNA",	"",
	"R ULNAR ART",	"",
	"R VENTRICLE",	"",
	"R VERT",	"",
	"R PORTAL V",	"",
	"RECTUM",	"",
	"RETROPERITONEUM",	"",
	"SACRUM",	"",
	"SCROTUM",	"",
	"SIGMOID",	"",
	"SMA",	"",
	"SMALL INTESTINE",	"",
	"SMV",	"",
	"SPLEEN",	"",
	"SPLENIC ART",	"",
	"SPLENIC V",	"",
	"STOMACH",	"",
	"TESTICLE",	"",
	"T SPINE",	"",
	"THYROID",	"",
	"TRANSITION ZONE",	"",
	"TRANSVERSE COLON",	"",
	"SIGMOID",	"",
	"UMB CORD",	"",
	"UTERINE FUNDUS",	"",
	"UTERUS",	"",
	"VAGINA",	"",
	"YOLK SAC",	"",
	"ABD AO",	"",
	"AO ANNULUS",	"",
	"AO ARCH",	"",
	"AO LFLT TIPS",	"",
	"AO VALVE",	"",
	"ASCENDING AO",	"",
	"ASD",	"",
	"AZYGOS VEIN",	"",
	"CORONARY SINUS",	"",
	"DIAGONAL",	"",
	"DISTAL LAD",	"",
	"DISTAL LCX",	"",
	"DISTAL RCA",	"",
	"IAS",	"",
	"INNOMINATE A",	"",
	"INT ATRIAL SEPT",	"",
	"INT VENT SEPT",	"",
	"IVS",	"",
	"L ATRIAL APPEN",	"",
	"L ATRIUM",	"",
	"L FOOT",	"",
	"L GERMINAL MATRX",	"",
	"L HIP",	"",
	"L SHOULDER",	"",
	"L MAIN COR ART",	"",
	"L SAPH V",	"",
	"L SVC",	"",
	"LAD",	"",
	"LAD D1",	"",
	"LAD D2",	"",
	"LAD D3",	"",
	"LAD S1",	"",
	"LAD S2",	"",
	"LCX",	"",
	"LCXDM1",	"",
	"LCXDM2",	"",
	"LIMA",	"",
	"LLPV",	"",
	"LOWER DESC AO",	"",
	"LPA",	"",
	"LPV",	"",
	"LUPV",	"",
	"LV APEX",	"",
	"LV BASE",	"",
	"LV CAVITY",	"",
	"LV MID",	"",
	"LVOT",	"",
	"MAIN PA",	"",
	"MID LAD",	"",
	"MID LCX",	"",
	"MID RCA",	"",
	"MITRAL ANNULUS",	"",
	"MITRAL LFLT TIPS",	"",
	"MITRAL VALVE",	"",
	"OBTUSE MARGINAL",	"",
	"PERINEUM",	"",
	"PLV COR ART",	"",
	"POST DESC ART",	"",
	"POST LV BRANCH",	"",
	"PROX CIRC",	"",
	"PROX LAD",	"",
	"PROX LCX",	"",
	"PROX RCA",	"",
	"PULM ANNULUS",	"",
	"PULM VALVE",	"",
	"PULM VEIN",	"",
	"PV TIPS",	"",
	"R ATRIUM",	"",
	"R FOOT",	"",
	"R GERMINAL MATRX",	"",
	"R HIP",	"",
	"R PV",	"",
	"R SAPH V",	"",
	"R SHOULDER",	"",
	"RAA",	"",
	"RCA",	"",
	"RIMA",	"",
	"RLPV",	"",
	"RPA",	"",
	"RUPV",	"",
	"RV CAVITY",	"",
	"RVOT",	"",
	"SAPH V GRAFT LAD",	"",
	"SUP VENA CAVA",	"",
	"SVG D",	"",
	"SVG LAD",	"",
	"SVG LCX",	"",
	"SVG OM",	"",
	"SVG PDA",	"",
	"SVG PLV",	"",
	"SVG RCA",	"",
	"TRICUSPID ANN",	"",
	"TRICUSPID TIPS",	"",
	"TRICUSPID VALVE",	"",
	"UPPER DESC AO",	"",
	"VSD",	"",
	0,0
};

char *
StringValueDescription_USAnatomicStructure(char * value)
{
	return StringValueDescription(StringValueTable_USAnatomicStructure,value);
}

static struct StringValueEntry
StringValueTable_USTransducerType[] = {
	"SECTOR_PHASED",	"",
	"SECTOR_MECH",	"",
	"SECTOR_ANNULAR",	"",
	"LINEAR",	"",
	"CURVED LINEAR",	"",
	"SINGLE CRYSTAL",	"",
	"SPLIT XTAL CWD",	"",
	"IV_PHASED",	"",
	"IV_ROT XTAL",	"",
	"IV_ROT MIRROR",	"",
	"ENDOCAV_PA",	"",
	"ENDOCAV_MECH",	"",
	"ENDOCAV_CLA",	"",
	"ENDOCAV_AA",	"",
	"ENDOCAV_LINEAR",	"",
	"VECTOR_PHASED",	"",
	0,0
};

char *
StringValueDescription_USTransducerType(char * value)
{
	return StringValueDescription(StringValueTable_USTransducerType,value);
}

static struct StringValueEntry
StringValueTable_USImageType4[] = {
	"0001",	"2D Imaging",
	"0002",	"M-Mode",
	"0003",	"2D Imaging + M-Mode",
	"0004",	"CW Doppler",
	"0005",	"2D Imaging + CW Doppler",
	"0006",	"M-Mode + CW Doppler",
	"0007",	"2D Imaging + M-Mode + CW Doppler",
	"0008",	"PW Doppler",
	"0009",	"2D Imaging + PW Doppler",
	"000a",	"M-Mode + PW Doppler",
	"000b",	"2D Imaging + M-Mode + PW Doppler",
	"000c",	"CW Doppler + PW Doppler",
	"000d",	"2D Imaging + CW Doppler + PW Doppler",
	"000e",	"M-Mode + CW Doppler + PW Doppler",
	"000f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler",
	"0010",	"Color Doppler",
	"0011",	"2D Imaging + Color Doppler",
	"0012",	"M-Mode + Color Doppler",
	"0013",	"2D Imaging + M-Mode + Color Doppler",
	"0014",	"CW Doppler + Color Doppler",
	"0015",	"2D Imaging + CW Doppler + Color Doppler",
	"0016",	"M-Mode + CW Doppler + Color Doppler",
	"0017",	"2D Imaging + M-Mode + CW Doppler + Color Doppler",
	"0018",	"PW Doppler + Color Doppler",
	"0019",	"2D Imaging + PW Doppler + Color Doppler",
	"001a",	"M-Mode + PW Doppler + Color Doppler",
	"001b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler",
	"001c",	"CW Doppler + PW Doppler + Color Doppler",
	"001d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler",
	"001e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler",
	"001f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler",
	"0020",	"Color M-Mode",
	"0021",	"2D Imaging + Color M-Mode",
	"0022",	"M-Mode + Color M-Mode",
	"0023",	"2D Imaging + M-Mode + Color M-Mode",
	"0024",	"CW Doppler + Color M-Mode",
	"0025",	"2D Imaging + CW Doppler + Color M-Mode",
	"0026",	"M-Mode + CW Doppler + Color M-Mode",
	"0027",	"2D Imaging + M-Mode + CW Doppler + Color M-Mode",
	"0028",	"PW Doppler + Color M-Mode",
	"0029",	"2D Imaging + PW Doppler + Color M-Mode",
	"002a",	"M-Mode + PW Doppler + Color M-Mode",
	"002b",	"2D Imaging + M-Mode + PW Doppler + Color M-Mode",
	"002c",	"CW Doppler + PW Doppler + Color M-Mode",
	"002d",	"2D Imaging + CW Doppler + PW Doppler + Color M-Mode",
	"002e",	"M-Mode + CW Doppler + PW Doppler + Color M-Mode",
	"002f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color M-Mode",
	"0030",	"Color Doppler + Color M-Mode",
	"0031",	"2D Imaging + Color Doppler + Color M-Mode",
	"0032",	"M-Mode + Color Doppler + Color M-Mode",
	"0033",	"2D Imaging + M-Mode + Color Doppler + Color M-Mode",
	"0034",	"CW Doppler + Color Doppler + Color M-Mode",
	"0035",	"2D Imaging + CW Doppler + Color Doppler + Color M-Mode",
	"0036",	"M-Mode + CW Doppler + Color Doppler + Color M-Mode",
	"0037",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + Color M-Mode",
	"0038",	"PW Doppler + Color Doppler + Color M-Mode",
	"0039",	"2D Imaging + PW Doppler + Color Doppler + Color M-Mode",
	"003a",	"M-Mode + PW Doppler + Color Doppler + Color M-Mode",
	"003b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + Color M-Mode",
	"003c",	"CW Doppler + PW Doppler + Color Doppler + Color M-Mode",
	"003d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + Color M-Mode",
	"003e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode",
	"003f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode",
	"0040",	"3D Rendering",
	"0041",	"2D Imaging + 3D Rendering",
	"0042",	"M-Mode + 3D Rendering",
	"0043",	"2D Imaging + M-Mode + 3D Rendering",
	"0044",	"CW Doppler + 3D Rendering",
	"0045",	"2D Imaging + CW Doppler + 3D Rendering",
	"0046",	"M-Mode + CW Doppler + 3D Rendering",
	"0047",	"2D Imaging + M-Mode + CW Doppler + 3D Rendering",
	"0048",	"PW Doppler + 3D Rendering",
	"0049",	"2D Imaging + PW Doppler + 3D Rendering",
	"004a",	"M-Mode + PW Doppler + 3D Rendering",
	"004b",	"2D Imaging + M-Mode + PW Doppler + 3D Rendering",
	"004c",	"CW Doppler + PW Doppler + 3D Rendering",
	"004d",	"2D Imaging + CW Doppler + PW Doppler + 3D Rendering",
	"004e",	"M-Mode + CW Doppler + PW Doppler + 3D Rendering",
	"004f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + 3D Rendering",
	"0050",	"Color Doppler + 3D Rendering",
	"0051",	"2D Imaging + Color Doppler + 3D Rendering",
	"0052",	"M-Mode + Color Doppler + 3D Rendering",
	"0053",	"2D Imaging + M-Mode + Color Doppler + 3D Rendering",
	"0054",	"CW Doppler + Color Doppler + 3D Rendering",
	"0055",	"2D Imaging + CW Doppler + Color Doppler + 3D Rendering",
	"0056",	"M-Mode + CW Doppler + Color Doppler + 3D Rendering",
	"0057",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + 3D Rendering",
	"0058",	"PW Doppler + Color Doppler + 3D Rendering",
	"0059",	"2D Imaging + PW Doppler + Color Doppler + 3D Rendering",
	"005a",	"M-Mode + PW Doppler + Color Doppler + 3D Rendering",
	"005b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + 3D Rendering",
	"005c",	"CW Doppler + PW Doppler + Color Doppler + 3D Rendering",
	"005d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + 3D Rendering",
	"005e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + 3D Rendering",
	"005f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + 3D Rendering",
	"0060",	"Color M-Mode + 3D Rendering",
	"0061",	"2D Imaging + Color M-Mode + 3D Rendering",
	"0062",	"M-Mode + Color M-Mode + 3D Rendering",
	"0063",	"2D Imaging + M-Mode + Color M-Mode + 3D Rendering",
	"0064",	"CW Doppler + Color M-Mode + 3D Rendering",
	"0065",	"2D Imaging + CW Doppler + Color M-Mode + 3D Rendering",
	"0066",	"M-Mode + CW Doppler + Color M-Mode + 3D Rendering",
	"0067",	"2D Imaging + M-Mode + CW Doppler + Color M-Mode + 3D Rendering",
	"0068",	"PW Doppler + Color M-Mode + 3D Rendering",
	"0069",	"2D Imaging + PW Doppler + Color M-Mode + 3D Rendering",
	"006a",	"M-Mode + PW Doppler + Color M-Mode + 3D Rendering",
	"006b",	"2D Imaging + M-Mode + PW Doppler + Color M-Mode + 3D Rendering",
	"006c",	"CW Doppler + PW Doppler + Color M-Mode + 3D Rendering",
	"006d",	"2D Imaging + CW Doppler + PW Doppler + Color M-Mode + 3D Rendering",
	"006e",	"M-Mode + CW Doppler + PW Doppler + Color M-Mode + 3D Rendering",
	"006f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color M-Mode + 3D Rendering",
	"0070",	"Color Doppler + Color M-Mode + 3D Rendering",
	"0071",	"2D Imaging + Color Doppler + Color M-Mode + 3D Rendering",
	"0072",	"M-Mode + Color Doppler + Color M-Mode + 3D Rendering",
	"0073",	"2D Imaging + M-Mode + Color Doppler + Color M-Mode + 3D Rendering",
	"0074",	"CW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"0075",	"2D Imaging + CW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"0076",	"M-Mode + CW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"0077",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"0078",	"PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"0079",	"2D Imaging + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"007a",	"M-Mode + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"007b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"007c",	"CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"007d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"007e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"007f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering",
	"0100",	"Color Power Mode",
	"0101",	"2D Imaging + Color Power Mode",
	"0102",	"M-Mode + Color Power Mode",
	"0103",	"2D Imaging + M-Mode + Color Power Mode",
	"0104",	"CW Doppler + Color Power Mode",
	"0105",	"2D Imaging + CW Doppler + Color Power Mode",
	"0106",	"M-Mode + CW Doppler + Color Power Mode",
	"0107",	"2D Imaging + M-Mode + CW Doppler + Color Power Mode",
	"0108",	"PW Doppler + Color Power Mode",
	"0109",	"2D Imaging + PW Doppler + Color Power Mode",
	"010a",	"M-Mode + PW Doppler + Color Power Mode",
	"010b",	"2D Imaging + M-Mode + PW Doppler + Color Power Mode",
	"010c",	"CW Doppler + PW Doppler + Color Power Mode",
	"010d",	"2D Imaging + CW Doppler + PW Doppler + Color Power Mode",
	"010e",	"M-Mode + CW Doppler + PW Doppler + Color Power Mode",
	"010f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Power Mode",
	"0110",	"Color Doppler + Color Power Mode",
	"0111",	"2D Imaging + Color Doppler + Color Power Mode",
	"0112",	"M-Mode + Color Doppler + Color Power Mode",
	"0113",	"2D Imaging + M-Mode + Color Doppler + Color Power Mode",
	"0114",	"CW Doppler + Color Doppler + Color Power Mode",
	"0115",	"2D Imaging + CW Doppler + Color Doppler + Color Power Mode",
	"0116",	"M-Mode + CW Doppler + Color Doppler + Color Power Mode",
	"0117",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + Color Power Mode",
	"0118",	"PW Doppler + Color Doppler + Color Power Mode",
	"0119",	"2D Imaging + PW Doppler + Color Doppler + Color Power Mode",
	"011a",	"M-Mode + PW Doppler + Color Doppler + Color Power Mode",
	"011b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + Color Power Mode",
	"011c",	"CW Doppler + PW Doppler + Color Doppler + Color Power Mode",
	"011d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + Color Power Mode",
	"011e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + Color Power Mode",
	"011f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + Color Power Mode",
	"0120",	"Color M-Mode + Color Power Mode",
	"0121",	"2D Imaging + Color M-Mode + Color Power Mode",
	"0122",	"M-Mode + Color M-Mode + Color Power Mode",
	"0123",	"2D Imaging + M-Mode + Color M-Mode + Color Power Mode",
	"0124",	"CW Doppler + Color M-Mode + Color Power Mode",
	"0125",	"2D Imaging + CW Doppler + Color M-Mode + Color Power Mode",
	"0126",	"M-Mode + CW Doppler + Color M-Mode + Color Power Mode",
	"0127",	"2D Imaging + M-Mode + CW Doppler + Color M-Mode + Color Power Mode",
	"0128",	"PW Doppler + Color M-Mode + Color Power Mode",
	"0129",	"2D Imaging + PW Doppler + Color M-Mode + Color Power Mode",
	"012a",	"M-Mode + PW Doppler + Color M-Mode + Color Power Mode",
	"012b",	"2D Imaging + M-Mode + PW Doppler + Color M-Mode + Color Power Mode",
	"012c",	"CW Doppler + PW Doppler + Color M-Mode + Color Power Mode",
	"012d",	"2D Imaging + CW Doppler + PW Doppler + Color M-Mode + Color Power Mode",
	"012e",	"M-Mode + CW Doppler + PW Doppler + Color M-Mode + Color Power Mode",
	"012f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color M-Mode + Color Power Mode",
	"0130",	"Color Doppler + Color M-Mode + Color Power Mode",
	"0131",	"2D Imaging + Color Doppler + Color M-Mode + Color Power Mode",
	"0132",	"M-Mode + Color Doppler + Color M-Mode + Color Power Mode",
	"0133",	"2D Imaging + M-Mode + Color Doppler + Color M-Mode + Color Power Mode",
	"0134",	"CW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"0135",	"2D Imaging + CW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"0136",	"M-Mode + CW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"0137",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"0138",	"PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"0139",	"2D Imaging + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"013a",	"M-Mode + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"013b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"013c",	"CW Doppler + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"013d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"013e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"013f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + Color Power Mode",
	"0140",	"3D Rendering + Color Power Mode",
	"0141",	"2D Imaging + 3D Rendering + Color Power Mode",
	"0142",	"M-Mode + 3D Rendering + Color Power Mode",
	"0143",	"2D Imaging + M-Mode + 3D Rendering + Color Power Mode",
	"0144",	"CW Doppler + 3D Rendering + Color Power Mode",
	"0145",	"2D Imaging + CW Doppler + 3D Rendering + Color Power Mode",
	"0146",	"M-Mode + CW Doppler + 3D Rendering + Color Power Mode",
	"0147",	"2D Imaging + M-Mode + CW Doppler + 3D Rendering + Color Power Mode",
	"0148",	"PW Doppler + 3D Rendering + Color Power Mode",
	"0149",	"2D Imaging + PW Doppler + 3D Rendering + Color Power Mode",
	"014a",	"M-Mode + PW Doppler + 3D Rendering + Color Power Mode",
	"014b",	"2D Imaging + M-Mode + PW Doppler + 3D Rendering + Color Power Mode",
	"014c",	"CW Doppler + PW Doppler + 3D Rendering + Color Power Mode",
	"014d",	"2D Imaging + CW Doppler + PW Doppler + 3D Rendering + Color Power Mode",
	"014e",	"M-Mode + CW Doppler + PW Doppler + 3D Rendering + Color Power Mode",
	"014f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + 3D Rendering + Color Power Mode",
	"0150",	"Color Doppler + 3D Rendering + Color Power Mode",
	"0151",	"2D Imaging + Color Doppler + 3D Rendering + Color Power Mode",
	"0152",	"M-Mode + Color Doppler + 3D Rendering + Color Power Mode",
	"0153",	"2D Imaging + M-Mode + Color Doppler + 3D Rendering + Color Power Mode",
	"0154",	"CW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"0155",	"2D Imaging + CW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"0156",	"M-Mode + CW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"0157",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"0158",	"PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"0159",	"2D Imaging + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"015a",	"M-Mode + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"015b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"015c",	"CW Doppler + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"015d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"015e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"015f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + 3D Rendering + Color Power Mode",
	"0160",	"Color M-Mode + 3D Rendering + Color Power Mode",
	"0161",	"2D Imaging + Color M-Mode + 3D Rendering + Color Power Mode",
	"0162",	"M-Mode + Color M-Mode + 3D Rendering + Color Power Mode",
	"0163",	"2D Imaging + M-Mode + Color M-Mode + 3D Rendering + Color Power Mode",
	"0164",	"CW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0165",	"2D Imaging + CW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0166",	"M-Mode + CW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0167",	"2D Imaging + M-Mode + CW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0168",	"PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0169",	"2D Imaging + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"016a",	"M-Mode + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"016b",	"2D Imaging + M-Mode + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"016c",	"CW Doppler + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"016d",	"2D Imaging + CW Doppler + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"016e",	"M-Mode + CW Doppler + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"016f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0170",	"Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0171",	"2D Imaging + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0172",	"M-Mode + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0173",	"2D Imaging + M-Mode + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0174",	"CW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0175",	"2D Imaging + CW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0176",	"M-Mode + CW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0177",	"2D Imaging + M-Mode + CW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0178",	"PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"0179",	"2D Imaging + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"017a",	"M-Mode + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"017b",	"2D Imaging + M-Mode + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"017c",	"CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"017d",	"2D Imaging + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"017e",	"M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	"017f",	"2D Imaging + M-Mode + CW Doppler + PW Doppler + Color Doppler + Color M-Mode + 3D Rendering + Color Power Mode",
	0,0
};

char *
StringValueDescription_USImageType4(char * value)
{
	return StringValueDescription(StringValueTable_USImageType4,value);
}

static struct StringValueEntry
StringValueTable_IVUSAcquisition[] = {
	"MOTOR_PULLBACK",	"",
	"MANUAL_PULLBACK",	"",
	"SELECTIVE",	"",
	"GATED_PULLBACK",	"",
	0,0
};

char *
StringValueDescription_IVUSAcquisition(char * value)
{
	return StringValueDescription(StringValueTable_IVUSAcquisition,value);
}

static struct StringValueEntry
StringValueTable_FrameOfInterestTypeForUS[] = {
	"HIGHMI",	"",
	"RWAVE",	"",
	"TRIGGER",	"",
	"ENDSYSTOLE",	"",
	0,0
};

char *
StringValueDescription_FrameOfInterestTypeForUS(char * value)
{
	return StringValueDescription(StringValueTable_FrameOfInterestTypeForUS,value);
}

static struct StringValueEntry
StringValueTable_USStageName[] = {
	"PRE-EXERCISE",	"",
	"POST-EXERCISE",	"",
	"PEAK-EXERCISE",	"",
	"RECOVERY",	"",
	"BASELINE",	"",
	"LOW DOSE",	"",
	"PEAK DOSE",	"",
	0,0
};

char *
StringValueDescription_USStageName(char * value)
{
	return StringValueDescription(StringValueTable_USStageName,value);
}

static struct StringValueEntry
StringValueTable_UltrasoundAcquisitionGeometry[] = {
	"APEX",	"",
	0,0
};

char *
StringValueDescription_UltrasoundAcquisitionGeometry(char * value)
{
	return StringValueDescription(StringValueTable_UltrasoundAcquisitionGeometry,value);
}

static struct StringValueEntry
StringValueTable_UltrasoundAcquisitionGeometryPatient[] = {
	"PATIENT",	"",
	0,0
};

char *
StringValueDescription_UltrasoundAcquisitionGeometryPatient(char * value)
{
	return StringValueDescription(StringValueTable_UltrasoundAcquisitionGeometryPatient,value);
}

static struct StringValueEntry
StringValueTable_PatientFrameOfReferenceSource[] = {
	"TABLE",	"",
	"ESTIMATED",	"",
	"REGISTRATION",	"",
	0,0
};

char *
StringValueDescription_PatientFrameOfReferenceSource(char * value)
{
	return StringValueDescription(StringValueTable_PatientFrameOfReferenceSource,value);
}

static struct StringValueEntry
StringValueTable_PatientFrameOfReferenceSourceTable[] = {
	"TABLE",	"",
	0,0
};

char *
StringValueDescription_PatientFrameOfReferenceSourceTable(char * value)
{
	return StringValueDescription(StringValueTable_PatientFrameOfReferenceSourceTable,value);
}

static struct StringValueEntry
StringValueTable_USOrIVUSModality[] = {
	"US",	"",
	"IVUS",	"",
	0,0
};

char *
StringValueDescription_USOrIVUSModality(char * value)
{
	return StringValueDescription(StringValueTable_USOrIVUSModality,value);
}

static struct StringValueEntry
StringValueTable_PerformedProtocolType[] = {
	"STAGED",	"",
	"NON_STAGED",	"",
	0,0
};

char *
StringValueDescription_PerformedProtocolType(char * value)
{
	return StringValueDescription(StringValueTable_PerformedProtocolType,value);
}

static struct StringValueEntry
StringValueTable_DimensionOrganizationType3DOr3DTemporal[] = {
	"3D",	"",
	"3D_TEMPORAL",	"",
	0,0
};

char *
StringValueDescription_DimensionOrganizationType3DOr3DTemporal(char * value)
{
	return StringValueDescription(StringValueTable_DimensionOrganizationType3DOr3DTemporal,value);
}

static struct StringValueEntry
StringValueTable_PositionMeasuringDeviceUsed[] = {
	"RIGID",	"",
	"FREEHAND",	"",
	0,0
};

char *
StringValueDescription_PositionMeasuringDeviceUsed(char * value)
{
	return StringValueDescription(StringValueTable_PositionMeasuringDeviceUsed,value);
}

static struct StringValueEntry
StringValueTable_PositionMeasuringDeviceUsedRigid[] = {
	"RIGID",	"",
	0,0
};

char *
StringValueDescription_PositionMeasuringDeviceUsedRigid(char * value)
{
	return StringValueDescription(StringValueTable_PositionMeasuringDeviceUsedRigid,value);
}

static struct StringValueEntry
StringValueTable_EnhancedUSVolumeDataType[] = {
	"TISSUE_INTENSITY",	"",
	"TISSUE_VELOCITY",	"",
	"FLOW_VELOCITY",	"",
	"FLOW_POWER",	"",
	"FLOW_VARIANCE",	"",
	"ELASTICITY",	"",
	"PERFUSION",	"",
	"SOUND_SPEED",	"",
	"ATTENUATION",	"",
	0,0
};

char *
StringValueDescription_EnhancedUSVolumeDataType(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedUSVolumeDataType,value);
}

static struct StringValueEntry
StringValueTable_DataPathAssignment[] = {
	"PRIMARY_PVALUES",	"",
	"PRIMARY_SINGLE",	"",
	"SECONDARY_SINGLE",	"",
	"SECONDARY_HIGH",	"",
	"SECONDARY_LOW",	"",
	0,0
};

char *
StringValueDescription_DataPathAssignment(char * value)
{
	return StringValueDescription(StringValueTable_DataPathAssignment,value);
}

static struct StringValueEntry
StringValueTable_BlendingLUT1TransferFunction[] = {
	"CONSTANT",	"",
	"ALPHA_1",	"",
	"ALPHA_2",	"",
	"TABLE",	"",
	0,0
};

char *
StringValueDescription_BlendingLUT1TransferFunction(char * value)
{
	return StringValueDescription(StringValueTable_BlendingLUT1TransferFunction,value);
}

static struct StringValueEntry
StringValueTable_BlendingLUT2TransferFunction[] = {
	"CONSTANT",	"",
	"ONE_MINUS",	"",
	"ALPHA_1",	"",
	"ALPHA_2",	"",
	"TABLE",	"",
	0,0
};

char *
StringValueDescription_BlendingLUT2TransferFunction(char * value)
{
	return StringValueDescription(StringValueTable_BlendingLUT2TransferFunction,value);
}

static struct StringValueEntry
StringValueTable_DataPathID[] = {
	"PRIMARY",	"",
	"SECONDARY",	"",
	0,0
};

char *
StringValueDescription_DataPathID(char * value)
{
	return StringValueDescription(StringValueTable_DataPathID,value);
}

static struct StringValueEntry
StringValueTable_RGBLUTTransferFunction[] = {
	"EQUAL_RGB",	"",
	"TABLE",	"",
	0,0
};

char *
StringValueDescription_RGBLUTTransferFunction(char * value)
{
	return StringValueDescription(StringValueTable_RGBLUTTransferFunction,value);
}

static struct StringValueEntry
StringValueTable_AlphaLUTTransferFunction[] = {
	"NONE",	"",
	"IDENTITY",	"",
	"TABLE",	"",
	0,0
};

char *
StringValueDescription_AlphaLUTTransferFunction(char * value)
{
	return StringValueDescription(StringValueTable_AlphaLUTTransferFunction,value);
}

static struct StringValueEntry
StringValueTable_VolumeToTransducerRelationship[] = {
	"FIXED",	"",
	"POSITION_VAR",	"",
	"ORIENTATION_VAR",	"",
	"VARIABLE",	"",
	0,0
};

char *
StringValueDescription_VolumeToTransducerRelationship(char * value)
{
	return StringValueDescription(StringValueTable_VolumeToTransducerRelationship,value);
}

static struct StringValueEntry
StringValueTable_VolumeToTransducerRelationshipFixed[] = {
	"FIXED",	"",
	0,0
};

char *
StringValueDescription_VolumeToTransducerRelationshipFixed(char * value)
{
	return StringValueDescription(StringValueTable_VolumeToTransducerRelationshipFixed,value);
}

static struct StringValueEntry
StringValueTable_BodyPartExaminedBreast[] = {
	"BREAST",	"",
	0,0
};

char *
StringValueDescription_BodyPartExaminedBreast(char * value)
{
	return StringValueDescription(StringValueTable_BodyPartExaminedBreast,value);
}

static struct StringValueEntry
StringValueTable_BreastCodeValue[] = {
	"T-04000",	"",
	0,0
};

char *
StringValueDescription_BreastCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_BreastCodeValue,value);
}

static struct StringValueEntry
StringValueTable_BreastCodingSchemeDesignator[] = {
	"SRT",	"",
	0,0
};

char *
StringValueDescription_BreastCodingSchemeDesignator(char * value)
{
	return StringValueDescription(StringValueTable_BreastCodingSchemeDesignator,value);
}

static struct StringValueEntry
StringValueTable_BreastCodeMeaning[] = {
	"Breast",	"",
	0,0
};

char *
StringValueDescription_BreastCodeMeaning(char * value)
{
	return StringValueDescription(StringValueTable_BreastCodeMeaning,value);
}

static struct StringValueEntry
StringValueTable_CoronalCodeValue[] = {
	"G-A138",	"",
	0,0
};

char *
StringValueDescription_CoronalCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_CoronalCodeValue,value);
}

static struct StringValueEntry
StringValueTable_CoronalCodingSchemeDesignator[] = {
	"SRT",	"",
	0,0
};

char *
StringValueDescription_CoronalCodingSchemeDesignator(char * value)
{
	return StringValueDescription(StringValueTable_CoronalCodingSchemeDesignator,value);
}

static struct StringValueEntry
StringValueTable_CoronalCodeMeaning[] = {
	"Coronal",	"",
	0,0
};

char *
StringValueDescription_CoronalCodeMeaning(char * value)
{
	return StringValueDescription(StringValueTable_CoronalCodeMeaning,value);
}

static struct StringValueEntry
StringValueTable_TransducerScanPatternCodeSequenceCodeValue[] = {
	"125242",	"",
	0,0
};

char *
StringValueDescription_TransducerScanPatternCodeSequenceCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_TransducerScanPatternCodeSequenceCodeValue,value);
}

static struct StringValueEntry
StringValueTable_TransducerScanPatternCodeSequenceCodingSchemeDesignator[] = {
	"DCM",	"",
	0,0
};

char *
StringValueDescription_TransducerScanPatternCodeSequenceCodingSchemeDesignator(char * value)
{
	return StringValueDescription(StringValueTable_TransducerScanPatternCodeSequenceCodingSchemeDesignator,value);
}

static struct StringValueEntry
StringValueTable_TransducerScanPatternCodeSequenceCodeMeaning[] = {
	"Volume scan pattern",	"",
	0,0
};

char *
StringValueDescription_TransducerScanPatternCodeSequenceCodeMeaning(char * value)
{
	return StringValueDescription(StringValueTable_TransducerScanPatternCodeSequenceCodeMeaning,value);
}

static struct StringValueEntry
StringValueTable_TransducerGeometryCodeSequenceCodeValueForReflection[] = {
	"125253",	"",
	0,0
};

char *
StringValueDescription_TransducerGeometryCodeSequenceCodeValueForReflection(char * value)
{
	return StringValueDescription(StringValueTable_TransducerGeometryCodeSequenceCodeValueForReflection,value);
}

static struct StringValueEntry
StringValueTable_TransducerGeometryCodeSequenceCodeMeaningForReflection[] = {
	"Curved ultrasound transducer geometry",	"",
	0,0
};

char *
StringValueDescription_TransducerGeometryCodeSequenceCodeMeaningForReflection(char * value)
{
	return StringValueDescription(StringValueTable_TransducerGeometryCodeSequenceCodeMeaningForReflection,value);
}

static struct StringValueEntry
StringValueTable_TransducerGeometryCodeSequenceCodingSchemeDesignator[] = {
	"DCM",	"",
	0,0
};

char *
StringValueDescription_TransducerGeometryCodeSequenceCodingSchemeDesignator(char * value)
{
	return StringValueDescription(StringValueTable_TransducerGeometryCodeSequenceCodingSchemeDesignator,value);
}

static struct StringValueEntry
StringValueTable_TransducerGeometryCodeSequenceCodeValueForTransmission[] = {
	"125252",	"",
	0,0
};

char *
StringValueDescription_TransducerGeometryCodeSequenceCodeValueForTransmission(char * value)
{
	return StringValueDescription(StringValueTable_TransducerGeometryCodeSequenceCodeValueForTransmission,value);
}

static struct StringValueEntry
StringValueTable_TransducerGeometryCodeSequenceCodeMeaningForTransmission[] = {
	"Linear ultrasound transducer geometry",	"",
	0,0
};

char *
StringValueDescription_TransducerGeometryCodeSequenceCodeMeaningForTransmission(char * value)
{
	return StringValueDescription(StringValueTable_TransducerGeometryCodeSequenceCodeMeaningForTransmission,value);
}

static struct StringValueEntry
StringValueTable_TransducerBeamSteeringCodeSequenceCodeValue[] = {
	"125258",	"",
	0,0
};

char *
StringValueDescription_TransducerBeamSteeringCodeSequenceCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_TransducerBeamSteeringCodeSequenceCodeValue,value);
}

static struct StringValueEntry
StringValueTable_TransducerBeamSteeringCodeSequenceCodingSchemeDesignator[] = {
	"DCM",	"",
	0,0
};

char *
StringValueDescription_TransducerBeamSteeringCodeSequenceCodingSchemeDesignator(char * value)
{
	return StringValueDescription(StringValueTable_TransducerBeamSteeringCodeSequenceCodingSchemeDesignator,value);
}

static struct StringValueEntry
StringValueTable_TransducerBeamSteeringCodeSequenceCodeMeaning[] = {
	"Mechanical beam steering",	"",
	0,0
};

char *
StringValueDescription_TransducerBeamSteeringCodeSequenceCodeMeaning(char * value)
{
	return StringValueDescription(StringValueTable_TransducerBeamSteeringCodeSequenceCodeMeaning,value);
}

static struct StringValueEntry
StringValueTable_TransducerApplicationCodeSequenceCodeValue[] = {
	"125261",	"",
	0,0
};

char *
StringValueDescription_TransducerApplicationCodeSequenceCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_TransducerApplicationCodeSequenceCodeValue,value);
}

static struct StringValueEntry
StringValueTable_TransducerApplicationCodeSequenceCodingSchemeDesignator[] = {
	"DCM",	"",
	0,0
};

char *
StringValueDescription_TransducerApplicationCodeSequenceCodingSchemeDesignator(char * value)
{
	return StringValueDescription(StringValueTable_TransducerApplicationCodeSequenceCodingSchemeDesignator,value);
}

static struct StringValueEntry
StringValueTable_TransducerApplicationCodeSequenceCodeMeaning[] = {
	"External",	"",
	0,0
};

char *
StringValueDescription_TransducerApplicationCodeSequenceCodeMeaning(char * value)
{
	return StringValueDescription(StringValueTable_TransducerApplicationCodeSequenceCodeMeaning,value);
}

static struct StringValueEntry
StringValueTable_QTUSImageAndFrameTypeValue3[] = {
	"TISSUE_INTENSITY",	"",
	"SOUND_SPEED",	"",
	"ATTENUATION",	"",
	0,0
};

char *
StringValueDescription_QTUSImageAndFrameTypeValue3(char * value)
{
	return StringValueDescription(StringValueTable_QTUSImageAndFrameTypeValue3,value);
}

static struct StringValueEntry
StringValueTable_QTUSEnhancedUSVolumeDataType[] = {
	"TISSUE_INTENSITY",	"",
	"SOUND_SPEED",	"",
	"ATTENUATION",	"",
	0,0
};

char *
StringValueDescription_QTUSEnhancedUSVolumeDataType(char * value)
{
	return StringValueDescription(StringValueTable_QTUSEnhancedUSVolumeDataType,value);
}

static struct StringValueEntry
StringValueTable_EnhancedUSVolumeDataTypeTissueIntensity[] = {
	"TISSUE_INTENSITY",	"",
	0,0
};

char *
StringValueDescription_EnhancedUSVolumeDataTypeTissueIntensity(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedUSVolumeDataTypeTissueIntensity,value);
}

static struct StringValueEntry
StringValueTable_EnhancedUSVolumeDataTypeAttenuation[] = {
	"ATTENUATION",	"",
	0,0
};

char *
StringValueDescription_EnhancedUSVolumeDataTypeAttenuation(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedUSVolumeDataTypeAttenuation,value);
}

static struct StringValueEntry
StringValueTable_EnhancedUSVolumeDataTypeSoundSpeed[] = {
	"SOUND_SPEED",	"",
	0,0
};

char *
StringValueDescription_EnhancedUSVolumeDataTypeSoundSpeed(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedUSVolumeDataTypeSoundSpeed,value);
}

static struct StringValueEntry
StringValueTable_QTUSImageAndFrameTypeValue3TissueIntensity[] = {
	"TISSUE_INTENSITY",	"",
	0,0
};

char *
StringValueDescription_QTUSImageAndFrameTypeValue3TissueIntensity(char * value)
{
	return StringValueDescription(StringValueTable_QTUSImageAndFrameTypeValue3TissueIntensity,value);
}

static struct StringValueEntry
StringValueTable_QTUSImageAndFrameTypeValue3Attenuation[] = {
	"ATTENUATION",	"",
	0,0
};

char *
StringValueDescription_QTUSImageAndFrameTypeValue3Attenuation(char * value)
{
	return StringValueDescription(StringValueTable_QTUSImageAndFrameTypeValue3Attenuation,value);
}

static struct StringValueEntry
StringValueTable_QTUSImageAndFrameTypeValue3SoundSpeed[] = {
	"SOUND_SPEED",	"",
	0,0
};

char *
StringValueDescription_QTUSImageAndFrameTypeValue3SoundSpeed(char * value)
{
	return StringValueDescription(StringValueTable_QTUSImageAndFrameTypeValue3SoundSpeed,value);
}

static struct StringValueEntry
StringValueTable_QTUSDimensionDescriptionLabel[] = {
	"time",	"",
	"position",	"",
	"data type",	"",
	0,0
};

char *
StringValueDescription_QTUSDimensionDescriptionLabel(char * value)
{
	return StringValueDescription(StringValueTable_QTUSDimensionDescriptionLabel,value);
}

static struct StringValueEntry
StringValueTable_QTUSRealWorldValueMappingLUTExplanation[] = {
	"Atten dB/m/MHz",	"",
	"Speed Sound m/s",	"",
	"Imp Mismatch dB",	"",
	0,0
};

char *
StringValueDescription_QTUSRealWorldValueMappingLUTExplanation(char * value)
{
	return StringValueDescription(StringValueTable_QTUSRealWorldValueMappingLUTExplanation,value);
}

static struct StringValueEntry
StringValueTable_QTUSRealWorldValueMappingLUTLabel[] = {
	"Atten dB/m/MHz",	"",
	"Speed Sound m/s",	"",
	"Imp Mismatch dB",	"",
	0,0
};

char *
StringValueDescription_QTUSRealWorldValueMappingLUTLabel(char * value)
{
	return StringValueDescription(StringValueTable_QTUSRealWorldValueMappingLUTLabel,value);
}

static struct StringValueEntry
StringValueTable_QTUSRealWorldValueMappingMeasurementUnitsCodeValue[] = {
	"dB/m/MHz",	"",
	"m/s",	"",
	"dB",	"",
	0,0
};

char *
StringValueDescription_QTUSRealWorldValueMappingMeasurementUnitsCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_QTUSRealWorldValueMappingMeasurementUnitsCodeValue,value);
}

static struct StringValueEntry
StringValueTable_QTUSRealWorldValueMappingMeasurementUnitsCodeMeaning[] = {
	"dB/m/MHz",	"",
	"m/s",	"",
	"dB",	"",
	0,0
};

char *
StringValueDescription_QTUSRealWorldValueMappingMeasurementUnitsCodeMeaning(char * value)
{
	return StringValueDescription(StringValueTable_QTUSRealWorldValueMappingMeasurementUnitsCodeMeaning,value);
}

static struct StringValueEntry
StringValueTable_CodeValueForLOINCBreastUltrasound[] = {
	"24601-7",	"",
	0,0
};

char *
StringValueDescription_CodeValueForLOINCBreastUltrasound(char * value)
{
	return StringValueDescription(StringValueTable_CodeValueForLOINCBreastUltrasound,value);
}

static struct StringValueEntry
StringValueTable_CodeMeaningForLOINCBreastUltrasound[] = {
	"Breast US",	"",
	0,0
};

char *
StringValueDescription_CodeMeaningForLOINCBreastUltrasound(char * value)
{
	return StringValueDescription(StringValueTable_CodeMeaningForLOINCBreastUltrasound,value);
}

static struct StringValueEntry
StringValueTable_NuclearMedicineSeriesTypeRetired[] = {
	"STATIC",	"",
	"DYNAMIC",	"",
	"GATED",	"",
	"WHOLE BODY",	"",
	"STEP_SHOOT TOMO",	"",
	"CONTINUOUS TOMO",	"",
	"GATED TOMO",	"",
	0,0
};

char *
StringValueDescription_NuclearMedicineSeriesTypeRetired(char * value)
{
	return StringValueDescription(StringValueTable_NuclearMedicineSeriesTypeRetired,value);
}

static struct StringValueEntry
StringValueTable_WholeBodyTechnique[] = {
	"1PS",	"One Pass",
	"2PS",	"Two Pass",
	"PCN",	"Patient Contour Following Employed",
	"DIV",	"Diverging Collimator Used",
	"MSP",	"Multiple Static Images Collected Into a Whole Body Image",
	0,0
};

char *
StringValueDescription_WholeBodyTechnique(char * value)
{
	return StringValueDescription(StringValueTable_WholeBodyTechnique,value);
}

static struct StringValueEntry
StringValueTable_NMFieldOfViewShape[] = {
	"RECTANGLE",	"",
	"ROUND",	"",
	"HEXAGONAL",	"",
	0,0
};

char *
StringValueDescription_NMFieldOfViewShape(char * value)
{
	return StringValueDescription(StringValueTable_NMFieldOfViewShape,value);
}

static struct StringValueEntry
StringValueTable_CollimatorType[] = {
	"PARA",	"Parallel",
	"PINH",	"PinHole",
	"FANB",	"Fan Beam",
	"CONE",	"Cone Beam",
	"SLNT",	"Slant Hole",
	"ASTG",	"Astigmatic",
	0,0
};

char *
StringValueDescription_CollimatorType(char * value)
{
	return StringValueDescription(StringValueTable_CollimatorType,value);
}

static struct StringValueEntry
StringValueTable_AcquisitionTerminationCondition[] = {
	"CNTS",	"Counts",
	"DENS",	"Density",
	"MANU",	"Manual",
	"OVFL",	"Data Overflow",
	"TIME",	"Time",
	"TRIG",	"Physiological Trigger",
	0,0
};

char *
StringValueDescription_AcquisitionTerminationCondition(char * value)
{
	return StringValueDescription(StringValueTable_AcquisitionTerminationCondition,value);
}

static struct StringValueEntry
StringValueTable_NMCorrectedImageRetired[] = {
	"UNIF",	"Flood Corrected",
	"COR",	"Center of Rotation Corrected",
	"NCO",	"Non-circular Orbit Corrected",
	"DECY",	"Decay Corrected",
	"ATTN",	"Attenuation Corrected",
	"SCAT",	"Scatter Corrected",
	"DTIM",	"Dead Time Corrected",
	0,0
};

char *
StringValueDescription_NMCorrectedImageRetired(char * value)
{
	return StringValueDescription(StringValueTable_NMCorrectedImageRetired,value);
}

static struct StringValueEntry
StringValueTable_NMPhotometricInterpretation[] = {
	"MONOCHROME2",	"",
	"PALETTE COLOR",	"",
	0,0
};

char *
StringValueDescription_NMPhotometricInterpretation(char * value)
{
	return StringValueDescription(StringValueTable_NMPhotometricInterpretation,value);
}

static struct StringValueEntry
StringValueTable_NMImageTypeValue2[] = {
	"PRIMARY",	"",
	0,0
};

char *
StringValueDescription_NMImageTypeValue2(char * value)
{
	return StringValueDescription(StringValueTable_NMImageTypeValue2,value);
}

static struct StringValueEntry
StringValueTable_NMImageTypeValue3[] = {
	"STATIC",	"",
	"DYNAMIC",	"",
	"GATED",	"",
	"WHOLE BODY",	"",
	"TOMO",	"",
	"GATED TOMO",	"",
	"RECON TOMO",	"",
	"RECON GATED TOMO",	"",
	0,0
};

char *
StringValueDescription_NMImageTypeValue3(char * value)
{
	return StringValueDescription(StringValueTable_NMImageTypeValue3,value);
}

static struct StringValueEntry
StringValueTable_NMImageTypeValue4[] = {
	"EMISSION",	"",
	"TRANSMISSION",	"",
	0,0
};

char *
StringValueDescription_NMImageTypeValue4(char * value)
{
	return StringValueDescription(StringValueTable_NMImageTypeValue4,value);
}

static struct StringValueEntry
StringValueTable_NMAcquisitionTerminationCondition[] = {
	"CNTS",	"preset count limit was reached",
	"DENS",	"preset count density was reached",
	"MANU",	"acquisition was terminated manually",
	"OVFL",	"acquisition was terminated automatically by pixel data overflow condition",
	"TIME",	"preset time limit was reached",
	"TRIG",	"preset number Of physiological triggers was reached",
	0,0
};

char *
StringValueDescription_NMAcquisitionTerminationCondition(char * value)
{
	return StringValueDescription(StringValueTable_NMAcquisitionTerminationCondition,value);
}

static struct StringValueEntry
StringValueTable_NMCorrectedImage[] = {
	"UNIF",	"flood corrected",
	"COR",	"center Of rotation corrected",
	"NCO",	"non-circular orbit corrected",
	"DECY",	"decay corrected",
	"ATTN",	"attenuation corrected",
	"SCAT",	"scatter corrected",
	"DTIM",	"dead time corrected",
	"NRGY",	"energy corrected",
	"LIN",	"linearity corrected",
	"MOTN",	"motion corrected",
	"CLN",	"count loss normalization",
	0,0
};

char *
StringValueDescription_NMCorrectedImage(char * value)
{
	return StringValueDescription(StringValueTable_NMCorrectedImage,value);
}

static struct StringValueEntry
StringValueTable_NMWholeBodyTechnique[] = {
	"1PS",	"one pass",
	"2PS",	"two pass",
	"PCN",	"patient contour following employed",
	"MSP",	"multiple static frames collected into a whole body frame",
	0,0
};

char *
StringValueDescription_NMWholeBodyTechnique(char * value)
{
	return StringValueDescription(StringValueTable_NMWholeBodyTechnique,value);
}

static struct StringValueEntry
StringValueTable_EKG[] = {
	"EKG",	"",
	0,0
};

char *
StringValueDescription_EKG(char * value)
{
	return StringValueDescription(StringValueTable_EKG,value);
}

static struct StringValueEntry
StringValueTable_NMCollimatorType[] = {
	"PARA",	"Parallel",
	"PINH",	"Pinhole",
	"FANB",	"Fan-beam",
	"CONE",	"Cone-beam",
	"SLNT",	"Slant hole",
	"ASTG",	"Astigmatic",
	"DIVG",	"Diverging",
	"NONE",	"No collimator",
	"UNKN",	"Unknown",
	0,0
};

char *
StringValueDescription_NMCollimatorType(char * value)
{
	return StringValueDescription(StringValueTable_NMCollimatorType,value);
}

static struct StringValueEntry
StringValueTable_NMTypeOfDetectorMotion[] = {
	"STEP AND SHOOT",	"Interrupted motion - acquire only while stationary",
	"CONTINUOUS",	"Gantry motion and acquisition are simultaneous and continuous",
	"ACQ DURING STEP",	"Interrupted motion - acquisition is continuous",
	0,0
};

char *
StringValueDescription_NMTypeOfDetectorMotion(char * value)
{
	return StringValueDescription(StringValueTable_NMTypeOfDetectorMotion,value);
}

static struct StringValueEntry
StringValueTable_PositionerMotion[] = {
	"STATIC",	"",
	"DYNAMIC",	"",
	0,0
};

char *
StringValueDescription_PositionerMotion(char * value)
{
	return StringValueDescription(StringValueTable_PositionerMotion,value);
}

static struct StringValueEntry
StringValueTable_TableMotion[] = {
	"STATIC",	"",
	"DYNAMIC",	"",
	0,0
};

char *
StringValueDescription_TableMotion(char * value)
{
	return StringValueDescription(StringValueTable_TableMotion,value);
}

static struct StringValueEntry
StringValueTable_NMPhaseDescription[] = {
	"FLOW",	"",
	"WASHOUT",	"",
	"UPTAKE",	"",
	"EMPTYING",	"",
	"EXCRETION",	"",
	0,0
};

char *
StringValueDescription_NMPhaseDescription(char * value)
{
	return StringValueDescription(StringValueTable_NMPhaseDescription,value);
}

static struct StringValueEntry
StringValueTable_CardiacSliceProgressionDirection[] = {
	"APEX_TO_BASE",	"",
	"BASE_TO_APEX",	"",
	"ANT_TO_INF",	"",
	"INF_TO_ANT",	"",
	"SEPTUM_TO_WALL",	"",
	"WALL_TO_SEPTUM",	"",
	0,0
};

char *
StringValueDescription_CardiacSliceProgressionDirection(char * value)
{
	return StringValueDescription(StringValueTable_CardiacSliceProgressionDirection,value);
}

static struct StringValueEntry
StringValueTable_PETUnits[] = {
	"CNTS",	"counts",
	"NONE",	"unitless",
	"CM2",	"centimeter**2",
	"PCNT",	"percent",
	"CPS",	"counts/second",
	"BQML",	"Becquerels/milliliter",
	"MGMINML",	"milligram/minute/milliliter",
	"UMOLMINML",	"micromole/minute/milliliter",
	"MLMING",	"milliliter/minute/gram",
	"MLG",	"milliliter/gram",
	"1CM",	"1/centimeter",
	"UMOLML",	"micromole/milliliter",
	"PROPCNTS",	"proportional to counts",
	"PROPCPS",	"proportional to counts/sec",
	"MLMINML",	"milliliter/minute/milliliter",
	"MLML",	"milliliter/milliliter",
	"GML",	"grams/milliliter",
	"STDDEV",	"standard deviations",
	0,0
};

char *
StringValueDescription_PETUnits(char * value)
{
	return StringValueDescription(StringValueTable_PETUnits,value);
}

static struct StringValueEntry
StringValueTable_SUVType[] = {
	"BSA",	"",
	"BW",	"",
	"LBM",	"",
	"LBMJAMES128",	"",
	"LBMJANMA",	"",
	"IBW",	"",
	0,0
};

char *
StringValueDescription_SUVType(char * value)
{
	return StringValueDescription(StringValueTable_SUVType,value);
}

static struct StringValueEntry
StringValueTable_CountsSource[] = {
	"EMISSION",	"",
	"TRANSMISSION",	"",
	0,0
};

char *
StringValueDescription_CountsSource(char * value)
{
	return StringValueDescription(StringValueTable_CountsSource,value);
}

static struct StringValueEntry
StringValueTable_PETSeriesType1[] = {
	"STATIC",	"",
	"DYNAMIC",	"",
	"GATED",	"",
	"WHOLE BODY",	"",
	0,0
};

char *
StringValueDescription_PETSeriesType1(char * value)
{
	return StringValueDescription(StringValueTable_PETSeriesType1,value);
}

static struct StringValueEntry
StringValueTable_PETSeriesType2[] = {
	"IMAGE",	"",
	"REPROJECTION",	"",
	0,0
};

char *
StringValueDescription_PETSeriesType2(char * value)
{
	return StringValueDescription(StringValueTable_PETSeriesType2,value);
}

static struct StringValueEntry
StringValueTable_ReprojectionMethod[] = {
	"SUM",	"",
	"MAX PIXEL",	"",
	0,0
};

char *
StringValueDescription_ReprojectionMethod(char * value)
{
	return StringValueDescription(StringValueTable_ReprojectionMethod,value);
}

static struct StringValueEntry
StringValueTable_CorrectedImage[] = {
	"DECY",	"decay corrected",
	"ATTN",	"attenuation corrected",
	"SCAT",	"scatter corrected",
	"DTIM",	"dead time corrected",
	"MOTN",	"gantry motion corrected (e.g. wobble or clamshell)",
	"PMOT",	"patient motion corrected",
	"CLN",	"count loss normalization (correction for count loss in gated Time Slots)",
	"RAN",	"randoms corrected",
	"RADL",	"non-uniform radial sampling corrected",
	"DCAL",	"sensitivity calibrated using dose calibrator",
	"NORM",	"detector normalization",
	0,0
};

char *
StringValueDescription_CorrectedImage(char * value)
{
	return StringValueDescription(StringValueTable_CorrectedImage,value);
}

static struct StringValueEntry
StringValueTable_RandomsCorrectionMethod[] = {
	"NONE",	"no randoms correction",
	"DLYD",	"delayed event subtraction",
	"SING",	"singles estimation",
	0,0
};

char *
StringValueDescription_RandomsCorrectionMethod(char * value)
{
	return StringValueDescription(StringValueTable_RandomsCorrectionMethod,value);
}

static struct StringValueEntry
StringValueTable_RandomsCorrectionMethodEnhanced[] = {
	"DLYD",	"delayed event subtraction",
	"SING",	"singles estimation",
	"PDDL",	"processed delays",
	0,0
};

char *
StringValueDescription_RandomsCorrectionMethodEnhanced(char * value)
{
	return StringValueDescription(StringValueTable_RandomsCorrectionMethodEnhanced,value);
}

static struct StringValueEntry
StringValueTable_DecayCorrection[] = {
	"NONE",	"no decay correction",
	"START",	"acquisition start time",
	"ADMIN",	"radiopharmaceutical administration time",
	0,0
};

char *
StringValueDescription_DecayCorrection(char * value)
{
	return StringValueDescription(StringValueTable_DecayCorrection,value);
}

static struct StringValueEntry
StringValueTable_AcquisitionStartCondition[] = {
	"DENS",	"density (counts/sec)",
	"RDD",	"relative density difference (change in counts/sec)",
	"MANU",	"manual",
	"TIME",	"time",
	"AUTO",	"automatic, when ready",
	"TRIG",	"physiological trigger",
	0,0
};

char *
StringValueDescription_AcquisitionStartCondition(char * value)
{
	return StringValueDescription(StringValueTable_AcquisitionStartCondition,value);
}

static struct StringValueEntry
StringValueTable_PETAcquisitionTerminationCondition[] = {
	"CNTS",	"counts",
	"DENS",	"density (counts/sec)",
	"RDD",	"relative density difference (change in counts/sec)",
	"MANU",	"manual",
	"OVFL",	"data overflow",
	"TIME",	"time",
	"TRIG",	"physiological trigger",
	0,0
};

char *
StringValueDescription_PETAcquisitionTerminationCondition(char * value)
{
	return StringValueDescription(StringValueTable_PETAcquisitionTerminationCondition,value);
}

static struct StringValueEntry
StringValueTable_PETFieldOfViewShape[] = {
	"CYLINDRICAL RING",	"",
	"HEXAGONAL",	"",
	"MULTIPLE PLANAR",	"",
	0,0
};

char *
StringValueDescription_PETFieldOfViewShape(char * value)
{
	return StringValueDescription(StringValueTable_PETFieldOfViewShape,value);
}

static struct StringValueEntry
StringValueTable_TypeOfDetectorMotion[] = {
	"NONE",	"stationary gantry",
	"STEP AND SHOOT",	"Interrupted motion, acquire only while stationary",
	"CONTINUOUS",	"Gantry motion and acquisition are simultaneous and continuous",
	"WOBBLE",	"wobble motion",
	"CLAMSHELL",	"clamshell motion",
	0,0
};

char *
StringValueDescription_TypeOfDetectorMotion(char * value)
{
	return StringValueDescription(StringValueTable_TypeOfDetectorMotion,value);
}

static struct StringValueEntry
StringValueTable_PETCollimatorType[] = {
	"NONE",	"no collimator",
	"RING",	"transverse septa",
	0,0
};

char *
StringValueDescription_PETCollimatorType(char * value)
{
	return StringValueDescription(StringValueTable_PETCollimatorType,value);
}

static struct StringValueEntry
StringValueTable_SecondaryCountsType[] = {
	"DLYD",	"delayed events",
	"SCAT",	"scattered events in secondary window",
	"SING",	"singles",
	"DTIM",	"events lost due to deadtime",
	0,0
};

char *
StringValueDescription_SecondaryCountsType(char * value)
{
	return StringValueDescription(StringValueTable_SecondaryCountsType,value);
}

static struct StringValueEntry
StringValueTable_FramingType[] = {
	"FORW",	"forward",
	"BACK",	"backward",
	"PCNT",	"forward/backward by percentage",
	0,0
};

char *
StringValueDescription_FramingType(char * value)
{
	return StringValueDescription(StringValueTable_FramingType,value);
}

static struct StringValueEntry
StringValueTable_PETImageTypeValue2[] = {
	"PRIMARY",	"",
	0,0
};

char *
StringValueDescription_PETImageTypeValue2(char * value)
{
	return StringValueDescription(StringValueTable_PETImageTypeValue2,value);
}

static struct StringValueEntry
StringValueTable_PETTypeOfData[] = {
	"SYSRATE",	"system count rate",
	"SLICERATE",	"slice count rate",
	"BLDSMPL",	"blood samples",
	"CPM",	"cardiac polar map",
	0,0
};

char *
StringValueDescription_PETTypeOfData(char * value)
{
	return StringValueDescription(StringValueTable_PETTypeOfData,value);
}

static struct StringValueEntry
StringValueTable_PETAxisUnits[] = {
	"SEC",	"seconds",
	"CNTS",	"counts",
	"MM",	"millimeters",
	"NONE",	"unitless",
	"CM",	"centimeters",
	"CM2",	"cm**2",
	"DEG",	"degrees",
	"MILS",	"milliseconds",
	"PCNT",	"percent",
	"CPS",	"counts/second",
	"BQML",	"Becquerels/milliliter",
	"MGMINML",	"milligram/minute/milliliter",
	"UMOLMINML",	"micromole/minute/milliliter",
	"MLMING",	"milliliter/minute/gram",
	"MLG",	"milliliter/gram",
	"1CM",	"1/centimeter",
	"UMOLML",	"micromole/milliliter",
	"PROPCNTS",	"proportional to counts",
	"PROPCPS",	"proportional to counts/sec",
	"MLMINML",	"milliliter/minute/milliliter",
	"MLML",	"milliliter/milliliter",
	"GML",	"grams/milliliter",
	"STDDEV",	"standard deviations",
	0,0
};

char *
StringValueDescription_PETAxisUnits(char * value)
{
	return StringValueDescription(StringValueTable_PETAxisUnits,value);
}

static struct StringValueEntry
StringValueTable_CountsIncluded[] = {
	"TRUES",	"",
	"SCATTER",	"",
	"RANDOMS",	"",
	"SINGLES",	"",
	0,0
};

char *
StringValueDescription_CountsIncluded(char * value)
{
	return StringValueDescription(StringValueTable_CountsIncluded,value);
}

static struct StringValueEntry
StringValueTable_SliceProgressionDirection[] = {
	"APEX_TO_BASE",	"",
	"BASE_TO_APEX",	"",
	0,0
};

char *
StringValueDescription_SliceProgressionDirection(char * value)
{
	return StringValueDescription(StringValueTable_SliceProgressionDirection,value);
}

static struct StringValueEntry
StringValueTable_PETModality[] = {
	"PT",	"",
	0,0
};

char *
StringValueDescription_PETModality(char * value)
{
	return StringValueDescription(StringValueTable_PETModality,value);
}

static struct StringValueEntry
StringValueTable_EnhancedPETTypeOfDetectorMotion[] = {
	"STATIONARY",	"",
	"STEP AND SHOOT",	"",
	"CONTINUOUS",	"",
	"WOBBLE",	"",
	"CLAMSHELL",	"",
	0,0
};

char *
StringValueDescription_EnhancedPETTypeOfDetectorMotion(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedPETTypeOfDetectorMotion,value);
}

static struct StringValueEntry
StringValueTable_DetectorGeometry[] = {
	"CYLINDRICAL_RING",	"",
	"CYL_RING_PARTIAL",	"",
	"MULTIPLE_PLANAR",	"",
	"MUL_PLAN_PARTIAL",	"",
	0,0
};

char *
StringValueDescription_DetectorGeometry(char * value)
{
	return StringValueDescription(StringValueTable_DetectorGeometry,value);
}

static struct StringValueEntry
StringValueTable_PETSliceProgressionDirection[] = {
	"APEX_TO_BASE",	"",
	"BASE_TO_APEX",	"",
	"ANT_TO_INF",	"",
	"INF_TO_ANT",	"",
	"SEPTUM_TO_WALL",	"",
	"WALL_TO_SEPTUM",	"",
	0,0
};

char *
StringValueDescription_PETSliceProgressionDirection(char * value)
{
	return StringValueDescription(StringValueTable_PETSliceProgressionDirection,value);
}

static struct StringValueEntry
StringValueTable_EnhancedPETAcquisitionStartCondition[] = {
	"DENS",	"",
	"RDD",	"",
	"MANU",	"",
	"AUTO",	"",
	"CARD_TRIG",	"",
	"RESP_TRIG",	"",
	0,0
};

char *
StringValueDescription_EnhancedPETAcquisitionStartCondition(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedPETAcquisitionStartCondition,value);
}

static struct StringValueEntry
StringValueTable_EnhancedPETAcquisitionTerminationCondition[] = {
	"CNTS",	"",
	"DENS",	"",
	"RDD",	"",
	"MANU",	"",
	"OVFL",	"",
	"TIME",	"",
	"CARD_TRIG",	"",
	"RESP_TRIG",	"",
	0,0
};

char *
StringValueDescription_EnhancedPETAcquisitionTerminationCondition(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedPETAcquisitionTerminationCondition,value);
}

static struct StringValueEntry
StringValueTable_AttenuationCorrectionSource[] = {
	"CT",	"",
	"MR",	"",
	"POSITRON SOURCE",	"",
	"SINGLE PHOTON",	"",
	"CALCULATED",	"",
	0,0
};

char *
StringValueDescription_AttenuationCorrectionSource(char * value)
{
	return StringValueDescription(StringValueTable_AttenuationCorrectionSource,value);
}

static struct StringValueEntry
StringValueTable_AttenuationCorrectionTemporalRelationship[] = {
	"CONCURRENT",	"",
	"SEPARATE",	"",
	"SIMULTANEOUS",	"",
	0,0
};

char *
StringValueDescription_AttenuationCorrectionTemporalRelationship(char * value)
{
	return StringValueDescription(StringValueTable_AttenuationCorrectionTemporalRelationship,value);
}

static struct StringValueEntry
StringValueTable_PETReconstructionType[] = {
	"2D",	"",
	"3D",	"",
	"3D_REBINNED",	"",
	0,0
};

char *
StringValueDescription_PETReconstructionType(char * value)
{
	return StringValueDescription(StringValueTable_PETReconstructionType,value);
}

static struct StringValueEntry
StringValueTable_PETReconstructionAlgorithm[] = {
	"FILTER_BACK_PROJ",	"",
	"REPROJECTION",	"",
	"RAMLA",	"",
	"MLEM",	"",
	0,0
};

char *
StringValueDescription_PETReconstructionAlgorithm(char * value)
{
	return StringValueDescription(StringValueTable_PETReconstructionAlgorithm,value);
}

static struct StringValueEntry
StringValueTable_RTModality[] = {
	"RTIMAGE",	"RT Image",
	"RTDOSE",	"RT Dose",
	"RTSTRUCT",	"RT Structure Set",
	"RTPLAN",	"RT Plan",
	"RTRECORD",	"RT Treatment Record",
	0,0
};

char *
StringValueDescription_RTModality(char * value)
{
	return StringValueDescription(StringValueTable_RTModality,value);
}

static struct StringValueEntry
StringValueTable_RTImageTypeValue3[] = {
	"DRR",	"digitally reconstructed radiograph",
	"PORTAL",	"digital portal image or portal film image",
	"SIMULATOR",	"conventional simulator image",
	"RADIOGRAPH",	"radiographic image",
	"BLANK",	"image pixels set to background value",
	"FLUENCE",	"fluence map",
	0,0
};

char *
StringValueDescription_RTImageTypeValue3(char * value)
{
	return StringValueDescription(StringValueTable_RTImageTypeValue3,value);
}

static struct StringValueEntry
StringValueTable_ReportedValuesOrigin[] = {
	"OPERATOR",	"manually entered by operator",
	"PLAN",	"planned parameter values",
	"ACTUAL",	"electronically recorded",
	0,0
};

char *
StringValueDescription_ReportedValuesOrigin(char * value)
{
	return StringValueDescription(StringValueTable_ReportedValuesOrigin,value);
}

static struct StringValueEntry
StringValueTable_RTImagePlane[] = {
	"NORMAL",	"image plane normal to beam axis",
	"NON_NORMAL",	"image plane non-normal to beam axis",
	0,0
};

char *
StringValueDescription_RTImagePlane(char * value)
{
	return StringValueDescription(StringValueTable_RTImagePlane,value);
}

static struct StringValueEntry
StringValueTable_PrimaryDosimeterUnit[] = {
	"MU",	"Monitor Unit",
	"MINUTE",	"minute",
	0,0
};

char *
StringValueDescription_PrimaryDosimeterUnit(char * value)
{
	return StringValueDescription(StringValueTable_PrimaryDosimeterUnit,value);
}

static struct StringValueEntry
StringValueTable_IonPrimaryDosimeterUnit[] = {
	"MU",	"Monitor Unit",
	"NP",	"number of particles",
	0,0
};

char *
StringValueDescription_IonPrimaryDosimeterUnit(char * value)
{
	return StringValueDescription(StringValueTable_IonPrimaryDosimeterUnit,value);
}

static struct StringValueEntry
StringValueTable_RTBeamLimitingDeviceType[] = {
	"X",	"symmetric jaw pair in IEC X direction",
	"Y",	"symmetric jaw pair in IEC Y direction",
	"ASYMX",	"asymmetric jaw pair in IEC X direction",
	"ASYMY",	"asymmetric pair in IEC Y direction",
	"MLCX",	"multileaf (multi-element) jaw pair in IEC X direction",
	"MLCY",	"multileaf (multi-element) jaw pair in IEC Y direction",
	0,0
};

char *
StringValueDescription_RTBeamLimitingDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_RTBeamLimitingDeviceType,value);
}

static struct StringValueEntry
StringValueTable_ApplicatorType[] = {
	"ELECTRON_SQUARE",	"square electron applicator",
	"ELECTRON_RECT",	"rectangular electron applicator",
	"ELECTRON_CIRC",	"circular electron applicator",
	"ELECTRON_SHORT",	"short electron applicator",
	"ELECTRON_OPEN",	"open (dummy) electron applicator",
	"INTRAOPERATIVE",	"intraoperative (custom) applicator",
	"STEREOTACTIC",	"stereotactic applicator",
	0,0
};

char *
StringValueDescription_ApplicatorType(char * value)
{
	return StringValueDescription(StringValueTable_ApplicatorType,value);
}

static struct StringValueEntry
StringValueTable_IonApplicatorType[] = {
	"ION_SQUARE",	"square ion applicator",
	"ION_RECT",	"rectangular ion applicator",
	"ION_CIRC",	"circular ion applicator",
	"ION_SHORT",	"short ion applicator",
	"ION_OPEN",	"open (dummy) ion applicator",
	"INTRAOPERATIVE",	"intraoperative (custom) applicator",
	"STEREOTACTIC",	"stereotactic applicator",
	0,0
};

char *
StringValueDescription_IonApplicatorType(char * value)
{
	return StringValueDescription(StringValueTable_IonApplicatorType,value);
}

static struct StringValueEntry
StringValueTable_BlockType[] = {
	"SHIELDING",	"blocking material is inside contour",
	"APERTURE",	"blocking material is outside contour",
	0,0
};

char *
StringValueDescription_BlockType(char * value)
{
	return StringValueDescription(StringValueTable_BlockType,value);
}

static struct StringValueEntry
StringValueTable_BlockDivergence[] = {
	"PRESENT",	"block edges are shaped for beam divergence",
	"ABSENT",	"block edges are not shaped for beam divergence",
	0,0
};

char *
StringValueDescription_BlockDivergence(char * value)
{
	return StringValueDescription(StringValueTable_BlockDivergence,value);
}

static struct StringValueEntry
StringValueTable_BlockMountingPosition[] = {
	"PATIENT_SIDE",	"the block is mounted on the side of the Block Tray which is towards the patient",
	"SOURCE_SIDE",	"the block is mounted on the side of the Block Tray which is towards the radiation source",
	0,0
};

char *
StringValueDescription_BlockMountingPosition(char * value)
{
	return StringValueDescription(StringValueTable_BlockMountingPosition,value);
}

static struct StringValueEntry
StringValueTable_DoseUnits[] = {
	"GY",	"Gray",
	"RELATIVE",	"dose relative to implicit reference value",
	0,0
};

char *
StringValueDescription_DoseUnits(char * value)
{
	return StringValueDescription(StringValueTable_DoseUnits,value);
}

static struct StringValueEntry
StringValueTable_TissueHeterogeneityCorrection[] = {
	"IMAGE",	"",
	"ROI_OVERRIDE",	"",
	"WATER",	"",
	0,0
};

char *
StringValueDescription_TissueHeterogeneityCorrection(char * value)
{
	return StringValueDescription(StringValueTable_TissueHeterogeneityCorrection,value);
}

static struct StringValueEntry
StringValueTable_DoseType[] = {
	"PHYSICAL",	"physical dose",
	"EFFECTIVE",	"physical dose after correction for biological effect using user-defined modeling technique",
	"ERROR",	"difference between desired and planned dose",
	0,0
};

char *
StringValueDescription_DoseType(char * value)
{
	return StringValueDescription(StringValueTable_DoseType,value);
}

static struct StringValueEntry
StringValueTable_DoseSummationType[] = {
	"PLAN",	"dose calculated for entire delivery of all fraction groups of RT Plan",
	"MULTI_PLAN",	"dose calculated for entire delivery of 2 or more RT Plans",
	"FRACTION",	"dose calculated for entire delivery of a single Fraction Group within RT Plan",
	"BEAM",	"dose calculated for entire delivery of one or more Beams within RT Plan",
	"BRACHY",	"dose calculated for entire delivery of one or more Brachy Application Setups within RT Plan",
	"FRACTION_SESSION",	"dose calculated for a single session (“fraction”) of a single Fraction Group within RT Plan",
	"BEAM_SESSION",	"dose calculated for a single session (“fraction”) of one or more Beams within RT Plan",
	"BRACHY_SESSION",	"dose calculated for a single session (“fraction”) of one or more Brachy Application Setups within RT Plan",
	"CONTROL_POINT",	"dose calculated for one or more Control Points within a Beam for a single fraction",
	0,0
};

char *
StringValueDescription_DoseSummationType(char * value)
{
	return StringValueDescription(StringValueTable_DoseSummationType,value);
}

static struct StringValueEntry
StringValueTable_DVHROIContributionType[] = {
	"INCLUDED",	"",
	"EXCLUDED",	"",
	0,0
};

char *
StringValueDescription_DVHROIContributionType(char * value)
{
	return StringValueDescription(StringValueTable_DVHROIContributionType,value);
}

static struct StringValueEntry
StringValueTable_DVHType[] = {
	"DIFFERENTIAL",	"differential dose-volume histogram",
	"CUMULATIVE",	"cumulative dose-volume histogram",
	"NATURAL",	"natural dose-volume histogram",
	0,0
};

char *
StringValueDescription_DVHType(char * value)
{
	return StringValueDescription(StringValueTable_DVHType,value);
}

static struct StringValueEntry
StringValueTable_DVHDoseUnits[] = {
	"GY",	"Gray",
	"RELATIVE",	"dose relative to reference value specified in DVH Normalization Dose Value",
	0,0
};

char *
StringValueDescription_DVHDoseUnits(char * value)
{
	return StringValueDescription(StringValueTable_DVHDoseUnits,value);
}

static struct StringValueEntry
StringValueTable_DVHDoseType[] = {
	"PHYSICAL",	"physical dose",
	"EFFECTIVE",	"physical dose after correction for biological effect using user-defined modeling technique",
	"ERROR",	"difference between desired and planned dose",
	0,0
};

char *
StringValueDescription_DVHDoseType(char * value)
{
	return StringValueDescription(StringValueTable_DVHDoseType,value);
}

static struct StringValueEntry
StringValueTable_DVHVolumeUnits[] = {
	"CM3",	"cubic centimeters",
	"PERCENT",	"percent",
	"PER_U",	"volume per u",
	0,0
};

char *
StringValueDescription_DVHVolumeUnits(char * value)
{
	return StringValueDescription(StringValueTable_DVHVolumeUnits,value);
}

static struct StringValueEntry
StringValueTable_TransformationType[] = {
	"HOMOGENEOUS",	"",
	0,0
};

char *
StringValueDescription_TransformationType(char * value)
{
	return StringValueDescription(StringValueTable_TransformationType,value);
}

static struct StringValueEntry
StringValueTable_ROIGenerationAlgorithm[] = {
	"AUTOMATIC",	"calculated ROI",
	"SEMIAUTOMATIC",	"ROI calculated with user assistance",
	"MANUAL",	"user-entered ROI",
	0,0
};

char *
StringValueDescription_ROIGenerationAlgorithm(char * value)
{
	return StringValueDescription(StringValueTable_ROIGenerationAlgorithm,value);
}

static struct StringValueEntry
StringValueTable_ContourGeometricType[] = {
	"POINT",	"single point",
	"OPEN_PLANAR",	"open contour containing coplanar points",
	"OPEN_NONPLANAR",	"open contour containing non-coplanar points",
	"CLOSED_PLANAR",	"closed contour (polygon) containing coplanar points",
	0,0
};

char *
StringValueDescription_ContourGeometricType(char * value)
{
	return StringValueDescription(StringValueTable_ContourGeometricType,value);
}

static struct StringValueEntry
StringValueTable_RTROIRelationship[] = {
	"SAME",	"ROIs represent the same entity",
	"ENCLOSED",	"referenced ROI completely encloses referencing ROI",
	"ENCLOSING",	"referencing ROI completely encloses referenced ROI",
	0,0
};

char *
StringValueDescription_RTROIRelationship(char * value)
{
	return StringValueDescription(StringValueTable_RTROIRelationship,value);
}

static struct StringValueEntry
StringValueTable_RTROIInterpretedType[] = {
	"EXTERNAL",	"external patient contour",
	"PTV",	"Planning Target Volume (as defined in ICRU50)",
	"CTV",	"Clinical Target Volume (as defined in ICRU50)",
	"GTV",	"Gross Tumor Volume (as defined in ICRU50)",
	"TREATED_VOLUME",	"Treated Volume (as defined in ICRU50)",
	"IRRAD_VOLUME",	"Irradiated Volume (as defined in ICRU50)",
	"BOLUS",	"patient bolus to be used for external beam therapy",
	"AVOIDANCE",	"region in which dose is to be minimized",
	"ORGAN",	"patient organ",
	"MARKER",	"patient marker",
	"REGISTRATION",	"registration ROI",
	"ISOCENTER",	"treatment isocenter to be used for external beam therapy",
	"CONTRAST_AGENT",	"volume into which a contrast agent has been injected",
	"CAVITY",	"patient anatomical cavity",
	"BRACHY_CHANNEL",	"brachytherapy channel",
	"BRACHY_ACCESSORY",	"brachytherapy accessory device",
	"BRACHY_SRC_APP",	"brachytherapy source applicator",
	"BRACHY_CHNL_SHLD",	"brachytherapy channel shield",
	"SUPPORT",	"external patient support device",
	"FIXATION",	"external patient fixation or immobilisation device",
	"DOSE_REGION",	"ROI to be used as a dose reference",
	"CONTROL",	"ROI to be used in control of dose optimization and calculation",
	0,0
};

char *
StringValueDescription_RTROIInterpretedType(char * value)
{
	return StringValueDescription(StringValueTable_RTROIInterpretedType,value);
}

static struct StringValueEntry
StringValueTable_ROIPhysicalProperty[] = {
	"REL_MASS_DENSITY",	"mass density relative to water",
	"REL_ELEC_DENSITY",	"electron density relative to water",
	"EFFECTIVE_Z",	"effective atomic number",
	"EFF_Z_PER_A",	"ratio of effective atomic number to mass (AMU-1)",
	"REL_STOP_RATIO",	"linear stopping power ratio relative to water",
	"ELEM_FRACTION",	"elemental composition of the material",
	0,0
};

char *
StringValueDescription_ROIPhysicalProperty(char * value)
{
	return StringValueDescription(StringValueTable_ROIPhysicalProperty,value);
}

static struct StringValueEntry
StringValueTable_PlanIntent[] = {
	"CURATIVE",	"",
	"PALLIATIVE",	"",
	"PROPHYLACTIC",	"",
	"VERIFICATION",	"",
	"MACHINE_QA",	"",
	"RESEARCH",	"",
	"SERVICE",	"",
	0,0
};

char *
StringValueDescription_PlanIntent(char * value)
{
	return StringValueDescription(StringValueTable_PlanIntent,value);
}

static struct StringValueEntry
StringValueTable_RTPlanGeometry[] = {
	"PATIENT",	"RT Structure Set exists",
	"TREATMENT_DEVICE",	"RT Structure Set does not exist",
	0,0
};

char *
StringValueDescription_RTPlanGeometry(char * value)
{
	return StringValueDescription(StringValueTable_RTPlanGeometry,value);
}

static struct StringValueEntry
StringValueTable_RTPlanRelationship[] = {
	"PRIOR",	"plan delivered prior to current treatment",
	"ALTERNATIVE",	"alternative plan prepared for current treatment",
	"PREDECESSOR",	"plan used in derivation of current plan",
	"VERIFIED_PLAN",	"plan which is verified using the current plan",
	0,0
};

char *
StringValueDescription_RTPlanRelationship(char * value)
{
	return StringValueDescription(StringValueTable_RTPlanRelationship,value);
}

static struct StringValueEntry
StringValueTable_RTPlanRelationshipVerifiedPlan[] = {
	"VERIFIED_PLAN",	"plan which is verified using the current plan",
	0,0
};

char *
StringValueDescription_RTPlanRelationshipVerifiedPlan(char * value)
{
	return StringValueDescription(StringValueTable_RTPlanRelationshipVerifiedPlan,value);
}

static struct StringValueEntry
StringValueTable_DoseReferenceStructureType[] = {
	"POINT",	"dose reference point specified as ROI",
	"VOLUME",	"dose reference volume specified as ROI",
	"COORDINATES",	"point specified by Dose Reference Point Coordinates (300A,0018)",
	"SITE",	"dose reference clinical site",
	0,0
};

char *
StringValueDescription_DoseReferenceStructureType(char * value)
{
	return StringValueDescription(StringValueTable_DoseReferenceStructureType,value);
}

static struct StringValueEntry
StringValueTable_DoseReferenceType[] = {
	"TARGET",	"treatment target (corresponding to GTV, PTV, or CTV in ICRU50)",
	"ORGAN_AT_RISK",	"Organ at Risk (as defined in ICRU50)",
	0,0
};

char *
StringValueDescription_DoseReferenceType(char * value)
{
	return StringValueDescription(StringValueTable_DoseReferenceType,value);
}

static struct StringValueEntry
StringValueTable_SetupTechnique[] = {
	"ISOCENTRIC",	"",
	"FIXED_SSD",	"",
	"TBI",	"",
	"BREAST_BRIDGE",	"",
	"SKIN_APPOSITION",	"",
	0,0
};

char *
StringValueDescription_SetupTechnique(char * value)
{
	return StringValueDescription(StringValueTable_SetupTechnique,value);
}

static struct StringValueEntry
StringValueTable_SetupDeviceType[] = {
	"LASER_POINTER",	"",
	"DISTANCE_METER",	"",
	"TABLE_HEIGHT",	"",
	"MECHANICAL_PTR",	"",
	"ARC",	"",
	0,0
};

char *
StringValueDescription_SetupDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_SetupDeviceType,value);
}

static struct StringValueEntry
StringValueTable_BeamType[] = {
	"STATIC",	"all beam parameters remain unchanged during delivery",
	"DYNAMIC",	"one or more beam parameters changes during delivery",
	0,0
};

char *
StringValueDescription_BeamType(char * value)
{
	return StringValueDescription(StringValueTable_BeamType,value);
}

static struct StringValueEntry
StringValueTable_RadiationType[] = {
	"PHOTON",	"",
	"ELECTRON",	"",
	"NEUTRON",	"",
	"PROTON",	"",
	0,0
};

char *
StringValueDescription_RadiationType(char * value)
{
	return StringValueDescription(StringValueTable_RadiationType,value);
}

static struct StringValueEntry
StringValueTable_FluenceMode[] = {
	"STANDARD",	"",
	"NON_STANDARD",	"",
	0,0
};

char *
StringValueDescription_FluenceMode(char * value)
{
	return StringValueDescription(StringValueTable_FluenceMode,value);
}

static struct StringValueEntry
StringValueTable_IonRadiationType[] = {
	"PHOTON",	"",
	"PROTON",	"",
	"ION",	"",
	0,0
};

char *
StringValueDescription_IonRadiationType(char * value)
{
	return StringValueDescription(StringValueTable_IonRadiationType,value);
}

static struct StringValueEntry
StringValueTable_IonScanMode[] = {
	"NONE",	"",
	"UNIFORM",	"",
	"MODULATED",	"",
	"MODULATED_SPEC",	"",
	0,0
};

char *
StringValueDescription_IonScanMode(char * value)
{
	return StringValueDescription(StringValueTable_IonScanMode,value);
}

static struct StringValueEntry
StringValueTable_ModulatedScanModeType[] = {
	"STATIONARY",	"",
	"LEAPING",	"",
	"LINEAR",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_ModulatedScanModeType(char * value)
{
	return StringValueDescription(StringValueTable_ModulatedScanModeType,value);
}

static struct StringValueEntry
StringValueTable_TreatmentDeliveryType[] = {
	"TREATMENT",	"normal patient treatment",
	"OPEN_PORTFILM",	"portal image acquisition with open field",
	"TRMT_PORTFILM",	"portal image acquisition with treatment port",
	"CONTINUATION",	"continuation of interrupted treatment",
	"SETUP",	"no treatment beam is applied for this RT Beam",
	0,0
};

char *
StringValueDescription_TreatmentDeliveryType(char * value)
{
	return StringValueDescription(StringValueTable_TreatmentDeliveryType,value);
}

static struct StringValueEntry
StringValueTable_WedgeType[] = {
	"STANDARD",	"standard (static) wedge",
	"DYNAMIC",	"moving beam limiting device (collimator) jaw simulating wedge",
	"MOTORIZED",	"single wedge which can be removed from beam remotely",
	0,0
};

char *
StringValueDescription_WedgeType(char * value)
{
	return StringValueDescription(StringValueTable_WedgeType,value);
}

static struct StringValueEntry
StringValueTable_IonWedgeType[] = {
	"STANDARD",	"standard (static) wedge",
	"MOTORIZED",	"single wedge which can be removed from beam remotely",
	"PARTIAL_STANDARD",	"wedge does not extend across the whole field and is operated manually",
	"PARTIAL_MOTORIZED",	"wedge does not extend across the whole field and can be removed from beam remotely",
	0,0
};

char *
StringValueDescription_IonWedgeType(char * value)
{
	return StringValueDescription(StringValueTable_IonWedgeType,value);
}

static struct StringValueEntry
StringValueTable_CompensatorDivergence[] = {
	"PRESENT",	"the compensator is shaped according to the beam geometrical divergence",
	"ABSENT",	"the compensator is not shaped according to the beam geometrical divergence",
	0,0
};

char *
StringValueDescription_CompensatorDivergence(char * value)
{
	return StringValueDescription(StringValueTable_CompensatorDivergence,value);
}

static struct StringValueEntry
StringValueTable_CompensatorMountingPosition[] = {
	"PATIENT_SIDE",	"the compensator is mounted on the side of the Compensator Tray which is towards the patient",
	"SOURCE_SIDE",	"the compensator is mounted on the side of the Compensator Tray which is towards the radiation source",
	"DOUBLE_SIDED",	"the compensator has a shaped surface on both sides of the Compensator Tray",
	0,0
};

char *
StringValueDescription_CompensatorMountingPosition(char * value)
{
	return StringValueDescription(StringValueTable_CompensatorMountingPosition,value);
}

static struct StringValueEntry
StringValueTable_BrachyTreatmentTechnique[] = {
	"INTRALUMENARY",	"",
	"INTRACAVITARY",	"",
	"INTERSTITIAL",	"",
	"CONTACT",	"",
	"INTRAVASCULAR",	"",
	"PERMANENT",	"",
	0,0
};

char *
StringValueDescription_BrachyTreatmentTechnique(char * value)
{
	return StringValueDescription(StringValueTable_BrachyTreatmentTechnique,value);
}

static struct StringValueEntry
StringValueTable_BrachyTreatmentType[] = {
	"MANUAL",	"manually positioned",
	"HDR",	"High dose rate",
	"MDR",	"Medium dose rate",
	"LDR",	"Low dose rate",
	"PDR",	"Pulsed dose rate",
	0,0
};

char *
StringValueDescription_BrachyTreatmentType(char * value)
{
	return StringValueDescription(StringValueTable_BrachyTreatmentType,value);
}

static struct StringValueEntry
StringValueTable_ApplicationSetupType[] = {
	"FLETCHER_SUIT",	"",
	"DELCLOS",	"",
	"BLOEDORN",	"",
	"JOSLIN_FLYNN",	"",
	"CHANDIGARH",	"",
	"MANCHESTER",	"",
	"HENSCHKE",	"",
	"NASOPHARYNGEAL",	"",
	"OESOPHAGEAL",	"",
	"ENDOBRONCHIAL",	"",
	"SYED_NEBLETT",	"",
	"ENDORECTAL",	"",
	"PERINEAL",	"",
	0,0
};

char *
StringValueDescription_ApplicationSetupType(char * value)
{
	return StringValueDescription(StringValueTable_ApplicationSetupType,value);
}

static struct StringValueEntry
StringValueTable_BrachyAccessoryDeviceType[] = {
	"SHIELD",	"",
	"DILATATION",	"",
	"MOLD",	"",
	"PLAQUE",	"",
	"FLAB",	"",
	0,0
};

char *
StringValueDescription_BrachyAccessoryDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_BrachyAccessoryDeviceType,value);
}

static struct StringValueEntry
StringValueTable_SourceMovementType[] = {
	"STEPWISE",	"",
	"FIXED",	"",
	"OSCILLATING",	"",
	"UNIDIRECTIONAL",	"",
	0,0
};

char *
StringValueDescription_SourceMovementType(char * value)
{
	return StringValueDescription(StringValueTable_SourceMovementType,value);
}

static struct StringValueEntry
StringValueTable_ApprovalStatus[] = {
	"APPROVED",	"Reviewer recorded that object met an implied criterion",
	"UNAPPROVED",	"No review of object has been recorded",
	"REJECTED",	"Reviewer recorded that object failed to meet an implied criterion",
	0,0
};

char *
StringValueDescription_ApprovalStatus(char * value)
{
	return StringValueDescription(StringValueTable_ApprovalStatus,value);
}

static struct StringValueEntry
StringValueTable_FixationDeviceType[] = {
	"BITEBLOCK",	"",
	"HEADFRAME",	"",
	"MASK",	"",
	"MOLD",	"",
	"CAST",	"",
	"HEADREST",	"",
	"BREAST_BOARD",	"",
	"BODY_FRAME",	"",
	"VACUUM_MOLD",	"",
	"WHOLE_BODY_POD",	"",
	"RECTAL_BALLOON",	"",
	0,0
};

char *
StringValueDescription_FixationDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_FixationDeviceType,value);
}

static struct StringValueEntry
StringValueTable_ShieldingDeviceType[] = {
	"GUM",	"",
	"EYE",	"",
	"GONAD",	"",
	0,0
};

char *
StringValueDescription_ShieldingDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_ShieldingDeviceType,value);
}

static struct StringValueEntry
StringValueTable_HighDoseTechniqueType[] = {
	"TBI",	"",
	"HDR",	"",
	0,0
};

char *
StringValueDescription_HighDoseTechniqueType(char * value)
{
	return StringValueDescription(StringValueTable_HighDoseTechniqueType,value);
}

static struct StringValueEntry
StringValueTable_TreatmentTerminationStatus[] = {
	"NORMAL",	"",
	"OPERATOR",	"",
	"MACHINE",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_TreatmentTerminationStatus(char * value)
{
	return StringValueDescription(StringValueTable_TreatmentTerminationStatus,value);
}

static struct StringValueEntry
StringValueTable_FractionGroupType[] = {
	"EXTERNAL_BEAM",	"",
	"BRACHY",	"",
	0,0
};

char *
StringValueDescription_FractionGroupType(char * value)
{
	return StringValueDescription(StringValueTable_FractionGroupType,value);
}

static struct StringValueEntry
StringValueTable_CurrentTreatmentStatus[] = {
	"NOT_STARTED",	"",
	"ON_TREATMENT",	"",
	"ON_BREAK",	"",
	"SUSPENDED",	"",
	"STOPPED",	"",
	"COMPLETED",	"",
	0,0
};

char *
StringValueDescription_CurrentTreatmentStatus(char * value)
{
	return StringValueDescription(StringValueTable_CurrentTreatmentStatus,value);
}

static struct StringValueEntry
StringValueTable_SourceApplicatorType[] = {
	"FLEXIBLE",	"",
	"RIGID",	"",
	0,0
};

char *
StringValueDescription_SourceApplicatorType(char * value)
{
	return StringValueDescription(StringValueTable_SourceApplicatorType,value);
}

static struct StringValueEntry
StringValueTable_TreatmentVerificationStatus[] = {
	"VERIFED",	"",
	"VERIFIED_OVR",	"",
	"NOT_VERIFED",	"",
	0,0
};

char *
StringValueDescription_TreatmentVerificationStatus(char * value)
{
	return StringValueDescription(StringValueTable_TreatmentVerificationStatus,value);
}

static struct StringValueEntry
StringValueTable_TreatmentDeliveryTypeNormalOrContinuation[] = {
	"TREATMENT",	"",
	"CONTINUATION",	"",
	0,0
};

char *
StringValueDescription_TreatmentDeliveryTypeNormalOrContinuation(char * value)
{
	return StringValueDescription(StringValueTable_TreatmentDeliveryTypeNormalOrContinuation,value);
}

static struct StringValueEntry
StringValueTable_ApplicationSetupCheck[] = {
	"PASSED",	"",
	"FAILED",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_ApplicationSetupCheck(char * value)
{
	return StringValueDescription(StringValueTable_ApplicationSetupCheck,value);
}

static struct StringValueEntry
StringValueTable_SourceType[] = {
	"POINT",	"",
	"LINE",	"",
	"CYLINDER",	"",
	"SPHERE",	"",
	0,0
};

char *
StringValueDescription_SourceType(char * value)
{
	return StringValueDescription(StringValueTable_SourceType,value);
}

static struct StringValueEntry
StringValueTable_BeamStopperPosition[] = {
	"EXTENDED",	"",
	"RETRACTED",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_BeamStopperPosition(char * value)
{
	return StringValueDescription(StringValueTable_BeamStopperPosition,value);
}

static struct StringValueEntry
StringValueTable_WedgePosition[] = {
	"IN",	"",
	"OUT",	"",
	0,0
};

char *
StringValueDescription_WedgePosition(char * value)
{
	return StringValueDescription(StringValueTable_WedgePosition,value);
}

static struct StringValueEntry
StringValueTable_NominalBeamEnergyUnit[] = {
	"MV",	"Megavolt",
	"MEV",	"Mega electron-Volt",
	0,0
};

char *
StringValueDescription_NominalBeamEnergyUnit(char * value)
{
	return StringValueDescription(StringValueTable_NominalBeamEnergyUnit,value);
}

static struct StringValueEntry
StringValueTable_CompensatorType[] = {
	"STANDARD",	"",
	"DYNAMIC",	"",
	0,0
};

char *
StringValueDescription_CompensatorType(char * value)
{
	return StringValueDescription(StringValueTable_CompensatorType,value);
}

static struct StringValueEntry
StringValueTable_MeasuredDoseType[] = {
	"DIODE",	"",
	"TLD",	"",
	"ION_CHAMBER",	"",
	"GEL",	"",
	"EPID",	"",
	"FILM",	"",
	0,0
};

char *
StringValueDescription_MeasuredDoseType(char * value)
{
	return StringValueDescription(StringValueTable_MeasuredDoseType,value);
}

static struct StringValueEntry
StringValueTable_FluenceDataSource[] = {
	"CALCULATED",	"",
	"MEASURED",	"",
	0,0
};

char *
StringValueDescription_FluenceDataSource(char * value)
{
	return StringValueDescription(StringValueTable_FluenceDataSource,value);
}

static struct StringValueEntry
StringValueTable_RTRespiratoryMotionCompensationTechnique[] = {
	"NONE",	"",
	"BREATH_HOLD",	"",
	"REALTIME",	"",
	"GATING",	"",
	"TRACKING",	"",
	"PHASE_ORDERING",	"",
	"PHASE_RESCANNING",	"",
	"RETROSPECTIVE",	"",
	"CORRECTION",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_RTRespiratoryMotionCompensationTechnique(char * value)
{
	return StringValueDescription(StringValueTable_RTRespiratoryMotionCompensationTechnique,value);
}

static struct StringValueEntry
StringValueTable_RTRespiratorySignalSource[] = {
	"NONE",	"",
	"BELT",	"",
	"NASAL_PROBE",	"",
	"CO2_SENSOR",	"",
	"NAVIGATOR",	"",
	"MR_PHASE",	"",
	"ECG",	"",
	"SPIROMETER",	"",
	"EXTERNAL_MARKER",	"",
	"INTERNAL_MARKER",	"",
	"IMAGE",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_RTRespiratorySignalSource(char * value)
{
	return StringValueDescription(StringValueTable_RTRespiratorySignalSource,value);
}

static struct StringValueEntry
StringValueTable_SourceStrengthUnits[] = {
	"AIR_KERMA_RATE",	"",
	"DOSE_RATE_WATER",	"",
	0,0
};

char *
StringValueDescription_SourceStrengthUnits(char * value)
{
	return StringValueDescription(StringValueTable_SourceStrengthUnits,value);
}

static struct StringValueEntry
StringValueTable_RTDoseSOPClass[] = {
	"1.2.840.10008.5.1.4.1.1.481.2",	"",
	0,0
};

char *
StringValueDescription_RTDoseSOPClass(char * value)
{
	return StringValueDescription(StringValueTable_RTDoseSOPClass,value);
}

static struct StringValueEntry
StringValueTable_RangeShifterType[] = {
	"ANALOG",	"",
	"BINARY",	"",
	0,0
};

char *
StringValueDescription_RangeShifterType(char * value)
{
	return StringValueDescription(StringValueTable_RangeShifterType,value);
}

static struct StringValueEntry
StringValueTable_LateralSpreadingDeviceType[] = {
	"SCATTERER",	"",
	"MAGNET",	"",
	0,0
};

char *
StringValueDescription_LateralSpreadingDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_LateralSpreadingDeviceType,value);
}

static struct StringValueEntry
StringValueTable_RangeModulatorType[] = {
	"FIXED",	"",
	"WHL_FIXEDWEIGHTS",	"",
	"WHL_MODWEIGHTS",	"",
	0,0
};

char *
StringValueDescription_RangeModulatorType(char * value)
{
	return StringValueDescription(StringValueTable_RangeModulatorType,value);
}

static struct StringValueEntry
StringValueTable_PatientSupportType[] = {
	"TABLE",	"",
	"CHAIR",	"",
	0,0
};

char *
StringValueDescription_PatientSupportType(char * value)
{
	return StringValueDescription(StringValueTable_PatientSupportType,value);
}

static struct StringValueEntry
StringValueTable_RTGeneralAccessoryType[] = {
	"GRATICULE",	"Accessory tray with a radio-opaque grid",
	"IMAGE_DETECTOR",	"Image acquisition device positioned in the beam line",
	"RETICLE",	"Accessory tray with radio-transparent markers or grid",
	0,0
};

char *
StringValueDescription_RTGeneralAccessoryType(char * value)
{
	return StringValueDescription(StringValueTable_RTGeneralAccessoryType,value);
}

static struct StringValueEntry
StringValueTable_RTPatientPosition[] = {
	"HFP",	"Head First Prone",
	"HFS",	"Head First Supine",
	"HFDR",	"Head First Decubitus Right",
	"HFDL",	"Head First Decubitus Right",
	"FFP",	"Feet First Prone",
	"FFS",	"Feet First Supine",
	"FFDR",	"Feet First Decubitus Right",
	"FFDL",	"Feet First Decubitus Right",
	"SITTING",	"Sitting",
	0,0
};

char *
StringValueDescription_RTPatientPosition(char * value)
{
	return StringValueDescription(StringValueTable_RTPatientPosition,value);
}

static struct StringValueEntry
StringValueTable_BeamDoseMeaning[] = {
	"BEAM_LEVEL",	"",
	"FRACTION_LEVEL",	"",
	0,0
};

char *
StringValueDescription_BeamDoseMeaning(char * value)
{
	return StringValueDescription(StringValueTable_BeamDoseMeaning,value);
}

static struct StringValueEntry
StringValueTable_SpatialTransformOfDose[] = {
	"NONE",	"",
	"RIGID",	"",
	"NON_RIGID",	"",
	0,0
};

char *
StringValueDescription_SpatialTransformOfDose(char * value)
{
	return StringValueDescription(StringValueTable_SpatialTransformOfDose,value);
}

static struct StringValueEntry
StringValueTable_BeamDoseType[] = {
	"PHYSICAL",	"",
	"EFFECTIVE",	"",
	0,0
};

char *
StringValueDescription_BeamDoseType(char * value)
{
	return StringValueDescription(StringValueTable_BeamDoseType,value);
}

static struct StringValueEntry
StringValueTable_TomoType[] = {
	"LINEAR",	"",
	"SPIRAL",	"",
	"POLYCYCLOIDAL",	"",
	"CIRCULAR",	"",
	0,0
};

char *
StringValueDescription_TomoType(char * value)
{
	return StringValueDescription(StringValueTable_TomoType,value);
}

static struct StringValueEntry
StringValueTable_TomoClass[] = {
	"MOTION",	"",
	"TOMOSYNTHESIS",	"",
	0,0
};

char *
StringValueDescription_TomoClass(char * value)
{
	return StringValueDescription(StringValueTable_TomoClass,value);
}

static struct StringValueEntry
StringValueTable_OrganExposed[] = {
	"BREAST",	"",
	"GONADS",	"",
	"BONE MARROW",	"",
	"FETUS",	"",
	"LENS",	"",
	0,0
};

char *
StringValueDescription_OrganExposed(char * value)
{
	return StringValueDescription(StringValueTable_OrganExposed,value);
}

static struct StringValueEntry
StringValueTable_MammographyOrganExposed[] = {
	"BREAST",	"",
	0,0
};

char *
StringValueDescription_MammographyOrganExposed(char * value)
{
	return StringValueDescription(StringValueTable_MammographyOrganExposed,value);
}

static struct StringValueEntry
StringValueTable_AnodeTargetMaterial[] = {
	"TUNGSTEN",	"",
	"MOLYBDENUM",	"",
	"RHODIUM",	"",
	0,0
};

char *
StringValueDescription_AnodeTargetMaterial(char * value)
{
	return StringValueDescription(StringValueTable_AnodeTargetMaterial,value);
}

static struct StringValueEntry
StringValueTable_DXFilterMaterial[] = {
	"MOLYBDENUM",	"",
	"ALUMINUM",	"",
	"COPPER",	"",
	"RHODIUM",	"",
	"NIOBIUM",	"",
	"EUROPIUM",	"",
	"LEAD",	"",
	0,0
};

char *
StringValueDescription_DXFilterMaterial(char * value)
{
	return StringValueDescription(StringValueTable_DXFilterMaterial,value);
}

static struct StringValueEntry
StringValueTable_DXFilterType[] = {
	"STRIP",	"",
	"WEDGE",	"",
	"BUTTERFLY",	"",
	"MULTIPLE",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_DXFilterType(char * value)
{
	return StringValueDescription(StringValueTable_DXFilterType,value);
}

static struct StringValueEntry
StringValueTable_RectificationType[] = {
	"SINGLE PHASE",	"",
	"THREE PHASE",	"",
	"CONST POTENTIAL",	"",
	0,0
};

char *
StringValueDescription_RectificationType(char * value)
{
	return StringValueDescription(StringValueTable_RectificationType,value);
}

static struct StringValueEntry
StringValueTable_ExposureControlMode[] = {
	"MANUAL",	"",
	"AUTOMATIC",	"",
	0,0
};

char *
StringValueDescription_ExposureControlMode(char * value)
{
	return StringValueDescription(StringValueTable_ExposureControlMode,value);
}

static struct StringValueEntry
StringValueTable_ExposureStatus[] = {
	"NORMAL",	"",
	"ABORTED",	"",
	0,0
};

char *
StringValueDescription_ExposureStatus(char * value)
{
	return StringValueDescription(StringValueTable_ExposureStatus,value);
}

static struct StringValueEntry
StringValueTable_XRayGrid[] = {
	"FIXED",	"",
	"FOCUSED",	"",
	"RECIPROCATING",	"",
	"PARALLEL",	"",
	"CROSSED",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_XRayGrid(char * value)
{
	return StringValueDescription(StringValueTable_XRayGrid,value);
}

static struct StringValueEntry
StringValueTable_DXModality[] = {
	"DX",	"Digital Radiography",
	"IO",	"Intra-oral Radiography",
	"MG",	"Mammography",
	"PX",	"Panoramic X-Ray",
	0,0
};

char *
StringValueDescription_DXModality(char * value)
{
	return StringValueDescription(StringValueTable_DXModality,value);
}

static struct StringValueEntry
StringValueTable_MammographyModality[] = {
	"MG",	"Mammography",
	0,0
};

char *
StringValueDescription_MammographyModality(char * value)
{
	return StringValueDescription(StringValueTable_MammographyModality,value);
}

static struct StringValueEntry
StringValueTable_IntraoralModality[] = {
	"IO",	"Intra-oral Radiography",
	0,0
};

char *
StringValueDescription_IntraoralModality(char * value)
{
	return StringValueDescription(StringValueTable_IntraoralModality,value);
}

static struct StringValueEntry
StringValueTable_PresentationIntentType[] = {
	"FOR PROCESSING",	"",
	"FOR PRESENTATION",	"",
	0,0
};

char *
StringValueDescription_PresentationIntentType(char * value)
{
	return StringValueDescription(StringValueTable_PresentationIntentType,value);
}

static struct StringValueEntry
StringValueTable_ForProcessing[] = {
	"FOR PROCESSING",	"",
	0,0
};

char *
StringValueDescription_ForProcessing(char * value)
{
	return StringValueDescription(StringValueTable_ForProcessing,value);
}

static struct StringValueEntry
StringValueTable_ForPresentation[] = {
	"FOR PRESENTATION",	"",
	0,0
};

char *
StringValueDescription_ForPresentation(char * value)
{
	return StringValueDescription(StringValueTable_ForPresentation,value);
}

static struct StringValueEntry
StringValueTable_ImageLaterality[] = {
	"R",	"Right",
	"L",	"Left",
	"U",	"Unpaired",
	"B",	"Both left and right",
	0,0
};

char *
StringValueDescription_ImageLaterality(char * value)
{
	return StringValueDescription(StringValueTable_ImageLaterality,value);
}

static struct StringValueEntry
StringValueTable_MammographyImageLaterality[] = {
	"R",	"Right",
	"L",	"Left",
	"B",	"Both left and right",
	0,0
};

char *
StringValueDescription_MammographyImageLaterality(char * value)
{
	return StringValueDescription(StringValueTable_MammographyImageLaterality,value);
}

static struct StringValueEntry
StringValueTable_IntraoralImageLaterality[] = {
	"R",	"Right",
	"L",	"Left",
	"B",	"Both left and right",
	0,0
};

char *
StringValueDescription_IntraoralImageLaterality(char * value)
{
	return StringValueDescription(StringValueTable_IntraoralImageLaterality,value);
}

static struct StringValueEntry
StringValueTable_DXImageType3[] = {
	"",	"",
	0,0
};

char *
StringValueDescription_DXImageType3(char * value)
{
	return StringValueDescription(StringValueTable_DXImageType3,value);
}

static struct StringValueEntry
StringValueTable_MammoImageType3[] = {
	"",	"",
	"STEREO_SCOUT",	"",
	"STEREO_MINUS",	"",
	"STEREO_PLUS",	"",
	"PREFIRE_MINUS",	"",
	"PREFIRE_PLUS",	"",
	"POSTFIRE_MINUS",	"",
	"POSTFIRE_PLUS",	"",
	"POSTBIOPSY_MINUS",	"",
	"POSTBIOPSY_PLUS",	"",
	"POSTBIOPSY",	"",
	"POSTMARKER_MINUS",	"",
	"POSTMARKER_PLUS",	"",
	"POSTMARKER",	"",
	"TOMO_PROJ",	"",
	"TOMOSYNTHESIS",	"",
	"TOMO_SCOUT",	"",
	"PREFIRE",	"",
	"POSTFIRE",	"",
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	0,0
};

char *
StringValueDescription_MammoImageType3(char * value)
{
	return StringValueDescription(StringValueTable_MammoImageType3,value);
}

static struct StringValueEntry
StringValueTable_MammoImageType4[] = {
	"",	"",
	"GENERATED_2D",	"",
	"ADDITION",	"",
	"SUBTRACTION",	"",
	0,0
};

char *
StringValueDescription_MammoImageType4(char * value)
{
	return StringValueDescription(StringValueTable_MammoImageType4,value);
}

static struct StringValueEntry
StringValueTable_BreastTomoImageAndFrameType4[] = {
	"",	"",
	"NONE",	"",
	"GENERATED_2D",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"ADDITION",	"",
	"SUBTRACTION",	"",
	0,0
};

char *
StringValueDescription_BreastTomoImageAndFrameType4(char * value)
{
	return StringValueDescription(StringValueTable_BreastTomoImageAndFrameType4,value);
}

static struct StringValueEntry
StringValueTable_MammoImageType5[] = {
	"",	"",
	"LOW_ENERGY",	"",
	"HIGH_ENERGY",	"",
	0,0
};

char *
StringValueDescription_MammoImageType5(char * value)
{
	return StringValueDescription(StringValueTable_MammoImageType5,value);
}

static struct StringValueEntry
StringValueTable_BreastTomoImageAndFrameType5[] = {
	"",	"",
	"LOW_ENERGY",	"",
	"HIGH_ENERGY",	"",
	0,0
};

char *
StringValueDescription_BreastTomoImageAndFrameType5(char * value)
{
	return StringValueDescription(StringValueTable_BreastTomoImageAndFrameType5,value);
}

static struct StringValueEntry
StringValueTable_CommonEnhancedImageAndFrameType3AndBreastTomoImageAndFrameType3[] = {
	"ANGIO",	"",
	"CARDIAC",	"",
	"CARDIAC_GATED",	"",
	"CARDRESP_GATED",	"",
	"DYNAMIC",	"",
	"FLUOROSCOPY",	"",
	"LOCALIZER",	"",
	"MOTION",	"",
	"PERFUSION",	"",
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	"RESP_GATED",	"",
	"REST",	"",
	"STATIC",	"",
	"STRESS",	"",
	"VOLUME",	"",
	"NON_PARALLEL",	"",
	"PARALLEL",	"",
	"WHOLE_BODY",	"",
	"TOMO_PROJ",	"",
	"TOMOSYNTHESIS",	"",
	"TOMO_SCOUT",	"",
	"PREFIRE",	"",
	"POSTFIRE",	"",
	"POSTBIOPSY",	"",
	"POSTMARKER",	"",
	0,0
};

char *
StringValueDescription_CommonEnhancedImageAndFrameType3AndBreastTomoImageAndFrameType3(char * value)
{
	return StringValueDescription(StringValueTable_CommonEnhancedImageAndFrameType3AndBreastTomoImageAndFrameType3,value);
}

static struct StringValueEntry
StringValueTable_DXPixelIntensityRelationship[] = {
	"LIN",	"Approximately proportional to X-Ray beam intensity",
	"LOG",	"Non-linear Log Function",
	0,0
};

char *
StringValueDescription_DXPixelIntensityRelationship(char * value)
{
	return StringValueDescription(StringValueTable_DXPixelIntensityRelationship,value);
}

static struct StringValueEntry
StringValueTable_DXPresentationLUTShape[] = {
	"IDENTITY",	"",
	"INVERSE",	"",
	0,0
};

char *
StringValueDescription_DXPresentationLUTShape(char * value)
{
	return StringValueDescription(StringValueTable_DXPresentationLUTShape,value);
}

static struct StringValueEntry
StringValueTable_DetectorType[] = {
	"DIRECT",	"",
	"SCINTILLATOR",	"",
	"STORAGE",	"",
	"FILM",	"",
	0,0
};

char *
StringValueDescription_DetectorType(char * value)
{
	return StringValueDescription(StringValueTable_DetectorType,value);
}

static struct StringValueEntry
StringValueTable_DetectorTypeExcludingFilm[] = {
	"DIRECT",	"",
	"SCINTILLATOR",	"",
	"STORAGE",	"",
	0,0
};

char *
StringValueDescription_DetectorTypeExcludingFilm(char * value)
{
	return StringValueDescription(StringValueTable_DetectorTypeExcludingFilm,value);
}

static struct StringValueEntry
StringValueTable_DetectorConfiguration[] = {
	"AREA",	"",
	"SLOT",	"",
	0,0
};

char *
StringValueDescription_DetectorConfiguration(char * value)
{
	return StringValueDescription(StringValueTable_DetectorConfiguration,value);
}

static struct StringValueEntry
StringValueTable_DXShape[] = {
	"RECTANGLE",	"",
	"ROUND",	"",
	"HEXAGONAL",	"",
	0,0
};

char *
StringValueDescription_DXShape(char * value)
{
	return StringValueDescription(StringValueTable_DXShape,value);
}

static struct StringValueEntry
StringValueTable_DXFieldOfViewRotation[] = {
	"0",	"",
	"90",	"",
	"180",	"",
	"270",	"",
	0,0
};

char *
StringValueDescription_DXFieldOfViewRotation(char * value)
{
	return StringValueDescription(StringValueTable_DXFieldOfViewRotation,value);
}

static struct StringValueEntry
StringValueTable_DXPositionerType[] = {
	"CARM",	"",
	"COLUMN",	"",
	"MAMMOGRAPHIC",	"",
	"PANORAMIC",	"",
	"CEPHALOSTAT",	"",
	"RIGID",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_DXPositionerType(char * value)
{
	return StringValueDescription(StringValueTable_DXPositionerType,value);
}

static struct StringValueEntry
StringValueTable_MammographyPositionerType[] = {
	"MAMMOGRAPHIC",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_MammographyPositionerType(char * value)
{
	return StringValueDescription(StringValueTable_MammographyPositionerType,value);
}

static struct StringValueEntry
StringValueTable_MammographyPositionerTypeWithoutNone[] = {
	"MAMMOGRAPHIC",	"",
	0,0
};

char *
StringValueDescription_MammographyPositionerTypeWithoutNone(char * value)
{
	return StringValueDescription(StringValueTable_MammographyPositionerTypeWithoutNone,value);
}

static struct StringValueEntry
StringValueTable_IntraoralPositionerType[] = {
	"CEPHALOSTAT",	"",
	"RIGID",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_IntraoralPositionerType(char * value)
{
	return StringValueDescription(StringValueTable_IntraoralPositionerType,value);
}

static struct StringValueEntry
StringValueTable_DXTableType[] = {
	"FIXED",	"",
	"TILTING",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_DXTableType(char * value)
{
	return StringValueDescription(StringValueTable_DXTableType,value);
}

static struct StringValueEntry
StringValueTable_CodeValueForScreeningOrDiagnostic[] = {
	"R-42453",	"Screening",
	"R-408C3",	"Diagnostic",
	0,0
};

char *
StringValueDescription_CodeValueForScreeningOrDiagnostic(char * value)
{
	return StringValueDescription(StringValueTable_CodeValueForScreeningOrDiagnostic,value);
}

static struct StringValueEntry
StringValueTable_PolygonalShutterShape[] = {
	"POLYGONAL",	"",
	0,0
};

char *
StringValueDescription_PolygonalShutterShape(char * value)
{
	return StringValueDescription(StringValueTable_PolygonalShutterShape,value);
}

static struct StringValueEntry
StringValueTable_BreastTomosynthesisFieldOfViewShape[] = {
	"RECTANGLE",	"",
	0,0
};

char *
StringValueDescription_BreastTomosynthesisFieldOfViewShape(char * value)
{
	return StringValueDescription(StringValueTable_BreastTomosynthesisFieldOfViewShape,value);
}

static struct StringValueEntry
StringValueTable_BreastTomosynthesisXRayReceptorType[] = {
	"DIGITAL_DETECTOR",	"",
	0,0
};

char *
StringValueDescription_BreastTomosynthesisXRayReceptorType(char * value)
{
	return StringValueDescription(StringValueTable_BreastTomosynthesisXRayReceptorType,value);
}

static struct StringValueEntry
StringValueTable_PositionerPrimaryAngleDirection[] = {
	"CW",	"Clockwise",
	"CC",	"CounterClockwise",
	0,0
};

char *
StringValueDescription_PositionerPrimaryAngleDirection(char * value)
{
	return StringValueDescription(StringValueTable_PositionerPrimaryAngleDirection,value);
}

static struct StringValueEntry
StringValueTable_MammographyPositionerAndDetectorMotion[] = {
	"STATIONARY",	"No motion",
	"ROTATION_STEP",	"Circular arc motion, stepped, acquire only while stationary",
	"ROTATION_CONT",	"Circular arc motion, continuous during acquisition",
	"TRANSLATION_STEP",	"Linear motion, stepped, acquire only while stationary",
	"TRANSLATION_CONT",	"Linear motion, continuous during acquisition",
	"COMPLEX_STEP",	"Complex motion, stepped, acquire only while stationary",
	"COMPLEX_CONT",	"Complex motion, continuous during acquisition",
	0,0
};

char *
StringValueDescription_MammographyPositionerAndDetectorMotion(char * value)
{
	return StringValueDescription(StringValueTable_MammographyPositionerAndDetectorMotion,value);
}

static struct StringValueEntry
StringValueTable_EntranceDoseDerivation[] = {
	"IAK",	"",
	"ESAK",	"",
	"ESDBS",	"",
	"ESDNOBS",	"",
	0,0
};

char *
StringValueDescription_EntranceDoseDerivation(char * value)
{
	return StringValueDescription(StringValueTable_EntranceDoseDerivation,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4009CodeValue[] = {
	"T-D3000",	"Chest",
	"T-280A0",	"Apex of lung",
	"T-25000",	"Trachea",
	"T-26000",	"Bronchus",
	"T-24100",	"Larynx",
	"T-D3300",	"Mediastinum",
	"T-32000",	"Heart",
	"T-D1600",	"Neck",
	"T-11210",	"Sternum",
	"T-15610",	"Sternoclavicular joint",
	"T-11300",	"Rib",
	"T-11500",	"Spine",
	"T-11600",	"Cervical spine",
	"T-11700",	"Thoracic spine",
	"T-11900",	"Lumbar spine",
	"T-11AD0",	"Sacrum",
	"T-11BF0",	"Coccyx",
	"T-D4000",	"Abdomen",
	"T-D0300",	"Extremity",
	"T-D8200",	"Arm",
	"T-D8810",	"Thumb",
	"T-D8800",	"Finger",
	"T-D8700",	"Hand",
	"T-D8600",	"Wrist",
	"T-12402",	"Forearm bone",
	"T-D8300",	"Elbow",
	"T-12410",	"Humerus",
	"T-D2220",	"Shoulder",
	"T-12310",	"Clavicle",
	"T-12280",	"Scapula",
	"T-15420",	"Acromioclavicular joint",
	"T-D9800",	"Toe",
	"T-12980",	"Sesamoid bones of foot",
	"T-D9700",	"Foot",
	"T-12770",	"Calcaneus",
	"T-15770",	"Tarsal joint",
	"T-15750",	"Ankle joint",
	"T-D9400",	"Leg",
	"T-D9200",	"Knee",
	"T-12730",	"Patella",
	"T-12710",	"Femur",
	"T-15710",	"Hip joint",
	"T-D6000",	"Pelvis",
	"T-15680",	"Sacroiliac joint",
	"T-D1100",	"Head",
	"T-11100",	"Skull",
	"T-11196",	"Facial bones",
	"T-11167",	"Zygomatic arch",
	"T-11149",	"Nasal bone",
	"T-D1480",	"Orbit",
	"T-11102",	"Optic canal",
	"T-11180",	"Mandible",
	"T-11170",	"Maxilla",
	"T-D1217",	"Maxilla and mandible",
	"T-15290",	"Temporomandibular joint",
	"T-22000",	"Paranasal sinus",
	"T-11133",	"Mastoid bone",
	"T-D1460",	"Sella turcica",
	"T-04000",	"Breast",
	"T-61100",	"Parotid gland",
	"T-61300",	"Submandibular gland",
	"T-63000",	"Gall bladder",
	"T-60610",	"Bile duct",
	"T-56000",	"Esophagus",
	"T-57000",	"Stomach",
	"T-58200",	"Duodenum",
	"T-58000",	"Small intestine",
	"T-59000",	"Large intestine",
	"T-59600",	"Rectum",
	"T-70010",	"Upper urinary tract",
	"T-74000",	"Bladder",
	"T-75000",	"Urethra",
	"T-D6151",	"Uterus and fallopian tubes",
	0,0
};

char *
StringValueDescription_SDMCID4009CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4009CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4013CodeValue[] = {
	"T-04000",	"Breast",
	0,0
};

char *
StringValueDescription_SDMCID4013CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4013CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4016CodeValue[] = {
	"T-11180",	"Mandible",
	"T-11170",	"Maxilla",
	"T-D1217",	"Maxilla and mandible",
	0,0
};

char *
StringValueDescription_SDMCID4016CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4016CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4010CodeValue[] = {
	"R-10202",	"frontal",
	"R-10204",	"frontal oblique",
	"R-10206",	"antero-posterior",
	"R-10208",	"antero-posterior oblique",
	"R-10210",	"right posterior oblique",
	"R-10212",	"left posterior oblique",
	"R-10214",	"postero-anterior",
	"R-10216",	"postero-anterior oblique",
	"R-10218",	"right anterior oblique",
	"R-10220",	"left anterior oblique",
	"R-10222",	"sagittal",
	"R-10224",	"medial-lateral",
	"R-10226",	"lateral oblique",
	"R-10228",	"lateral-medial",
	"R-10230",	"medial oblique",
	"R-10232",	"right lateral",
	"R-10234",	"right oblique",
	"R-10236",	"left lateral",
	"R-10238",	"left oblique",
	"R-10241",	"axial",
	"R-10242",	"cranio-caudal",
	"R-10244",	"caudo-cranial",
	"R-10246",	"oblique axial",
	"R-10248",	"oblique cranio-caudal",
	"R-10250",	"oblique caudo-cranial",
	"R-10252",	"frontal-oblique axial",
	"R-10254",	"sagittal-oblique axial",
	"R-102C1",	"oblique",
	"R-102CD",	"lateral",
	"R-102C2",	"tangential",
	"R-10256",	"submentovertical",
	"R-10257",	"verticosubmental",
	"R-102C3",	"plantodorsal",
	"R-102C4",	"dorsoplantar",
	"R-102C5",	"parietoacanthal",
	"R-102C6",	"acanthoparietal",
	"R-102C7",	"orbitoparietal",
	"R-102C8",	"parieto-orbital",
	0,0
};

char *
StringValueDescription_SDMCID4010CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4010CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4014CodeValue[] = {
	"R-10224",	"medio-lateral",
	"R-10226",	"medio-lateral oblique",
	"R-10228",	"latero-medial",
	"R-10230",	"latero-medial oblique",
	"R-10242",	"cranio-caudal",
	"R-10244",	"caudo-cranial (from below)",
	"R-102D0",	"superolateral to inferomedial oblique",
	"R-102CF",	"exaggerated cranio-caudal",
	"Y-X1770",	"cranio-caudal exaggerated laterally",
	"Y-X1771",	"cranio-caudal exaggerated medially",
	0,0
};

char *
StringValueDescription_SDMCID4014CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4014CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4015CodeValue[] = {
	"R-102D2",	"Cleavage",
	"R-102D1",	"Axillary Tail",
	"R-102D3",	"Rolled Lateral",
	"R-102D4",	"Rolled Medial",
	"R-102D5",	"Implant Displaced",
	"R-102D6",	"Magnification",
	"R-102D7",	"Spot Compression",
	"R-102C2",	"Tangential",
	0,0
};

char *
StringValueDescription_SDMCID4015CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4015CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4011CodeValue[] = {
	"R-10244",	"cephalad",
	"R-10242",	"caudad",
	"R-102C9",	"transthoracic",
	"R-102CA",	"lordotic",
	"R-102CB",	"transforamenal",
	"R-102CC",	"transoral",
	"R-102CE",	"transorbital",
	0,0
};

char *
StringValueDescription_SDMCID4011CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4011CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID19CodeValue[] = {
	"F-10440",	"erect",
	"F-10450",	"recumbent",
	"F-10460",	"semi-erect",
	0,0
};

char *
StringValueDescription_SDMCID19CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID19CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID20CodeValue[] = {
	"F-10310",	"prone",
	"F-10316",	"semi-prone",
	"F-10318",	"lateral  decubitus",
	"F-10320",	"standing",
	"F-10326",	"anatomical",
	"F-10330",	"kneeling",
	"F-10336",	"knee-chest",
	"F-10340",	"supine",
	"F-10346",	"lithotomy",
	"F-10348",	"Trendelenburg",
	"F-10349",	"inverse Trendelenburg",
	"F-10380",	"frog",
	"F-10390",	"stooped-over",
	"F-103A0",	"sitting",
	"F-10410",	"curled-up",
	"F-10317",	"right lateral decubitus",
	"F-10319",	"left lateral decubitus",
	0,0
};

char *
StringValueDescription_SDMCID20CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID20CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID21CodeValue[] = {
	"R-10516",	"oblique",
	"F-10470",	"headfirst",
	"F-10480",	"feet-first",
	"R-10515",	"transverse",
	0,0
};

char *
StringValueDescription_SDMCID21CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID21CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4012CodeValue[] = {
	"R-10261",	"Albers-Schonberg",
	"R-10262",	"Alexander",
	"R-10263",	"Arcelin",
	"R-10264",	"Beclere",
	"R-10265",	"Bertel",
	"R-10266",	"Blackett-Healy",
	"R-10267",	"Broden",
	"R-10268",	"Cahoon",
	"R-10269",	"Caldwell",
	"R-1026A",	"Camp-Coventry",
	"R-1026B",	"Causton",
	"R-1026C",	"Chamberlain",
	"R-1026D",	"Chassard-Lapine",
	"R-1026E",	"Chausse",
	"R-1026F",	"Cleaves",
	"R-10270",	"Clements",
	"R-10271",	"Clements-Nakayama",
	"R-10272",	"Dunlap",
	"R-10273",	"Ferguson",
	"R-10274",	"Fleischner",
	"R-10275",	"Friedman",
	"R-10276",	"Fuchs",
	"R-10277",	"Gaynor-Hart",
	"R-10278",	"Grandy",
	"R-10279",	"Grashey",
	"R-1027A",	"Haas",
	"R-1027B",	"Henschen",
	"R-1027C",	"Hickey",
	"R-1027D",	"Holly",
	"R-1027E",	"Holmblad",
	"R-1027F",	"Hough",
	"R-10280",	"Hsieh",
	"R-10281",	"Hughston",
	"R-10282",	"Isherwood",
	"R-10283",	"Judd",
	"R-10284",	"Kandel",
	"R-10285",	"Kasabach",
	"R-10286",	"Kemp Harper",
	"R-10287",	"Kovacs",
	"R-10288",	"Kuchendorf",
	"R-10289",	"Kurzbauer",
	"R-1028A",	"Laquerriere-Pierquin",
	"R-1028B",	"Lauenstein",
	"R-1028C",	"Law",
	"R-1028D",	"Lawrence",
	"R-1028E",	"Leonard-George",
	"R-1028F",	"Lewis",
	"R-10290",	"Lilienfeld",
	"R-10291",	"Lindblom",
	"R-10292",	"Lorenz",
	"R-10293",	"Low-Beer",
	"R-10294",	"Lysholm",
	"R-10295",	"May",
	"R-10296",	"Mayer",
	"R-10297",	"Merchant",
	"R-10298",	"Miller",
	"R-10299",	"Nolke",
	"R-1029A",	"Norgaard",
	"R-1029B",	"Ottonello",
	"R-1029C",	"Pawlow",
	"R-1029D",	"Pearson",
	"R-1029E",	"Penner",
	"R-1029F",	"Pirie",
	"R-102A0",	"Rhese",
	"R-102A1",	"Schuller",
	"R-102A2",	"Settegast",
	"R-102A3",	"Staunig",
	"R-102A4",	"Stecher",
	"R-102A5",	"Stenvers",
	"R-102A6",	"Swanson",
	"R-102A7",	"Tarrant",
	"R-102A8",	"Taylor",
	"R-102A9",	"Teufel",
	"R-102AA",	"Titterington",
	"R-102AB",	"Towne",
	"R-102AC",	"Twining",
	"R-102AD",	"Valdini",
	"R-102AE",	"Waters",
	"R-102AF",	"West Point",
	"R-102B0",	"Wigby-Taylor",
	"R-102B1",	"Zanelli",
	0,0
};

char *
StringValueDescription_SDMCID4012CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4012CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4017CodeValue[] = {
	"T-51005",	"Anterior 1",
	"T-51006",	"Anterior 2",
	"T-51007",	"Anterior 3",
	"T-51008",	"Premolar 1",
	"T-51009",	"Premolar 2",
	"T-5100A",	"Molar 1",
	"T-5100B",	"Molar 2",
	"T-5100C",	"Molar 3",
	"T-5100D",	"Occlusal",
	0,0
};

char *
StringValueDescription_SDMCID4017CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4017CodeValue,value);
}

static struct StringValueEntry
StringValueTable_SDMCID4018or4019CodeValue[] = {
	"T-54210",	"Maxillary right third molar tooth",
	"T-54220",	"Maxillary right second molar tooth",
	"T-54230",	"Maxillary right first molar tooth",
	"T-54240",	"Maxillary right second premolar tooth",
	"T-54250",	"Maxillary right first premolar tooth",
	"T-54260",	"Maxillary right canine tooth",
	"T-54270",	"Maxillary right lateral incisor tooth",
	"T-54280",	"Maxillary right central incisor tooth",
	"T-54290",	"Maxillary left central incisor tooth",
	"T-54300",	"Maxillary left lateral incisor tooth",
	"T-54310",	"Maxillary left canine tooth",
	"T-54320",	"Maxillary left first premolar tooth",
	"T-54330",	"Maxillary left second premolar tooth",
	"T-54340",	"Maxillary left first molar tooth",
	"T-54350",	"Maxillary left second molar tooth",
	"T-54360",	"Maxillary left third molar tooth",
	"T-54370",	"Mandibular left third molar tooth",
	"T-54380",	"Mandibular left second molar tooth",
	"T-54390",	"Mandibular left first molar tooth",
	"T-54400",	"Mandibular left second premolar tooth",
	"T-54410",	"Mandibular left first premolar tooth",
	"T-54420",	"Mandibular left canine tooth",
	"T-54430",	"Mandibular left lateral tooth",
	"T-54440",	"Mandibular left central incisor tooth",
	"T-54450",	"Mandibular right central incisor tooth",
	"T-54460",	"Mandibular right lateral incisor tooth",
	"T-54470",	"Mandibular right canine tooth",
	"T-54480",	"Mandibular right first premolar tooth",
	"T-54490",	"Mandibular right second premolar tooth",
	"T-54500",	"Mandibular right first molar tooth",
	"T-54510",	"Mandibular right second molar tooth",
	"T-54520",	"Mandibular right third molar tooth",
	"T-54610",	"Deciduous maxillary right central incisor tooth",
	"T-54620",	"Deciduous maxillary right lateral incisor tooth",
	"T-54630",	"Deciduous maxillary right canine tooth",
	"T-54640",	"Deciduous maxillary right first molar tooth",
	"T-54650",	"Deciduous maxillary right second molar tooth",
	"T-54660",	"Deciduous maxillary left central incisor tooth",
	"T-54670",	"Deciduous maxillary left lateral incisor tooth",
	"T-54680",	"Deciduous maxillary left canine tooth",
	"T-54690",	"Deciduous maxillary left first molar tooth",
	"T-54700",	"Deciduous maxillary left second molar tooth",
	"T-54760",	"Deciduous mandibular left central incisor tooth",
	"T-54770",	"Deciduous mandibular left lateral incisor tooth",
	"T-54780",	"Deciduous mandibular left canine tooth",
	"T-54790",	"Deciduous mandibular left first molar tooth",
	"T-54800",	"Deciduous mandibular left second molar tooth",
	"T-54710",	"Deciduous mandibular right central incisor tooth",
	"T-54720",	"Deciduous mandibular right lateral incisor tooth",
	"T-54730",	"Deciduous mandibular right canine tooth",
	"T-54740",	"Deciduous mandibular right first molar tooth",
	"T-54750",	"Deciduous mandibular right second molar tooth",
	0,0
};

char *
StringValueDescription_SDMCID4018or4019CodeValue(char * value)
{
	return StringValueDescription(StringValueTable_SDMCID4018or4019CodeValue,value);
}

static struct StringValueEntry
StringValueTable_VLEndoscopyModality[] = {
	"ES",	"",
	0,0
};

char *
StringValueDescription_VLEndoscopyModality(char * value)
{
	return StringValueDescription(StringValueTable_VLEndoscopyModality,value);
}

static struct StringValueEntry
StringValueTable_VLMicroscopyModality[] = {
	"GM",	"",
	0,0
};

char *
StringValueDescription_VLMicroscopyModality(char * value)
{
	return StringValueDescription(StringValueTable_VLMicroscopyModality,value);
}

static struct StringValueEntry
StringValueTable_VLSlideCoordinatesMicroscopyModality[] = {
	"SM",	"",
	0,0
};

char *
StringValueDescription_VLSlideCoordinatesMicroscopyModality(char * value)
{
	return StringValueDescription(StringValueTable_VLSlideCoordinatesMicroscopyModality,value);
}

static struct StringValueEntry
StringValueTable_VLWholeSlideMicroscopyModality[] = {
	"SM",	"",
	0,0
};

char *
StringValueDescription_VLWholeSlideMicroscopyModality(char * value)
{
	return StringValueDescription(StringValueTable_VLWholeSlideMicroscopyModality,value);
}

static struct StringValueEntry
StringValueTable_VLPhotographyModality[] = {
	"XC",	"",
	0,0
};

char *
StringValueDescription_VLPhotographyModality(char * value)
{
	return StringValueDescription(StringValueTable_VLPhotographyModality,value);
}

static struct StringValueEntry
StringValueTable_VLImageType3[] = {
	"STEREO L",	"",
	"STEREO R",	"",
	"",	"",
	0,0
};

char *
StringValueDescription_VLImageType3(char * value)
{
	return StringValueDescription(StringValueTable_VLImageType3,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRPARTIAL420orYBRRCTorYBRICT[] = {
	"MONOCHROME2",	"",
	"YBR_PARTIAL_420",	"",
	"YBR_FULL_422",	"",
	"RGB",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRPARTIAL420orYBRRCTorYBRICT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRPARTIAL420orYBRRCTorYBRICT,value);
}

static struct StringValueEntry
StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRRCTorYBRICT[] = {
	"MONOCHROME2",	"",
	"YBR_FULL_422",	"",
	"RGB",	"",
	"YBR_RCT",	"",
	"YBR_ICT",	"",
	0,0
};

char *
StringValueDescription_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRRCTorYBRICT(char * value)
{
	return StringValueDescription(StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRRCTorYBRICT,value);
}

static struct StringValueEntry
StringValueTable_AcquisitionContextValueTypes[] = {
	"TEXT",	"",
	"NUM",	"",
	"CODE",	"",
	"DATE",	"",
	"TIME",	"",
	"PNAME",	"",
	0,0
};

char *
StringValueDescription_AcquisitionContextValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_AcquisitionContextValueTypes,value);
}

static struct StringValueEntry
StringValueTable_OphthalmologyModality[] = {
	"OP",	"",
	0,0
};

char *
StringValueDescription_OphthalmologyModality(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmologyModality,value);
}

static struct StringValueEntry
StringValueTable_OphthalmologyImageType2[] = {
	"PRIMARY",	"",
	0,0
};

char *
StringValueDescription_OphthalmologyImageType2(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmologyImageType2,value);
}

static struct StringValueEntry
StringValueTable_OphthalmologyImageType3IfDerived[] = {
	"MONTAGE",	"",
	0,0
};

char *
StringValueDescription_OphthalmologyImageType3IfDerived(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmologyImageType3IfDerived,value);
}

static struct StringValueEntry
StringValueTable_OphthalmologyImageType4[] = {
	"COLOR",	"",
	"REDFREE",	"",
	"RED",	"",
	"BLUE",	"",
	"FA",	"",
	"ICG",	"",
	0,0
};

char *
StringValueDescription_OphthalmologyImageType4(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmologyImageType4,value);
}

static struct StringValueEntry
StringValueTable_OphthalmologyImageLaterality[] = {
	"R",	"Right",
	"L",	"Left",
	"B",	"Both left and right",
	0,0
};

char *
StringValueDescription_OphthalmologyImageLaterality(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmologyImageLaterality,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicRefractiveMeasurementLaterality[] = {
	"R",	"Right",
	"L",	"Left",
	"B",	"Both left and right",
	0,0
};

char *
StringValueDescription_OphthalmicRefractiveMeasurementLaterality(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicRefractiveMeasurementLaterality,value);
}

static struct StringValueEntry
StringValueTable_VisualFieldStaticPerimetryTestMeasurementLaterality[] = {
	"R",	"Right",
	"L",	"Left",
	"B",	"Both left and right",
	0,0
};

char *
StringValueDescription_VisualFieldStaticPerimetryTestMeasurementLaterality(char * value)
{
	return StringValueDescription(StringValueTable_VisualFieldStaticPerimetryTestMeasurementLaterality,value);
}

static struct StringValueEntry
StringValueTable_OphthalmologyDetectorType[] = {
	"CCD",	"",
	"CMOS",	"",
	0,0
};

char *
StringValueDescription_OphthalmologyDetectorType(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmologyDetectorType,value);
}

static struct StringValueEntry
StringValueTable_StereometricModality[] = {
	"SMR",	"",
	0,0
};

char *
StringValueDescription_StereometricModality(char * value)
{
	return StringValueDescription(StringValueTable_StereometricModality,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicTomographyModality[] = {
	"OPT",	"",
	0,0
};

char *
StringValueDescription_OphthalmicTomographyModality(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicTomographyModality,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicTomographyDetectorType[] = {
	"CCD",	"Charge Coupled Device",
	"CMOS",	"Complementary Metal Oxide Semiconductor",
	"PHOTO",	"Photodetector",
	"INT",	"Interferometer",
	0,0
};

char *
StringValueDescription_OphthalmicTomographyDetectorType(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicTomographyDetectorType,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicImageOrientation[] = {
	"LINEAR",	"",
	"NONLINEAR",	"",
	"TRANSVERSE",	"",
	0,0
};

char *
StringValueDescription_OphthalmicImageOrientation(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicImageOrientation,value);
}

static struct StringValueEntry
StringValueTable_WholeSlideImageType1[] = {
	"ORIGINAL",	"",
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_WholeSlideImageType1(char * value)
{
	return StringValueDescription(StringValueTable_WholeSlideImageType1,value);
}

static struct StringValueEntry
StringValueTable_WholeSlideImageType3[] = {
	"LOCALIZER",	"",
	"VOLUME",	"",
	"LABEL",	"",
	"OVERVIEW",	"",
	0,0
};

char *
StringValueDescription_WholeSlideImageType3(char * value)
{
	return StringValueDescription(StringValueTable_WholeSlideImageType3,value);
}

static struct StringValueEntry
StringValueTable_WholeSlideImageType4[] = {
	"NONE",	"",
	"RESAMPLED",	"",
	0,0
};

char *
StringValueDescription_WholeSlideImageType4(char * value)
{
	return StringValueDescription(StringValueTable_WholeSlideImageType4,value);
}

static struct StringValueEntry
StringValueTable_VolumetricPropertiesVolume[] = {
	"VOLUME",	"",
	0,0
};

char *
StringValueDescription_VolumetricPropertiesVolume(char * value)
{
	return StringValueDescription(StringValueTable_VolumetricPropertiesVolume,value);
}

static struct StringValueEntry
StringValueTable_WholeSlideFocusMethod[] = {
	"AUTO",	"",
	"MANUAL",	"",
	0,0
};

char *
StringValueDescription_WholeSlideFocusMethod(char * value)
{
	return StringValueDescription(StringValueTable_WholeSlideFocusMethod,value);
}

static struct StringValueEntry
StringValueTable_LocalizerDCMCodeValue[] = {
	"121311",	"",
	0,0
};

char *
StringValueDescription_LocalizerDCMCodeValue(char * value)
{
	return StringValueDescription(StringValueTable_LocalizerDCMCodeValue,value);
}

static struct StringValueEntry
StringValueTable_LensometryModality[] = {
	"LEN",	"",
	0,0
};

char *
StringValueDescription_LensometryModality(char * value)
{
	return StringValueDescription(StringValueTable_LensometryModality,value);
}

static struct StringValueEntry
StringValueTable_AutorefractionModality[] = {
	"AR",	"",
	0,0
};

char *
StringValueDescription_AutorefractionModality(char * value)
{
	return StringValueDescription(StringValueTable_AutorefractionModality,value);
}

static struct StringValueEntry
StringValueTable_SubjectiveRefractionModality[] = {
	"SRF",	"",
	0,0
};

char *
StringValueDescription_SubjectiveRefractionModality(char * value)
{
	return StringValueDescription(StringValueTable_SubjectiveRefractionModality,value);
}

static struct StringValueEntry
StringValueTable_VisualAcuityModality[] = {
	"VA",	"",
	0,0
};

char *
StringValueDescription_VisualAcuityModality(char * value)
{
	return StringValueDescription(StringValueTable_VisualAcuityModality,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicAxialMeasurementsModality[] = {
	"OAM",	"",
	0,0
};

char *
StringValueDescription_OphthalmicAxialMeasurementsModality(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicAxialMeasurementsModality,value);
}

static struct StringValueEntry
StringValueTable_IntraocularLensCalculationsModality[] = {
	"IOL",	"",
	0,0
};

char *
StringValueDescription_IntraocularLensCalculationsModality(char * value)
{
	return StringValueDescription(StringValueTable_IntraocularLensCalculationsModality,value);
}

static struct StringValueEntry
StringValueTable_KeratometryModality[] = {
	"KER",	"",
	0,0
};

char *
StringValueDescription_KeratometryModality(char * value)
{
	return StringValueDescription(StringValueTable_KeratometryModality,value);
}

static struct StringValueEntry
StringValueTable_LensSegmentType[] = {
	"PROGRESSIVE",	"",
	"NONPROGRESSIVE",	"",
	0,0
};

char *
StringValueDescription_LensSegmentType(char * value)
{
	return StringValueDescription(StringValueTable_LensSegmentType,value);
}

static struct StringValueEntry
StringValueTable_ViewingDistanceType[] = {
	"DISTANCE",	"",
	"NEAR",	"",
	"INTERMEDIATE",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_ViewingDistanceType(char * value)
{
	return StringValueDescription(StringValueTable_ViewingDistanceType,value);
}

static struct StringValueEntry
StringValueTable_VisualAcuityMeasurementsBackgroundColor[] = {
	"RED",	"",
	"GREEN",	"",
	"WHITE",	"",
	"REDGREENSPLIT",	"",
	0,0
};

char *
StringValueDescription_VisualAcuityMeasurementsBackgroundColor(char * value)
{
	return StringValueDescription(StringValueTable_VisualAcuityMeasurementsBackgroundColor,value);
}

static struct StringValueEntry
StringValueTable_Optotype[] = {
	"LETTERS",	"",
	"NUMBERS",	"",
	"PICTURES",	"",
	"TUMBLING E",	"",
	"LANDOLT C",	"",
	0,0
};

char *
StringValueDescription_Optotype(char * value)
{
	return StringValueDescription(StringValueTable_Optotype,value);
}

static struct StringValueEntry
StringValueTable_OptotypePresentation[] = {
	"SINGLE",	"",
	"MULTIPLE",	"",
	0,0
};

char *
StringValueDescription_OptotypePresentation(char * value)
{
	return StringValueDescription(StringValueTable_OptotypePresentation,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicAxialMeasurementsDeviceType[] = {
	"ULTRASOUND",	"",
	"OPTICAL",	"",
	0,0
};

char *
StringValueDescription_OphthalmicAxialMeasurementsDeviceType(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicAxialMeasurementsDeviceType,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicAxialLengthMeasurementsType[] = {
	"TOTAL LENGTH",	"the total axial length was taken withone measurement",
	"LENGTH SUMMATION",	"a summation of segmental lengthsthat determine the total axial length",
	"SEGMENTAL LENGTH",	"a segmental axial length",
	0,0
};

char *
StringValueDescription_OphthalmicAxialLengthMeasurementsType(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicAxialLengthMeasurementsType,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicAxialMeasurementsObserverType[] = {
	"PSN",	"Person; manually selected",
	"DEV",	"Device; automatically selected",
	0,0
};

char *
StringValueDescription_OphthalmicAxialMeasurementsObserverType(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicAxialMeasurementsObserverType,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicAxialMeasurementsQualityImageSOPClassUIDs[] = {
	"1.2.840.10008.5.1.4.1.1.7.2",	"Multi-frame Grayscale ByteSecondary Capture Image Storage",
	"1.2.840.10008.5.1.4.1.1.7.4",	"Multi-frame True Color SecondaryCapture Image Storage",
	0,0
};

char *
StringValueDescription_OphthalmicAxialMeasurementsQualityImageSOPClassUIDs(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicAxialMeasurementsQualityImageSOPClassUIDs,value);
}

static struct StringValueEntry
StringValueTable_VisualFieldStaticPerimetryTestMeasurementsScreeningBaselineType[] = {
	"CENTRAL",	"",
	"PERIPHERAL",	"",
	0,0
};

char *
StringValueDescription_VisualFieldStaticPerimetryTestMeasurementsScreeningBaselineType(char * value)
{
	return StringValueDescription(StringValueTable_VisualFieldStaticPerimetryTestMeasurementsScreeningBaselineType,value);
}

static struct StringValueEntry
StringValueTable_VisualFieldStaticPerimetryTestMeasurementsStimulusResults[] = {
	"SEEN",	"",
	"NOT SEEN",	"",
	"SEEN AT MAX",	"",
	0,0
};

char *
StringValueDescription_VisualFieldStaticPerimetryTestMeasurementsStimulusResults(char * value)
{
	return StringValueDescription(StringValueTable_VisualFieldStaticPerimetryTestMeasurementsStimulusResults,value);
}

static struct StringValueEntry
StringValueTable_VisualFieldShape[] = {
	"RECTANGLE",	"",
	"CIRCLE",	"",
	"ELLIPSE",	"",
	0,0
};

char *
StringValueDescription_VisualFieldShape(char * value)
{
	return StringValueDescription(StringValueTable_VisualFieldShape,value);
}

static struct StringValueEntry
StringValueTable_OphthalmicVisualFieldModality[] = {
	"OPV",	"",
	0,0
};

char *
StringValueDescription_OphthalmicVisualFieldModality(char * value)
{
	return StringValueDescription(StringValueTable_OphthalmicVisualFieldModality,value);
}

static struct StringValueEntry
StringValueTable_WaveformOriginality[] = {
	"ORIGINAL",	"",
	"DERIVED",	"",
	0,0
};

char *
StringValueDescription_WaveformOriginality(char * value)
{
	return StringValueDescription(StringValueTable_WaveformOriginality,value);
}

static struct StringValueEntry
StringValueTable_ChannelStatus[] = {
	"OK",	"",
	"TEST DATA",	"",
	"DISCONNECTED",	"",
	"QUESTIONABLE",	"",
	"INVALID",	"",
	"UNCALIBRATED",	"",
	"UNZEROED",	"",
	0,0
};

char *
StringValueDescription_ChannelStatus(char * value)
{
	return StringValueDescription(StringValueTable_ChannelStatus,value);
}

static struct StringValueEntry
StringValueTable_WaveformSampleInterpretation[] = {
	"SB",	"signed 8 bit linear",
	"UB",	"unsigned 8 bit linear",
	"MB",	"8 bit mu-law",
	"AB",	"8 bit A-law",
	"SS",	"signed 16 bit linear",
	"US",	"unsigned 16 bit linear",
	0,0
};

char *
StringValueDescription_WaveformSampleInterpretation(char * value)
{
	return StringValueDescription(StringValueTable_WaveformSampleInterpretation,value);
}

static struct StringValueEntry
StringValueTable_TemporalRangeTypeForWaveformAnnotation[] = {
	"POINT",	"",
	"MULTIPOINT",	"",
	"SEGMENT",	"",
	"MULTISEGMENT",	"",
	"BEGIN",	"",
	"END",	"",
	0,0
};

char *
StringValueDescription_TemporalRangeTypeForWaveformAnnotation(char * value)
{
	return StringValueDescription(StringValueTable_TemporalRangeTypeForWaveformAnnotation,value);
}

static struct StringValueEntry
StringValueTable_SynchronizationTrigger[] = {
	"SOURCE",	"",
	"EXTERNAL",	"",
	"PASSTHRU",	"",
	"NO TRIGGER",	"",
	0,0
};

char *
StringValueDescription_SynchronizationTrigger(char * value)
{
	return StringValueDescription(StringValueTable_SynchronizationTrigger,value);
}

static struct StringValueEntry
StringValueTable_SynchronizationTriggerNoTrigger[] = {
	"NO TRIGGER",	"",
	0,0
};

char *
StringValueDescription_SynchronizationTriggerNoTrigger(char * value)
{
	return StringValueDescription(StringValueTable_SynchronizationTriggerNoTrigger,value);
}

static struct StringValueEntry
StringValueTable_TimeDistributionProtocol[] = {
	"NTP",	"Network Time Protocol",
	"IRIG",	"InterRange Instrument Group",
	"GPS",	"Global Positioning System",
	"SNTP",	"Simple Network Time Protocol",
	0,0
};

char *
StringValueDescription_TimeDistributionProtocol(char * value)
{
	return StringValueDescription(StringValueTable_TimeDistributionProtocol,value);
}

static struct StringValueEntry
StringValueTable_DisplayShadingFlag[] = {
	"NONE",	"",
	"BASELINE",	"",
	"ABSOLUTE",	"",
	"DIFFERENCE",	"",
	0,0
};

char *
StringValueDescription_DisplayShadingFlag(char * value)
{
	return StringValueDescription(StringValueTable_DisplayShadingFlag,value);
}

static struct StringValueEntry
StringValueTable_SRModality[] = {
	"SR",	"",
	0,0
};

char *
StringValueDescription_SRModality(char * value)
{
	return StringValueDescription(StringValueTable_SRModality,value);
}

static struct StringValueEntry
StringValueTable_KOModality[] = {
	"KO",	"",
	0,0
};

char *
StringValueDescription_KOModality(char * value)
{
	return StringValueDescription(StringValueTable_KOModality,value);
}

static struct StringValueEntry
StringValueTable_PreliminaryFlag[] = {
	"PRELIMINARY",	"",
	"FINAL",	"",
	0,0
};

char *
StringValueDescription_PreliminaryFlag(char * value)
{
	return StringValueDescription(StringValueTable_PreliminaryFlag,value);
}

static struct StringValueEntry
StringValueTable_CompletionFlag[] = {
	"PARTIAL",	"",
	"COMPLETE",	"",
	0,0
};

char *
StringValueDescription_CompletionFlag(char * value)
{
	return StringValueDescription(StringValueTable_CompletionFlag,value);
}

static struct StringValueEntry
StringValueTable_VerificationFlag[] = {
	"UNVERIFIED",	"",
	"VERIFIED",	"",
	0,0
};

char *
StringValueDescription_VerificationFlag(char * value)
{
	return StringValueDescription(StringValueTable_VerificationFlag,value);
}

static struct StringValueEntry
StringValueTable_ContinuityOfContent[] = {
	"SEPARATE",	"",
	"CONTINUOUS",	"",
	0,0
};

char *
StringValueDescription_ContinuityOfContent(char * value)
{
	return StringValueDescription(StringValueTable_ContinuityOfContent,value);
}

static struct StringValueEntry
StringValueTable_SRRelationshipType[] = {
	"CONTAINS",	"",
	"HAS PROPERTIES",	"",
	"HAS CONCEPT MOD",	"",
	"HAS OBS CONTEXT",	"",
	"HAS ACQ CONTEXT",	"",
	"INFERRED FROM",	"",
	"SELECTED FROM",	"",
	0,0
};

char *
StringValueDescription_SRRelationshipType(char * value)
{
	return StringValueDescription(StringValueTable_SRRelationshipType,value);
}

static struct StringValueEntry
StringValueTable_SRRelationshipTypeHasConceptModifier[] = {
	"HAS CONCEPT MOD",	"",
	0,0
};

char *
StringValueDescription_SRRelationshipTypeHasConceptModifier(char * value)
{
	return StringValueDescription(StringValueTable_SRRelationshipTypeHasConceptModifier,value);
}

static struct StringValueEntry
StringValueTable_SRValueTypes[] = {
	"TEXT",	"",
	"NUM",	"",
	"CODE",	"",
	"DATETIME",	"",
	"DATE",	"",
	"TIME",	"",
	"UIDREF",	"",
	"PNAME",	"",
	"IMAGE",	"",
	"WAVEFORM",	"",
	"COMPOSITE",	"",
	"SCOORD",	"",
	"SCOORD3D",	"",
	"TCOORD",	"",
	"CONTAINER",	"",
	0,0
};

char *
StringValueDescription_SRValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_SRValueTypes,value);
}

static struct StringValueEntry
StringValueTable_EnhancedAndComprehensiveSRValueTypes[] = {
	"TEXT",	"",
	"NUM",	"",
	"CODE",	"",
	"DATETIME",	"",
	"DATE",	"",
	"TIME",	"",
	"UIDREF",	"",
	"PNAME",	"",
	"IMAGE",	"",
	"WAVEFORM",	"",
	"COMPOSITE",	"",
	"SCOORD",	"",
	"TCOORD",	"",
	"CONTAINER",	"",
	0,0
};

char *
StringValueDescription_EnhancedAndComprehensiveSRValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedAndComprehensiveSRValueTypes,value);
}

static struct StringValueEntry
StringValueTable_BasicTextSRValueTypes[] = {
	"TEXT",	"",
	"CODE",	"",
	"DATETIME",	"",
	"DATE",	"",
	"TIME",	"",
	"UIDREF",	"",
	"PNAME",	"",
	"COMPOSITE",	"",
	"IMAGE",	"",
	"WAVEFORM",	"",
	"CONTAINER",	"",
	0,0
};

char *
StringValueDescription_BasicTextSRValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_BasicTextSRValueTypes,value);
}

static struct StringValueEntry
StringValueTable_KeyObjectSelectionDocumentValueTypes[] = {
	"TEXT",	"",
	"CODE",	"",
	"UIDREF",	"",
	"PNAME",	"",
	"IMAGE",	"",
	"WAVEFORM",	"",
	"COMPOSITE",	"",
	"CONTAINER",	"",
	0,0
};

char *
StringValueDescription_KeyObjectSelectionDocumentValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_KeyObjectSelectionDocumentValueTypes,value);
}

static struct StringValueEntry
StringValueTable_MammographyCADSRValueTypes[] = {
	"TEXT",	"",
	"CODE",	"",
	"NUM",	"",
	"DATE",	"",
	"TIME",	"",
	"PNAME",	"",
	"SCOORD",	"",
	"COMPOSITE",	"",
	"IMAGE",	"",
	"CONTAINER",	"",
	0,0
};

char *
StringValueDescription_MammographyCADSRValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_MammographyCADSRValueTypes,value);
}

static struct StringValueEntry
StringValueTable_ChestCADSRValueTypes[] = {
	"TEXT",	"",
	"CODE",	"",
	"NUM",	"",
	"DATE",	"",
	"TIME",	"",
	"PNAME",	"",
	"SCOORD",	"",
	"TCOORD",	"",
	"COMPOSITE",	"",
	"IMAGE",	"",
	"CONTAINER",	"",
	"UIDREF",	"",
	"WAVEFORM",	"",
	0,0
};

char *
StringValueDescription_ChestCADSRValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_ChestCADSRValueTypes,value);
}

static struct StringValueEntry
StringValueTable_ProcedureLogValueTypes[] = {
	"CODE",	"",
	"CONTAINER",	"",
	"COMPOSITE",	"",
	"DATETIME",	"",
	"DATE",	"",
	"IMAGE",	"",
	"NUM",	"",
	"PNAME",	"",
	"TEXT",	"",
	"TIME",	"",
	"UIDREF",	"",
	"WAVEFORM",	"",
	0,0
};

char *
StringValueDescription_ProcedureLogValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_ProcedureLogValueTypes,value);
}

static struct StringValueEntry
StringValueTable_XRayRadiationDoseSRValueTypes[] = {
	"TEXT",	"",
	"CODE",	"",
	"NUM",	"",
	"DATETIME",	"",
	"UIDREF",	"",
	"PNAME",	"",
	"COMPOSITE",	"",
	"IMAGE",	"",
	"CONTAINER",	"",
	0,0
};

char *
StringValueDescription_XRayRadiationDoseSRValueTypes(char * value)
{
	return StringValueDescription(StringValueTable_XRayRadiationDoseSRValueTypes,value);
}

static struct StringValueEntry
StringValueTable_SRGraphicType[] = {
	"POINT",	"",
	"MULTIPOINT",	"",
	"POLYLINE",	"",
	"CIRCLE",	"",
	"ELLIPSE",	"",
	0,0
};

char *
StringValueDescription_SRGraphicType(char * value)
{
	return StringValueDescription(StringValueTable_SRGraphicType,value);
}

static struct StringValueEntry
StringValueTable_SRGraphicType3D[] = {
	"POINT",	"",
	"MULTIPOINT",	"",
	"POLYLINE",	"",
	"POLYGON",	"",
	"ELLIPSE",	"",
	"ELLIPSOID",	"",
	0,0
};

char *
StringValueDescription_SRGraphicType3D(char * value)
{
	return StringValueDescription(StringValueTable_SRGraphicType3D,value);
}

static struct StringValueEntry
StringValueTable_TemporalRangeType[] = {
	"POINT",	"",
	"MULTIPOINT",	"",
	"SEGMENT",	"",
	"MULTISEGMENT",	"",
	"BEGIN",	"",
	"END",	"",
	0,0
};

char *
StringValueDescription_TemporalRangeType(char * value)
{
	return StringValueDescription(StringValueTable_TemporalRangeType,value);
}

static struct StringValueEntry
StringValueTable_ParticipationType[] = {
	"SOURCE",	"",
	"ENT",	"",
	"ATTEST",	"",
	0,0
};

char *
StringValueDescription_ParticipationType(char * value)
{
	return StringValueDescription(StringValueTable_ParticipationType,value);
}

static struct StringValueEntry
StringValueTable_ObserverType[] = {
	"PSN",	"",
	"DEV",	"",
	0,0
};

char *
StringValueDescription_ObserverType(char * value)
{
	return StringValueDescription(StringValueTable_ObserverType,value);
}

static struct StringValueEntry
StringValueTable_SRTemplateMappingResource[] = {
	"DCMR",	"",
	"99RPH",	"",
	"99SMS_CTMR",	"Siemens CT MR",
	"99PMP",	"PixelMed",
	"99QIICR",	"NCI QIICR Project 3DSlicer BWH",
	0,0
};

char *
StringValueDescription_SRTemplateMappingResource(char * value)
{
	return StringValueDescription(StringValueTable_SRTemplateMappingResource,value);
}

static struct StringValueEntry
StringValueTable_AnnotationUnits[] = {
	"PIXEL",	"",
	"DISPLAY",	"",
	"MATRIX",	"",
	0,0
};

char *
StringValueDescription_AnnotationUnits(char * value)
{
	return StringValueDescription(StringValueTable_AnnotationUnits,value);
}

static struct StringValueEntry
StringValueTable_GraphicType[] = {
	"POINT",	"",
	"POLYLINE",	"",
	"INTERPOLATED",	"",
	"CIRCLE",	"",
	"ELLIPSE",	"",
	0,0
};

char *
StringValueDescription_GraphicType(char * value)
{
	return StringValueDescription(StringValueTable_GraphicType,value);
}

static struct StringValueEntry
StringValueTable_SoftcopyPresentationLUTShape[] = {
	"IDENTITY",	"",
	"INVERSE",	"",
	0,0
};

char *
StringValueDescription_SoftcopyPresentationLUTShape(char * value)
{
	return StringValueDescription(StringValueTable_SoftcopyPresentationLUTShape,value);
}

static struct StringValueEntry
StringValueTable_PresentationStateModality[] = {
	"PR",	"Presentation State",
	0,0
};

char *
StringValueDescription_PresentationStateModality(char * value)
{
	return StringValueDescription(StringValueTable_PresentationStateModality,value);
}

static struct StringValueEntry
StringValueTable_MaskOperationForPresentationState[] = {
	"AVG_SUB",	"Average Subtraction",
	"TID",	"Time Interval Differencing",
	0,0
};

char *
StringValueDescription_MaskOperationForPresentationState(char * value)
{
	return StringValueDescription(StringValueTable_MaskOperationForPresentationState,value);
}

static struct StringValueEntry
StringValueTable_PresentationSizeMode[] = {
	"SCALE TO FIT",	"",
	"TRUE SIZE",	"",
	"MAGNIFY",	"",
	0,0
};

char *
StringValueDescription_PresentationSizeMode(char * value)
{
	return StringValueDescription(StringValueTable_PresentationSizeMode,value);
}

static struct StringValueEntry
StringValueTable_HangingProtocolLevel[] = {
	"MANUFACTURER",	"",
	"SITE",	"",
	"USER_GROUP",	"",
	"SINGLE_USER",	"",
	0,0
};

char *
StringValueDescription_HangingProtocolLevel(char * value)
{
	return StringValueDescription(StringValueTable_HangingProtocolLevel,value);
}

static struct StringValueEntry
StringValueTable_ImageSetSelectorUsageFlag[] = {
	"MATCH",	"",
	"NO_MATCH",	"",
	0,0
};

char *
StringValueDescription_ImageSetSelectorUsageFlag(char * value)
{
	return StringValueDescription(StringValueTable_ImageSetSelectorUsageFlag,value);
}

static struct StringValueEntry
StringValueTable_SelectorAttributeVR[] = {
	"AE",	"",
	"AS",	"",
	"AT",	"",
	"CS",	"",
	"DA",	"",
	"DS",	"",
	"DT",	"",
	"FL",	"",
	"FD",	"",
	"IS",	"",
	"LO",	"",
	"LT",	"",
	"PN",	"",
	"SH",	"",
	"SL",	"",
	"SQ",	"",
	"SS",	"",
	"ST",	"",
	"TM",	"",
	"UI",	"",
	"UL",	"",
	"US",	"",
	"UT",	"",
	0,0
};

char *
StringValueDescription_SelectorAttributeVR(char * value)
{
	return StringValueDescription(StringValueTable_SelectorAttributeVR,value);
}

static struct StringValueEntry
StringValueTable_ImageSetSelectorCategory[] = {
	"RELATIVE_TIME",	"",
	"ABSTRACT_PRIOR",	"",
	0,0
};

char *
StringValueDescription_ImageSetSelectorCategory(char * value)
{
	return StringValueDescription(StringValueTable_ImageSetSelectorCategory,value);
}

static struct StringValueEntry
StringValueTable_RelativeTimeUnits[] = {
	"SECONDS",	"",
	"MINUTES",	"",
	"HOURS",	"",
	"DAYS",	"",
	"WEEKS",	"",
	"MONTHS",	"",
	"YEARS",	"",
	0,0
};

char *
StringValueDescription_RelativeTimeUnits(char * value)
{
	return StringValueDescription(StringValueTable_RelativeTimeUnits,value);
}

static struct StringValueEntry
StringValueTable_ImageBoxLayoutTypeForHangingProtocol[] = {
	"TILED",	"",
	"STACK",	"",
	"CINE",	"",
	"PROCESSED",	"",
	"SINGLE",	"",
	0,0
};

char *
StringValueDescription_ImageBoxLayoutTypeForHangingProtocol(char * value)
{
	return StringValueDescription(StringValueTable_ImageBoxLayoutTypeForHangingProtocol,value);
}

static struct StringValueEntry
StringValueTable_ImageBoxScrollDirection[] = {
	"VERTICAL",	"",
	"HORIZONTAL",	"",
	0,0
};

char *
StringValueDescription_ImageBoxScrollDirection(char * value)
{
	return StringValueDescription(StringValueTable_ImageBoxScrollDirection,value);
}

static struct StringValueEntry
StringValueTable_ImageBoxScrollType[] = {
	"PAGE",	"",
	"ROW_COLUMN",	"",
	"IMAGE",	"",
	0,0
};

char *
StringValueDescription_ImageBoxScrollType(char * value)
{
	return StringValueDescription(StringValueTable_ImageBoxScrollType,value);
}

static struct StringValueEntry
StringValueTable_FilterByCategory[] = {
	"IMAGE_PLANE",	"",
	0,0
};

char *
StringValueDescription_FilterByCategory(char * value)
{
	return StringValueDescription(StringValueTable_FilterByCategory,value);
}

static struct StringValueEntry
StringValueTable_FilterByAttributePresence[] = {
	"PRESENT",	"",
	"NOT_PRESENT",	"",
	0,0
};

char *
StringValueDescription_FilterByAttributePresence(char * value)
{
	return StringValueDescription(StringValueTable_FilterByAttributePresence,value);
}

static struct StringValueEntry
StringValueTable_FilterByOperator[] = {
	"RANGE_INCL",	"",
	"RANGE_EXCL",	"",
	"GREATER_OR_EQUAL",	"",
	"LESS_OR_EQUAL",	"",
	"GREATER_THAN",	"",
	"LESS_THAN",	"",
	"MEMBER_OF",	"",
	"NOT_MEMBER_OF",	"",
	0,0
};

char *
StringValueDescription_FilterByOperator(char * value)
{
	return StringValueDescription(StringValueTable_FilterByOperator,value);
}

static struct StringValueEntry
StringValueTable_SortByCategory[] = {
	"ALONG_AXIS",	"",
	"BY_ACQ_TIME",	"",
	0,0
};

char *
StringValueDescription_SortByCategory(char * value)
{
	return StringValueDescription(StringValueTable_SortByCategory,value);
}

static struct StringValueEntry
StringValueTable_SortingDirection[] = {
	"INCREASING",	"",
	"DECREASING",	"",
	0,0
};

char *
StringValueDescription_SortingDirection(char * value)
{
	return StringValueDescription(StringValueTable_SortingDirection,value);
}

static struct StringValueEntry
StringValueTable_BlendingOperationType[] = {
	"COLOR",	"",
	0,0
};

char *
StringValueDescription_BlendingOperationType(char * value)
{
	return StringValueDescription(StringValueTable_BlendingOperationType,value);
}

static struct StringValueEntry
StringValueTable_ReformattingOperationType[] = {
	"MPR",	"",
	"3D_RENDERING",	"",
	"SLAB",	"",
	0,0
};

char *
StringValueDescription_ReformattingOperationType(char * value)
{
	return StringValueDescription(StringValueTable_ReformattingOperationType,value);
}

static struct StringValueEntry
StringValueTable_ReformattingOperationInitialViewDirection[] = {
	"SAGITTAL",	"",
	"AXIAL",	"",
	"CORONAL",	"",
	"OBLIQUE",	"",
	0,0
};

char *
StringValueDescription_ReformattingOperationInitialViewDirection(char * value)
{
	return StringValueDescription(StringValueTable_ReformattingOperationInitialViewDirection,value);
}

static struct StringValueEntry
StringValueTable_ThreeDRenderingType[] = {
	"MIP",	"",
	"SURFACE",	"",
	"VOLUME",	"",
	0,0
};

char *
StringValueDescription_ThreeDRenderingType(char * value)
{
	return StringValueDescription(StringValueTable_ThreeDRenderingType,value);
}

static struct StringValueEntry
StringValueTable_DisplaySetHorizontalJustification[] = {
	"LEFT",	"",
	"CENTER",	"",
	"RIGHT",	"",
	0,0
};

char *
StringValueDescription_DisplaySetHorizontalJustification(char * value)
{
	return StringValueDescription(StringValueTable_DisplaySetHorizontalJustification,value);
}

static struct StringValueEntry
StringValueTable_DisplaySetVerticalJustification[] = {
	"TOP",	"",
	"CENTER",	"",
	"BOTTOM",	"",
	0,0
};

char *
StringValueDescription_DisplaySetVerticalJustification(char * value)
{
	return StringValueDescription(StringValueTable_DisplaySetVerticalJustification,value);
}

static struct StringValueEntry
StringValueTable_VOIType[] = {
	"LUNG",	"",
	"MEDIASTINUM",	"",
	"ABDO_PELVIS",	"",
	"LIVER",	"",
	"SOFT_TISSUE",	"",
	"BONE",	"",
	"BRAIN",	"",
	"POST_FOSSA",	"",
	0,0
};

char *
StringValueDescription_VOIType(char * value)
{
	return StringValueDescription(StringValueTable_VOIType,value);
}

static struct StringValueEntry
StringValueTable_PseudoColorType[] = {
	"BLACK_BODY",	"",
	"HOT_IRON",	"",
	"DEFAULT",	"",
	0,0
};

char *
StringValueDescription_PseudoColorType(char * value)
{
	return StringValueDescription(StringValueTable_PseudoColorType,value);
}

static struct StringValueEntry
StringValueTable_PartialDataDisplayHandling[] = {
	"MAINTAIN_LAYOUT",	"",
	"ADAPT_LAYOUT",	"",
	0,0
};

char *
StringValueDescription_PartialDataDisplayHandling(char * value)
{
	return StringValueDescription(StringValueTable_PartialDataDisplayHandling,value);
}

static struct StringValueEntry
StringValueTable_VOILUTFunction[] = {
	"LINEAR",	"",
	"SIGMOID",	"",
	"LINEAR_EXACT",	"",
	0,0
};

char *
StringValueDescription_VOILUTFunction(char * value)
{
	return StringValueDescription(StringValueTable_VOILUTFunction,value);
}

static struct StringValueEntry
StringValueTable_BlendingPosition[] = {
	"SUPERIMPOSED",	"",
	"UNDERLYING",	"",
	0,0
};

char *
StringValueDescription_BlendingPosition(char * value)
{
	return StringValueDescription(StringValueTable_BlendingPosition,value);
}

static struct StringValueEntry
StringValueTable_ImageBoxLayoutTypeForStructuredDisplay[] = {
	"STACK",	"",
	"CINE",	"",
	"SINGLE",	"",
	0,0
};

char *
StringValueDescription_ImageBoxLayoutTypeForStructuredDisplay(char * value)
{
	return StringValueDescription(StringValueTable_ImageBoxLayoutTypeForStructuredDisplay,value);
}

static struct StringValueEntry
StringValueTable_InitialCineRunState[] = {
	"STOPPED",	"",
	"RUNNING",	"",
	0,0
};

char *
StringValueDescription_InitialCineRunState(char * value)
{
	return StringValueDescription(StringValueTable_InitialCineRunState,value);
}

static struct StringValueEntry
StringValueTable_TypeOfSynchronizationBetweenImageBoxes[] = {
	"FRAME",	"",
	"POSITION",	"",
	"TIME",	"",
	"PHASE",	"",
	0,0
};

char *
StringValueDescription_TypeOfSynchronizationBetweenImageBoxes(char * value)
{
	return StringValueDescription(StringValueTable_TypeOfSynchronizationBetweenImageBoxes,value);
}

static struct StringValueEntry
StringValueTable_BoundingBoxTextHorizontalJustification[] = {
	"LEFT",	"",
	"RIGHT",	"",
	"CENTER",	"",
	0,0
};

char *
StringValueDescription_BoundingBoxTextHorizontalJustification(char * value)
{
	return StringValueDescription(StringValueTable_BoundingBoxTextHorizontalJustification,value);
}

static struct StringValueEntry
StringValueTable_PixelOriginInterpretation[] = {
	"FRAME",	"",
	"VOLUME",	"",
	0,0
};

char *
StringValueDescription_PixelOriginInterpretation(char * value)
{
	return StringValueDescription(StringValueTable_PixelOriginInterpretation,value);
}

static struct StringValueEntry
StringValueTable_ColorSpace[] = {
	"SRGB",	"",
	"ADOBERGB",	"",
	"ROMMRGB",	"",
	0,0
};

char *
StringValueDescription_ColorSpace(char * value)
{
	return StringValueDescription(StringValueTable_ColorSpace,value);
}

static struct StringValueEntry
StringValueTable_MRModality[] = {
	"MR",	"",
	0,0
};

char *
StringValueDescription_MRModality(char * value)
{
	return StringValueDescription(StringValueTable_MRModality,value);
}

static struct StringValueEntry
StringValueTable_CardiacCyclePosition[] = {
	"END_SYSTOLE",	"",
	"END_DIASTOLE",	"",
	"UNDETERMINED",	"",
	0,0
};

char *
StringValueDescription_CardiacCyclePosition(char * value)
{
	return StringValueDescription(StringValueTable_CardiacCyclePosition,value);
}

static struct StringValueEntry
StringValueTable_RespiratoryCyclePosition[] = {
	"START_RESPIR",	"",
	"END_RESPIR",	"",
	"UNDETERMINED",	"",
	0,0
};

char *
StringValueDescription_RespiratoryCyclePosition(char * value)
{
	return StringValueDescription(StringValueTable_RespiratoryCyclePosition,value);
}

static struct StringValueEntry
StringValueTable_CardiacSynchronizationTechnique[] = {
	"NONE",	"",
	"REALTIME",	"",
	"PROSPECTIVE",	"",
	"RETROSPECTIVE",	"",
	"PACED",	"",
	0,0
};

char *
StringValueDescription_CardiacSynchronizationTechnique(char * value)
{
	return StringValueDescription(StringValueTable_CardiacSynchronizationTechnique,value);
}

static struct StringValueEntry
StringValueTable_CardiacSignalSource[] = {
	"ECG",	"",
	"VCG",	"",
	"PP",	"",
	"MR",	"",
	0,0
};

char *
StringValueDescription_CardiacSignalSource(char * value)
{
	return StringValueDescription(StringValueTable_CardiacSignalSource,value);
}

static struct StringValueEntry
StringValueTable_CardiacBeatRejectionTechnique[] = {
	"NONE",	"",
	"RR_INTERVAL",	"",
	"QRS_LOOP",	"",
	"PVC",	"",
	0,0
};

char *
StringValueDescription_CardiacBeatRejectionTechnique(char * value)
{
	return StringValueDescription(StringValueTable_CardiacBeatRejectionTechnique,value);
}

static struct StringValueEntry
StringValueTable_RespiratoryMotionCompensationTechnique[] = {
	"NONE",	"",
	"BREATH_HOLD",	"",
	"REALTIME",	"",
	"GATING",	"",
	"TRACKING",	"",
	"PHASE_ORDERING",	"",
	"PHASE_RESCANNING",	"",
	"RETROSPECTIVE",	"",
	"CORRECTION",	"",
	0,0
};

char *
StringValueDescription_RespiratoryMotionCompensationTechnique(char * value)
{
	return StringValueDescription(StringValueTable_RespiratoryMotionCompensationTechnique,value);
}

static struct StringValueEntry
StringValueTable_RespiratorySignalSource[] = {
	"NONE",	"",
	"BELT",	"",
	"NASAL_PROBE",	"",
	"CO2_SENSOR",	"",
	"NAVIGATOR",	"",
	"MR_PHASE",	"",
	"ECG",	"",
	0,0
};

char *
StringValueDescription_RespiratorySignalSource(char * value)
{
	return StringValueDescription(StringValueTable_RespiratorySignalSource,value);
}

static struct StringValueEntry
StringValueTable_BulkMotionCompensationTechnique[] = {
	"NONE",	"",
	"REALTIME",	"",
	"GATING",	"",
	"TRACKING",	"",
	"RETROSPECTIVE",	"",
	"CORRECTION",	"",
	0,0
};

char *
StringValueDescription_BulkMotionCompensationTechnique(char * value)
{
	return StringValueDescription(StringValueTable_BulkMotionCompensationTechnique,value);
}

static struct StringValueEntry
StringValueTable_BulkMotionSignalSource[] = {
	"JOINT",	"",
	"NAVIGATOR",	"",
	"MR_PHASE",	"",
	0,0
};

char *
StringValueDescription_BulkMotionSignalSource(char * value)
{
	return StringValueDescription(StringValueTable_BulkMotionSignalSource,value);
}

static struct StringValueEntry
StringValueTable_ContentQualification[] = {
	"PRODUCT",	"",
	"RESEARCH",	"",
	"SERVICE",	"",
	0,0
};

char *
StringValueDescription_ContentQualification(char * value)
{
	return StringValueDescription(StringValueTable_ContentQualification,value);
}

static struct StringValueEntry
StringValueTable_ResonantNucleus[] = {
	"1H",	"",
	"3HE",	"",
	"7LI",	"",
	"13C",	"",
	"19F",	"",
	"23NA",	"",
	"31P",	"",
	"129XE",	"",
	0,0
};

char *
StringValueDescription_ResonantNucleus(char * value)
{
	return StringValueDescription(StringValueTable_ResonantNucleus,value);
}

static struct StringValueEntry
StringValueTable_ApplicableSafetyStandardAgency[] = {
	"IEC",	"",
	"FDA",	"",
	"MHW",	"",
	0,0
};

char *
StringValueDescription_ApplicableSafetyStandardAgency(char * value)
{
	return StringValueDescription(StringValueTable_ApplicableSafetyStandardAgency,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRImageAndFrameType3[] = {
	"ANGIO",	"",
	"CARDIAC",	"",
	"CARDIAC_GATED",	"",
	"CARDRESP_GATED",	"",
	"DYNAMIC",	"",
	"FLUOROSCOPY",	"",
	"LOCALIZER",	"",
	"MOTION",	"",
	"PERFUSION",	"",
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	"RESP_GATED",	"",
	"REST",	"",
	"STATIC",	"",
	"STRESS",	"",
	"VOLUME",	"",
	"NON_PARALLEL",	"",
	"PARALLEL",	"",
	"WHOLE_BODY",	"",
	"ANGIO_TIME",	"",
	"ASL",	"",
	"CINE",	"",
	"DIFFUSION",	"",
	"FLOW_ENCODED",	"",
	"FLUID_ATTENUATED",	"",
	"FMRI",	"",
	"MAX_IP",	"",
	"MIN_IP",	"",
	"M_MODE",	"",
	"METABOLITE_MAP",	"",
	"MULTIECHO",	"",
	"PROTON_DENSITY",	"",
	"REALTIME",	"",
	"STIR",	"",
	"TAGGING",	"",
	"TEMPERATURE",	"",
	"T1",	"",
	"T2",	"",
	"T2_STAR",	"",
	"TOF",	"",
	"VELOCITY",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRImageAndFrameType3(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRImageAndFrameType3,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRSpectroscopyImageAndFrameType3[] = {
	"SPECTROSCOPY",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRSpectroscopyImageAndFrameType3(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRSpectroscopyImageAndFrameType3,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRImageType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MASKED",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MTT",	"",
	"MULTIPLICATION",	"",
	"RCBF",	"",
	"RCBV",	"",
	"RESAMPLED",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"T_TEST",	"",
	"TTP",	"",
	"Z_SCORE",	"",
	"NONE",	"",
	"ADC",	"",
	"PERFUSION_ASL",	"",
	"DIFFUSION",	"",
	"DIFFUSION_ANISO",	"",
	"DIFFUSION_ATTNTD",	"",
	"DIFFUSION_ISO",	"",
	"METABOLITE_MAP",	"",
	"NEI",	"",
	"R_COEFFICIENT",	"",
	"RHO",	"",
	"SCM",	"",
	"SNR_MAP",	"",
	"T1_MAP",	"",
	"T2_STAR_MAP",	"",
	"T2_MAP",	"",
	"TCS",	"",
	"TEMPERATURE",	"",
	"VELOCITY",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRImageType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRImageType4,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRFrameType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MASKED",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MTT",	"",
	"MULTIPLICATION",	"",
	"RCBF",	"",
	"RCBV",	"",
	"RESAMPLED",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"T_TEST",	"",
	"TTP",	"",
	"Z_SCORE",	"",
	"NONE",	"",
	"ADC",	"",
	"PERFUSION_ASL",	"",
	"DIFFUSION",	"",
	"DIFFUSION_ANISO",	"",
	"DIFFUSION_ATTNTD",	"",
	"DIFFUSION_ISO",	"",
	"METABOLITE_MAP",	"",
	"NEI",	"",
	"R_COEFFICIENT",	"",
	"RHO",	"",
	"SCM",	"",
	"SNR_MAP",	"",
	"T1_MAP",	"",
	"T2_STAR_MAP",	"",
	"T2_MAP",	"",
	"TCS",	"",
	"TEMPERATURE",	"",
	"VELOCITY",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRFrameType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRFrameType4,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRSpectroscopyImageType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MULTIPLICATION",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"NONE",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRSpectroscopyImageType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRSpectroscopyImageType4,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRSpectroscopyFrameType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MULTIPLICATION",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRSpectroscopyFrameType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRSpectroscopyFrameType4,value);
}

static struct StringValueEntry
StringValueTable_CommonCTMRPixelPresentationFrameLevel[] = {
	"COLOR",	"",
	"MONOCHROME",	"",
	"TRUE_COLOR",	"",
	0,0
};

char *
StringValueDescription_CommonCTMRPixelPresentationFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_CommonCTMRPixelPresentationFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_CommonCTMRPixelPresentationImageLevel[] = {
	"COLOR",	"",
	"MONOCHROME",	"",
	"MIXED",	"",
	"TRUE_COLOR",	"",
	0,0
};

char *
StringValueDescription_CommonCTMRPixelPresentationImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_CommonCTMRPixelPresentationImageLevel,value);
}

static struct StringValueEntry
StringValueTable_PixelPresentationTrueColor[] = {
	"TRUE_COLOR",	"",
	0,0
};

char *
StringValueDescription_PixelPresentationTrueColor(char * value)
{
	return StringValueDescription(StringValueTable_PixelPresentationTrueColor,value);
}

static struct StringValueEntry
StringValueTable_CommonCTMRVolumetricPropertiesFrameLevel[] = {
	"VOLUME",	"",
	"SAMPLED",	"",
	"DISTORTED",	"",
	0,0
};

char *
StringValueDescription_CommonCTMRVolumetricPropertiesFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_CommonCTMRVolumetricPropertiesFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_CommonCTMRVolumetricPropertiesImageLevel[] = {
	"VOLUME",	"",
	"SAMPLED",	"",
	"DISTORTED",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_CommonCTMRVolumetricPropertiesImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_CommonCTMRVolumetricPropertiesImageLevel,value);
}

static struct StringValueEntry
StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueFrameLevel[] = {
	"MAX_IP",	"",
	"MIN_IP",	"",
	"VOLUME_RENDER",	"",
	"SURFACE_RENDER",	"",
	"MPR",	"",
	"CURVED_MPR",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_CommonCTMRVolumeBasedCalculationTechniqueFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueImageLevel[] = {
	"MAX_IP",	"",
	"MIN_IP",	"",
	"VOLUME_RENDER",	"",
	"SURFACE_RENDER",	"",
	"MPR",	"",
	"CURVED_MPR",	"",
	"NONE",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_CommonCTMRVolumeBasedCalculationTechniqueImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueImageLevel,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyVolumeBasedCalculationTechniqueFrameLevel[] = {
	"MAX_IP",	"",
	"MIN_IP",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyVolumeBasedCalculationTechniqueFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyVolumeBasedCalculationTechniqueFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyVolumeBasedCalculationTechniqueImageLevel[] = {
	"MAX_IP",	"",
	"MIN_IP",	"",
	"NONE",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyVolumeBasedCalculationTechniqueImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyVolumeBasedCalculationTechniqueImageLevel,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRComplexImageComponentFrameLevel[] = {
	"MAGNITUDE",	"",
	"PHASE",	"",
	"REAL",	"",
	"IMAGINARY",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRComplexImageComponentFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRComplexImageComponentFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRComplexImageComponentImageLevel[] = {
	"MAGNITUDE",	"",
	"PHASE",	"",
	"REAL",	"",
	"IMAGINARY",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRComplexImageComponentImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRComplexImageComponentImageLevel,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyComplexImageComponentFrameLevel[] = {
	"MAGNITUDE",	"",
	"PHASE",	"",
	"REAL",	"",
	"IMAGINARY",	"",
	"COMPLEX",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyComplexImageComponentFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyComplexImageComponentFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyComplexImageComponentImageLevel[] = {
	"MAGNITUDE",	"",
	"PHASE",	"",
	"REAL",	"",
	"IMAGINARY",	"",
	"COMPLEX",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyComplexImageComponentImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyComplexImageComponentImageLevel,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRAcquisitionContrastFrameLevel[] = {
	"DIFFUSION",	"",
	"FLOW_ENCODED",	"",
	"FLUID_ATTENUATED",	"",
	"PERFUSION",	"",
	"PROTON_DENSITY",	"",
	"STIR",	"",
	"TAGGING",	"",
	"T1",	"",
	"T2",	"",
	"T2_STAR",	"",
	"TOF",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRAcquisitionContrastFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRAcquisitionContrastFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRAcquisitionContrastImageLevel[] = {
	"DIFFUSION",	"",
	"FLOW_ENCODED",	"",
	"FLUID_ATTENUATED",	"",
	"PERFUSION",	"",
	"PROTON_DENSITY",	"",
	"STIR",	"",
	"TAGGING",	"",
	"T1",	"",
	"T2",	"",
	"T2_STAR",	"",
	"TOF",	"",
	"UNKNOWN",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRAcquisitionContrastImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRAcquisitionContrastImageLevel,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyAcquisitionContrastFrameLevel[] = {
	"PROTON_DENSITY",	"",
	"T1",	"",
	"T2",	"",
	"UNKNOWN",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyAcquisitionContrastFrameLevel(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyAcquisitionContrastFrameLevel,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyAcquisitionContrastImageLevel[] = {
	"PROTON_DENSITY",	"",
	"T1",	"",
	"T2",	"",
	"UNKNOWN",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyAcquisitionContrastImageLevel(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyAcquisitionContrastImageLevel,value);
}

static struct StringValueEntry
StringValueTable_EnhancedMRAcquisitionType[] = {
	"1D",	"",
	"2D",	"",
	"3D",	"",
	0,0
};

char *
StringValueDescription_EnhancedMRAcquisitionType(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedMRAcquisitionType,value);
}

static struct StringValueEntry
StringValueTable_EchoPulseSequence[] = {
	"SPIN",	"",
	"GRADIENT",	"",
	"BOTH",	"",
	0,0
};

char *
StringValueDescription_EchoPulseSequence(char * value)
{
	return StringValueDescription(StringValueTable_EchoPulseSequence,value);
}

static struct StringValueEntry
StringValueTable_SteadyStatePulseSequence[] = {
	"FREE_PRECESSION",	"",
	"TRANSVERSE",	"",
	"TIME_REVERSED",	"",
	"LONGITUDINAL",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_SteadyStatePulseSequence(char * value)
{
	return StringValueDescription(StringValueTable_SteadyStatePulseSequence,value);
}

static struct StringValueEntry
StringValueTable_SpectrallySelectedSuppression[] = {
	"FAT",	"",
	"WATER",	"",
	"FAT_AND_WATER",	"",
	"SILICON_GEL",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_SpectrallySelectedSuppression(char * value)
{
	return StringValueDescription(StringValueTable_SpectrallySelectedSuppression,value);
}

static struct StringValueEntry
StringValueTable_OversamplingPhase[] = {
	"2D",	"phase direction",
	"3D",	"out of plane direction",
	"2D_3D",	"both",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_OversamplingPhase(char * value)
{
	return StringValueDescription(StringValueTable_OversamplingPhase,value);
}

static struct StringValueEntry
StringValueTable_GeometryOfKSpaceTraversal[] = {
	"RECTILINEAR",	"",
	"RADIAL",	"",
	"SPIRAL",	"",
	0,0
};

char *
StringValueDescription_GeometryOfKSpaceTraversal(char * value)
{
	return StringValueDescription(StringValueTable_GeometryOfKSpaceTraversal,value);
}

static struct StringValueEntry
StringValueTable_RectilinearPhaseEncodeReordering[] = {
	"LINEAR",	"",
	"CENTRIC",	"",
	"SEGMENTED",	"",
	"REVERSE_LINEAR",	"",
	"REVERSE_CENTRIC",	"",
	0,0
};

char *
StringValueDescription_RectilinearPhaseEncodeReordering(char * value)
{
	return StringValueDescription(StringValueTable_RectilinearPhaseEncodeReordering,value);
}

static struct StringValueEntry
StringValueTable_SegmentedKSpaceTraversal[] = {
	"SINGLE",	"",
	"PARTIAL",	"",
	"FULL",	"",
	0,0
};

char *
StringValueDescription_SegmentedKSpaceTraversal(char * value)
{
	return StringValueDescription(StringValueTable_SegmentedKSpaceTraversal,value);
}

static struct StringValueEntry
StringValueTable_CoverageOfKSpace[] = {
	"FULL",	"",
	"CYLINDRICAL",	"",
	"ELLIPSOIDAL",	"",
	"WEIGHTED",	"",
	0,0
};

char *
StringValueDescription_CoverageOfKSpace(char * value)
{
	return StringValueDescription(StringValueTable_CoverageOfKSpace,value);
}

static struct StringValueEntry
StringValueTable_SpecificAbsorptionRateDefinition[] = {
	"IEC_WHOLE_BODY",	"",
	"IEC_PARTIAL_BODY",	"",
	"IEC_HEAD",	"",
	"IEC_LOCAL",	"",
	0,0
};

char *
StringValueDescription_SpecificAbsorptionRateDefinition(char * value)
{
	return StringValueDescription(StringValueTable_SpecificAbsorptionRateDefinition,value);
}

static struct StringValueEntry
StringValueTable_GradientOutputType[] = {
	"DB_DT",	"",
	"ELECTRIC_FIELD",	"",
	"PER_NERVE_STIM",	"",
	0,0
};

char *
StringValueDescription_GradientOutputType(char * value)
{
	return StringValueDescription(StringValueTable_GradientOutputType,value);
}

static struct StringValueEntry
StringValueTable_OperatingModeType[] = {
	"STATIC FIELD",	"",
	"RF",	"",
	"GRADIENT",	"",
	0,0
};

char *
StringValueDescription_OperatingModeType(char * value)
{
	return StringValueDescription(StringValueTable_OperatingModeType,value);
}

static struct StringValueEntry
StringValueTable_OperatingMode[] = {
	"IEC_NORMAL",	"",
	"IEC_FIRST_LEVEL",	"",
	"IEC_SECOND_LEVEL",	"",
	0,0
};

char *
StringValueDescription_OperatingMode(char * value)
{
	return StringValueDescription(StringValueTable_OperatingMode,value);
}

static struct StringValueEntry
StringValueTable_InplanePhaseEncodingDirection[] = {
	"COLUMN",	"",
	"ROW",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_InplanePhaseEncodingDirection(char * value)
{
	return StringValueDescription(StringValueTable_InplanePhaseEncodingDirection,value);
}

static struct StringValueEntry
StringValueTable_FlowCompensation[] = {
	"ACCELERATION",	"",
	"VELOCITY",	"",
	"OTHER",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_FlowCompensation(char * value)
{
	return StringValueDescription(StringValueTable_FlowCompensation,value);
}

static struct StringValueEntry
StringValueTable_FlowCompensationDirection[] = {
	"PHASE",	"",
	"FREQUENCY",	"",
	"SLICE_SELECT",	"",
	"SLICE_AND_FREQ",	"",
	"SLICE_FREQ_PHASE",	"",
	"PHASE_AND_FREQ",	"",
	"SLICE_AND_PHASE",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_FlowCompensationDirection(char * value)
{
	return StringValueDescription(StringValueTable_FlowCompensationDirection,value);
}

static struct StringValueEntry
StringValueTable_Spoiling[] = {
	"RF",	"",
	"GRADIENT",	"",
	"RF_AND_GRADIENT",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_Spoiling(char * value)
{
	return StringValueDescription(StringValueTable_Spoiling,value);
}

static struct StringValueEntry
StringValueTable_SpectrallySelectedExcitation[] = {
	"WATER",	"",
	"FAT",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_SpectrallySelectedExcitation(char * value)
{
	return StringValueDescription(StringValueTable_SpectrallySelectedExcitation,value);
}

static struct StringValueEntry
StringValueTable_SpatialPresaturation[] = {
	"SLAB",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_SpatialPresaturation(char * value)
{
	return StringValueDescription(StringValueTable_SpatialPresaturation,value);
}

static struct StringValueEntry
StringValueTable_PartialFourierDirection[] = {
	"PHASE",	"",
	"FREQUENCY",	"",
	"SLICE_SELECT",	"",
	"COMBINATION",	"",
	0,0
};

char *
StringValueDescription_PartialFourierDirection(char * value)
{
	return StringValueDescription(StringValueTable_PartialFourierDirection,value);
}

static struct StringValueEntry
StringValueTable_ParallelAcquisitionTechnique[] = {
	"PILS",	"",
	"SENSE",	"",
	"SMASH",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_ParallelAcquisitionTechnique(char * value)
{
	return StringValueDescription(StringValueTable_ParallelAcquisitionTechnique,value);
}

static struct StringValueEntry
StringValueTable_MagnetizationTransfer[] = {
	"ON_RESONANCE",	"",
	"OFF_RESONANCE",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_MagnetizationTransfer(char * value)
{
	return StringValueDescription(StringValueTable_MagnetizationTransfer,value);
}

static struct StringValueEntry
StringValueTable_Tagging[] = {
	"GRID",	"",
	"LINE",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_Tagging(char * value)
{
	return StringValueDescription(StringValueTable_Tagging,value);
}

static struct StringValueEntry
StringValueTable_ReceiveCoilType[] = {
	"BODY",	"",
	"VOLUME",	"",
	"SURFACE",	"",
	"MULTICOIL",	"",
	0,0
};

char *
StringValueDescription_ReceiveCoilType(char * value)
{
	return StringValueDescription(StringValueTable_ReceiveCoilType,value);
}

static struct StringValueEntry
StringValueTable_TransmitCoilType[] = {
	"BODY",	"",
	"VOLUME",	"",
	"SURFACE",	"",
	0,0
};

char *
StringValueDescription_TransmitCoilType(char * value)
{
	return StringValueDescription(StringValueTable_TransmitCoilType,value);
}

static struct StringValueEntry
StringValueTable_DiffusionDirectionality[] = {
	"DIRECTIONAL",	"",
	"BMATRIX",	"",
	"ISOTROPIC",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_DiffusionDirectionality(char * value)
{
	return StringValueDescription(StringValueTable_DiffusionDirectionality,value);
}

static struct StringValueEntry
StringValueTable_DiffusionAnisotropyType[] = {
	"FRACTIONAL",	"",
	"RELATIVE",	"",
	"VOLUME_RATIO",	"",
	0,0
};

char *
StringValueDescription_DiffusionAnisotropyType(char * value)
{
	return StringValueDescription(StringValueTable_DiffusionAnisotropyType,value);
}

static struct StringValueEntry
StringValueTable_VolumeLocalizationTechnique[] = {
	"ILOPS",	"",
	"ISIS",	"",
	"PRIME",	"",
	"PRESS",	"",
	"SLIM",	"",
	"SLOOP",	"",
	"STEAM",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_VolumeLocalizationTechnique(char * value)
{
	return StringValueDescription(StringValueTable_VolumeLocalizationTechnique,value);
}

static struct StringValueEntry
StringValueTable_DecoupledNucleus[] = {
	"1H",	"",
	"3HE",	"",
	"7LI",	"",
	"13C",	"",
	"19F",	"",
	"23NA",	"",
	"31P",	"",
	"129XE",	"",
	0,0
};

char *
StringValueDescription_DecoupledNucleus(char * value)
{
	return StringValueDescription(StringValueTable_DecoupledNucleus,value);
}

static struct StringValueEntry
StringValueTable_DecouplingMethod[] = {
	"MLEV",	"",
	"WALTZ",	"",
	"NARROWBAND",	"",
	0,0
};

char *
StringValueDescription_DecouplingMethod(char * value)
{
	return StringValueDescription(StringValueTable_DecouplingMethod,value);
}

static struct StringValueEntry
StringValueTable_KSpaceFiltering[] = {
	"COSINE",	"",
	"COSINE_SQUARED",	"",
	"FERMI",	"",
	"GAUSSIAN",	"",
	"HAMMING",	"",
	"HANNING",	"",
	"LORENTZIAN",	"",
	"LRNTZ_GSS_TRNSFM",	"",
	"RIESZ",	"",
	"TUKEY",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_KSpaceFiltering(char * value)
{
	return StringValueDescription(StringValueTable_KSpaceFiltering,value);
}

static struct StringValueEntry
StringValueTable_TimeDomainFiltering[] = {
	"COSINE",	"",
	"COSINE_SQUARED",	"",
	"EXPONENTIAL",	"",
	"GAUSSIAN",	"",
	"HAMMING",	"",
	"HANNING",	"",
	"LORENTZIAN",	"",
	"LRNTZ_GSS_TRNSFM",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_TimeDomainFiltering(char * value)
{
	return StringValueDescription(StringValueTable_TimeDomainFiltering,value);
}

static struct StringValueEntry
StringValueTable_BaselineCorrection[] = {
	"LINEAR_TILT",	"",
	"LOCAL_LINEAR_FIT",	"",
	"POLYNOMIAL_FIT",	"",
	"SINC_DECONVOLUTN",	"",
	"TIME_DOMAIN_FIT",	"",
	"SPLINE",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_BaselineCorrection(char * value)
{
	return StringValueDescription(StringValueTable_BaselineCorrection,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyAcquisitionType[] = {
	"SINGLE_VOXEL",	"",
	"ROW",	"",
	"PLANE",	"",
	"VOLUME",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyAcquisitionType(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyAcquisitionType,value);
}

static struct StringValueEntry
StringValueTable_MRSpectroscopyDataRepresentation[] = {
	"COMPLEX",	"",
	"REAL",	"",
	"IMAGINARY",	"",
	"MAGNITUDE",	"",
	0,0
};

char *
StringValueDescription_MRSpectroscopyDataRepresentation(char * value)
{
	return StringValueDescription(StringValueTable_MRSpectroscopyDataRepresentation,value);
}

static struct StringValueEntry
StringValueTable_SpectroscopySignalDomain[] = {
	"FREQUENCY",	"",
	"TIME",	"",
	0,0
};

char *
StringValueDescription_SpectroscopySignalDomain(char * value)
{
	return StringValueDescription(StringValueTable_SpectroscopySignalDomain,value);
}

static struct StringValueEntry
StringValueTable_ArterialSpinLabelingContrast[] = {
	"CONTINUOUS",	"",
	"PSEUDOCONTINUOUS",	"",
	"PULSED",	"",
	0,0
};

char *
StringValueDescription_ArterialSpinLabelingContrast(char * value)
{
	return StringValueDescription(StringValueTable_ArterialSpinLabelingContrast,value);
}

static struct StringValueEntry
StringValueTable_ASLContext[] = {
	"LABEL",	"",
	"CONTROL",	"",
	"M_ZERO_SCAN",	"",
	0,0
};

char *
StringValueDescription_ASLContext(char * value)
{
	return StringValueDescription(StringValueTable_ASLContext,value);
}

static struct StringValueEntry
StringValueTable_CTModality[] = {
	"CT",	"",
	0,0
};

char *
StringValueDescription_CTModality(char * value)
{
	return StringValueDescription(StringValueTable_CTModality,value);
}

static struct StringValueEntry
StringValueTable_EnhancedCTWindowCenterWidthExplanation[] = {
	"BRAIN",	"",
	"SOFT_TISSUE",	"",
	"LUNG",	"",
	"BONE",	"",
	0,0
};

char *
StringValueDescription_EnhancedCTWindowCenterWidthExplanation(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedCTWindowCenterWidthExplanation,value);
}

static struct StringValueEntry
StringValueTable_ContrastBolusAgentPhase[] = {
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	"IMMEDIATE",	"",
	"DYNAMIC",	"",
	"STEADY_STATE",	"",
	"DELAYED",	"",
	"ARTERIAL",	"",
	"CAPILLARY",	"",
	"VENOUS",	"",
	"PORTAL_VENOUS",	"",
	0,0
};

char *
StringValueDescription_ContrastBolusAgentPhase(char * value)
{
	return StringValueDescription(StringValueTable_ContrastBolusAgentPhase,value);
}

static struct StringValueEntry
StringValueTable_EnhancedCTImageAndFrameType3[] = {
	"ANGIO",	"",
	"CARDIAC",	"",
	"CARDIAC_GATED",	"",
	"CARDRESP_GATED",	"",
	"DYNAMIC",	"",
	"FLUOROSCOPY",	"",
	"LOCALIZER",	"",
	"MOTION",	"",
	"PERFUSION",	"",
	"PRE_CONTRAST",	"",
	"POST_CONTRAST",	"",
	"RESP_GATED",	"",
	"REST",	"",
	"STATIC",	"",
	"STRESS",	"",
	"VOLUME",	"",
	"NON_PARALLEL",	"",
	"PARALLEL",	"",
	"WHOLE_BODY",	"",
	"ATTENUATION",	"",
	"REFERENCE",	"",
	0,0
};

char *
StringValueDescription_EnhancedCTImageAndFrameType3(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedCTImageAndFrameType3,value);
}

static struct StringValueEntry
StringValueTable_EnhancedCTImageType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MASKED",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MTT",	"",
	"MULTIPLICATION",	"",
	"RCBF",	"",
	"RCBV",	"",
	"RESAMPLED",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"T_TEST",	"",
	"TTP",	"",
	"Z_SCORE",	"",
	"NONE",	"",
	"FILTERED",	"",
	"MEDIAN",	"",
	"MIXED",	"",
	"ENERGY_PROP_WT",	"",
	0,0
};

char *
StringValueDescription_EnhancedCTImageType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedCTImageType4,value);
}

static struct StringValueEntry
StringValueTable_EnhancedCTFrameType4[] = {
	"ADDITION",	"",
	"DIVISION",	"",
	"MASKED",	"",
	"MAXIMUM",	"",
	"MEAN",	"",
	"MINIMUM",	"",
	"MTT",	"",
	"MULTIPLICATION",	"",
	"RCBF",	"",
	"RCBV",	"",
	"RESAMPLED",	"",
	"STD_DEVIATION",	"",
	"SUBTRACTION",	"",
	"T_TEST",	"",
	"TTP",	"",
	"Z_SCORE",	"",
	"NONE",	"",
	"FILTERED",	"",
	"MEDIAN",	"",
	"ENERGY_PROP_WT",	"",
	0,0
};

char *
StringValueDescription_EnhancedCTFrameType4(char * value)
{
	return StringValueDescription(StringValueTable_EnhancedCTFrameType4,value);
}

static struct StringValueEntry
StringValueTable_CTAcquisitionType[] = {
	"SEQUENCED",	"",
	"SPIRAL",	"",
	"CONSTANT_ANGLE",	"",
	"STATIONARY",	"",
	"FREE",	"",
	0,0
};

char *
StringValueDescription_CTAcquisitionType(char * value)
{
	return StringValueDescription(StringValueTable_CTAcquisitionType,value);
}

static struct StringValueEntry
StringValueTable_CTReconstructionAlgorithm[] = {
	"FILTER_BACK_PROJ",	"",
	"ITERATIVE",	"",
	0,0
};

char *
StringValueDescription_CTReconstructionAlgorithm(char * value)
{
	return StringValueDescription(StringValueTable_CTReconstructionAlgorithm,value);
}

static struct StringValueEntry
StringValueTable_CTConvolutionKernelGroup[] = {
	"BRAIN",	"",
	"SOFT_TISSUE",	"",
	"LUNG",	"",
	"BONE",	"",
	"OTHER",	"",
	0,0
};

char *
StringValueDescription_CTConvolutionKernelGroup(char * value)
{
	return StringValueDescription(StringValueTable_CTConvolutionKernelGroup,value);
}

static struct StringValueEntry
StringValueTable_CTExposureModulationType[] = {
	"NONE",	"",
	0,0
};

char *
StringValueDescription_CTExposureModulationType(char * value)
{
	return StringValueDescription(StringValueTable_CTExposureModulationType,value);
}

static struct StringValueEntry
StringValueTable_CTFilterMaterial[] = {
	"MOLYBDENUM",	"",
	"ALUMINUM",	"",
	"COPPER",	"",
	"RHODIUM",	"",
	"NIOBIUM",	"",
	"EUROPIUM",	"",
	"LEAD",	"",
	"MIXED",	"",
	0,0
};

char *
StringValueDescription_CTFilterMaterial(char * value)
{
	return StringValueDescription(StringValueTable_CTFilterMaterial,value);
}

static struct StringValueEntry
StringValueTable_CTFilterType[] = {
	"WEDGE",	"",
	"BUTTERFLY",	"",
	"MULTIPLE",	"",
	"FLAT",	"",
	"SHAPED",	"",
	"NONE",	"",
	0,0
};

char *
StringValueDescription_CTFilterType(char * value)
{
	return StringValueDescription(StringValueTable_CTFilterType,value);
}

static struct StringValueEntry
StringValueTable_RescaleTypeHounsfieldUnits[] = {
	"HU",	"Hounsfield Units",
	0,0
};

char *
StringValueDescription_RescaleTypeHounsfieldUnits(char * value)
{
	return StringValueDescription(StringValueTable_RescaleTypeHounsfieldUnits,value);
}

static struct StringValueEntry
StringValueTable_MultienergySourceTechnique[] = {
	"SWITCHING_SOURCE",	"",
	"CONSTANT_SOURCE",	"",
	0,0
};

char *
StringValueDescription_MultienergySourceTechnique(char * value)
{
	return StringValueDescription(StringValueTable_MultienergySourceTechnique,value);
}

static struct StringValueEntry
StringValueTable_MultienergyDetectorType[] = {
	"INTEGRATING",	"",
	"MULTILAYER",	"",
	"PHOTON_COUNTING",	"",
	0,0
};

char *
StringValueDescription_MultienergyDetectorType(char * value)
{
	return StringValueDescription(StringValueTable_MultienergyDetectorType,value);
}

static struct StringValueEntry
StringValueTable_DecompositionMethod[] = {
	"PROJECTION_BASED",	"",
	"IMAGE_BASED",	"",
	"HYBRID",	"",
	0,0
};

char *
StringValueDescription_DecompositionMethod(char * value)
{
	return StringValueDescription(StringValueTable_DecompositionMethod,value);
}


#endif /* __Header_strvald__ */
