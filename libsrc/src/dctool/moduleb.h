// Automatically generated from template - EDITS WILL BE LOST

// Generated by module.awk with options build moduleb

#ifndef __Header_moduleb__
#define __Header_moduleb__

Macro_IconImageSequenceMacro::Macro_IconImageSequenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IconImageSequenceMacro";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PixelData = (*list)[TagFromName(PixelData)];
	if (PixelData) {
		if (PixelData->getInformationEntity() == UnknownIE) PixelData->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	PixelAspectRatio = (*list)[TagFromName(PixelAspectRatio)];
	if (PixelAspectRatio) {
		if (PixelAspectRatio->getInformationEntity() == UnknownIE) PixelAspectRatio->setInformationEntity(ie);
	}

	SmallestImagePixelValue = (*list)[TagFromName(SmallestImagePixelValue)];
	if (SmallestImagePixelValue) {
		if (SmallestImagePixelValue->getInformationEntity() == UnknownIE) SmallestImagePixelValue->setInformationEntity(ie);
	}

	LargestImagePixelValue = (*list)[TagFromName(LargestImagePixelValue)];
	if (LargestImagePixelValue) {
		if (LargestImagePixelValue->getInformationEntity() == UnknownIE) LargestImagePixelValue->setInformationEntity(ie);
	}

	RedPaletteColorLookupTableDescriptor = (*list)[TagFromName(RedPaletteColorLookupTableDescriptor)];
	if (RedPaletteColorLookupTableDescriptor) {
		if (RedPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableDescriptor = (*list)[TagFromName(GreenPaletteColorLookupTableDescriptor)];
	if (GreenPaletteColorLookupTableDescriptor) {
		if (GreenPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableDescriptor = (*list)[TagFromName(BluePaletteColorLookupTableDescriptor)];
	if (BluePaletteColorLookupTableDescriptor) {
		if (BluePaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	RedPaletteColorLookupTableData = (*list)[TagFromName(RedPaletteColorLookupTableData)];
	if (RedPaletteColorLookupTableData) {
		if (RedPaletteColorLookupTableData->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableData->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableData = (*list)[TagFromName(GreenPaletteColorLookupTableData)];
	if (GreenPaletteColorLookupTableData) {
		if (GreenPaletteColorLookupTableData->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableData->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableData = (*list)[TagFromName(BluePaletteColorLookupTableData)];
	if (BluePaletteColorLookupTableData) {
		if (BluePaletteColorLookupTableData->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableData->setInformationEntity(ie);
	}

	ICCProfile = (*list)[TagFromName(ICCProfile)];
	if (ICCProfile) {
		if (ICCProfile->getInformationEntity() == UnknownIE) ICCProfile->setInformationEntity(ie);
	}

	ColorSpace = (*list)[TagFromName(ColorSpace)];
	if (ColorSpace) {
		if (ColorSpace->getInformationEntity() == UnknownIE) ColorSpace->setInformationEntity(ie);
	}

}

Macro_BasicCodeSequenceMacro::Macro_BasicCodeSequenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BasicCodeSequenceMacro";

	CodeValue = (*list)[TagFromName(CodeValue)];
	if (CodeValue) {
		if (CodeValue->getInformationEntity() == UnknownIE) CodeValue->setInformationEntity(ie);
	}

	CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
	if (CodingSchemeDesignator) {
		if (CodingSchemeDesignator->getInformationEntity() == UnknownIE) CodingSchemeDesignator->setInformationEntity(ie);
	}

	CodingSchemeVersion = (*list)[TagFromName(CodingSchemeVersion)];
	if (CodingSchemeVersion) {
		if (CodingSchemeVersion->getInformationEntity() == UnknownIE) CodingSchemeVersion->setInformationEntity(ie);
	}

	CodeMeaning = (*list)[TagFromName(CodeMeaning)];
	if (CodeMeaning) {
		if (CodeMeaning->getInformationEntity() == UnknownIE) CodeMeaning->setInformationEntity(ie);
	}

	LongCodeValue = (*list)[TagFromName(LongCodeValue)];
	if (LongCodeValue) {
		if (LongCodeValue->getInformationEntity() == UnknownIE) LongCodeValue->setInformationEntity(ie);
	}

	URNCodeValue = (*list)[TagFromName(URNCodeValue)];
	if (URNCodeValue) {
		if (URNCodeValue->getInformationEntity() == UnknownIE) URNCodeValue->setInformationEntity(ie);
	}

}

Macro_EnhancedCodeSequenceMacro::Macro_EnhancedCodeSequenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedCodeSequenceMacro";

	ContextIdentifier = (*list)[TagFromName(ContextIdentifier)];
	if (ContextIdentifier) {
		if (ContextIdentifier->getInformationEntity() == UnknownIE) ContextIdentifier->setInformationEntity(ie);
	}

	ContextUID = (*list)[TagFromName(ContextUID)];
	if (ContextUID) {
		if (ContextUID->getInformationEntity() == UnknownIE) ContextUID->setInformationEntity(ie);
	}

	MappingResource = (*list)[TagFromName(MappingResource)];
	if (MappingResource) {
		if (MappingResource->getInformationEntity() == UnknownIE) MappingResource->setInformationEntity(ie);
	}

	MappingResourceUID = (*list)[TagFromName(MappingResourceUID)];
	if (MappingResourceUID) {
		if (MappingResourceUID->getInformationEntity() == UnknownIE) MappingResourceUID->setInformationEntity(ie);
	}

	MappingResourceName = (*list)[TagFromName(MappingResourceName)];
	if (MappingResourceName) {
		if (MappingResourceName->getInformationEntity() == UnknownIE) MappingResourceName->setInformationEntity(ie);
	}

	ContextGroupVersion = (*list)[TagFromName(ContextGroupVersion)];
	if (ContextGroupVersion) {
		if (ContextGroupVersion->getInformationEntity() == UnknownIE) ContextGroupVersion->setInformationEntity(ie);
	}

	ContextGroupExtensionFlag = (*list)[TagFromName(ContextGroupExtensionFlag)];
	if (ContextGroupExtensionFlag) {
		if (ContextGroupExtensionFlag->getInformationEntity() == UnknownIE) ContextGroupExtensionFlag->setInformationEntity(ie);
	}

	ContextGroupLocalVersion = (*list)[TagFromName(ContextGroupLocalVersion)];
	if (ContextGroupLocalVersion) {
		if (ContextGroupLocalVersion->getInformationEntity() == UnknownIE) ContextGroupLocalVersion->setInformationEntity(ie);
	}

	ContextGroupExtensionCreatorUID = (*list)[TagFromName(ContextGroupExtensionCreatorUID)];
	if (ContextGroupExtensionCreatorUID) {
		if (ContextGroupExtensionCreatorUID->getInformationEntity() == UnknownIE) ContextGroupExtensionCreatorUID->setInformationEntity(ie);
	}

}

Macro_CodeSequenceMacro::Macro_CodeSequenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CodeSequenceMacro";

	new Macro_BasicCodeSequenceMacro(list,ie);
	EquivalentCodeSequence = (*list)[TagFromName(EquivalentCodeSequence)];
	if (EquivalentCodeSequence) {
		if (EquivalentCodeSequence->getInformationEntity() == UnknownIE) EquivalentCodeSequence->setInformationEntity(ie);
	}

	new Macro_BasicCodeSequenceMacro(list,ie);
	new Macro_EnhancedCodeSequenceMacro(list,ie);
	new Macro_EnhancedCodeSequenceMacro(list,ie);
}

Macro_BasicCodeSequenceMeaningOptionalMacro::Macro_BasicCodeSequenceMeaningOptionalMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BasicCodeSequenceMeaningOptionalMacro";

	CodeValue = (*list)[TagFromName(CodeValue)];
	if (CodeValue) {
		if (CodeValue->getInformationEntity() == UnknownIE) CodeValue->setInformationEntity(ie);
	}

	CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
	if (CodingSchemeDesignator) {
		if (CodingSchemeDesignator->getInformationEntity() == UnknownIE) CodingSchemeDesignator->setInformationEntity(ie);
	}

	CodingSchemeVersion = (*list)[TagFromName(CodingSchemeVersion)];
	if (CodingSchemeVersion) {
		if (CodingSchemeVersion->getInformationEntity() == UnknownIE) CodingSchemeVersion->setInformationEntity(ie);
	}

	CodeMeaning = (*list)[TagFromName(CodeMeaning)];
	if (CodeMeaning) {
		if (CodeMeaning->getInformationEntity() == UnknownIE) CodeMeaning->setInformationEntity(ie);
	}

	LongCodeValue = (*list)[TagFromName(LongCodeValue)];
	if (LongCodeValue) {
		if (LongCodeValue->getInformationEntity() == UnknownIE) LongCodeValue->setInformationEntity(ie);
	}

	URNCodeValue = (*list)[TagFromName(URNCodeValue)];
	if (URNCodeValue) {
		if (URNCodeValue->getInformationEntity() == UnknownIE) URNCodeValue->setInformationEntity(ie);
	}

}

Macro_CodeSequenceMeaningOptionalMacro::Macro_CodeSequenceMeaningOptionalMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CodeSequenceMeaningOptionalMacro";

	new Macro_BasicCodeSequenceMeaningOptionalMacro(list,ie);
	EquivalentCodeSequence = (*list)[TagFromName(EquivalentCodeSequence)];
	if (EquivalentCodeSequence) {
		if (EquivalentCodeSequence->getInformationEntity() == UnknownIE) EquivalentCodeSequence->setInformationEntity(ie);
	}

	new Macro_BasicCodeSequenceMacro(list,ie);
	new Macro_EnhancedCodeSequenceMacro(list,ie);
	new Macro_EnhancedCodeSequenceMacro(list,ie);
}

Macro_PersonIdentificationMacro::Macro_PersonIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PersonIdentificationMacro";

	PersonIdentificationCodeSequence = (*list)[TagFromName(PersonIdentificationCodeSequence)];
	if (PersonIdentificationCodeSequence) {
		if (PersonIdentificationCodeSequence->getInformationEntity() == UnknownIE) PersonIdentificationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	PersonAddress = (*list)[TagFromName(PersonAddress)];
	if (PersonAddress) {
		if (PersonAddress->getInformationEntity() == UnknownIE) PersonAddress->setInformationEntity(ie);
	}

	PersonTelephoneNumbers = (*list)[TagFromName(PersonTelephoneNumbers)];
	if (PersonTelephoneNumbers) {
		if (PersonTelephoneNumbers->getInformationEntity() == UnknownIE) PersonTelephoneNumbers->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
	if (InstitutionAddress) {
		if (InstitutionAddress->getInformationEntity() == UnknownIE) InstitutionAddress->setInformationEntity(ie);
	}

	InstitutionCodeSequence = (*list)[TagFromName(InstitutionCodeSequence)];
	if (InstitutionCodeSequence) {
		if (InstitutionCodeSequence->getInformationEntity() == UnknownIE) InstitutionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
	if (InstitutionalDepartmentName) {
		if (InstitutionalDepartmentName->getInformationEntity() == UnknownIE) InstitutionalDepartmentName->setInformationEntity(ie);
	}

	InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
	if (InstitutionalDepartmentTypeCodeSequence) {
		if (InstitutionalDepartmentTypeCodeSequence->getInformationEntity() == UnknownIE) InstitutionalDepartmentTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_ContentItemMacro::Macro_ContentItemMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContentItemMacro";

	ValueType = (*list)[TagFromName(ValueType)];
	if (ValueType) {
		if (ValueType->getInformationEntity() == UnknownIE) ValueType->setInformationEntity(ie);
	}

	ObservationDateTime = (*list)[TagFromName(ObservationDateTime)];
	if (ObservationDateTime) {
		if (ObservationDateTime->getInformationEntity() == UnknownIE) ObservationDateTime->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	DateTime = (*list)[TagFromName(DateTime)];
	if (DateTime) {
		if (DateTime->getInformationEntity() == UnknownIE) DateTime->setInformationEntity(ie);
	}

	Date = (*list)[TagFromName(Date)];
	if (Date) {
		if (Date->getInformationEntity() == UnknownIE) Date->setInformationEntity(ie);
	}

	Time = (*list)[TagFromName(Time)];
	if (Time) {
		if (Time->getInformationEntity() == UnknownIE) Time->setInformationEntity(ie);
	}

	PersonName = (*list)[TagFromName(PersonName)];
	if (PersonName) {
		if (PersonName->getInformationEntity() == UnknownIE) PersonName->setInformationEntity(ie);
	}

	UID = (*list)[TagFromName(UID)];
	if (UID) {
		if (UID->getInformationEntity() == UnknownIE) UID->setInformationEntity(ie);
	}

	TextValue = (*list)[TagFromName(TextValue)];
	if (TextValue) {
		if (TextValue->getInformationEntity() == UnknownIE) TextValue->setInformationEntity(ie);
	}

	ConceptCodeSequence = (*list)[TagFromName(ConceptCodeSequence)];
	if (ConceptCodeSequence) {
		if (ConceptCodeSequence->getInformationEntity() == UnknownIE) ConceptCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	NumericValue = (*list)[TagFromName(NumericValue)];
	if (NumericValue) {
		if (NumericValue->getInformationEntity() == UnknownIE) NumericValue->setInformationEntity(ie);
	}

	FloatingPointValue = (*list)[TagFromName(FloatingPointValue)];
	if (FloatingPointValue) {
		if (FloatingPointValue->getInformationEntity() == UnknownIE) FloatingPointValue->setInformationEntity(ie);
	}

	RationalNumeratorValue = (*list)[TagFromName(RationalNumeratorValue)];
	if (RationalNumeratorValue) {
		if (RationalNumeratorValue->getInformationEntity() == UnknownIE) RationalNumeratorValue->setInformationEntity(ie);
	}

	RationalDenominatorValue = (*list)[TagFromName(RationalDenominatorValue)];
	if (RationalDenominatorValue) {
		if (RationalDenominatorValue->getInformationEntity() == UnknownIE) RationalDenominatorValue->setInformationEntity(ie);
	}

	MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
	if (MeasurementUnitsCodeSequence) {
		if (MeasurementUnitsCodeSequence->getInformationEntity() == UnknownIE) MeasurementUnitsCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_ContentItemWithModifiersMacro::Macro_ContentItemWithModifiersMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContentItemWithModifiersMacro";

	new Macro_ContentItemMacro(list,ie);
	ContentItemModifierSequence = (*list)[TagFromName(ContentItemModifierSequence)];
	if (ContentItemModifierSequence) {
		if (ContentItemModifierSequence->getInformationEntity() == UnknownIE) ContentItemModifierSequence->setInformationEntity(ie);
	}

	new Macro_ContentItemMacro(list,ie);
}

Macro_ImageSOPInstanceReferenceMacro::Macro_ImageSOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageSOPInstanceReferenceMacro";

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
	if (ReferencedFrameNumber) {
		if (ReferencedFrameNumber->getInformationEntity() == UnknownIE) ReferencedFrameNumber->setInformationEntity(ie);
	}

	ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
	if (ReferencedSegmentNumber) {
		if (ReferencedSegmentNumber->getInformationEntity() == UnknownIE) ReferencedSegmentNumber->setInformationEntity(ie);
	}

}

Macro_ReferencedInstancesAndAccessMacro::Macro_ReferencedInstancesAndAccessMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ReferencedInstancesAndAccessMacro";

	TypeOfInstances = (*list)[TagFromName(TypeOfInstances)];
	if (TypeOfInstances) {
		if (TypeOfInstances->getInformationEntity() == UnknownIE) TypeOfInstances->setInformationEntity(ie);
	}

	StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
	if (StudyInstanceUID) {
		if (StudyInstanceUID->getInformationEntity() == UnknownIE) StudyInstanceUID->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	DICOMRetrievalSequence = (*list)[TagFromName(DICOMRetrievalSequence)];
	if (DICOMRetrievalSequence) {
		if (DICOMRetrievalSequence->getInformationEntity() == UnknownIE) DICOMRetrievalSequence->setInformationEntity(ie);
	}

	DICOMMediaRetrievalSequence = (*list)[TagFromName(DICOMMediaRetrievalSequence)];
	if (DICOMMediaRetrievalSequence) {
		if (DICOMMediaRetrievalSequence->getInformationEntity() == UnknownIE) DICOMMediaRetrievalSequence->setInformationEntity(ie);
	}

	WADORetrievalSequence = (*list)[TagFromName(WADORetrievalSequence)];
	if (WADORetrievalSequence) {
		if (WADORetrievalSequence->getInformationEntity() == UnknownIE) WADORetrievalSequence->setInformationEntity(ie);
	}

	XDSRetrievalSequence = (*list)[TagFromName(XDSRetrievalSequence)];
	if (XDSRetrievalSequence) {
		if (XDSRetrievalSequence->getInformationEntity() == UnknownIE) XDSRetrievalSequence->setInformationEntity(ie);
	}

	WADORSRetrievalSequence = (*list)[TagFromName(WADORSRetrievalSequence)];
	if (WADORSRetrievalSequence) {
		if (WADORSRetrievalSequence->getInformationEntity() == UnknownIE) WADORSRetrievalSequence->setInformationEntity(ie);
	}

}

Macro_SeriesAndInstanceReferenceMacro::Macro_SeriesAndInstanceReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SeriesAndInstanceReferenceMacro";

	ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
	if (ReferencedSeriesSequence) {
		if (ReferencedSeriesSequence->getInformationEntity() == UnknownIE) ReferencedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_PrimaryAnatomicStructureMacro::Macro_PrimaryAnatomicStructureMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PrimaryAnatomicStructureMacro";

	PrimaryAnatomicStructureSequence = (*list)[TagFromName(PrimaryAnatomicStructureSequence)];
	if (PrimaryAnatomicStructureSequence) {
		if (PrimaryAnatomicStructureSequence->getInformationEntity() == UnknownIE) PrimaryAnatomicStructureSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_GeneralAnatomyMandatoryMacro::Macro_GeneralAnatomyMandatoryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralAnatomyMandatoryMacro";

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PrimaryAnatomicStructureMacro(list,ie);
	AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
	if (AnatomicRegionModifierSequence) {
		if (AnatomicRegionModifierSequence->getInformationEntity() == UnknownIE) AnatomicRegionModifierSequence->setInformationEntity(ie);
	}

	PrimaryAnatomicStructureModifierSequence = (*list)[TagFromName(PrimaryAnatomicStructureModifierSequence)];
	if (PrimaryAnatomicStructureModifierSequence) {
		if (PrimaryAnatomicStructureModifierSequence->getInformationEntity() == UnknownIE) PrimaryAnatomicStructureModifierSequence->setInformationEntity(ie);
	}

}

Macro_GeneralAnatomyRequiredMacro::Macro_GeneralAnatomyRequiredMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralAnatomyRequiredMacro";

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PrimaryAnatomicStructureMacro(list,ie);
	AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
	if (AnatomicRegionModifierSequence) {
		if (AnatomicRegionModifierSequence->getInformationEntity() == UnknownIE) AnatomicRegionModifierSequence->setInformationEntity(ie);
	}

	PrimaryAnatomicStructureModifierSequence = (*list)[TagFromName(PrimaryAnatomicStructureModifierSequence)];
	if (PrimaryAnatomicStructureModifierSequence) {
		if (PrimaryAnatomicStructureModifierSequence->getInformationEntity() == UnknownIE) PrimaryAnatomicStructureModifierSequence->setInformationEntity(ie);
	}

}

Macro_GeneralAnatomyOptionalMacro::Macro_GeneralAnatomyOptionalMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralAnatomyOptionalMacro";

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PrimaryAnatomicStructureMacro(list,ie);
	AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
	if (AnatomicRegionModifierSequence) {
		if (AnatomicRegionModifierSequence->getInformationEntity() == UnknownIE) AnatomicRegionModifierSequence->setInformationEntity(ie);
	}

	PrimaryAnatomicStructureModifierSequence = (*list)[TagFromName(PrimaryAnatomicStructureModifierSequence)];
	if (PrimaryAnatomicStructureModifierSequence) {
		if (PrimaryAnatomicStructureModifierSequence->getInformationEntity() == UnknownIE) PrimaryAnatomicStructureModifierSequence->setInformationEntity(ie);
	}

}

Macro_RequestAttributesMacro::Macro_RequestAttributesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RequestAttributesMacro";

	RequestedProcedureID = (*list)[TagFromName(RequestedProcedureID)];
	if (RequestedProcedureID) {
		if (RequestedProcedureID->getInformationEntity() == UnknownIE) RequestedProcedureID->setInformationEntity(ie);
	}

	AccessionNumber = (*list)[TagFromName(AccessionNumber)];
	if (AccessionNumber) {
		if (AccessionNumber->getInformationEntity() == UnknownIE) AccessionNumber->setInformationEntity(ie);
	}

	IssuerOfAccessionNumberSequence = (*list)[TagFromName(IssuerOfAccessionNumberSequence)];
	if (IssuerOfAccessionNumberSequence) {
		if (IssuerOfAccessionNumberSequence->getInformationEntity() == UnknownIE) IssuerOfAccessionNumberSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
	if (StudyInstanceUID) {
		if (StudyInstanceUID->getInformationEntity() == UnknownIE) StudyInstanceUID->setInformationEntity(ie);
	}

	ReferencedStudySequence = (*list)[TagFromName(ReferencedStudySequence)];
	if (ReferencedStudySequence) {
		if (ReferencedStudySequence->getInformationEntity() == UnknownIE) ReferencedStudySequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	RequestedProcedureDescription = (*list)[TagFromName(RequestedProcedureDescription)];
	if (RequestedProcedureDescription) {
		if (RequestedProcedureDescription->getInformationEntity() == UnknownIE) RequestedProcedureDescription->setInformationEntity(ie);
	}

	RequestedProcedureCodeSequence = (*list)[TagFromName(RequestedProcedureCodeSequence)];
	if (RequestedProcedureCodeSequence) {
		if (RequestedProcedureCodeSequence->getInformationEntity() == UnknownIE) RequestedProcedureCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReasonForTheRequestedProcedure = (*list)[TagFromName(ReasonForTheRequestedProcedure)];
	if (ReasonForTheRequestedProcedure) {
		if (ReasonForTheRequestedProcedure->getInformationEntity() == UnknownIE) ReasonForTheRequestedProcedure->setInformationEntity(ie);
	}

	ReasonForRequestedProcedureCodeSequence = (*list)[TagFromName(ReasonForRequestedProcedureCodeSequence)];
	if (ReasonForRequestedProcedureCodeSequence) {
		if (ReasonForRequestedProcedureCodeSequence->getInformationEntity() == UnknownIE) ReasonForRequestedProcedureCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ScheduledProcedureStepID = (*list)[TagFromName(ScheduledProcedureStepID)];
	if (ScheduledProcedureStepID) {
		if (ScheduledProcedureStepID->getInformationEntity() == UnknownIE) ScheduledProcedureStepID->setInformationEntity(ie);
	}

	ScheduledProcedureStepDescription = (*list)[TagFromName(ScheduledProcedureStepDescription)];
	if (ScheduledProcedureStepDescription) {
		if (ScheduledProcedureStepDescription->getInformationEntity() == UnknownIE) ScheduledProcedureStepDescription->setInformationEntity(ie);
	}

	ScheduledProtocolCodeSequence = (*list)[TagFromName(ScheduledProtocolCodeSequence)];
	if (ScheduledProtocolCodeSequence) {
		if (ScheduledProtocolCodeSequence->getInformationEntity() == UnknownIE) ScheduledProtocolCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
}

Macro_BasicPixelSpacingCalibrationMacro::Macro_BasicPixelSpacingCalibrationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BasicPixelSpacingCalibrationMacro";

	PixelSpacing = (*list)[TagFromName(PixelSpacing)];
	if (PixelSpacing) {
		if (PixelSpacing->getInformationEntity() == UnknownIE) PixelSpacing->setInformationEntity(ie);
	}

	PixelSpacingCalibrationType = (*list)[TagFromName(PixelSpacingCalibrationType)];
	if (PixelSpacingCalibrationType) {
		if (PixelSpacingCalibrationType->getInformationEntity() == UnknownIE) PixelSpacingCalibrationType->setInformationEntity(ie);
	}

	PixelSpacingCalibrationDescription = (*list)[TagFromName(PixelSpacingCalibrationDescription)];
	if (PixelSpacingCalibrationDescription) {
		if (PixelSpacingCalibrationDescription->getInformationEntity() == UnknownIE) PixelSpacingCalibrationDescription->setInformationEntity(ie);
	}

}

Macro_SOPInstanceReferenceMacro::Macro_SOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SOPInstanceReferenceMacro";

	ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
	if (ReferencedSOPClassUID) {
		if (ReferencedSOPClassUID->getInformationEntity() == UnknownIE) ReferencedSOPClassUID->setInformationEntity(ie);
	}

	ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
	if (ReferencedSOPInstanceUID) {
		if (ReferencedSOPInstanceUID->getInformationEntity() == UnknownIE) ReferencedSOPInstanceUID->setInformationEntity(ie);
	}

}

Macro_DisplayShutterMacro::Macro_DisplayShutterMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DisplayShutterMacro";

	ShutterShape = (*list)[TagFromName(ShutterShape)];
	if (ShutterShape) {
		if (ShutterShape->getInformationEntity() == UnknownIE) ShutterShape->setInformationEntity(ie);
	}

	ShutterLeftVerticalEdge = (*list)[TagFromName(ShutterLeftVerticalEdge)];
	if (ShutterLeftVerticalEdge) {
		if (ShutterLeftVerticalEdge->getInformationEntity() == UnknownIE) ShutterLeftVerticalEdge->setInformationEntity(ie);
	}

	ShutterRightVerticalEdge = (*list)[TagFromName(ShutterRightVerticalEdge)];
	if (ShutterRightVerticalEdge) {
		if (ShutterRightVerticalEdge->getInformationEntity() == UnknownIE) ShutterRightVerticalEdge->setInformationEntity(ie);
	}

	ShutterUpperHorizontalEdge = (*list)[TagFromName(ShutterUpperHorizontalEdge)];
	if (ShutterUpperHorizontalEdge) {
		if (ShutterUpperHorizontalEdge->getInformationEntity() == UnknownIE) ShutterUpperHorizontalEdge->setInformationEntity(ie);
	}

	ShutterLowerHorizontalEdge = (*list)[TagFromName(ShutterLowerHorizontalEdge)];
	if (ShutterLowerHorizontalEdge) {
		if (ShutterLowerHorizontalEdge->getInformationEntity() == UnknownIE) ShutterLowerHorizontalEdge->setInformationEntity(ie);
	}

	CenterOfCircularShutter = (*list)[TagFromName(CenterOfCircularShutter)];
	if (CenterOfCircularShutter) {
		if (CenterOfCircularShutter->getInformationEntity() == UnknownIE) CenterOfCircularShutter->setInformationEntity(ie);
	}

	RadiusOfCircularShutter = (*list)[TagFromName(RadiusOfCircularShutter)];
	if (RadiusOfCircularShutter) {
		if (RadiusOfCircularShutter->getInformationEntity() == UnknownIE) RadiusOfCircularShutter->setInformationEntity(ie);
	}

	VerticesOfThePolygonalShutter = (*list)[TagFromName(VerticesOfThePolygonalShutter)];
	if (VerticesOfThePolygonalShutter) {
		if (VerticesOfThePolygonalShutter->getInformationEntity() == UnknownIE) VerticesOfThePolygonalShutter->setInformationEntity(ie);
	}

	ShutterPresentationValue = (*list)[TagFromName(ShutterPresentationValue)];
	if (ShutterPresentationValue) {
		if (ShutterPresentationValue->getInformationEntity() == UnknownIE) ShutterPresentationValue->setInformationEntity(ie);
	}

	ShutterPresentationColorCIELabValue = (*list)[TagFromName(ShutterPresentationColorCIELabValue)];
	if (ShutterPresentationColorCIELabValue) {
		if (ShutterPresentationColorCIELabValue->getInformationEntity() == UnknownIE) ShutterPresentationColorCIELabValue->setInformationEntity(ie);
	}

}

Macro_ContentIdentificationMacro::Macro_ContentIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContentIdentificationMacro";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentLabel = (*list)[TagFromName(ContentLabel)];
	if (ContentLabel) {
		if (ContentLabel->getInformationEntity() == UnknownIE) ContentLabel->setInformationEntity(ie);
	}

	ContentDescription = (*list)[TagFromName(ContentDescription)];
	if (ContentDescription) {
		if (ContentDescription->getInformationEntity() == UnknownIE) ContentDescription->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	AlternateContentDescriptionSequence = (*list)[TagFromName(AlternateContentDescriptionSequence)];
	if (AlternateContentDescriptionSequence) {
		if (AlternateContentDescriptionSequence->getInformationEntity() == UnknownIE) AlternateContentDescriptionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ContentCreatorName = (*list)[TagFromName(ContentCreatorName)];
	if (ContentCreatorName) {
		if (ContentCreatorName->getInformationEntity() == UnknownIE) ContentCreatorName->setInformationEntity(ie);
	}

	ContentCreatorIdentificationCodeSequence = (*list)[TagFromName(ContentCreatorIdentificationCodeSequence)];
	if (ContentCreatorIdentificationCodeSequence) {
		if (ContentCreatorIdentificationCodeSequence->getInformationEntity() == UnknownIE) ContentCreatorIdentificationCodeSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
}

Macro_HL7v2HierarchicDesignatorMacro::Macro_HL7v2HierarchicDesignatorMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HL7v2HierarchicDesignatorMacro";

	LocalNamespaceEntityID = (*list)[TagFromName(LocalNamespaceEntityID)];
	if (LocalNamespaceEntityID) {
		if (LocalNamespaceEntityID->getInformationEntity() == UnknownIE) LocalNamespaceEntityID->setInformationEntity(ie);
	}

	UniversalEntityID = (*list)[TagFromName(UniversalEntityID)];
	if (UniversalEntityID) {
		if (UniversalEntityID->getInformationEntity() == UnknownIE) UniversalEntityID->setInformationEntity(ie);
	}

	UniversalEntityIDType = (*list)[TagFromName(UniversalEntityIDType)];
	if (UniversalEntityIDType) {
		if (UniversalEntityIDType->getInformationEntity() == UnknownIE) UniversalEntityIDType->setInformationEntity(ie);
	}

}

Macro_IssuerOfPatientIDMacro::Macro_IssuerOfPatientIDMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IssuerOfPatientIDMacro";

	IssuerOfPatientID = (*list)[TagFromName(IssuerOfPatientID)];
	if (IssuerOfPatientID) {
		if (IssuerOfPatientID->getInformationEntity() == UnknownIE) IssuerOfPatientID->setInformationEntity(ie);
	}

	IssuerOfPatientIDQualifiersSequence = (*list)[TagFromName(IssuerOfPatientIDQualifiersSequence)];
	if (IssuerOfPatientIDQualifiersSequence) {
		if (IssuerOfPatientIDQualifiersSequence->getInformationEntity() == UnknownIE) IssuerOfPatientIDQualifiersSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_AlgorithmIdentificationMacro::Macro_AlgorithmIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "AlgorithmIdentificationMacro";

	AlgorithmFamilyCodeSequence = (*list)[TagFromName(AlgorithmFamilyCodeSequence)];
	if (AlgorithmFamilyCodeSequence) {
		if (AlgorithmFamilyCodeSequence->getInformationEntity() == UnknownIE) AlgorithmFamilyCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	AlgorithmNameCodeSequence = (*list)[TagFromName(AlgorithmNameCodeSequence)];
	if (AlgorithmNameCodeSequence) {
		if (AlgorithmNameCodeSequence->getInformationEntity() == UnknownIE) AlgorithmNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	AlgorithmName = (*list)[TagFromName(AlgorithmName)];
	if (AlgorithmName) {
		if (AlgorithmName->getInformationEntity() == UnknownIE) AlgorithmName->setInformationEntity(ie);
	}

	AlgorithmVersion = (*list)[TagFromName(AlgorithmVersion)];
	if (AlgorithmVersion) {
		if (AlgorithmVersion->getInformationEntity() == UnknownIE) AlgorithmVersion->setInformationEntity(ie);
	}

	AlgorithmParameters = (*list)[TagFromName(AlgorithmParameters)];
	if (AlgorithmParameters) {
		if (AlgorithmParameters->getInformationEntity() == UnknownIE) AlgorithmParameters->setInformationEntity(ie);
	}

	AlgorithmSource = (*list)[TagFromName(AlgorithmSource)];
	if (AlgorithmSource) {
		if (AlgorithmSource->getInformationEntity() == UnknownIE) AlgorithmSource->setInformationEntity(ie);
	}

}

Macro_SelectorAttributeMacro::Macro_SelectorAttributeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SelectorAttributeMacro";

	SelectorAttribute = (*list)[TagFromName(SelectorAttribute)];
	if (SelectorAttribute) {
		if (SelectorAttribute->getInformationEntity() == UnknownIE) SelectorAttribute->setInformationEntity(ie);
	}

	SelectorValueNumber = (*list)[TagFromName(SelectorValueNumber)];
	if (SelectorValueNumber) {
		if (SelectorValueNumber->getInformationEntity() == UnknownIE) SelectorValueNumber->setInformationEntity(ie);
	}

	SelectorSequencePointer = (*list)[TagFromName(SelectorSequencePointer)];
	if (SelectorSequencePointer) {
		if (SelectorSequencePointer->getInformationEntity() == UnknownIE) SelectorSequencePointer->setInformationEntity(ie);
	}

	SelectorSequencePointerPrivateCreator = (*list)[TagFromName(SelectorSequencePointerPrivateCreator)];
	if (SelectorSequencePointerPrivateCreator) {
		if (SelectorSequencePointerPrivateCreator->getInformationEntity() == UnknownIE) SelectorSequencePointerPrivateCreator->setInformationEntity(ie);
	}

	SelectorSequencePointerItems = (*list)[TagFromName(SelectorSequencePointerItems)];
	if (SelectorSequencePointerItems) {
		if (SelectorSequencePointerItems->getInformationEntity() == UnknownIE) SelectorSequencePointerItems->setInformationEntity(ie);
	}

	SelectorAttributePrivateCreator = (*list)[TagFromName(SelectorAttributePrivateCreator)];
	if (SelectorAttributePrivateCreator) {
		if (SelectorAttributePrivateCreator->getInformationEntity() == UnknownIE) SelectorAttributePrivateCreator->setInformationEntity(ie);
	}

}

Macro_ExtendedSelectorAttributeMacro::Macro_ExtendedSelectorAttributeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ExtendedSelectorAttributeMacro";

	SelectorAttributeName = (*list)[TagFromName(SelectorAttributeName)];
	if (SelectorAttributeName) {
		if (SelectorAttributeName->getInformationEntity() == UnknownIE) SelectorAttributeName->setInformationEntity(ie);
	}

	SelectorAttributeKeyword = (*list)[TagFromName(SelectorAttributeKeyword)];
	if (SelectorAttributeKeyword) {
		if (SelectorAttributeKeyword->getInformationEntity() == UnknownIE) SelectorAttributeKeyword->setInformationEntity(ie);
	}

	SelectorAttributeVR = (*list)[TagFromName(SelectorAttributeVR)];
	if (SelectorAttributeVR) {
		if (SelectorAttributeVR->getInformationEntity() == UnknownIE) SelectorAttributeVR->setInformationEntity(ie);
	}

	new Macro_SelectorAttributeMacro(list,ie);
}

Macro_DataSetIdentificationMacro::Macro_DataSetIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DataSetIdentificationMacro";

	DataSetName = (*list)[TagFromName(DataSetName)];
	if (DataSetName) {
		if (DataSetName->getInformationEntity() == UnknownIE) DataSetName->setInformationEntity(ie);
	}

	DataSetVersion = (*list)[TagFromName(DataSetVersion)];
	if (DataSetVersion) {
		if (DataSetVersion->getInformationEntity() == UnknownIE) DataSetVersion->setInformationEntity(ie);
	}

	DataSetSource = (*list)[TagFromName(DataSetSource)];
	if (DataSetSource) {
		if (DataSetSource->getInformationEntity() == UnknownIE) DataSetSource->setInformationEntity(ie);
	}

	DataSetDescription = (*list)[TagFromName(DataSetDescription)];
	if (DataSetDescription) {
		if (DataSetDescription->getInformationEntity() == UnknownIE) DataSetDescription->setInformationEntity(ie);
	}

}

Macro_GeneralContributingSourcesMacro::Macro_GeneralContributingSourcesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralContributingSourcesMacro";

	ContributingSOPInstancesReferenceSequence = (*list)[TagFromName(ContributingSOPInstancesReferenceSequence)];
	if (ContributingSOPInstancesReferenceSequence) {
		if (ContributingSOPInstancesReferenceSequence->getInformationEntity() == UnknownIE) ContributingSOPInstancesReferenceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
	if (DeviceSerialNumber) {
		if (DeviceSerialNumber->getInformationEntity() == UnknownIE) DeviceSerialNumber->setInformationEntity(ie);
	}

	SoftwareVersions = (*list)[TagFromName(SoftwareVersions)];
	if (SoftwareVersions) {
		if (SoftwareVersions->getInformationEntity() == UnknownIE) SoftwareVersions->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	StationName = (*list)[TagFromName(StationName)];
	if (StationName) {
		if (StationName->getInformationEntity() == UnknownIE) StationName->setInformationEntity(ie);
	}

	OperatorsName = (*list)[TagFromName(OperatorsName)];
	if (OperatorsName) {
		if (OperatorsName->getInformationEntity() == UnknownIE) OperatorsName->setInformationEntity(ie);
	}

	OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
	if (OperatorIdentificationSequence) {
		if (OperatorIdentificationSequence->getInformationEntity() == UnknownIE) OperatorIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	ProtocolName = (*list)[TagFromName(ProtocolName)];
	if (ProtocolName) {
		if (ProtocolName->getInformationEntity() == UnknownIE) ProtocolName->setInformationEntity(ie);
	}

	PerformedProtocolCodeSequence = (*list)[TagFromName(PerformedProtocolCodeSequence)];
	if (PerformedProtocolCodeSequence) {
		if (PerformedProtocolCodeSequence->getInformationEntity() == UnknownIE) PerformedProtocolCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	AcquisitionProtocolName = (*list)[TagFromName(AcquisitionProtocolName)];
	if (AcquisitionProtocolName) {
		if (AcquisitionProtocolName->getInformationEntity() == UnknownIE) AcquisitionProtocolName->setInformationEntity(ie);
	}

}

Macro_ContributingImageSourcesMacro::Macro_ContributingImageSourcesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContributingImageSourcesMacro";

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

}

Macro_PatientOrientationMacro::Macro_PatientOrientationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientOrientationMacro";

	PatientOrientationCodeSequence = (*list)[TagFromName(PatientOrientationCodeSequence)];
	if (PatientOrientationCodeSequence) {
		if (PatientOrientationCodeSequence->getInformationEntity() == UnknownIE) PatientOrientationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	PatientGantryRelationshipCodeSequence = (*list)[TagFromName(PatientGantryRelationshipCodeSequence)];
	if (PatientGantryRelationshipCodeSequence) {
		if (PatientGantryRelationshipCodeSequence->getInformationEntity() == UnknownIE) PatientGantryRelationshipCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_PerformedProcedureStepSummaryMacro::Macro_PerformedProcedureStepSummaryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PerformedProcedureStepSummaryMacro";

	PerformedProcedureStepID = (*list)[TagFromName(PerformedProcedureStepID)];
	if (PerformedProcedureStepID) {
		if (PerformedProcedureStepID->getInformationEntity() == UnknownIE) PerformedProcedureStepID->setInformationEntity(ie);
	}

	PerformedProcedureStepStartDate = (*list)[TagFromName(PerformedProcedureStepStartDate)];
	if (PerformedProcedureStepStartDate) {
		if (PerformedProcedureStepStartDate->getInformationEntity() == UnknownIE) PerformedProcedureStepStartDate->setInformationEntity(ie);
	}

	PerformedProcedureStepStartTime = (*list)[TagFromName(PerformedProcedureStepStartTime)];
	if (PerformedProcedureStepStartTime) {
		if (PerformedProcedureStepStartTime->getInformationEntity() == UnknownIE) PerformedProcedureStepStartTime->setInformationEntity(ie);
	}

	PerformedProcedureStepDescription = (*list)[TagFromName(PerformedProcedureStepDescription)];
	if (PerformedProcedureStepDescription) {
		if (PerformedProcedureStepDescription->getInformationEntity() == UnknownIE) PerformedProcedureStepDescription->setInformationEntity(ie);
	}

	PerformedProtocolCodeSequence = (*list)[TagFromName(PerformedProtocolCodeSequence)];
	if (PerformedProtocolCodeSequence) {
		if (PerformedProtocolCodeSequence->getInformationEntity() == UnknownIE) PerformedProtocolCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	CommentsOnThePerformedProcedureStep = (*list)[TagFromName(CommentsOnThePerformedProcedureStep)];
	if (CommentsOnThePerformedProcedureStep) {
		if (CommentsOnThePerformedProcedureStep->getInformationEntity() == UnknownIE) CommentsOnThePerformedProcedureStep->setInformationEntity(ie);
	}

}

Macro_ExposureIndexMacro::Macro_ExposureIndexMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ExposureIndexMacro";

	ExposureIndex = (*list)[TagFromName(ExposureIndex)];
	if (ExposureIndex) {
		if (ExposureIndex->getInformationEntity() == UnknownIE) ExposureIndex->setInformationEntity(ie);
	}

	TargetExposureIndex = (*list)[TagFromName(TargetExposureIndex)];
	if (TargetExposureIndex) {
		if (TargetExposureIndex->getInformationEntity() == UnknownIE) TargetExposureIndex->setInformationEntity(ie);
	}

	DeviationIndex = (*list)[TagFromName(DeviationIndex)];
	if (DeviationIndex) {
		if (DeviationIndex->getInformationEntity() == UnknownIE) DeviationIndex->setInformationEntity(ie);
	}

}

Macro_MandatoryViewAndSliceProgressionDirectionMacro::Macro_MandatoryViewAndSliceProgressionDirectionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MandatoryViewAndSliceProgressionDirectionMacro";

	ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
	if (ViewCodeSequence) {
		if (ViewCodeSequence->getInformationEntity() == UnknownIE) ViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	SliceProgressionDirection = (*list)[TagFromName(SliceProgressionDirection)];
	if (SliceProgressionDirection) {
		if (SliceProgressionDirection->getInformationEntity() == UnknownIE) SliceProgressionDirection->setInformationEntity(ie);
	}

}

Macro_OptionalViewAndSliceProgressionDirectionMacro::Macro_OptionalViewAndSliceProgressionDirectionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OptionalViewAndSliceProgressionDirectionMacro";

	ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
	if (ViewCodeSequence) {
		if (ViewCodeSequence->getInformationEntity() == UnknownIE) ViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	SliceProgressionDirection = (*list)[TagFromName(SliceProgressionDirection)];
	if (SliceProgressionDirection) {
		if (SliceProgressionDirection->getInformationEntity() == UnknownIE) SliceProgressionDirection->setInformationEntity(ie);
	}

}

Macro_RTEquipmentCorrelationMacro::Macro_RTEquipmentCorrelationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTEquipmentCorrelationMacro";

	PatientSupportAngle = (*list)[TagFromName(PatientSupportAngle)];
	if (PatientSupportAngle) {
		if (PatientSupportAngle->getInformationEntity() == UnknownIE) PatientSupportAngle->setInformationEntity(ie);
	}

	TableTopPitchAngle = (*list)[TagFromName(TableTopPitchAngle)];
	if (TableTopPitchAngle) {
		if (TableTopPitchAngle->getInformationEntity() == UnknownIE) TableTopPitchAngle->setInformationEntity(ie);
	}

	TableTopRollAngle = (*list)[TagFromName(TableTopRollAngle)];
	if (TableTopRollAngle) {
		if (TableTopRollAngle->getInformationEntity() == UnknownIE) TableTopRollAngle->setInformationEntity(ie);
	}

	TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
	if (TableTopLongitudinalPosition) {
		if (TableTopLongitudinalPosition->getInformationEntity() == UnknownIE) TableTopLongitudinalPosition->setInformationEntity(ie);
	}

	TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
	if (TableTopLateralPosition) {
		if (TableTopLateralPosition->getInformationEntity() == UnknownIE) TableTopLateralPosition->setInformationEntity(ie);
	}

}

Macro_PatientGroupMacro::Macro_PatientGroupMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientGroupMacro";

	SourcePatientGroupIdentificationSequence = (*list)[TagFromName(SourcePatientGroupIdentificationSequence)];
	if (SourcePatientGroupIdentificationSequence) {
		if (SourcePatientGroupIdentificationSequence->getInformationEntity() == UnknownIE) SourcePatientGroupIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_IssuerOfPatientIDMacro(list,ie);
	GroupOfPatientsIdentificationSequence = (*list)[TagFromName(GroupOfPatientsIdentificationSequence)];
	if (GroupOfPatientsIdentificationSequence) {
		if (GroupOfPatientsIdentificationSequence->getInformationEntity() == UnknownIE) GroupOfPatientsIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_IssuerOfPatientIDMacro(list,ie);
}

Macro_UDIMacro::Macro_UDIMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "UDIMacro";

	UniqueDeviceIdentifier = (*list)[TagFromName(UniqueDeviceIdentifier)];
	if (UniqueDeviceIdentifier) {
		if (UniqueDeviceIdentifier->getInformationEntity() == UnknownIE) UniqueDeviceIdentifier->setInformationEntity(ie);
	}

	DeviceDescription = (*list)[TagFromName(DeviceDescription)];
	if (DeviceDescription) {
		if (DeviceDescription->getInformationEntity() == UnknownIE) DeviceDescription->setInformationEntity(ie);
	}

}

Module_Patient::Module_Patient(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Patient";

	PatientName = (*list)[TagFromName(PatientName)];
	if (PatientName) {
		if (PatientName->getInformationEntity() == UnknownIE) PatientName->setInformationEntity(ie);
	}

	PatientID = (*list)[TagFromName(PatientID)];
	if (PatientID) {
		if (PatientID->getInformationEntity() == UnknownIE) PatientID->setInformationEntity(ie);
	}

	new Macro_IssuerOfPatientIDMacro(list,ie);
	TypeOfPatientID = (*list)[TagFromName(TypeOfPatientID)];
	if (TypeOfPatientID) {
		if (TypeOfPatientID->getInformationEntity() == UnknownIE) TypeOfPatientID->setInformationEntity(ie);
	}

	PatientBirthDate = (*list)[TagFromName(PatientBirthDate)];
	if (PatientBirthDate) {
		if (PatientBirthDate->getInformationEntity() == UnknownIE) PatientBirthDate->setInformationEntity(ie);
	}

	PatientBirthDateInAlternativeCalendar = (*list)[TagFromName(PatientBirthDateInAlternativeCalendar)];
	if (PatientBirthDateInAlternativeCalendar) {
		if (PatientBirthDateInAlternativeCalendar->getInformationEntity() == UnknownIE) PatientBirthDateInAlternativeCalendar->setInformationEntity(ie);
	}

	PatientDeathDateInAlternativeCalendar = (*list)[TagFromName(PatientDeathDateInAlternativeCalendar)];
	if (PatientDeathDateInAlternativeCalendar) {
		if (PatientDeathDateInAlternativeCalendar->getInformationEntity() == UnknownIE) PatientDeathDateInAlternativeCalendar->setInformationEntity(ie);
	}

	PatientAlternativeCalendar = (*list)[TagFromName(PatientAlternativeCalendar)];
	if (PatientAlternativeCalendar) {
		if (PatientAlternativeCalendar->getInformationEntity() == UnknownIE) PatientAlternativeCalendar->setInformationEntity(ie);
	}

	PatientSex = (*list)[TagFromName(PatientSex)];
	if (PatientSex) {
		if (PatientSex->getInformationEntity() == UnknownIE) PatientSex->setInformationEntity(ie);
	}

	ReferencedPatientPhotoSequence = (*list)[TagFromName(ReferencedPatientPhotoSequence)];
	if (ReferencedPatientPhotoSequence) {
		if (ReferencedPatientPhotoSequence->getInformationEntity() == UnknownIE) ReferencedPatientPhotoSequence->setInformationEntity(ie);
	}

	new Macro_ReferencedInstancesAndAccessMacro(list,ie);
	QualityControlSubject = (*list)[TagFromName(QualityControlSubject)];
	if (QualityControlSubject) {
		if (QualityControlSubject->getInformationEntity() == UnknownIE) QualityControlSubject->setInformationEntity(ie);
	}

	ReferencedPatientSequence = (*list)[TagFromName(ReferencedPatientSequence)];
	if (ReferencedPatientSequence) {
		if (ReferencedPatientSequence->getInformationEntity() == UnknownIE) ReferencedPatientSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	PatientBirthTime = (*list)[TagFromName(PatientBirthTime)];
	if (PatientBirthTime) {
		if (PatientBirthTime->getInformationEntity() == UnknownIE) PatientBirthTime->setInformationEntity(ie);
	}

	OtherPatientIDsSequence = (*list)[TagFromName(OtherPatientIDsSequence)];
	if (OtherPatientIDsSequence) {
		if (OtherPatientIDsSequence->getInformationEntity() == UnknownIE) OtherPatientIDsSequence->setInformationEntity(ie);
	}

	new Macro_IssuerOfPatientIDMacro(list,ie);
	OtherPatientNames = (*list)[TagFromName(OtherPatientNames)];
	if (OtherPatientNames) {
		if (OtherPatientNames->getInformationEntity() == UnknownIE) OtherPatientNames->setInformationEntity(ie);
	}

	EthnicGroup = (*list)[TagFromName(EthnicGroup)];
	if (EthnicGroup) {
		if (EthnicGroup->getInformationEntity() == UnknownIE) EthnicGroup->setInformationEntity(ie);
	}

	PatientComments = (*list)[TagFromName(PatientComments)];
	if (PatientComments) {
		if (PatientComments->getInformationEntity() == UnknownIE) PatientComments->setInformationEntity(ie);
	}

	PatientSpeciesDescription = (*list)[TagFromName(PatientSpeciesDescription)];
	if (PatientSpeciesDescription) {
		if (PatientSpeciesDescription->getInformationEntity() == UnknownIE) PatientSpeciesDescription->setInformationEntity(ie);
	}

	PatientSpeciesCodeSequence = (*list)[TagFromName(PatientSpeciesCodeSequence)];
	if (PatientSpeciesCodeSequence) {
		if (PatientSpeciesCodeSequence->getInformationEntity() == UnknownIE) PatientSpeciesCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	PatientBreedDescription = (*list)[TagFromName(PatientBreedDescription)];
	if (PatientBreedDescription) {
		if (PatientBreedDescription->getInformationEntity() == UnknownIE) PatientBreedDescription->setInformationEntity(ie);
	}

	PatientBreedCodeSequence = (*list)[TagFromName(PatientBreedCodeSequence)];
	if (PatientBreedCodeSequence) {
		if (PatientBreedCodeSequence->getInformationEntity() == UnknownIE) PatientBreedCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	BreedRegistrationSequence = (*list)[TagFromName(BreedRegistrationSequence)];
	if (BreedRegistrationSequence) {
		if (BreedRegistrationSequence->getInformationEntity() == UnknownIE) BreedRegistrationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	StrainDescription = (*list)[TagFromName(StrainDescription)];
	if (StrainDescription) {
		if (StrainDescription->getInformationEntity() == UnknownIE) StrainDescription->setInformationEntity(ie);
	}

	StrainNomenclature = (*list)[TagFromName(StrainNomenclature)];
	if (StrainNomenclature) {
		if (StrainNomenclature->getInformationEntity() == UnknownIE) StrainNomenclature->setInformationEntity(ie);
	}

	StrainCodeSequence = (*list)[TagFromName(StrainCodeSequence)];
	if (StrainCodeSequence) {
		if (StrainCodeSequence->getInformationEntity() == UnknownIE) StrainCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	StrainAdditionalInformation = (*list)[TagFromName(StrainAdditionalInformation)];
	if (StrainAdditionalInformation) {
		if (StrainAdditionalInformation->getInformationEntity() == UnknownIE) StrainAdditionalInformation->setInformationEntity(ie);
	}

	StrainStockSequence = (*list)[TagFromName(StrainStockSequence)];
	if (StrainStockSequence) {
		if (StrainStockSequence->getInformationEntity() == UnknownIE) StrainStockSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	GeneticModificationsSequence = (*list)[TagFromName(GeneticModificationsSequence)];
	if (GeneticModificationsSequence) {
		if (GeneticModificationsSequence->getInformationEntity() == UnknownIE) GeneticModificationsSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ResponsiblePerson = (*list)[TagFromName(ResponsiblePerson)];
	if (ResponsiblePerson) {
		if (ResponsiblePerson->getInformationEntity() == UnknownIE) ResponsiblePerson->setInformationEntity(ie);
	}

	ResponsiblePersonRole = (*list)[TagFromName(ResponsiblePersonRole)];
	if (ResponsiblePersonRole) {
		if (ResponsiblePersonRole->getInformationEntity() == UnknownIE) ResponsiblePersonRole->setInformationEntity(ie);
	}

	ResponsibleOrganization = (*list)[TagFromName(ResponsibleOrganization)];
	if (ResponsibleOrganization) {
		if (ResponsibleOrganization->getInformationEntity() == UnknownIE) ResponsibleOrganization->setInformationEntity(ie);
	}

	PatientIdentityRemoved = (*list)[TagFromName(PatientIdentityRemoved)];
	if (PatientIdentityRemoved) {
		if (PatientIdentityRemoved->getInformationEntity() == UnknownIE) PatientIdentityRemoved->setInformationEntity(ie);
	}

	DeidentificationMethod = (*list)[TagFromName(DeidentificationMethod)];
	if (DeidentificationMethod) {
		if (DeidentificationMethod->getInformationEntity() == UnknownIE) DeidentificationMethod->setInformationEntity(ie);
	}

	DeidentificationMethodCodeSequence = (*list)[TagFromName(DeidentificationMethodCodeSequence)];
	if (DeidentificationMethodCodeSequence) {
		if (DeidentificationMethodCodeSequence->getInformationEntity() == UnknownIE) DeidentificationMethodCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PatientGroupMacro(list,ie);
}

Module_ClinicalTrialSubject::Module_ClinicalTrialSubject(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ClinicalTrialSubject";

	ClinicalTrialSponsorName = (*list)[TagFromName(ClinicalTrialSponsorName)];
	if (ClinicalTrialSponsorName) {
		if (ClinicalTrialSponsorName->getInformationEntity() == UnknownIE) ClinicalTrialSponsorName->setInformationEntity(ie);
	}

	ClinicalTrialProtocolID = (*list)[TagFromName(ClinicalTrialProtocolID)];
	if (ClinicalTrialProtocolID) {
		if (ClinicalTrialProtocolID->getInformationEntity() == UnknownIE) ClinicalTrialProtocolID->setInformationEntity(ie);
	}

	ClinicalTrialProtocolName = (*list)[TagFromName(ClinicalTrialProtocolName)];
	if (ClinicalTrialProtocolName) {
		if (ClinicalTrialProtocolName->getInformationEntity() == UnknownIE) ClinicalTrialProtocolName->setInformationEntity(ie);
	}

	ClinicalTrialSiteID = (*list)[TagFromName(ClinicalTrialSiteID)];
	if (ClinicalTrialSiteID) {
		if (ClinicalTrialSiteID->getInformationEntity() == UnknownIE) ClinicalTrialSiteID->setInformationEntity(ie);
	}

	ClinicalTrialSiteName = (*list)[TagFromName(ClinicalTrialSiteName)];
	if (ClinicalTrialSiteName) {
		if (ClinicalTrialSiteName->getInformationEntity() == UnknownIE) ClinicalTrialSiteName->setInformationEntity(ie);
	}

	ClinicalTrialSubjectID = (*list)[TagFromName(ClinicalTrialSubjectID)];
	if (ClinicalTrialSubjectID) {
		if (ClinicalTrialSubjectID->getInformationEntity() == UnknownIE) ClinicalTrialSubjectID->setInformationEntity(ie);
	}

	ClinicalTrialSubjectReadingID = (*list)[TagFromName(ClinicalTrialSubjectReadingID)];
	if (ClinicalTrialSubjectReadingID) {
		if (ClinicalTrialSubjectReadingID->getInformationEntity() == UnknownIE) ClinicalTrialSubjectReadingID->setInformationEntity(ie);
	}

	ClinicalTrialProtocolEthicsCommitteeName = (*list)[TagFromName(ClinicalTrialProtocolEthicsCommitteeName)];
	if (ClinicalTrialProtocolEthicsCommitteeName) {
		if (ClinicalTrialProtocolEthicsCommitteeName->getInformationEntity() == UnknownIE) ClinicalTrialProtocolEthicsCommitteeName->setInformationEntity(ie);
	}

	ClinicalTrialProtocolEthicsCommitteeApprovalNumber = (*list)[TagFromName(ClinicalTrialProtocolEthicsCommitteeApprovalNumber)];
	if (ClinicalTrialProtocolEthicsCommitteeApprovalNumber) {
		if (ClinicalTrialProtocolEthicsCommitteeApprovalNumber->getInformationEntity() == UnknownIE) ClinicalTrialProtocolEthicsCommitteeApprovalNumber->setInformationEntity(ie);
	}

}

Module_GeneralStudy::Module_GeneralStudy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralStudy";

	StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
	if (StudyInstanceUID) {
		if (StudyInstanceUID->getInformationEntity() == UnknownIE) StudyInstanceUID->setInformationEntity(ie);
	}

	StudyDate = (*list)[TagFromName(StudyDate)];
	if (StudyDate) {
		if (StudyDate->getInformationEntity() == UnknownIE) StudyDate->setInformationEntity(ie);
	}

	StudyTime = (*list)[TagFromName(StudyTime)];
	if (StudyTime) {
		if (StudyTime->getInformationEntity() == UnknownIE) StudyTime->setInformationEntity(ie);
	}

	ReferringPhysicianName = (*list)[TagFromName(ReferringPhysicianName)];
	if (ReferringPhysicianName) {
		if (ReferringPhysicianName->getInformationEntity() == UnknownIE) ReferringPhysicianName->setInformationEntity(ie);
	}

	ReferringPhysicianIdentificationSequence = (*list)[TagFromName(ReferringPhysicianIdentificationSequence)];
	if (ReferringPhysicianIdentificationSequence) {
		if (ReferringPhysicianIdentificationSequence->getInformationEntity() == UnknownIE) ReferringPhysicianIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	ConsultingPhysicianName = (*list)[TagFromName(ConsultingPhysicianName)];
	if (ConsultingPhysicianName) {
		if (ConsultingPhysicianName->getInformationEntity() == UnknownIE) ConsultingPhysicianName->setInformationEntity(ie);
	}

	ConsultingPhysicianIdentificationSequence = (*list)[TagFromName(ConsultingPhysicianIdentificationSequence)];
	if (ConsultingPhysicianIdentificationSequence) {
		if (ConsultingPhysicianIdentificationSequence->getInformationEntity() == UnknownIE) ConsultingPhysicianIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	StudyID = (*list)[TagFromName(StudyID)];
	if (StudyID) {
		if (StudyID->getInformationEntity() == UnknownIE) StudyID->setInformationEntity(ie);
	}

	AccessionNumber = (*list)[TagFromName(AccessionNumber)];
	if (AccessionNumber) {
		if (AccessionNumber->getInformationEntity() == UnknownIE) AccessionNumber->setInformationEntity(ie);
	}

	IssuerOfAccessionNumberSequence = (*list)[TagFromName(IssuerOfAccessionNumberSequence)];
	if (IssuerOfAccessionNumberSequence) {
		if (IssuerOfAccessionNumberSequence->getInformationEntity() == UnknownIE) IssuerOfAccessionNumberSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	StudyDescription = (*list)[TagFromName(StudyDescription)];
	if (StudyDescription) {
		if (StudyDescription->getInformationEntity() == UnknownIE) StudyDescription->setInformationEntity(ie);
	}

	PhysiciansOfRecord = (*list)[TagFromName(PhysiciansOfRecord)];
	if (PhysiciansOfRecord) {
		if (PhysiciansOfRecord->getInformationEntity() == UnknownIE) PhysiciansOfRecord->setInformationEntity(ie);
	}

	PhysiciansOfRecordIdentificationSequence = (*list)[TagFromName(PhysiciansOfRecordIdentificationSequence)];
	if (PhysiciansOfRecordIdentificationSequence) {
		if (PhysiciansOfRecordIdentificationSequence->getInformationEntity() == UnknownIE) PhysiciansOfRecordIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	NameOfPhysiciansReadingStudy = (*list)[TagFromName(NameOfPhysiciansReadingStudy)];
	if (NameOfPhysiciansReadingStudy) {
		if (NameOfPhysiciansReadingStudy->getInformationEntity() == UnknownIE) NameOfPhysiciansReadingStudy->setInformationEntity(ie);
	}

	PhysiciansReadingStudyIdentificationSequence = (*list)[TagFromName(PhysiciansReadingStudyIdentificationSequence)];
	if (PhysiciansReadingStudyIdentificationSequence) {
		if (PhysiciansReadingStudyIdentificationSequence->getInformationEntity() == UnknownIE) PhysiciansReadingStudyIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	RequestingServiceCodeSequence = (*list)[TagFromName(RequestingServiceCodeSequence)];
	if (RequestingServiceCodeSequence) {
		if (RequestingServiceCodeSequence->getInformationEntity() == UnknownIE) RequestingServiceCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReferencedStudySequence = (*list)[TagFromName(ReferencedStudySequence)];
	if (ReferencedStudySequence) {
		if (ReferencedStudySequence->getInformationEntity() == UnknownIE) ReferencedStudySequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ProcedureCodeSequence = (*list)[TagFromName(ProcedureCodeSequence)];
	if (ProcedureCodeSequence) {
		if (ProcedureCodeSequence->getInformationEntity() == UnknownIE) ProcedureCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReasonForPerformedProcedureCodeSequence = (*list)[TagFromName(ReasonForPerformedProcedureCodeSequence)];
	if (ReasonForPerformedProcedureCodeSequence) {
		if (ReasonForPerformedProcedureCodeSequence->getInformationEntity() == UnknownIE) ReasonForPerformedProcedureCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_PatientStudy::Module_PatientStudy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientStudy";

	AdmittingDiagnosesDescription = (*list)[TagFromName(AdmittingDiagnosesDescription)];
	if (AdmittingDiagnosesDescription) {
		if (AdmittingDiagnosesDescription->getInformationEntity() == UnknownIE) AdmittingDiagnosesDescription->setInformationEntity(ie);
	}

	AdmittingDiagnosesCodeSequence = (*list)[TagFromName(AdmittingDiagnosesCodeSequence)];
	if (AdmittingDiagnosesCodeSequence) {
		if (AdmittingDiagnosesCodeSequence->getInformationEntity() == UnknownIE) AdmittingDiagnosesCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	PatientAge = (*list)[TagFromName(PatientAge)];
	if (PatientAge) {
		if (PatientAge->getInformationEntity() == UnknownIE) PatientAge->setInformationEntity(ie);
	}

	PatientSize = (*list)[TagFromName(PatientSize)];
	if (PatientSize) {
		if (PatientSize->getInformationEntity() == UnknownIE) PatientSize->setInformationEntity(ie);
	}

	PatientWeight = (*list)[TagFromName(PatientWeight)];
	if (PatientWeight) {
		if (PatientWeight->getInformationEntity() == UnknownIE) PatientWeight->setInformationEntity(ie);
	}

	PatientBodyMassIndex = (*list)[TagFromName(PatientBodyMassIndex)];
	if (PatientBodyMassIndex) {
		if (PatientBodyMassIndex->getInformationEntity() == UnknownIE) PatientBodyMassIndex->setInformationEntity(ie);
	}

	MeasuredAPDimension = (*list)[TagFromName(MeasuredAPDimension)];
	if (MeasuredAPDimension) {
		if (MeasuredAPDimension->getInformationEntity() == UnknownIE) MeasuredAPDimension->setInformationEntity(ie);
	}

	MeasuredLateralDimension = (*list)[TagFromName(MeasuredLateralDimension)];
	if (MeasuredLateralDimension) {
		if (MeasuredLateralDimension->getInformationEntity() == UnknownIE) MeasuredLateralDimension->setInformationEntity(ie);
	}

	PatientSizeCodeSequence = (*list)[TagFromName(PatientSizeCodeSequence)];
	if (PatientSizeCodeSequence) {
		if (PatientSizeCodeSequence->getInformationEntity() == UnknownIE) PatientSizeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	MedicalAlerts = (*list)[TagFromName(MedicalAlerts)];
	if (MedicalAlerts) {
		if (MedicalAlerts->getInformationEntity() == UnknownIE) MedicalAlerts->setInformationEntity(ie);
	}

	Allergies = (*list)[TagFromName(Allergies)];
	if (Allergies) {
		if (Allergies->getInformationEntity() == UnknownIE) Allergies->setInformationEntity(ie);
	}

	SmokingStatus = (*list)[TagFromName(SmokingStatus)];
	if (SmokingStatus) {
		if (SmokingStatus->getInformationEntity() == UnknownIE) SmokingStatus->setInformationEntity(ie);
	}

	PregnancyStatus = (*list)[TagFromName(PregnancyStatus)];
	if (PregnancyStatus) {
		if (PregnancyStatus->getInformationEntity() == UnknownIE) PregnancyStatus->setInformationEntity(ie);
	}

	LastMenstrualDate = (*list)[TagFromName(LastMenstrualDate)];
	if (LastMenstrualDate) {
		if (LastMenstrualDate->getInformationEntity() == UnknownIE) LastMenstrualDate->setInformationEntity(ie);
	}

	PatientState = (*list)[TagFromName(PatientState)];
	if (PatientState) {
		if (PatientState->getInformationEntity() == UnknownIE) PatientState->setInformationEntity(ie);
	}

	Occupation = (*list)[TagFromName(Occupation)];
	if (Occupation) {
		if (Occupation->getInformationEntity() == UnknownIE) Occupation->setInformationEntity(ie);
	}

	AdditionalPatientHistory = (*list)[TagFromName(AdditionalPatientHistory)];
	if (AdditionalPatientHistory) {
		if (AdditionalPatientHistory->getInformationEntity() == UnknownIE) AdditionalPatientHistory->setInformationEntity(ie);
	}

	AdmissionID = (*list)[TagFromName(AdmissionID)];
	if (AdmissionID) {
		if (AdmissionID->getInformationEntity() == UnknownIE) AdmissionID->setInformationEntity(ie);
	}

	IssuerOfAdmissionID = (*list)[TagFromName(IssuerOfAdmissionID)];
	if (IssuerOfAdmissionID) {
		if (IssuerOfAdmissionID->getInformationEntity() == UnknownIE) IssuerOfAdmissionID->setInformationEntity(ie);
	}

	IssuerOfAdmissionIDSequence = (*list)[TagFromName(IssuerOfAdmissionIDSequence)];
	if (IssuerOfAdmissionIDSequence) {
		if (IssuerOfAdmissionIDSequence->getInformationEntity() == UnknownIE) IssuerOfAdmissionIDSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	ServiceEpisodeID = (*list)[TagFromName(ServiceEpisodeID)];
	if (ServiceEpisodeID) {
		if (ServiceEpisodeID->getInformationEntity() == UnknownIE) ServiceEpisodeID->setInformationEntity(ie);
	}

	IssuerOfServiceEpisodeIDSequence = (*list)[TagFromName(IssuerOfServiceEpisodeIDSequence)];
	if (IssuerOfServiceEpisodeIDSequence) {
		if (IssuerOfServiceEpisodeIDSequence->getInformationEntity() == UnknownIE) IssuerOfServiceEpisodeIDSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	ServiceEpisodeDescription = (*list)[TagFromName(ServiceEpisodeDescription)];
	if (ServiceEpisodeDescription) {
		if (ServiceEpisodeDescription->getInformationEntity() == UnknownIE) ServiceEpisodeDescription->setInformationEntity(ie);
	}

	PatientSexNeutered = (*list)[TagFromName(PatientSexNeutered)];
	if (PatientSexNeutered) {
		if (PatientSexNeutered->getInformationEntity() == UnknownIE) PatientSexNeutered->setInformationEntity(ie);
	}

}

Module_ClinicalTrialStudy::Module_ClinicalTrialStudy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ClinicalTrialStudy";

	ClinicalTrialTimePointID = (*list)[TagFromName(ClinicalTrialTimePointID)];
	if (ClinicalTrialTimePointID) {
		if (ClinicalTrialTimePointID->getInformationEntity() == UnknownIE) ClinicalTrialTimePointID->setInformationEntity(ie);
	}

	ClinicalTrialTimePointDescription = (*list)[TagFromName(ClinicalTrialTimePointDescription)];
	if (ClinicalTrialTimePointDescription) {
		if (ClinicalTrialTimePointDescription->getInformationEntity() == UnknownIE) ClinicalTrialTimePointDescription->setInformationEntity(ie);
	}

	LongitudinalTemporalOffsetFromEvent = (*list)[TagFromName(LongitudinalTemporalOffsetFromEvent)];
	if (LongitudinalTemporalOffsetFromEvent) {
		if (LongitudinalTemporalOffsetFromEvent->getInformationEntity() == UnknownIE) LongitudinalTemporalOffsetFromEvent->setInformationEntity(ie);
	}

	LongitudinalTemporalEventType = (*list)[TagFromName(LongitudinalTemporalEventType)];
	if (LongitudinalTemporalEventType) {
		if (LongitudinalTemporalEventType->getInformationEntity() == UnknownIE) LongitudinalTemporalEventType->setInformationEntity(ie);
	}

	ConsentForClinicalTrialUseSequence = (*list)[TagFromName(ConsentForClinicalTrialUseSequence)];
	if (ConsentForClinicalTrialUseSequence) {
		if (ConsentForClinicalTrialUseSequence->getInformationEntity() == UnknownIE) ConsentForClinicalTrialUseSequence->setInformationEntity(ie);
	}

}

Module_GeneralSeries::Module_GeneralSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	Laterality = (*list)[TagFromName(Laterality)];
	if (Laterality) {
		if (Laterality->getInformationEntity() == UnknownIE) Laterality->setInformationEntity(ie);
	}

	SeriesDate = (*list)[TagFromName(SeriesDate)];
	if (SeriesDate) {
		if (SeriesDate->getInformationEntity() == UnknownIE) SeriesDate->setInformationEntity(ie);
	}

	SeriesTime = (*list)[TagFromName(SeriesTime)];
	if (SeriesTime) {
		if (SeriesTime->getInformationEntity() == UnknownIE) SeriesTime->setInformationEntity(ie);
	}

	PerformingPhysicianName = (*list)[TagFromName(PerformingPhysicianName)];
	if (PerformingPhysicianName) {
		if (PerformingPhysicianName->getInformationEntity() == UnknownIE) PerformingPhysicianName->setInformationEntity(ie);
	}

	PerformingPhysicianIdentificationSequence = (*list)[TagFromName(PerformingPhysicianIdentificationSequence)];
	if (PerformingPhysicianIdentificationSequence) {
		if (PerformingPhysicianIdentificationSequence->getInformationEntity() == UnknownIE) PerformingPhysicianIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	ProtocolName = (*list)[TagFromName(ProtocolName)];
	if (ProtocolName) {
		if (ProtocolName->getInformationEntity() == UnknownIE) ProtocolName->setInformationEntity(ie);
	}

	ReferencedDefinedProtocolSequence = (*list)[TagFromName(ReferencedDefinedProtocolSequence)];
	if (ReferencedDefinedProtocolSequence) {
		if (ReferencedDefinedProtocolSequence->getInformationEntity() == UnknownIE) ReferencedDefinedProtocolSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ReferencedPerformedProtocolSequence = (*list)[TagFromName(ReferencedPerformedProtocolSequence)];
	if (ReferencedPerformedProtocolSequence) {
		if (ReferencedPerformedProtocolSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProtocolSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	SeriesDescriptionCodeSequence = (*list)[TagFromName(SeriesDescriptionCodeSequence)];
	if (SeriesDescriptionCodeSequence) {
		if (SeriesDescriptionCodeSequence->getInformationEntity() == UnknownIE) SeriesDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	OperatorsName = (*list)[TagFromName(OperatorsName)];
	if (OperatorsName) {
		if (OperatorsName->getInformationEntity() == UnknownIE) OperatorsName->setInformationEntity(ie);
	}

	OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
	if (OperatorIdentificationSequence) {
		if (OperatorIdentificationSequence->getInformationEntity() == UnknownIE) OperatorIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	RelatedSeriesSequence = (*list)[TagFromName(RelatedSeriesSequence)];
	if (RelatedSeriesSequence) {
		if (RelatedSeriesSequence->getInformationEntity() == UnknownIE) RelatedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	BodyPartExamined = (*list)[TagFromName(BodyPartExamined)];
	if (BodyPartExamined) {
		if (BodyPartExamined->getInformationEntity() == UnknownIE) BodyPartExamined->setInformationEntity(ie);
	}

	PatientPosition = (*list)[TagFromName(PatientPosition)];
	if (PatientPosition) {
		if (PatientPosition->getInformationEntity() == UnknownIE) PatientPosition->setInformationEntity(ie);
	}

	SmallestPixelValueInSeries = (*list)[TagFromName(SmallestPixelValueInSeries)];
	if (SmallestPixelValueInSeries) {
		if (SmallestPixelValueInSeries->getInformationEntity() == UnknownIE) SmallestPixelValueInSeries->setInformationEntity(ie);
	}

	LargestPixelValueInSeries = (*list)[TagFromName(LargestPixelValueInSeries)];
	if (LargestPixelValueInSeries) {
		if (LargestPixelValueInSeries->getInformationEntity() == UnknownIE) LargestPixelValueInSeries->setInformationEntity(ie);
	}

	RequestAttributesSequence = (*list)[TagFromName(RequestAttributesSequence)];
	if (RequestAttributesSequence) {
		if (RequestAttributesSequence->getInformationEntity() == UnknownIE) RequestAttributesSequence->setInformationEntity(ie);
	}

	new Macro_RequestAttributesMacro(list,ie);
	new Macro_PerformedProcedureStepSummaryMacro(list,ie);
	AnatomicalOrientationType = (*list)[TagFromName(AnatomicalOrientationType)];
	if (AnatomicalOrientationType) {
		if (AnatomicalOrientationType->getInformationEntity() == UnknownIE) AnatomicalOrientationType->setInformationEntity(ie);
	}

}

Module_ClinicalTrialSeries::Module_ClinicalTrialSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ClinicalTrialSeries";

	ClinicalTrialCoordinatingCenterName = (*list)[TagFromName(ClinicalTrialCoordinatingCenterName)];
	if (ClinicalTrialCoordinatingCenterName) {
		if (ClinicalTrialCoordinatingCenterName->getInformationEntity() == UnknownIE) ClinicalTrialCoordinatingCenterName->setInformationEntity(ie);
	}

	ClinicalTrialSeriesID = (*list)[TagFromName(ClinicalTrialSeriesID)];
	if (ClinicalTrialSeriesID) {
		if (ClinicalTrialSeriesID->getInformationEntity() == UnknownIE) ClinicalTrialSeriesID->setInformationEntity(ie);
	}

	ClinicalTrialSeriesDescription = (*list)[TagFromName(ClinicalTrialSeriesDescription)];
	if (ClinicalTrialSeriesDescription) {
		if (ClinicalTrialSeriesDescription->getInformationEntity() == UnknownIE) ClinicalTrialSeriesDescription->setInformationEntity(ie);
	}

}

Module_EnhancedSeries::Module_EnhancedSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedSeries";

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_FrameOfReference::Module_FrameOfReference(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameOfReference";

	FrameOfReferenceUID = (*list)[TagFromName(FrameOfReferenceUID)];
	if (FrameOfReferenceUID) {
		if (FrameOfReferenceUID->getInformationEntity() == UnknownIE) FrameOfReferenceUID->setInformationEntity(ie);
	}

	PositionReferenceIndicator = (*list)[TagFromName(PositionReferenceIndicator)];
	if (PositionReferenceIndicator) {
		if (PositionReferenceIndicator->getInformationEntity() == UnknownIE) PositionReferenceIndicator->setInformationEntity(ie);
	}

}

Module_GeneralEquipment::Module_GeneralEquipment(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralEquipment";

	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
	if (InstitutionAddress) {
		if (InstitutionAddress->getInformationEntity() == UnknownIE) InstitutionAddress->setInformationEntity(ie);
	}

	StationName = (*list)[TagFromName(StationName)];
	if (StationName) {
		if (StationName->getInformationEntity() == UnknownIE) StationName->setInformationEntity(ie);
	}

	InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
	if (InstitutionalDepartmentName) {
		if (InstitutionalDepartmentName->getInformationEntity() == UnknownIE) InstitutionalDepartmentName->setInformationEntity(ie);
	}

	InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
	if (InstitutionalDepartmentTypeCodeSequence) {
		if (InstitutionalDepartmentTypeCodeSequence->getInformationEntity() == UnknownIE) InstitutionalDepartmentTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	ManufacturerDeviceClassUID = (*list)[TagFromName(ManufacturerDeviceClassUID)];
	if (ManufacturerDeviceClassUID) {
		if (ManufacturerDeviceClassUID->getInformationEntity() == UnknownIE) ManufacturerDeviceClassUID->setInformationEntity(ie);
	}

	DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
	if (DeviceSerialNumber) {
		if (DeviceSerialNumber->getInformationEntity() == UnknownIE) DeviceSerialNumber->setInformationEntity(ie);
	}

	SoftwareVersions = (*list)[TagFromName(SoftwareVersions)];
	if (SoftwareVersions) {
		if (SoftwareVersions->getInformationEntity() == UnknownIE) SoftwareVersions->setInformationEntity(ie);
	}

	GantryID = (*list)[TagFromName(GantryID)];
	if (GantryID) {
		if (GantryID->getInformationEntity() == UnknownIE) GantryID->setInformationEntity(ie);
	}

	UDISequence = (*list)[TagFromName(UDISequence)];
	if (UDISequence) {
		if (UDISequence->getInformationEntity() == UnknownIE) UDISequence->setInformationEntity(ie);
	}

	new Macro_UDIMacro(list,ie);
	DeviceUID = (*list)[TagFromName(DeviceUID)];
	if (DeviceUID) {
		if (DeviceUID->getInformationEntity() == UnknownIE) DeviceUID->setInformationEntity(ie);
	}

	SpatialResolution = (*list)[TagFromName(SpatialResolution)];
	if (SpatialResolution) {
		if (SpatialResolution->getInformationEntity() == UnknownIE) SpatialResolution->setInformationEntity(ie);
	}

	DateOfLastCalibration = (*list)[TagFromName(DateOfLastCalibration)];
	if (DateOfLastCalibration) {
		if (DateOfLastCalibration->getInformationEntity() == UnknownIE) DateOfLastCalibration->setInformationEntity(ie);
	}

	TimeOfLastCalibration = (*list)[TagFromName(TimeOfLastCalibration)];
	if (TimeOfLastCalibration) {
		if (TimeOfLastCalibration->getInformationEntity() == UnknownIE) TimeOfLastCalibration->setInformationEntity(ie);
	}

	PixelPaddingValue = (*list)[TagFromName(PixelPaddingValue)];
	if (PixelPaddingValue) {
		if (PixelPaddingValue->getInformationEntity() == UnknownIE) PixelPaddingValue->setInformationEntity(ie);
	}

}

Module_EnhancedGeneralEquipment::Module_EnhancedGeneralEquipment(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedGeneralEquipment";

	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
	if (DeviceSerialNumber) {
		if (DeviceSerialNumber->getInformationEntity() == UnknownIE) DeviceSerialNumber->setInformationEntity(ie);
	}

	SoftwareVersions = (*list)[TagFromName(SoftwareVersions)];
	if (SoftwareVersions) {
		if (SoftwareVersions->getInformationEntity() == UnknownIE) SoftwareVersions->setInformationEntity(ie);
	}

}

Module_GeneralReference::Module_GeneralReference(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralReference";

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	DerivationDescription = (*list)[TagFromName(DerivationDescription)];
	if (DerivationDescription) {
		if (DerivationDescription->getInformationEntity() == UnknownIE) DerivationDescription->setInformationEntity(ie);
	}

	DerivationCodeSequence = (*list)[TagFromName(DerivationCodeSequence)];
	if (DerivationCodeSequence) {
		if (DerivationCodeSequence->getInformationEntity() == UnknownIE) DerivationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	SourceImageSequence = (*list)[TagFromName(SourceImageSequence)];
	if (SourceImageSequence) {
		if (SourceImageSequence->getInformationEntity() == UnknownIE) SourceImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	SourceInstanceSequence = (*list)[TagFromName(SourceInstanceSequence)];
	if (SourceInstanceSequence) {
		if (SourceInstanceSequence->getInformationEntity() == UnknownIE) SourceInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_GeneralImage::Module_GeneralImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralImage";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	PatientOrientation = (*list)[TagFromName(PatientOrientation)];
	if (PatientOrientation) {
		if (PatientOrientation->getInformationEntity() == UnknownIE) PatientOrientation->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	AcquisitionDate = (*list)[TagFromName(AcquisitionDate)];
	if (AcquisitionDate) {
		if (AcquisitionDate->getInformationEntity() == UnknownIE) AcquisitionDate->setInformationEntity(ie);
	}

	AcquisitionTime = (*list)[TagFromName(AcquisitionTime)];
	if (AcquisitionTime) {
		if (AcquisitionTime->getInformationEntity() == UnknownIE) AcquisitionTime->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	ImagesInAcquisition = (*list)[TagFromName(ImagesInAcquisition)];
	if (ImagesInAcquisition) {
		if (ImagesInAcquisition->getInformationEntity() == UnknownIE) ImagesInAcquisition->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	QualityControlImage = (*list)[TagFromName(QualityControlImage)];
	if (QualityControlImage) {
		if (QualityControlImage->getInformationEntity() == UnknownIE) QualityControlImage->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	IrradiationEventUID = (*list)[TagFromName(IrradiationEventUID)];
	if (IrradiationEventUID) {
		if (IrradiationEventUID->getInformationEntity() == UnknownIE) IrradiationEventUID->setInformationEntity(ie);
	}

	RealWorldValueMappingSequence = (*list)[TagFromName(RealWorldValueMappingSequence)];
	if (RealWorldValueMappingSequence) {
		if (RealWorldValueMappingSequence->getInformationEntity() == UnknownIE) RealWorldValueMappingSequence->setInformationEntity(ie);
	}

	new Macro_RealWorldValueMappingItemMacro(list,ie);
	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PrimaryAnatomicStructureMacro(list,ie);
	AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
	if (AnatomicRegionModifierSequence) {
		if (AnatomicRegionModifierSequence->getInformationEntity() == UnknownIE) AnatomicRegionModifierSequence->setInformationEntity(ie);
	}

	PrimaryAnatomicStructureModifierSequence = (*list)[TagFromName(PrimaryAnatomicStructureModifierSequence)];
	if (PrimaryAnatomicStructureModifierSequence) {
		if (PrimaryAnatomicStructureModifierSequence->getInformationEntity() == UnknownIE) PrimaryAnatomicStructureModifierSequence->setInformationEntity(ie);
	}

}

Module_ImagePlane::Module_ImagePlane(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImagePlane";

	PixelSpacing = (*list)[TagFromName(PixelSpacing)];
	if (PixelSpacing) {
		if (PixelSpacing->getInformationEntity() == UnknownIE) PixelSpacing->setInformationEntity(ie);
	}

	ImageOrientationPatient = (*list)[TagFromName(ImageOrientationPatient)];
	if (ImageOrientationPatient) {
		if (ImageOrientationPatient->getInformationEntity() == UnknownIE) ImageOrientationPatient->setInformationEntity(ie);
	}

	ImagePositionPatient = (*list)[TagFromName(ImagePositionPatient)];
	if (ImagePositionPatient) {
		if (ImagePositionPatient->getInformationEntity() == UnknownIE) ImagePositionPatient->setInformationEntity(ie);
	}

	SliceThickness = (*list)[TagFromName(SliceThickness)];
	if (SliceThickness) {
		if (SliceThickness->getInformationEntity() == UnknownIE) SliceThickness->setInformationEntity(ie);
	}

	SliceLocation = (*list)[TagFromName(SliceLocation)];
	if (SliceLocation) {
		if (SliceLocation->getInformationEntity() == UnknownIE) SliceLocation->setInformationEntity(ie);
	}

}

Macro_ImagePixelMacro::Macro_ImagePixelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImagePixelMacro";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PixelData = (*list)[TagFromName(PixelData)];
	if (PixelData) {
		if (PixelData->getInformationEntity() == UnknownIE) PixelData->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	PixelAspectRatio = (*list)[TagFromName(PixelAspectRatio)];
	if (PixelAspectRatio) {
		if (PixelAspectRatio->getInformationEntity() == UnknownIE) PixelAspectRatio->setInformationEntity(ie);
	}

	SmallestImagePixelValue = (*list)[TagFromName(SmallestImagePixelValue)];
	if (SmallestImagePixelValue) {
		if (SmallestImagePixelValue->getInformationEntity() == UnknownIE) SmallestImagePixelValue->setInformationEntity(ie);
	}

	LargestImagePixelValue = (*list)[TagFromName(LargestImagePixelValue)];
	if (LargestImagePixelValue) {
		if (LargestImagePixelValue->getInformationEntity() == UnknownIE) LargestImagePixelValue->setInformationEntity(ie);
	}

	RedPaletteColorLookupTableDescriptor = (*list)[TagFromName(RedPaletteColorLookupTableDescriptor)];
	if (RedPaletteColorLookupTableDescriptor) {
		if (RedPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableDescriptor = (*list)[TagFromName(GreenPaletteColorLookupTableDescriptor)];
	if (GreenPaletteColorLookupTableDescriptor) {
		if (GreenPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableDescriptor = (*list)[TagFromName(BluePaletteColorLookupTableDescriptor)];
	if (BluePaletteColorLookupTableDescriptor) {
		if (BluePaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	RedPaletteColorLookupTableData = (*list)[TagFromName(RedPaletteColorLookupTableData)];
	if (RedPaletteColorLookupTableData) {
		if (RedPaletteColorLookupTableData->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableData->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableData = (*list)[TagFromName(GreenPaletteColorLookupTableData)];
	if (GreenPaletteColorLookupTableData) {
		if (GreenPaletteColorLookupTableData->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableData->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableData = (*list)[TagFromName(BluePaletteColorLookupTableData)];
	if (BluePaletteColorLookupTableData) {
		if (BluePaletteColorLookupTableData->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableData->setInformationEntity(ie);
	}

	ICCProfile = (*list)[TagFromName(ICCProfile)];
	if (ICCProfile) {
		if (ICCProfile->getInformationEntity() == UnknownIE) ICCProfile->setInformationEntity(ie);
	}

	ColorSpace = (*list)[TagFromName(ColorSpace)];
	if (ColorSpace) {
		if (ColorSpace->getInformationEntity() == UnknownIE) ColorSpace->setInformationEntity(ie);
	}

}

Module_FloatingPointImagePixel::Module_FloatingPointImagePixel(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FloatingPointImagePixel";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	FloatPixelData = (*list)[TagFromName(FloatPixelData)];
	if (FloatPixelData) {
		if (FloatPixelData->getInformationEntity() == UnknownIE) FloatPixelData->setInformationEntity(ie);
	}

	PixelAspectRatio = (*list)[TagFromName(PixelAspectRatio)];
	if (PixelAspectRatio) {
		if (PixelAspectRatio->getInformationEntity() == UnknownIE) PixelAspectRatio->setInformationEntity(ie);
	}

	FloatPixelPaddingValue = (*list)[TagFromName(FloatPixelPaddingValue)];
	if (FloatPixelPaddingValue) {
		if (FloatPixelPaddingValue->getInformationEntity() == UnknownIE) FloatPixelPaddingValue->setInformationEntity(ie);
	}

	FloatPixelPaddingRangeLimit = (*list)[TagFromName(FloatPixelPaddingRangeLimit)];
	if (FloatPixelPaddingRangeLimit) {
		if (FloatPixelPaddingRangeLimit->getInformationEntity() == UnknownIE) FloatPixelPaddingRangeLimit->setInformationEntity(ie);
	}

}

Module_DoubleFloatingPointImagePixel::Module_DoubleFloatingPointImagePixel(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DoubleFloatingPointImagePixel";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	DoubleFloatPixelData = (*list)[TagFromName(DoubleFloatPixelData)];
	if (DoubleFloatPixelData) {
		if (DoubleFloatPixelData->getInformationEntity() == UnknownIE) DoubleFloatPixelData->setInformationEntity(ie);
	}

	PixelAspectRatio = (*list)[TagFromName(PixelAspectRatio)];
	if (PixelAspectRatio) {
		if (PixelAspectRatio->getInformationEntity() == UnknownIE) PixelAspectRatio->setInformationEntity(ie);
	}

	DoubleFloatPixelPaddingValue = (*list)[TagFromName(DoubleFloatPixelPaddingValue)];
	if (DoubleFloatPixelPaddingValue) {
		if (DoubleFloatPixelPaddingValue->getInformationEntity() == UnknownIE) DoubleFloatPixelPaddingValue->setInformationEntity(ie);
	}

	DoubleFloatPixelPaddingRangeLimit = (*list)[TagFromName(DoubleFloatPixelPaddingRangeLimit)];
	if (DoubleFloatPixelPaddingRangeLimit) {
		if (DoubleFloatPixelPaddingRangeLimit->getInformationEntity() == UnknownIE) DoubleFloatPixelPaddingRangeLimit->setInformationEntity(ie);
	}

}

Module_ImagePixel::Module_ImagePixel(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImagePixel";

	new Macro_ImagePixelMacro(list,ie);
	PixelDataProviderURL = (*list)[TagFromName(PixelDataProviderURL)];
	if (PixelDataProviderURL) {
		if (PixelDataProviderURL->getInformationEntity() == UnknownIE) PixelDataProviderURL->setInformationEntity(ie);
	}

	PixelPaddingRangeLimit = (*list)[TagFromName(PixelPaddingRangeLimit)];
	if (PixelPaddingRangeLimit) {
		if (PixelPaddingRangeLimit->getInformationEntity() == UnknownIE) PixelPaddingRangeLimit->setInformationEntity(ie);
	}

}

Module_ContrastBolus::Module_ContrastBolus(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContrastBolus";

	ContrastBolusAgent = (*list)[TagFromName(ContrastBolusAgent)];
	if (ContrastBolusAgent) {
		if (ContrastBolusAgent->getInformationEntity() == UnknownIE) ContrastBolusAgent->setInformationEntity(ie);
	}

	ContrastBolusAgentSequence = (*list)[TagFromName(ContrastBolusAgentSequence)];
	if (ContrastBolusAgentSequence) {
		if (ContrastBolusAgentSequence->getInformationEntity() == UnknownIE) ContrastBolusAgentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ContrastBolusRoute = (*list)[TagFromName(ContrastBolusRoute)];
	if (ContrastBolusRoute) {
		if (ContrastBolusRoute->getInformationEntity() == UnknownIE) ContrastBolusRoute->setInformationEntity(ie);
	}

	ContrastBolusAdministrationRouteSequence = (*list)[TagFromName(ContrastBolusAdministrationRouteSequence)];
	if (ContrastBolusAdministrationRouteSequence) {
		if (ContrastBolusAdministrationRouteSequence->getInformationEntity() == UnknownIE) ContrastBolusAdministrationRouteSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ContrastBolusVolume = (*list)[TagFromName(ContrastBolusVolume)];
	if (ContrastBolusVolume) {
		if (ContrastBolusVolume->getInformationEntity() == UnknownIE) ContrastBolusVolume->setInformationEntity(ie);
	}

	ContrastBolusStartTime = (*list)[TagFromName(ContrastBolusStartTime)];
	if (ContrastBolusStartTime) {
		if (ContrastBolusStartTime->getInformationEntity() == UnknownIE) ContrastBolusStartTime->setInformationEntity(ie);
	}

	ContrastBolusStopTime = (*list)[TagFromName(ContrastBolusStopTime)];
	if (ContrastBolusStopTime) {
		if (ContrastBolusStopTime->getInformationEntity() == UnknownIE) ContrastBolusStopTime->setInformationEntity(ie);
	}

	ContrastBolusTotalDose = (*list)[TagFromName(ContrastBolusTotalDose)];
	if (ContrastBolusTotalDose) {
		if (ContrastBolusTotalDose->getInformationEntity() == UnknownIE) ContrastBolusTotalDose->setInformationEntity(ie);
	}

	ContrastFlowRate = (*list)[TagFromName(ContrastFlowRate)];
	if (ContrastFlowRate) {
		if (ContrastFlowRate->getInformationEntity() == UnknownIE) ContrastFlowRate->setInformationEntity(ie);
	}

	ContrastFlowDuration = (*list)[TagFromName(ContrastFlowDuration)];
	if (ContrastFlowDuration) {
		if (ContrastFlowDuration->getInformationEntity() == UnknownIE) ContrastFlowDuration->setInformationEntity(ie);
	}

	ContrastBolusIngredient = (*list)[TagFromName(ContrastBolusIngredient)];
	if (ContrastBolusIngredient) {
		if (ContrastBolusIngredient->getInformationEntity() == UnknownIE) ContrastBolusIngredient->setInformationEntity(ie);
	}

	ContrastBolusIngredientConcentration = (*list)[TagFromName(ContrastBolusIngredientConcentration)];
	if (ContrastBolusIngredientConcentration) {
		if (ContrastBolusIngredientConcentration->getInformationEntity() == UnknownIE) ContrastBolusIngredientConcentration->setInformationEntity(ie);
	}

}

Module_EnhancedContrastBolus::Module_EnhancedContrastBolus(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedContrastBolus";

	ContrastBolusAgentSequence = (*list)[TagFromName(ContrastBolusAgentSequence)];
	if (ContrastBolusAgentSequence) {
		if (ContrastBolusAgentSequence->getInformationEntity() == UnknownIE) ContrastBolusAgentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_Cine::Module_Cine(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Cine";

	PreferredPlaybackSequencing = (*list)[TagFromName(PreferredPlaybackSequencing)];
	if (PreferredPlaybackSequencing) {
		if (PreferredPlaybackSequencing->getInformationEntity() == UnknownIE) PreferredPlaybackSequencing->setInformationEntity(ie);
	}

	FrameTime = (*list)[TagFromName(FrameTime)];
	if (FrameTime) {
		if (FrameTime->getInformationEntity() == UnknownIE) FrameTime->setInformationEntity(ie);
	}

	FrameTimeVector = (*list)[TagFromName(FrameTimeVector)];
	if (FrameTimeVector) {
		if (FrameTimeVector->getInformationEntity() == UnknownIE) FrameTimeVector->setInformationEntity(ie);
	}

	StartTrim = (*list)[TagFromName(StartTrim)];
	if (StartTrim) {
		if (StartTrim->getInformationEntity() == UnknownIE) StartTrim->setInformationEntity(ie);
	}

	StopTrim = (*list)[TagFromName(StopTrim)];
	if (StopTrim) {
		if (StopTrim->getInformationEntity() == UnknownIE) StopTrim->setInformationEntity(ie);
	}

	RecommendedDisplayFrameRate = (*list)[TagFromName(RecommendedDisplayFrameRate)];
	if (RecommendedDisplayFrameRate) {
		if (RecommendedDisplayFrameRate->getInformationEntity() == UnknownIE) RecommendedDisplayFrameRate->setInformationEntity(ie);
	}

	CineRate = (*list)[TagFromName(CineRate)];
	if (CineRate) {
		if (CineRate->getInformationEntity() == UnknownIE) CineRate->setInformationEntity(ie);
	}

	FrameDelay = (*list)[TagFromName(FrameDelay)];
	if (FrameDelay) {
		if (FrameDelay->getInformationEntity() == UnknownIE) FrameDelay->setInformationEntity(ie);
	}

	ImageTriggerDelay = (*list)[TagFromName(ImageTriggerDelay)];
	if (ImageTriggerDelay) {
		if (ImageTriggerDelay->getInformationEntity() == UnknownIE) ImageTriggerDelay->setInformationEntity(ie);
	}

	EffectiveDuration = (*list)[TagFromName(EffectiveDuration)];
	if (EffectiveDuration) {
		if (EffectiveDuration->getInformationEntity() == UnknownIE) EffectiveDuration->setInformationEntity(ie);
	}

	ActualFrameDuration = (*list)[TagFromName(ActualFrameDuration)];
	if (ActualFrameDuration) {
		if (ActualFrameDuration->getInformationEntity() == UnknownIE) ActualFrameDuration->setInformationEntity(ie);
	}

	MultiplexedAudioChannelsDescriptionCodeSequence = (*list)[TagFromName(MultiplexedAudioChannelsDescriptionCodeSequence)];
	if (MultiplexedAudioChannelsDescriptionCodeSequence) {
		if (MultiplexedAudioChannelsDescriptionCodeSequence->getInformationEntity() == UnknownIE) MultiplexedAudioChannelsDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_MultiFrame::Module_MultiFrame(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrame";

	NumberOfFrames = (*list)[TagFromName(NumberOfFrames)];
	if (NumberOfFrames) {
		if (NumberOfFrames->getInformationEntity() == UnknownIE) NumberOfFrames->setInformationEntity(ie);
	}

	FrameIncrementPointer = (*list)[TagFromName(FrameIncrementPointer)];
	if (FrameIncrementPointer) {
		if (FrameIncrementPointer->getInformationEntity() == UnknownIE) FrameIncrementPointer->setInformationEntity(ie);
	}

	StereoPairsPresent = (*list)[TagFromName(StereoPairsPresent)];
	if (StereoPairsPresent) {
		if (StereoPairsPresent->getInformationEntity() == UnknownIE) StereoPairsPresent->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsCommon::Module_MultiFrameFunctionalGroupsCommon(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsCommon";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	NumberOfFrames = (*list)[TagFromName(NumberOfFrames)];
	if (NumberOfFrames) {
		if (NumberOfFrames->getInformationEntity() == UnknownIE) NumberOfFrames->setInformationEntity(ie);
	}

	StereoPairsPresent = (*list)[TagFromName(StereoPairsPresent)];
	if (StereoPairsPresent) {
		if (StereoPairsPresent->getInformationEntity() == UnknownIE) StereoPairsPresent->setInformationEntity(ie);
	}

	ConcatenationFrameOffsetNumber = (*list)[TagFromName(ConcatenationFrameOffsetNumber)];
	if (ConcatenationFrameOffsetNumber) {
		if (ConcatenationFrameOffsetNumber->getInformationEntity() == UnknownIE) ConcatenationFrameOffsetNumber->setInformationEntity(ie);
	}

	RepresentativeFrameNumber = (*list)[TagFromName(RepresentativeFrameNumber)];
	if (RepresentativeFrameNumber) {
		if (RepresentativeFrameNumber->getInformationEntity() == UnknownIE) RepresentativeFrameNumber->setInformationEntity(ie);
	}

	ConcatenationUID = (*list)[TagFromName(ConcatenationUID)];
	if (ConcatenationUID) {
		if (ConcatenationUID->getInformationEntity() == UnknownIE) ConcatenationUID->setInformationEntity(ie);
	}

	SOPInstanceUIDOfConcatenationSource = (*list)[TagFromName(SOPInstanceUIDOfConcatenationSource)];
	if (SOPInstanceUIDOfConcatenationSource) {
		if (SOPInstanceUIDOfConcatenationSource->getInformationEntity() == UnknownIE) SOPInstanceUIDOfConcatenationSource->setInformationEntity(ie);
	}

	InConcatenationNumber = (*list)[TagFromName(InConcatenationNumber)];
	if (InConcatenationNumber) {
		if (InConcatenationNumber->getInformationEntity() == UnknownIE) InConcatenationNumber->setInformationEntity(ie);
	}

	InConcatenationTotalNumber = (*list)[TagFromName(InConcatenationTotalNumber)];
	if (InConcatenationTotalNumber) {
		if (InConcatenationTotalNumber->getInformationEntity() == UnknownIE) InConcatenationTotalNumber->setInformationEntity(ie);
	}

}

Macro_PixelMeasuresMacro::Macro_PixelMeasuresMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PixelMeasuresMacro";

	PixelMeasuresSequence = (*list)[TagFromName(PixelMeasuresSequence)];
	if (PixelMeasuresSequence) {
		if (PixelMeasuresSequence->getInformationEntity() == UnknownIE) PixelMeasuresSequence->setInformationEntity(ie);
	}

}

Macro_FrameContentMacro::Macro_FrameContentMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameContentMacro";

	FrameContentSequence = (*list)[TagFromName(FrameContentSequence)];
	if (FrameContentSequence) {
		if (FrameContentSequence->getInformationEntity() == UnknownIE) FrameContentSequence->setInformationEntity(ie);
	}

}

Macro_PlanePositionMacro::Macro_PlanePositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PlanePositionMacro";

	PlanePositionSequence = (*list)[TagFromName(PlanePositionSequence)];
	if (PlanePositionSequence) {
		if (PlanePositionSequence->getInformationEntity() == UnknownIE) PlanePositionSequence->setInformationEntity(ie);
	}

}

Macro_PlaneOrientationMacro::Macro_PlaneOrientationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PlaneOrientationMacro";

	PlaneOrientationSequence = (*list)[TagFromName(PlaneOrientationSequence)];
	if (PlaneOrientationSequence) {
		if (PlaneOrientationSequence->getInformationEntity() == UnknownIE) PlaneOrientationSequence->setInformationEntity(ie);
	}

}

Macro_ReferencedImageMacro::Macro_ReferencedImageMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ReferencedImageMacro";

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_DerivationImageMacro::Macro_DerivationImageMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DerivationImageMacro";

	DerivationImageSequence = (*list)[TagFromName(DerivationImageSequence)];
	if (DerivationImageSequence) {
		if (DerivationImageSequence->getInformationEntity() == UnknownIE) DerivationImageSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_CardiacSynchronizationMacro::Macro_CardiacSynchronizationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CardiacSynchronizationMacro";

	CardiacSynchronizationSequence = (*list)[TagFromName(CardiacSynchronizationSequence)];
	if (CardiacSynchronizationSequence) {
		if (CardiacSynchronizationSequence->getInformationEntity() == UnknownIE) CardiacSynchronizationSequence->setInformationEntity(ie);
	}

}

Macro_FrameAnatomyMacro::Macro_FrameAnatomyMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameAnatomyMacro";

	FrameAnatomySequence = (*list)[TagFromName(FrameAnatomySequence)];
	if (FrameAnatomySequence) {
		if (FrameAnatomySequence->getInformationEntity() == UnknownIE) FrameAnatomySequence->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyMandatoryMacro(list,ie);
}

Macro_PixelValueTransformationMacro::Macro_PixelValueTransformationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PixelValueTransformationMacro";

	PixelValueTransformationSequence = (*list)[TagFromName(PixelValueTransformationSequence)];
	if (PixelValueTransformationSequence) {
		if (PixelValueTransformationSequence->getInformationEntity() == UnknownIE) PixelValueTransformationSequence->setInformationEntity(ie);
	}

}

Macro_FrameVOILUTMacro::Macro_FrameVOILUTMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameVOILUTMacro";

	FrameVOILUTSequence = (*list)[TagFromName(FrameVOILUTSequence)];
	if (FrameVOILUTSequence) {
		if (FrameVOILUTSequence->getInformationEntity() == UnknownIE) FrameVOILUTSequence->setInformationEntity(ie);
	}

}

Macro_RealWorldValueMappingMacro::Macro_RealWorldValueMappingMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RealWorldValueMappingMacro";

	RealWorldValueMappingSequence = (*list)[TagFromName(RealWorldValueMappingSequence)];
	if (RealWorldValueMappingSequence) {
		if (RealWorldValueMappingSequence->getInformationEntity() == UnknownIE) RealWorldValueMappingSequence->setInformationEntity(ie);
	}

	new Macro_RealWorldValueMappingItemMacro(list,ie);
}

Macro_RealWorldValueMappingItemMacro::Macro_RealWorldValueMappingItemMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RealWorldValueMappingItemMacro";

	RealWorldValueFirstValueMapped = (*list)[TagFromName(RealWorldValueFirstValueMapped)];
	if (RealWorldValueFirstValueMapped) {
		if (RealWorldValueFirstValueMapped->getInformationEntity() == UnknownIE) RealWorldValueFirstValueMapped->setInformationEntity(ie);
	}

	RealWorldValueLastValueMapped = (*list)[TagFromName(RealWorldValueLastValueMapped)];
	if (RealWorldValueLastValueMapped) {
		if (RealWorldValueLastValueMapped->getInformationEntity() == UnknownIE) RealWorldValueLastValueMapped->setInformationEntity(ie);
	}

	DoubleFloatRealWorldValueFirstValueMapped = (*list)[TagFromName(DoubleFloatRealWorldValueFirstValueMapped)];
	if (DoubleFloatRealWorldValueFirstValueMapped) {
		if (DoubleFloatRealWorldValueFirstValueMapped->getInformationEntity() == UnknownIE) DoubleFloatRealWorldValueFirstValueMapped->setInformationEntity(ie);
	}

	DoubleFloatRealWorldValueLastValueMapped = (*list)[TagFromName(DoubleFloatRealWorldValueLastValueMapped)];
	if (DoubleFloatRealWorldValueLastValueMapped) {
		if (DoubleFloatRealWorldValueLastValueMapped->getInformationEntity() == UnknownIE) DoubleFloatRealWorldValueLastValueMapped->setInformationEntity(ie);
	}

	RealWorldValueIntercept = (*list)[TagFromName(RealWorldValueIntercept)];
	if (RealWorldValueIntercept) {
		if (RealWorldValueIntercept->getInformationEntity() == UnknownIE) RealWorldValueIntercept->setInformationEntity(ie);
	}

	RealWorldValueSlope = (*list)[TagFromName(RealWorldValueSlope)];
	if (RealWorldValueSlope) {
		if (RealWorldValueSlope->getInformationEntity() == UnknownIE) RealWorldValueSlope->setInformationEntity(ie);
	}

	RealWorldValueLUTData = (*list)[TagFromName(RealWorldValueLUTData)];
	if (RealWorldValueLUTData) {
		if (RealWorldValueLUTData->getInformationEntity() == UnknownIE) RealWorldValueLUTData->setInformationEntity(ie);
	}

	LUTExplanation = (*list)[TagFromName(LUTExplanation)];
	if (LUTExplanation) {
		if (LUTExplanation->getInformationEntity() == UnknownIE) LUTExplanation->setInformationEntity(ie);
	}

	LUTLabel = (*list)[TagFromName(LUTLabel)];
	if (LUTLabel) {
		if (LUTLabel->getInformationEntity() == UnknownIE) LUTLabel->setInformationEntity(ie);
	}

	MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
	if (MeasurementUnitsCodeSequence) {
		if (MeasurementUnitsCodeSequence->getInformationEntity() == UnknownIE) MeasurementUnitsCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	QuantityDefinitionSequence = (*list)[TagFromName(QuantityDefinitionSequence)];
	if (QuantityDefinitionSequence) {
		if (QuantityDefinitionSequence->getInformationEntity() == UnknownIE) QuantityDefinitionSequence->setInformationEntity(ie);
	}

	new Macro_ContentItemMacro(list,ie);
}

Macro_ContrastBolusUsageMacro::Macro_ContrastBolusUsageMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContrastBolusUsageMacro";

	ContrastBolusUsageSequence = (*list)[TagFromName(ContrastBolusUsageSequence)];
	if (ContrastBolusUsageSequence) {
		if (ContrastBolusUsageSequence->getInformationEntity() == UnknownIE) ContrastBolusUsageSequence->setInformationEntity(ie);
	}

}

Macro_PixelIntensityRelationshipLUTMacro::Macro_PixelIntensityRelationshipLUTMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PixelIntensityRelationshipLUTMacro";

	PixelIntensityRelationshipLUTSequence = (*list)[TagFromName(PixelIntensityRelationshipLUTSequence)];
	if (PixelIntensityRelationshipLUTSequence) {
		if (PixelIntensityRelationshipLUTSequence->getInformationEntity() == UnknownIE) PixelIntensityRelationshipLUTSequence->setInformationEntity(ie);
	}

}

Macro_FramePixelShiftMacro::Macro_FramePixelShiftMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FramePixelShiftMacro";

	FramePixelShiftSequence = (*list)[TagFromName(FramePixelShiftSequence)];
	if (FramePixelShiftSequence) {
		if (FramePixelShiftSequence->getInformationEntity() == UnknownIE) FramePixelShiftSequence->setInformationEntity(ie);
	}

}

Macro_PatientOrientationInFrameMacro::Macro_PatientOrientationInFrameMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientOrientationInFrameMacro";

	PatientOrientationInFrameSequence = (*list)[TagFromName(PatientOrientationInFrameSequence)];
	if (PatientOrientationInFrameSequence) {
		if (PatientOrientationInFrameSequence->getInformationEntity() == UnknownIE) PatientOrientationInFrameSequence->setInformationEntity(ie);
	}

}

Macro_FrameDisplayShutterMacro::Macro_FrameDisplayShutterMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameDisplayShutterMacro";

	FrameDisplayShutterSequence = (*list)[TagFromName(FrameDisplayShutterSequence)];
	if (FrameDisplayShutterSequence) {
		if (FrameDisplayShutterSequence->getInformationEntity() == UnknownIE) FrameDisplayShutterSequence->setInformationEntity(ie);
	}

	new Macro_DisplayShutterMacro(list,ie);
}

Macro_RespiratorySynchronizationMacro::Macro_RespiratorySynchronizationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RespiratorySynchronizationMacro";

	RespiratorySynchronizationSequence = (*list)[TagFromName(RespiratorySynchronizationSequence)];
	if (RespiratorySynchronizationSequence) {
		if (RespiratorySynchronizationSequence->getInformationEntity() == UnknownIE) RespiratorySynchronizationSequence->setInformationEntity(ie);
	}

}

Macro_IrradiationEventIdentificationMacro::Macro_IrradiationEventIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IrradiationEventIdentificationMacro";

	IrradiationEventIdentificationSequence = (*list)[TagFromName(IrradiationEventIdentificationSequence)];
	if (IrradiationEventIdentificationSequence) {
		if (IrradiationEventIdentificationSequence->getInformationEntity() == UnknownIE) IrradiationEventIdentificationSequence->setInformationEntity(ie);
	}

}

Macro_RadiopharmaceuticalUsageMacro::Macro_RadiopharmaceuticalUsageMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RadiopharmaceuticalUsageMacro";

	RadiopharmaceuticalUsageSequence = (*list)[TagFromName(RadiopharmaceuticalUsageSequence)];
	if (RadiopharmaceuticalUsageSequence) {
		if (RadiopharmaceuticalUsageSequence->getInformationEntity() == UnknownIE) RadiopharmaceuticalUsageSequence->setInformationEntity(ie);
	}

}

Macro_PatientPhysiologicalStateMacro::Macro_PatientPhysiologicalStateMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientPhysiologicalStateMacro";

	PatientPhysiologicalStateSequence = (*list)[TagFromName(PatientPhysiologicalStateSequence)];
	if (PatientPhysiologicalStateSequence) {
		if (PatientPhysiologicalStateSequence->getInformationEntity() == UnknownIE) PatientPhysiologicalStateSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_MultiFrameDimension::Module_MultiFrameDimension(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameDimension";

	DimensionOrganizationSequence = (*list)[TagFromName(DimensionOrganizationSequence)];
	if (DimensionOrganizationSequence) {
		if (DimensionOrganizationSequence->getInformationEntity() == UnknownIE) DimensionOrganizationSequence->setInformationEntity(ie);
	}

	DimensionOrganizationType = (*list)[TagFromName(DimensionOrganizationType)];
	if (DimensionOrganizationType) {
		if (DimensionOrganizationType->getInformationEntity() == UnknownIE) DimensionOrganizationType->setInformationEntity(ie);
	}

	DimensionIndexSequence = (*list)[TagFromName(DimensionIndexSequence)];
	if (DimensionIndexSequence) {
		if (DimensionIndexSequence->getInformationEntity() == UnknownIE) DimensionIndexSequence->setInformationEntity(ie);
	}

}

Module_CardiacSynchronization::Module_CardiacSynchronization(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CardiacSynchronization";

	CardiacSynchronizationTechnique = (*list)[TagFromName(CardiacSynchronizationTechnique)];
	if (CardiacSynchronizationTechnique) {
		if (CardiacSynchronizationTechnique->getInformationEntity() == UnknownIE) CardiacSynchronizationTechnique->setInformationEntity(ie);
	}

	CardiacSignalSource = (*list)[TagFromName(CardiacSignalSource)];
	if (CardiacSignalSource) {
		if (CardiacSignalSource->getInformationEntity() == UnknownIE) CardiacSignalSource->setInformationEntity(ie);
	}

	CardiacRRIntervalSpecified = (*list)[TagFromName(CardiacRRIntervalSpecified)];
	if (CardiacRRIntervalSpecified) {
		if (CardiacRRIntervalSpecified->getInformationEntity() == UnknownIE) CardiacRRIntervalSpecified->setInformationEntity(ie);
	}

	CardiacBeatRejectionTechnique = (*list)[TagFromName(CardiacBeatRejectionTechnique)];
	if (CardiacBeatRejectionTechnique) {
		if (CardiacBeatRejectionTechnique->getInformationEntity() == UnknownIE) CardiacBeatRejectionTechnique->setInformationEntity(ie);
	}

	LowRRValue = (*list)[TagFromName(LowRRValue)];
	if (LowRRValue) {
		if (LowRRValue->getInformationEntity() == UnknownIE) LowRRValue->setInformationEntity(ie);
	}

	HighRRValue = (*list)[TagFromName(HighRRValue)];
	if (HighRRValue) {
		if (HighRRValue->getInformationEntity() == UnknownIE) HighRRValue->setInformationEntity(ie);
	}

	IntervalsAcquired = (*list)[TagFromName(IntervalsAcquired)];
	if (IntervalsAcquired) {
		if (IntervalsAcquired->getInformationEntity() == UnknownIE) IntervalsAcquired->setInformationEntity(ie);
	}

	IntervalsRejected = (*list)[TagFromName(IntervalsRejected)];
	if (IntervalsRejected) {
		if (IntervalsRejected->getInformationEntity() == UnknownIE) IntervalsRejected->setInformationEntity(ie);
	}

	SkipBeats = (*list)[TagFromName(SkipBeats)];
	if (SkipBeats) {
		if (SkipBeats->getInformationEntity() == UnknownIE) SkipBeats->setInformationEntity(ie);
	}

	CardiacFramingType = (*list)[TagFromName(CardiacFramingType)];
	if (CardiacFramingType) {
		if (CardiacFramingType->getInformationEntity() == UnknownIE) CardiacFramingType->setInformationEntity(ie);
	}

}

Module_RespiratorySynchronization::Module_RespiratorySynchronization(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RespiratorySynchronization";

	RespiratoryMotionCompensationTechnique = (*list)[TagFromName(RespiratoryMotionCompensationTechnique)];
	if (RespiratoryMotionCompensationTechnique) {
		if (RespiratoryMotionCompensationTechnique->getInformationEntity() == UnknownIE) RespiratoryMotionCompensationTechnique->setInformationEntity(ie);
	}

	RespiratorySignalSource = (*list)[TagFromName(RespiratorySignalSource)];
	if (RespiratorySignalSource) {
		if (RespiratorySignalSource->getInformationEntity() == UnknownIE) RespiratorySignalSource->setInformationEntity(ie);
	}

	RespiratoryTriggerDelayThreshold = (*list)[TagFromName(RespiratoryTriggerDelayThreshold)];
	if (RespiratoryTriggerDelayThreshold) {
		if (RespiratoryTriggerDelayThreshold->getInformationEntity() == UnknownIE) RespiratoryTriggerDelayThreshold->setInformationEntity(ie);
	}

	RespiratoryTriggerType = (*list)[TagFromName(RespiratoryTriggerType)];
	if (RespiratoryTriggerType) {
		if (RespiratoryTriggerType->getInformationEntity() == UnknownIE) RespiratoryTriggerType->setInformationEntity(ie);
	}

}

Module_BulkMotionSynchronization::Module_BulkMotionSynchronization(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BulkMotionSynchronization";

	BulkMotionCompensationTechnique = (*list)[TagFromName(BulkMotionCompensationTechnique)];
	if (BulkMotionCompensationTechnique) {
		if (BulkMotionCompensationTechnique->getInformationEntity() == UnknownIE) BulkMotionCompensationTechnique->setInformationEntity(ie);
	}

	BulkMotionSignalSource = (*list)[TagFromName(BulkMotionSignalSource)];
	if (BulkMotionSignalSource) {
		if (BulkMotionSignalSource->getInformationEntity() == UnknownIE) BulkMotionSignalSource->setInformationEntity(ie);
	}

}

Module_SupplementalPaletteColorLUT::Module_SupplementalPaletteColorLUT(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SupplementalPaletteColorLUT";

	RedPaletteColorLookupTableDescriptor = (*list)[TagFromName(RedPaletteColorLookupTableDescriptor)];
	if (RedPaletteColorLookupTableDescriptor) {
		if (RedPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableDescriptor = (*list)[TagFromName(GreenPaletteColorLookupTableDescriptor)];
	if (GreenPaletteColorLookupTableDescriptor) {
		if (GreenPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableDescriptor = (*list)[TagFromName(BluePaletteColorLookupTableDescriptor)];
	if (BluePaletteColorLookupTableDescriptor) {
		if (BluePaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	RedPaletteColorLookupTableData = (*list)[TagFromName(RedPaletteColorLookupTableData)];
	if (RedPaletteColorLookupTableData) {
		if (RedPaletteColorLookupTableData->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableData->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableData = (*list)[TagFromName(GreenPaletteColorLookupTableData)];
	if (GreenPaletteColorLookupTableData) {
		if (GreenPaletteColorLookupTableData->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableData->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableData = (*list)[TagFromName(BluePaletteColorLookupTableData)];
	if (BluePaletteColorLookupTableData) {
		if (BluePaletteColorLookupTableData->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableData->setInformationEntity(ie);
	}

}

Macro_PaletteColorLookupTableMacro::Macro_PaletteColorLookupTableMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PaletteColorLookupTableMacro";

	RedPaletteColorLookupTableDescriptor = (*list)[TagFromName(RedPaletteColorLookupTableDescriptor)];
	if (RedPaletteColorLookupTableDescriptor) {
		if (RedPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableDescriptor = (*list)[TagFromName(GreenPaletteColorLookupTableDescriptor)];
	if (GreenPaletteColorLookupTableDescriptor) {
		if (GreenPaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableDescriptor = (*list)[TagFromName(BluePaletteColorLookupTableDescriptor)];
	if (BluePaletteColorLookupTableDescriptor) {
		if (BluePaletteColorLookupTableDescriptor->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableDescriptor->setInformationEntity(ie);
	}

	PaletteColorLookupTableUID = (*list)[TagFromName(PaletteColorLookupTableUID)];
	if (PaletteColorLookupTableUID) {
		if (PaletteColorLookupTableUID->getInformationEntity() == UnknownIE) PaletteColorLookupTableUID->setInformationEntity(ie);
	}

	RedPaletteColorLookupTableData = (*list)[TagFromName(RedPaletteColorLookupTableData)];
	if (RedPaletteColorLookupTableData) {
		if (RedPaletteColorLookupTableData->getInformationEntity() == UnknownIE) RedPaletteColorLookupTableData->setInformationEntity(ie);
	}

	GreenPaletteColorLookupTableData = (*list)[TagFromName(GreenPaletteColorLookupTableData)];
	if (GreenPaletteColorLookupTableData) {
		if (GreenPaletteColorLookupTableData->getInformationEntity() == UnknownIE) GreenPaletteColorLookupTableData->setInformationEntity(ie);
	}

	BluePaletteColorLookupTableData = (*list)[TagFromName(BluePaletteColorLookupTableData)];
	if (BluePaletteColorLookupTableData) {
		if (BluePaletteColorLookupTableData->getInformationEntity() == UnknownIE) BluePaletteColorLookupTableData->setInformationEntity(ie);
	}

	SegmentedRedPaletteColorLookupTableData = (*list)[TagFromName(SegmentedRedPaletteColorLookupTableData)];
	if (SegmentedRedPaletteColorLookupTableData) {
		if (SegmentedRedPaletteColorLookupTableData->getInformationEntity() == UnknownIE) SegmentedRedPaletteColorLookupTableData->setInformationEntity(ie);
	}

	SegmentedGreenPaletteColorLookupTableData = (*list)[TagFromName(SegmentedGreenPaletteColorLookupTableData)];
	if (SegmentedGreenPaletteColorLookupTableData) {
		if (SegmentedGreenPaletteColorLookupTableData->getInformationEntity() == UnknownIE) SegmentedGreenPaletteColorLookupTableData->setInformationEntity(ie);
	}

	SegmentedBluePaletteColorLookupTableData = (*list)[TagFromName(SegmentedBluePaletteColorLookupTableData)];
	if (SegmentedBluePaletteColorLookupTableData) {
		if (SegmentedBluePaletteColorLookupTableData->getInformationEntity() == UnknownIE) SegmentedBluePaletteColorLookupTableData->setInformationEntity(ie);
	}

}

Module_PaletteColorLookupTable::Module_PaletteColorLookupTable(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PaletteColorLookupTable";

	new Macro_PaletteColorLookupTableMacro(list,ie);
}

Module_PatientOrientation::Module_PatientOrientation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientOrientation";

	new Macro_PatientOrientationMacro(list,ie);
}

Module_ImageEquipmentCoordinateRelationship::Module_ImageEquipmentCoordinateRelationship(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageEquipmentCoordinateRelationship";

	ImageToEquipmentMappingMatrix = (*list)[TagFromName(ImageToEquipmentMappingMatrix)];
	if (ImageToEquipmentMappingMatrix) {
		if (ImageToEquipmentMappingMatrix->getInformationEntity() == UnknownIE) ImageToEquipmentMappingMatrix->setInformationEntity(ie);
	}

	EquipmentCoordinateSystemIdentification = (*list)[TagFromName(EquipmentCoordinateSystemIdentification)];
	if (EquipmentCoordinateSystemIdentification) {
		if (EquipmentCoordinateSystemIdentification->getInformationEntity() == UnknownIE) EquipmentCoordinateSystemIdentification->setInformationEntity(ie);
	}

}

Module_CRSeries::Module_CRSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CRSeries";

	BodyPartExamined = (*list)[TagFromName(BodyPartExamined)];
	if (BodyPartExamined) {
		if (BodyPartExamined->getInformationEntity() == UnknownIE) BodyPartExamined->setInformationEntity(ie);
	}

	ViewPosition = (*list)[TagFromName(ViewPosition)];
	if (ViewPosition) {
		if (ViewPosition->getInformationEntity() == UnknownIE) ViewPosition->setInformationEntity(ie);
	}

	FilterType = (*list)[TagFromName(FilterType)];
	if (FilterType) {
		if (FilterType->getInformationEntity() == UnknownIE) FilterType->setInformationEntity(ie);
	}

	CollimatorGridName = (*list)[TagFromName(CollimatorGridName)];
	if (CollimatorGridName) {
		if (CollimatorGridName->getInformationEntity() == UnknownIE) CollimatorGridName->setInformationEntity(ie);
	}

	FocalSpots = (*list)[TagFromName(FocalSpots)];
	if (FocalSpots) {
		if (FocalSpots->getInformationEntity() == UnknownIE) FocalSpots->setInformationEntity(ie);
	}

	PlateType = (*list)[TagFromName(PlateType)];
	if (PlateType) {
		if (PlateType->getInformationEntity() == UnknownIE) PlateType->setInformationEntity(ie);
	}

	PhosphorType = (*list)[TagFromName(PhosphorType)];
	if (PhosphorType) {
		if (PhosphorType->getInformationEntity() == UnknownIE) PhosphorType->setInformationEntity(ie);
	}

}

Module_CRImage::Module_CRImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CRImage";

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	PlateID = (*list)[TagFromName(PlateID)];
	if (PlateID) {
		if (PlateID->getInformationEntity() == UnknownIE) PlateID->setInformationEntity(ie);
	}

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	XRayTubeCurrent = (*list)[TagFromName(XRayTubeCurrent)];
	if (XRayTubeCurrent) {
		if (XRayTubeCurrent->getInformationEntity() == UnknownIE) XRayTubeCurrent->setInformationEntity(ie);
	}

	Exposure = (*list)[TagFromName(Exposure)];
	if (Exposure) {
		if (Exposure->getInformationEntity() == UnknownIE) Exposure->setInformationEntity(ie);
	}

	ExposureInuAs = (*list)[TagFromName(ExposureInuAs)];
	if (ExposureInuAs) {
		if (ExposureInuAs->getInformationEntity() == UnknownIE) ExposureInuAs->setInformationEntity(ie);
	}

	ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
	if (ImagerPixelSpacing) {
		if (ImagerPixelSpacing->getInformationEntity() == UnknownIE) ImagerPixelSpacing->setInformationEntity(ie);
	}

	new Macro_BasicPixelSpacingCalibrationMacro(list,ie);
	GeneratorPower = (*list)[TagFromName(GeneratorPower)];
	if (GeneratorPower) {
		if (GeneratorPower->getInformationEntity() == UnknownIE) GeneratorPower->setInformationEntity(ie);
	}

	AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
	if (AcquisitionDeviceProcessingDescription) {
		if (AcquisitionDeviceProcessingDescription->getInformationEntity() == UnknownIE) AcquisitionDeviceProcessingDescription->setInformationEntity(ie);
	}

	AcquisitionDeviceProcessingCode = (*list)[TagFromName(AcquisitionDeviceProcessingCode)];
	if (AcquisitionDeviceProcessingCode) {
		if (AcquisitionDeviceProcessingCode->getInformationEntity() == UnknownIE) AcquisitionDeviceProcessingCode->setInformationEntity(ie);
	}

	CassetteOrientation = (*list)[TagFromName(CassetteOrientation)];
	if (CassetteOrientation) {
		if (CassetteOrientation->getInformationEntity() == UnknownIE) CassetteOrientation->setInformationEntity(ie);
	}

	CassetteSize = (*list)[TagFromName(CassetteSize)];
	if (CassetteSize) {
		if (CassetteSize->getInformationEntity() == UnknownIE) CassetteSize->setInformationEntity(ie);
	}

	ExposuresOnPlate = (*list)[TagFromName(ExposuresOnPlate)];
	if (ExposuresOnPlate) {
		if (ExposuresOnPlate->getInformationEntity() == UnknownIE) ExposuresOnPlate->setInformationEntity(ie);
	}

	RelativeXRayExposure = (*list)[TagFromName(RelativeXRayExposure)];
	if (RelativeXRayExposure) {
		if (RelativeXRayExposure->getInformationEntity() == UnknownIE) RelativeXRayExposure->setInformationEntity(ie);
	}

	Sensitivity = (*list)[TagFromName(Sensitivity)];
	if (Sensitivity) {
		if (Sensitivity->getInformationEntity() == UnknownIE) Sensitivity->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	new Macro_ExposureIndexMacro(list,ie);
}

Module_CTImage::Module_CTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	MultienergyCTAcquisition = (*list)[TagFromName(MultienergyCTAcquisition)];
	if (MultienergyCTAcquisition) {
		if (MultienergyCTAcquisition->getInformationEntity() == UnknownIE) MultienergyCTAcquisition->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	RescaleType = (*list)[TagFromName(RescaleType)];
	if (RescaleType) {
		if (RescaleType->getInformationEntity() == UnknownIE) RescaleType->setInformationEntity(ie);
	}

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	ScanOptions = (*list)[TagFromName(ScanOptions)];
	if (ScanOptions) {
		if (ScanOptions->getInformationEntity() == UnknownIE) ScanOptions->setInformationEntity(ie);
	}

	DataCollectionDiameter = (*list)[TagFromName(DataCollectionDiameter)];
	if (DataCollectionDiameter) {
		if (DataCollectionDiameter->getInformationEntity() == UnknownIE) DataCollectionDiameter->setInformationEntity(ie);
	}

	DataCollectionCenterPatient = (*list)[TagFromName(DataCollectionCenterPatient)];
	if (DataCollectionCenterPatient) {
		if (DataCollectionCenterPatient->getInformationEntity() == UnknownIE) DataCollectionCenterPatient->setInformationEntity(ie);
	}

	ReconstructionDiameter = (*list)[TagFromName(ReconstructionDiameter)];
	if (ReconstructionDiameter) {
		if (ReconstructionDiameter->getInformationEntity() == UnknownIE) ReconstructionDiameter->setInformationEntity(ie);
	}

	ReconstructionTargetCenterPatient = (*list)[TagFromName(ReconstructionTargetCenterPatient)];
	if (ReconstructionTargetCenterPatient) {
		if (ReconstructionTargetCenterPatient->getInformationEntity() == UnknownIE) ReconstructionTargetCenterPatient->setInformationEntity(ie);
	}

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	GantryDetectorTilt = (*list)[TagFromName(GantryDetectorTilt)];
	if (GantryDetectorTilt) {
		if (GantryDetectorTilt->getInformationEntity() == UnknownIE) GantryDetectorTilt->setInformationEntity(ie);
	}

	TableHeight = (*list)[TagFromName(TableHeight)];
	if (TableHeight) {
		if (TableHeight->getInformationEntity() == UnknownIE) TableHeight->setInformationEntity(ie);
	}

	RotationDirection = (*list)[TagFromName(RotationDirection)];
	if (RotationDirection) {
		if (RotationDirection->getInformationEntity() == UnknownIE) RotationDirection->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	XRayTubeCurrent = (*list)[TagFromName(XRayTubeCurrent)];
	if (XRayTubeCurrent) {
		if (XRayTubeCurrent->getInformationEntity() == UnknownIE) XRayTubeCurrent->setInformationEntity(ie);
	}

	Exposure = (*list)[TagFromName(Exposure)];
	if (Exposure) {
		if (Exposure->getInformationEntity() == UnknownIE) Exposure->setInformationEntity(ie);
	}

	ExposureInuAs = (*list)[TagFromName(ExposureInuAs)];
	if (ExposureInuAs) {
		if (ExposureInuAs->getInformationEntity() == UnknownIE) ExposureInuAs->setInformationEntity(ie);
	}

	FilterType = (*list)[TagFromName(FilterType)];
	if (FilterType) {
		if (FilterType->getInformationEntity() == UnknownIE) FilterType->setInformationEntity(ie);
	}

	GeneratorPower = (*list)[TagFromName(GeneratorPower)];
	if (GeneratorPower) {
		if (GeneratorPower->getInformationEntity() == UnknownIE) GeneratorPower->setInformationEntity(ie);
	}

	FocalSpots = (*list)[TagFromName(FocalSpots)];
	if (FocalSpots) {
		if (FocalSpots->getInformationEntity() == UnknownIE) FocalSpots->setInformationEntity(ie);
	}

	ConvolutionKernel = (*list)[TagFromName(ConvolutionKernel)];
	if (ConvolutionKernel) {
		if (ConvolutionKernel->getInformationEntity() == UnknownIE) ConvolutionKernel->setInformationEntity(ie);
	}

	RevolutionTime = (*list)[TagFromName(RevolutionTime)];
	if (RevolutionTime) {
		if (RevolutionTime->getInformationEntity() == UnknownIE) RevolutionTime->setInformationEntity(ie);
	}

	SingleCollimationWidth = (*list)[TagFromName(SingleCollimationWidth)];
	if (SingleCollimationWidth) {
		if (SingleCollimationWidth->getInformationEntity() == UnknownIE) SingleCollimationWidth->setInformationEntity(ie);
	}

	TotalCollimationWidth = (*list)[TagFromName(TotalCollimationWidth)];
	if (TotalCollimationWidth) {
		if (TotalCollimationWidth->getInformationEntity() == UnknownIE) TotalCollimationWidth->setInformationEntity(ie);
	}

	TableSpeed = (*list)[TagFromName(TableSpeed)];
	if (TableSpeed) {
		if (TableSpeed->getInformationEntity() == UnknownIE) TableSpeed->setInformationEntity(ie);
	}

	TableFeedPerRotation = (*list)[TagFromName(TableFeedPerRotation)];
	if (TableFeedPerRotation) {
		if (TableFeedPerRotation->getInformationEntity() == UnknownIE) TableFeedPerRotation->setInformationEntity(ie);
	}

	SpiralPitchFactor = (*list)[TagFromName(SpiralPitchFactor)];
	if (SpiralPitchFactor) {
		if (SpiralPitchFactor->getInformationEntity() == UnknownIE) SpiralPitchFactor->setInformationEntity(ie);
	}

	ExposureModulationType = (*list)[TagFromName(ExposureModulationType)];
	if (ExposureModulationType) {
		if (ExposureModulationType->getInformationEntity() == UnknownIE) ExposureModulationType->setInformationEntity(ie);
	}

	EstimatedDoseSaving = (*list)[TagFromName(EstimatedDoseSaving)];
	if (EstimatedDoseSaving) {
		if (EstimatedDoseSaving->getInformationEntity() == UnknownIE) EstimatedDoseSaving->setInformationEntity(ie);
	}

	CTDIvol = (*list)[TagFromName(CTDIvol)];
	if (CTDIvol) {
		if (CTDIvol->getInformationEntity() == UnknownIE) CTDIvol->setInformationEntity(ie);
	}

	CTDIPhantomTypeCodeSequence = (*list)[TagFromName(CTDIPhantomTypeCodeSequence)];
	if (CTDIPhantomTypeCodeSequence) {
		if (CTDIPhantomTypeCodeSequence->getInformationEntity() == UnknownIE) CTDIPhantomTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	WaterEquivalentDiameter = (*list)[TagFromName(WaterEquivalentDiameter)];
	if (WaterEquivalentDiameter) {
		if (WaterEquivalentDiameter->getInformationEntity() == UnknownIE) WaterEquivalentDiameter->setInformationEntity(ie);
	}

	WaterEquivalentDiameterCalculationMethodCodeSequence = (*list)[TagFromName(WaterEquivalentDiameterCalculationMethodCodeSequence)];
	if (WaterEquivalentDiameterCalculationMethodCodeSequence) {
		if (WaterEquivalentDiameterCalculationMethodCodeSequence->getInformationEntity() == UnknownIE) WaterEquivalentDiameterCalculationMethodCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ImageAndFluoroscopyAreaDoseProduct = (*list)[TagFromName(ImageAndFluoroscopyAreaDoseProduct)];
	if (ImageAndFluoroscopyAreaDoseProduct) {
		if (ImageAndFluoroscopyAreaDoseProduct->getInformationEntity() == UnknownIE) ImageAndFluoroscopyAreaDoseProduct->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
	CalciumScoringMassFactorPatient = (*list)[TagFromName(CalciumScoringMassFactorPatient)];
	if (CalciumScoringMassFactorPatient) {
		if (CalciumScoringMassFactorPatient->getInformationEntity() == UnknownIE) CalciumScoringMassFactorPatient->setInformationEntity(ie);
	}

	CalciumScoringMassFactorDevice = (*list)[TagFromName(CalciumScoringMassFactorDevice)];
	if (CalciumScoringMassFactorDevice) {
		if (CalciumScoringMassFactorDevice->getInformationEntity() == UnknownIE) CalciumScoringMassFactorDevice->setInformationEntity(ie);
	}

	EnergyWeightingFactor = (*list)[TagFromName(EnergyWeightingFactor)];
	if (EnergyWeightingFactor) {
		if (EnergyWeightingFactor->getInformationEntity() == UnknownIE) EnergyWeightingFactor->setInformationEntity(ie);
	}

	CTAdditionalXRaySourceSequence = (*list)[TagFromName(CTAdditionalXRaySourceSequence)];
	if (CTAdditionalXRaySourceSequence) {
		if (CTAdditionalXRaySourceSequence->getInformationEntity() == UnknownIE) CTAdditionalXRaySourceSequence->setInformationEntity(ie);
	}

	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

	new Macro_RTEquipmentCorrelationMacro(list,ie);
}

Module_MRImage::Module_MRImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	ScanningSequence = (*list)[TagFromName(ScanningSequence)];
	if (ScanningSequence) {
		if (ScanningSequence->getInformationEntity() == UnknownIE) ScanningSequence->setInformationEntity(ie);
	}

	SequenceVariant = (*list)[TagFromName(SequenceVariant)];
	if (SequenceVariant) {
		if (SequenceVariant->getInformationEntity() == UnknownIE) SequenceVariant->setInformationEntity(ie);
	}

	ScanOptions = (*list)[TagFromName(ScanOptions)];
	if (ScanOptions) {
		if (ScanOptions->getInformationEntity() == UnknownIE) ScanOptions->setInformationEntity(ie);
	}

	MRAcquisitionType = (*list)[TagFromName(MRAcquisitionType)];
	if (MRAcquisitionType) {
		if (MRAcquisitionType->getInformationEntity() == UnknownIE) MRAcquisitionType->setInformationEntity(ie);
	}

	RepetitionTime = (*list)[TagFromName(RepetitionTime)];
	if (RepetitionTime) {
		if (RepetitionTime->getInformationEntity() == UnknownIE) RepetitionTime->setInformationEntity(ie);
	}

	EchoTime = (*list)[TagFromName(EchoTime)];
	if (EchoTime) {
		if (EchoTime->getInformationEntity() == UnknownIE) EchoTime->setInformationEntity(ie);
	}

	EchoTrainLength = (*list)[TagFromName(EchoTrainLength)];
	if (EchoTrainLength) {
		if (EchoTrainLength->getInformationEntity() == UnknownIE) EchoTrainLength->setInformationEntity(ie);
	}

	InversionTime = (*list)[TagFromName(InversionTime)];
	if (InversionTime) {
		if (InversionTime->getInformationEntity() == UnknownIE) InversionTime->setInformationEntity(ie);
	}

	TriggerTime = (*list)[TagFromName(TriggerTime)];
	if (TriggerTime) {
		if (TriggerTime->getInformationEntity() == UnknownIE) TriggerTime->setInformationEntity(ie);
	}

	SequenceName = (*list)[TagFromName(SequenceName)];
	if (SequenceName) {
		if (SequenceName->getInformationEntity() == UnknownIE) SequenceName->setInformationEntity(ie);
	}

	AngioFlag = (*list)[TagFromName(AngioFlag)];
	if (AngioFlag) {
		if (AngioFlag->getInformationEntity() == UnknownIE) AngioFlag->setInformationEntity(ie);
	}

	NumberOfAverages = (*list)[TagFromName(NumberOfAverages)];
	if (NumberOfAverages) {
		if (NumberOfAverages->getInformationEntity() == UnknownIE) NumberOfAverages->setInformationEntity(ie);
	}

	ImagingFrequency = (*list)[TagFromName(ImagingFrequency)];
	if (ImagingFrequency) {
		if (ImagingFrequency->getInformationEntity() == UnknownIE) ImagingFrequency->setInformationEntity(ie);
	}

	ImagedNucleus = (*list)[TagFromName(ImagedNucleus)];
	if (ImagedNucleus) {
		if (ImagedNucleus->getInformationEntity() == UnknownIE) ImagedNucleus->setInformationEntity(ie);
	}

	EchoNumbers = (*list)[TagFromName(EchoNumbers)];
	if (EchoNumbers) {
		if (EchoNumbers->getInformationEntity() == UnknownIE) EchoNumbers->setInformationEntity(ie);
	}

	MagneticFieldStrength = (*list)[TagFromName(MagneticFieldStrength)];
	if (MagneticFieldStrength) {
		if (MagneticFieldStrength->getInformationEntity() == UnknownIE) MagneticFieldStrength->setInformationEntity(ie);
	}

	SpacingBetweenSlices = (*list)[TagFromName(SpacingBetweenSlices)];
	if (SpacingBetweenSlices) {
		if (SpacingBetweenSlices->getInformationEntity() == UnknownIE) SpacingBetweenSlices->setInformationEntity(ie);
	}

	NumberOfPhaseEncodingSteps = (*list)[TagFromName(NumberOfPhaseEncodingSteps)];
	if (NumberOfPhaseEncodingSteps) {
		if (NumberOfPhaseEncodingSteps->getInformationEntity() == UnknownIE) NumberOfPhaseEncodingSteps->setInformationEntity(ie);
	}

	PercentSampling = (*list)[TagFromName(PercentSampling)];
	if (PercentSampling) {
		if (PercentSampling->getInformationEntity() == UnknownIE) PercentSampling->setInformationEntity(ie);
	}

	PercentPhaseFieldOfView = (*list)[TagFromName(PercentPhaseFieldOfView)];
	if (PercentPhaseFieldOfView) {
		if (PercentPhaseFieldOfView->getInformationEntity() == UnknownIE) PercentPhaseFieldOfView->setInformationEntity(ie);
	}

	PixelBandwidth = (*list)[TagFromName(PixelBandwidth)];
	if (PixelBandwidth) {
		if (PixelBandwidth->getInformationEntity() == UnknownIE) PixelBandwidth->setInformationEntity(ie);
	}

	NominalInterval = (*list)[TagFromName(NominalInterval)];
	if (NominalInterval) {
		if (NominalInterval->getInformationEntity() == UnknownIE) NominalInterval->setInformationEntity(ie);
	}

	BeatRejectionFlag = (*list)[TagFromName(BeatRejectionFlag)];
	if (BeatRejectionFlag) {
		if (BeatRejectionFlag->getInformationEntity() == UnknownIE) BeatRejectionFlag->setInformationEntity(ie);
	}

	LowRRValue = (*list)[TagFromName(LowRRValue)];
	if (LowRRValue) {
		if (LowRRValue->getInformationEntity() == UnknownIE) LowRRValue->setInformationEntity(ie);
	}

	HighRRValue = (*list)[TagFromName(HighRRValue)];
	if (HighRRValue) {
		if (HighRRValue->getInformationEntity() == UnknownIE) HighRRValue->setInformationEntity(ie);
	}

	IntervalsAcquired = (*list)[TagFromName(IntervalsAcquired)];
	if (IntervalsAcquired) {
		if (IntervalsAcquired->getInformationEntity() == UnknownIE) IntervalsAcquired->setInformationEntity(ie);
	}

	IntervalsRejected = (*list)[TagFromName(IntervalsRejected)];
	if (IntervalsRejected) {
		if (IntervalsRejected->getInformationEntity() == UnknownIE) IntervalsRejected->setInformationEntity(ie);
	}

	PVCRejection = (*list)[TagFromName(PVCRejection)];
	if (PVCRejection) {
		if (PVCRejection->getInformationEntity() == UnknownIE) PVCRejection->setInformationEntity(ie);
	}

	SkipBeats = (*list)[TagFromName(SkipBeats)];
	if (SkipBeats) {
		if (SkipBeats->getInformationEntity() == UnknownIE) SkipBeats->setInformationEntity(ie);
	}

	HeartRate = (*list)[TagFromName(HeartRate)];
	if (HeartRate) {
		if (HeartRate->getInformationEntity() == UnknownIE) HeartRate->setInformationEntity(ie);
	}

	CardiacNumberOfImages = (*list)[TagFromName(CardiacNumberOfImages)];
	if (CardiacNumberOfImages) {
		if (CardiacNumberOfImages->getInformationEntity() == UnknownIE) CardiacNumberOfImages->setInformationEntity(ie);
	}

	TriggerWindow = (*list)[TagFromName(TriggerWindow)];
	if (TriggerWindow) {
		if (TriggerWindow->getInformationEntity() == UnknownIE) TriggerWindow->setInformationEntity(ie);
	}

	ReconstructionDiameter = (*list)[TagFromName(ReconstructionDiameter)];
	if (ReconstructionDiameter) {
		if (ReconstructionDiameter->getInformationEntity() == UnknownIE) ReconstructionDiameter->setInformationEntity(ie);
	}

	ReceiveCoilName = (*list)[TagFromName(ReceiveCoilName)];
	if (ReceiveCoilName) {
		if (ReceiveCoilName->getInformationEntity() == UnknownIE) ReceiveCoilName->setInformationEntity(ie);
	}

	TransmitCoilName = (*list)[TagFromName(TransmitCoilName)];
	if (TransmitCoilName) {
		if (TransmitCoilName->getInformationEntity() == UnknownIE) TransmitCoilName->setInformationEntity(ie);
	}

	AcquisitionMatrix = (*list)[TagFromName(AcquisitionMatrix)];
	if (AcquisitionMatrix) {
		if (AcquisitionMatrix->getInformationEntity() == UnknownIE) AcquisitionMatrix->setInformationEntity(ie);
	}

	InPlanePhaseEncodingDirection = (*list)[TagFromName(InPlanePhaseEncodingDirection)];
	if (InPlanePhaseEncodingDirection) {
		if (InPlanePhaseEncodingDirection->getInformationEntity() == UnknownIE) InPlanePhaseEncodingDirection->setInformationEntity(ie);
	}

	FlipAngle = (*list)[TagFromName(FlipAngle)];
	if (FlipAngle) {
		if (FlipAngle->getInformationEntity() == UnknownIE) FlipAngle->setInformationEntity(ie);
	}

	SAR = (*list)[TagFromName(SAR)];
	if (SAR) {
		if (SAR->getInformationEntity() == UnknownIE) SAR->setInformationEntity(ie);
	}

	VariableFlipAngleFlag = (*list)[TagFromName(VariableFlipAngleFlag)];
	if (VariableFlipAngleFlag) {
		if (VariableFlipAngleFlag->getInformationEntity() == UnknownIE) VariableFlipAngleFlag->setInformationEntity(ie);
	}

	dBdt = (*list)[TagFromName(dBdt)];
	if (dBdt) {
		if (dBdt->getInformationEntity() == UnknownIE) dBdt->setInformationEntity(ie);
	}

	TemporalPositionIdentifier = (*list)[TagFromName(TemporalPositionIdentifier)];
	if (TemporalPositionIdentifier) {
		if (TemporalPositionIdentifier->getInformationEntity() == UnknownIE) TemporalPositionIdentifier->setInformationEntity(ie);
	}

	NumberOfTemporalPositions = (*list)[TagFromName(NumberOfTemporalPositions)];
	if (NumberOfTemporalPositions) {
		if (NumberOfTemporalPositions->getInformationEntity() == UnknownIE) NumberOfTemporalPositions->setInformationEntity(ie);
	}

	TemporalResolution = (*list)[TagFromName(TemporalResolution)];
	if (TemporalResolution) {
		if (TemporalResolution->getInformationEntity() == UnknownIE) TemporalResolution->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

	B1rms = (*list)[TagFromName(B1rms)];
	if (B1rms) {
		if (B1rms->getInformationEntity() == UnknownIE) B1rms->setInformationEntity(ie);
	}

}

Module_NMPETPatientOrientation::Module_NMPETPatientOrientation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMPETPatientOrientation";

	PatientOrientationCodeSequence = (*list)[TagFromName(PatientOrientationCodeSequence)];
	if (PatientOrientationCodeSequence) {
		if (PatientOrientationCodeSequence->getInformationEntity() == UnknownIE) PatientOrientationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	PatientGantryRelationshipCodeSequence = (*list)[TagFromName(PatientGantryRelationshipCodeSequence)];
	if (PatientGantryRelationshipCodeSequence) {
		if (PatientGantryRelationshipCodeSequence->getInformationEntity() == UnknownIE) PatientGantryRelationshipCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
}

Module_NMImagePixel::Module_NMImagePixel(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMImagePixel";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelSpacing = (*list)[TagFromName(PixelSpacing)];
	if (PixelSpacing) {
		if (PixelSpacing->getInformationEntity() == UnknownIE) PixelSpacing->setInformationEntity(ie);
	}

}

Module_NMMultiFrame::Module_NMMultiFrame(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMMultiFrame";

	FrameIncrementPointer = (*list)[TagFromName(FrameIncrementPointer)];
	if (FrameIncrementPointer) {
		if (FrameIncrementPointer->getInformationEntity() == UnknownIE) FrameIncrementPointer->setInformationEntity(ie);
	}

	EnergyWindowVector = (*list)[TagFromName(EnergyWindowVector)];
	if (EnergyWindowVector) {
		if (EnergyWindowVector->getInformationEntity() == UnknownIE) EnergyWindowVector->setInformationEntity(ie);
	}

	NumberOfEnergyWindows = (*list)[TagFromName(NumberOfEnergyWindows)];
	if (NumberOfEnergyWindows) {
		if (NumberOfEnergyWindows->getInformationEntity() == UnknownIE) NumberOfEnergyWindows->setInformationEntity(ie);
	}

	DetectorVector = (*list)[TagFromName(DetectorVector)];
	if (DetectorVector) {
		if (DetectorVector->getInformationEntity() == UnknownIE) DetectorVector->setInformationEntity(ie);
	}

	NumberOfDetectors = (*list)[TagFromName(NumberOfDetectors)];
	if (NumberOfDetectors) {
		if (NumberOfDetectors->getInformationEntity() == UnknownIE) NumberOfDetectors->setInformationEntity(ie);
	}

	PhaseVector = (*list)[TagFromName(PhaseVector)];
	if (PhaseVector) {
		if (PhaseVector->getInformationEntity() == UnknownIE) PhaseVector->setInformationEntity(ie);
	}

	NumberOfPhases = (*list)[TagFromName(NumberOfPhases)];
	if (NumberOfPhases) {
		if (NumberOfPhases->getInformationEntity() == UnknownIE) NumberOfPhases->setInformationEntity(ie);
	}

	RotationVector = (*list)[TagFromName(RotationVector)];
	if (RotationVector) {
		if (RotationVector->getInformationEntity() == UnknownIE) RotationVector->setInformationEntity(ie);
	}

	NumberOfRotations = (*list)[TagFromName(NumberOfRotations)];
	if (NumberOfRotations) {
		if (NumberOfRotations->getInformationEntity() == UnknownIE) NumberOfRotations->setInformationEntity(ie);
	}

	RRIntervalVector = (*list)[TagFromName(RRIntervalVector)];
	if (RRIntervalVector) {
		if (RRIntervalVector->getInformationEntity() == UnknownIE) RRIntervalVector->setInformationEntity(ie);
	}

	NumberOfRRIntervals = (*list)[TagFromName(NumberOfRRIntervals)];
	if (NumberOfRRIntervals) {
		if (NumberOfRRIntervals->getInformationEntity() == UnknownIE) NumberOfRRIntervals->setInformationEntity(ie);
	}

	TimeSlotVector = (*list)[TagFromName(TimeSlotVector)];
	if (TimeSlotVector) {
		if (TimeSlotVector->getInformationEntity() == UnknownIE) TimeSlotVector->setInformationEntity(ie);
	}

	NumberOfTimeSlots = (*list)[TagFromName(NumberOfTimeSlots)];
	if (NumberOfTimeSlots) {
		if (NumberOfTimeSlots->getInformationEntity() == UnknownIE) NumberOfTimeSlots->setInformationEntity(ie);
	}

	SliceVector = (*list)[TagFromName(SliceVector)];
	if (SliceVector) {
		if (SliceVector->getInformationEntity() == UnknownIE) SliceVector->setInformationEntity(ie);
	}

	NumberOfSlices = (*list)[TagFromName(NumberOfSlices)];
	if (NumberOfSlices) {
		if (NumberOfSlices->getInformationEntity() == UnknownIE) NumberOfSlices->setInformationEntity(ie);
	}

	AngularViewVector = (*list)[TagFromName(AngularViewVector)];
	if (AngularViewVector) {
		if (AngularViewVector->getInformationEntity() == UnknownIE) AngularViewVector->setInformationEntity(ie);
	}

	TimeSliceVector = (*list)[TagFromName(TimeSliceVector)];
	if (TimeSliceVector) {
		if (TimeSliceVector->getInformationEntity() == UnknownIE) TimeSliceVector->setInformationEntity(ie);
	}

}

Module_NMImage::Module_NMImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	ImageID = (*list)[TagFromName(ImageID)];
	if (ImageID) {
		if (ImageID->getInformationEntity() == UnknownIE) ImageID->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	CountsAccumulated = (*list)[TagFromName(CountsAccumulated)];
	if (CountsAccumulated) {
		if (CountsAccumulated->getInformationEntity() == UnknownIE) CountsAccumulated->setInformationEntity(ie);
	}

	AcquisitionTerminationCondition = (*list)[TagFromName(AcquisitionTerminationCondition)];
	if (AcquisitionTerminationCondition) {
		if (AcquisitionTerminationCondition->getInformationEntity() == UnknownIE) AcquisitionTerminationCondition->setInformationEntity(ie);
	}

	TableHeight = (*list)[TagFromName(TableHeight)];
	if (TableHeight) {
		if (TableHeight->getInformationEntity() == UnknownIE) TableHeight->setInformationEntity(ie);
	}

	TableTraverse = (*list)[TagFromName(TableTraverse)];
	if (TableTraverse) {
		if (TableTraverse->getInformationEntity() == UnknownIE) TableTraverse->setInformationEntity(ie);
	}

	ActualFrameDuration = (*list)[TagFromName(ActualFrameDuration)];
	if (ActualFrameDuration) {
		if (ActualFrameDuration->getInformationEntity() == UnknownIE) ActualFrameDuration->setInformationEntity(ie);
	}

	CountRate = (*list)[TagFromName(CountRate)];
	if (CountRate) {
		if (CountRate->getInformationEntity() == UnknownIE) CountRate->setInformationEntity(ie);
	}

	ProcessingFunction = (*list)[TagFromName(ProcessingFunction)];
	if (ProcessingFunction) {
		if (ProcessingFunction->getInformationEntity() == UnknownIE) ProcessingFunction->setInformationEntity(ie);
	}

	CorrectedImage = (*list)[TagFromName(CorrectedImage)];
	if (CorrectedImage) {
		if (CorrectedImage->getInformationEntity() == UnknownIE) CorrectedImage->setInformationEntity(ie);
	}

	WholeBodyTechnique = (*list)[TagFromName(WholeBodyTechnique)];
	if (WholeBodyTechnique) {
		if (WholeBodyTechnique->getInformationEntity() == UnknownIE) WholeBodyTechnique->setInformationEntity(ie);
	}

	ScanVelocity = (*list)[TagFromName(ScanVelocity)];
	if (ScanVelocity) {
		if (ScanVelocity->getInformationEntity() == UnknownIE) ScanVelocity->setInformationEntity(ie);
	}

	ScanLength = (*list)[TagFromName(ScanLength)];
	if (ScanLength) {
		if (ScanLength->getInformationEntity() == UnknownIE) ScanLength->setInformationEntity(ie);
	}

	TriggerSourceOrType = (*list)[TagFromName(TriggerSourceOrType)];
	if (TriggerSourceOrType) {
		if (TriggerSourceOrType->getInformationEntity() == UnknownIE) TriggerSourceOrType->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	RealWorldValueMappingSequence = (*list)[TagFromName(RealWorldValueMappingSequence)];
	if (RealWorldValueMappingSequence) {
		if (RealWorldValueMappingSequence->getInformationEntity() == UnknownIE) RealWorldValueMappingSequence->setInformationEntity(ie);
	}

	new Macro_RealWorldValueMappingItemMacro(list,ie);
}

Module_NMIsotope::Module_NMIsotope(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMIsotope";

	EnergyWindowInformationSequence = (*list)[TagFromName(EnergyWindowInformationSequence)];
	if (EnergyWindowInformationSequence) {
		if (EnergyWindowInformationSequence->getInformationEntity() == UnknownIE) EnergyWindowInformationSequence->setInformationEntity(ie);
	}

	RadiopharmaceuticalInformationSequence = (*list)[TagFromName(RadiopharmaceuticalInformationSequence)];
	if (RadiopharmaceuticalInformationSequence) {
		if (RadiopharmaceuticalInformationSequence->getInformationEntity() == UnknownIE) RadiopharmaceuticalInformationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	InterventionDrugInformationSequence = (*list)[TagFromName(InterventionDrugInformationSequence)];
	if (InterventionDrugInformationSequence) {
		if (InterventionDrugInformationSequence->getInformationEntity() == UnknownIE) InterventionDrugInformationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
}

Module_NMDetector::Module_NMDetector(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMDetector";

	DetectorInformationSequence = (*list)[TagFromName(DetectorInformationSequence)];
	if (DetectorInformationSequence) {
		if (DetectorInformationSequence->getInformationEntity() == UnknownIE) DetectorInformationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
	new Macro_CodeSequenceMeaningOptionalMacro(list,ie);
}

Module_NMTomoAcquisition::Module_NMTomoAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMTomoAcquisition";

	RotationInformationSequence = (*list)[TagFromName(RotationInformationSequence)];
	if (RotationInformationSequence) {
		if (RotationInformationSequence->getInformationEntity() == UnknownIE) RotationInformationSequence->setInformationEntity(ie);
	}

	TypeOfDetectorMotion = (*list)[TagFromName(TypeOfDetectorMotion)];
	if (TypeOfDetectorMotion) {
		if (TypeOfDetectorMotion->getInformationEntity() == UnknownIE) TypeOfDetectorMotion->setInformationEntity(ie);
	}

}

Module_NMMultiGatedAcquisition::Module_NMMultiGatedAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMMultiGatedAcquisition";

	BeatRejectionFlag = (*list)[TagFromName(BeatRejectionFlag)];
	if (BeatRejectionFlag) {
		if (BeatRejectionFlag->getInformationEntity() == UnknownIE) BeatRejectionFlag->setInformationEntity(ie);
	}

	PVCRejection = (*list)[TagFromName(PVCRejection)];
	if (PVCRejection) {
		if (PVCRejection->getInformationEntity() == UnknownIE) PVCRejection->setInformationEntity(ie);
	}

	SkipBeats = (*list)[TagFromName(SkipBeats)];
	if (SkipBeats) {
		if (SkipBeats->getInformationEntity() == UnknownIE) SkipBeats->setInformationEntity(ie);
	}

	HeartRate = (*list)[TagFromName(HeartRate)];
	if (HeartRate) {
		if (HeartRate->getInformationEntity() == UnknownIE) HeartRate->setInformationEntity(ie);
	}

	GatedInformationSequence = (*list)[TagFromName(GatedInformationSequence)];
	if (GatedInformationSequence) {
		if (GatedInformationSequence->getInformationEntity() == UnknownIE) GatedInformationSequence->setInformationEntity(ie);
	}

}

Module_NMPhase::Module_NMPhase(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMPhase";

	PhaseInformationSequence = (*list)[TagFromName(PhaseInformationSequence)];
	if (PhaseInformationSequence) {
		if (PhaseInformationSequence->getInformationEntity() == UnknownIE) PhaseInformationSequence->setInformationEntity(ie);
	}

}

Module_NMReconstruction::Module_NMReconstruction(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NMReconstruction";

	SpacingBetweenSlices = (*list)[TagFromName(SpacingBetweenSlices)];
	if (SpacingBetweenSlices) {
		if (SpacingBetweenSlices->getInformationEntity() == UnknownIE) SpacingBetweenSlices->setInformationEntity(ie);
	}

	ReconstructionDiameter = (*list)[TagFromName(ReconstructionDiameter)];
	if (ReconstructionDiameter) {
		if (ReconstructionDiameter->getInformationEntity() == UnknownIE) ReconstructionDiameter->setInformationEntity(ie);
	}

	ConvolutionKernel = (*list)[TagFromName(ConvolutionKernel)];
	if (ConvolutionKernel) {
		if (ConvolutionKernel->getInformationEntity() == UnknownIE) ConvolutionKernel->setInformationEntity(ie);
	}

	SliceThickness = (*list)[TagFromName(SliceThickness)];
	if (SliceThickness) {
		if (SliceThickness->getInformationEntity() == UnknownIE) SliceThickness->setInformationEntity(ie);
	}

	SliceLocation = (*list)[TagFromName(SliceLocation)];
	if (SliceLocation) {
		if (SliceLocation->getInformationEntity() == UnknownIE) SliceLocation->setInformationEntity(ie);
	}

	SliceProgressionDirection = (*list)[TagFromName(SliceProgressionDirection)];
	if (SliceProgressionDirection) {
		if (SliceProgressionDirection->getInformationEntity() == UnknownIE) SliceProgressionDirection->setInformationEntity(ie);
	}

}

Module_USRegionCalibration::Module_USRegionCalibration(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "USRegionCalibration";

	SequenceOfUltrasoundRegions = (*list)[TagFromName(SequenceOfUltrasoundRegions)];
	if (SequenceOfUltrasoundRegions) {
		if (SequenceOfUltrasoundRegions->getInformationEntity() == UnknownIE) SequenceOfUltrasoundRegions->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_USImage::Module_USImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "USImage";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	FrameIncrementPointer = (*list)[TagFromName(FrameIncrementPointer)];
	if (FrameIncrementPointer) {
		if (FrameIncrementPointer->getInformationEntity() == UnknownIE) FrameIncrementPointer->setInformationEntity(ie);
	}

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	NumberOfStages = (*list)[TagFromName(NumberOfStages)];
	if (NumberOfStages) {
		if (NumberOfStages->getInformationEntity() == UnknownIE) NumberOfStages->setInformationEntity(ie);
	}

	NumberOfViewsInStage = (*list)[TagFromName(NumberOfViewsInStage)];
	if (NumberOfViewsInStage) {
		if (NumberOfViewsInStage->getInformationEntity() == UnknownIE) NumberOfViewsInStage->setInformationEntity(ie);
	}

	RWaveTimeVector = (*list)[TagFromName(RWaveTimeVector)];
	if (RWaveTimeVector) {
		if (RWaveTimeVector->getInformationEntity() == UnknownIE) RWaveTimeVector->setInformationEntity(ie);
	}

	UltrasoundColorDataPresent = (*list)[TagFromName(UltrasoundColorDataPresent)];
	if (UltrasoundColorDataPresent) {
		if (UltrasoundColorDataPresent->getInformationEntity() == UnknownIE) UltrasoundColorDataPresent->setInformationEntity(ie);
	}

	StageName = (*list)[TagFromName(StageName)];
	if (StageName) {
		if (StageName->getInformationEntity() == UnknownIE) StageName->setInformationEntity(ie);
	}

	StageCodeSequence = (*list)[TagFromName(StageCodeSequence)];
	if (StageCodeSequence) {
		if (StageCodeSequence->getInformationEntity() == UnknownIE) StageCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	StageNumber = (*list)[TagFromName(StageNumber)];
	if (StageNumber) {
		if (StageNumber->getInformationEntity() == UnknownIE) StageNumber->setInformationEntity(ie);
	}

	ViewName = (*list)[TagFromName(ViewName)];
	if (ViewName) {
		if (ViewName->getInformationEntity() == UnknownIE) ViewName->setInformationEntity(ie);
	}

	ViewNumber = (*list)[TagFromName(ViewNumber)];
	if (ViewNumber) {
		if (ViewNumber->getInformationEntity() == UnknownIE) ViewNumber->setInformationEntity(ie);
	}

	NumberOfEventTimers = (*list)[TagFromName(NumberOfEventTimers)];
	if (NumberOfEventTimers) {
		if (NumberOfEventTimers->getInformationEntity() == UnknownIE) NumberOfEventTimers->setInformationEntity(ie);
	}

	EventElapsedTimes = (*list)[TagFromName(EventElapsedTimes)];
	if (EventElapsedTimes) {
		if (EventElapsedTimes->getInformationEntity() == UnknownIE) EventElapsedTimes->setInformationEntity(ie);
	}

	EventTimerNames = (*list)[TagFromName(EventTimerNames)];
	if (EventTimerNames) {
		if (EventTimerNames->getInformationEntity() == UnknownIE) EventTimerNames->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	TriggerTime = (*list)[TagFromName(TriggerTime)];
	if (TriggerTime) {
		if (TriggerTime->getInformationEntity() == UnknownIE) TriggerTime->setInformationEntity(ie);
	}

	NominalInterval = (*list)[TagFromName(NominalInterval)];
	if (NominalInterval) {
		if (NominalInterval->getInformationEntity() == UnknownIE) NominalInterval->setInformationEntity(ie);
	}

	BeatRejectionFlag = (*list)[TagFromName(BeatRejectionFlag)];
	if (BeatRejectionFlag) {
		if (BeatRejectionFlag->getInformationEntity() == UnknownIE) BeatRejectionFlag->setInformationEntity(ie);
	}

	LowRRValue = (*list)[TagFromName(LowRRValue)];
	if (LowRRValue) {
		if (LowRRValue->getInformationEntity() == UnknownIE) LowRRValue->setInformationEntity(ie);
	}

	HighRRValue = (*list)[TagFromName(HighRRValue)];
	if (HighRRValue) {
		if (HighRRValue->getInformationEntity() == UnknownIE) HighRRValue->setInformationEntity(ie);
	}

	HeartRate = (*list)[TagFromName(HeartRate)];
	if (HeartRate) {
		if (HeartRate->getInformationEntity() == UnknownIE) HeartRate->setInformationEntity(ie);
	}

	IVUSAcquisition = (*list)[TagFromName(IVUSAcquisition)];
	if (IVUSAcquisition) {
		if (IVUSAcquisition->getInformationEntity() == UnknownIE) IVUSAcquisition->setInformationEntity(ie);
	}

	IVUSPullbackRate = (*list)[TagFromName(IVUSPullbackRate)];
	if (IVUSPullbackRate) {
		if (IVUSPullbackRate->getInformationEntity() == UnknownIE) IVUSPullbackRate->setInformationEntity(ie);
	}

	IVUSGatedRate = (*list)[TagFromName(IVUSGatedRate)];
	if (IVUSGatedRate) {
		if (IVUSGatedRate->getInformationEntity() == UnknownIE) IVUSGatedRate->setInformationEntity(ie);
	}

	IVUSPullbackStartFrameNumber = (*list)[TagFromName(IVUSPullbackStartFrameNumber)];
	if (IVUSPullbackStartFrameNumber) {
		if (IVUSPullbackStartFrameNumber->getInformationEntity() == UnknownIE) IVUSPullbackStartFrameNumber->setInformationEntity(ie);
	}

	IVUSPullbackStopFrameNumber = (*list)[TagFromName(IVUSPullbackStopFrameNumber)];
	if (IVUSPullbackStopFrameNumber) {
		if (IVUSPullbackStopFrameNumber->getInformationEntity() == UnknownIE) IVUSPullbackStopFrameNumber->setInformationEntity(ie);
	}

	LesionNumber = (*list)[TagFromName(LesionNumber)];
	if (LesionNumber) {
		if (LesionNumber->getInformationEntity() == UnknownIE) LesionNumber->setInformationEntity(ie);
	}

	OutputPower = (*list)[TagFromName(OutputPower)];
	if (OutputPower) {
		if (OutputPower->getInformationEntity() == UnknownIE) OutputPower->setInformationEntity(ie);
	}

	TransducerData = (*list)[TagFromName(TransducerData)];
	if (TransducerData) {
		if (TransducerData->getInformationEntity() == UnknownIE) TransducerData->setInformationEntity(ie);
	}

	TransducerType = (*list)[TagFromName(TransducerType)];
	if (TransducerType) {
		if (TransducerType->getInformationEntity() == UnknownIE) TransducerType->setInformationEntity(ie);
	}

	FocusDepth = (*list)[TagFromName(FocusDepth)];
	if (FocusDepth) {
		if (FocusDepth->getInformationEntity() == UnknownIE) FocusDepth->setInformationEntity(ie);
	}

	ProcessingFunction = (*list)[TagFromName(ProcessingFunction)];
	if (ProcessingFunction) {
		if (ProcessingFunction->getInformationEntity() == UnknownIE) ProcessingFunction->setInformationEntity(ie);
	}

	MechanicalIndex = (*list)[TagFromName(MechanicalIndex)];
	if (MechanicalIndex) {
		if (MechanicalIndex->getInformationEntity() == UnknownIE) MechanicalIndex->setInformationEntity(ie);
	}

	BoneThermalIndex = (*list)[TagFromName(BoneThermalIndex)];
	if (BoneThermalIndex) {
		if (BoneThermalIndex->getInformationEntity() == UnknownIE) BoneThermalIndex->setInformationEntity(ie);
	}

	CranialThermalIndex = (*list)[TagFromName(CranialThermalIndex)];
	if (CranialThermalIndex) {
		if (CranialThermalIndex->getInformationEntity() == UnknownIE) CranialThermalIndex->setInformationEntity(ie);
	}

	SoftTissueThermalIndex = (*list)[TagFromName(SoftTissueThermalIndex)];
	if (SoftTissueThermalIndex) {
		if (SoftTissueThermalIndex->getInformationEntity() == UnknownIE) SoftTissueThermalIndex->setInformationEntity(ie);
	}

	SoftTissueFocusThermalIndex = (*list)[TagFromName(SoftTissueFocusThermalIndex)];
	if (SoftTissueFocusThermalIndex) {
		if (SoftTissueFocusThermalIndex->getInformationEntity() == UnknownIE) SoftTissueFocusThermalIndex->setInformationEntity(ie);
	}

	SoftTissueSurfaceThermalIndex = (*list)[TagFromName(SoftTissueSurfaceThermalIndex)];
	if (SoftTissueSurfaceThermalIndex) {
		if (SoftTissueSurfaceThermalIndex->getInformationEntity() == UnknownIE) SoftTissueSurfaceThermalIndex->setInformationEntity(ie);
	}

	DepthOfScanField = (*list)[TagFromName(DepthOfScanField)];
	if (DepthOfScanField) {
		if (DepthOfScanField->getInformationEntity() == UnknownIE) DepthOfScanField->setInformationEntity(ie);
	}

	OverlaySubtype = (*list)[TagFromName(OverlaySubtype)];
	if (OverlaySubtype) {
		if (OverlaySubtype->getInformationEntity() == UnknownIE) OverlaySubtype->setInformationEntity(ie);
	}

}

Module_SCEquipment::Module_SCEquipment(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SCEquipment";

	ConversionType = (*list)[TagFromName(ConversionType)];
	if (ConversionType) {
		if (ConversionType->getInformationEntity() == UnknownIE) ConversionType->setInformationEntity(ie);
	}

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SecondaryCaptureDeviceID = (*list)[TagFromName(SecondaryCaptureDeviceID)];
	if (SecondaryCaptureDeviceID) {
		if (SecondaryCaptureDeviceID->getInformationEntity() == UnknownIE) SecondaryCaptureDeviceID->setInformationEntity(ie);
	}

	SecondaryCaptureDeviceManufacturer = (*list)[TagFromName(SecondaryCaptureDeviceManufacturer)];
	if (SecondaryCaptureDeviceManufacturer) {
		if (SecondaryCaptureDeviceManufacturer->getInformationEntity() == UnknownIE) SecondaryCaptureDeviceManufacturer->setInformationEntity(ie);
	}

	SecondaryCaptureDeviceManufacturerModelName = (*list)[TagFromName(SecondaryCaptureDeviceManufacturerModelName)];
	if (SecondaryCaptureDeviceManufacturerModelName) {
		if (SecondaryCaptureDeviceManufacturerModelName->getInformationEntity() == UnknownIE) SecondaryCaptureDeviceManufacturerModelName->setInformationEntity(ie);
	}

	SecondaryCaptureDeviceSoftwareVersions = (*list)[TagFromName(SecondaryCaptureDeviceSoftwareVersions)];
	if (SecondaryCaptureDeviceSoftwareVersions) {
		if (SecondaryCaptureDeviceSoftwareVersions->getInformationEntity() == UnknownIE) SecondaryCaptureDeviceSoftwareVersions->setInformationEntity(ie);
	}

	VideoImageFormatAcquired = (*list)[TagFromName(VideoImageFormatAcquired)];
	if (VideoImageFormatAcquired) {
		if (VideoImageFormatAcquired->getInformationEntity() == UnknownIE) VideoImageFormatAcquired->setInformationEntity(ie);
	}

	DigitalImageFormatAcquired = (*list)[TagFromName(DigitalImageFormatAcquired)];
	if (DigitalImageFormatAcquired) {
		if (DigitalImageFormatAcquired->getInformationEntity() == UnknownIE) DigitalImageFormatAcquired->setInformationEntity(ie);
	}

}

Module_SCImage::Module_SCImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SCImage";

	DateOfSecondaryCapture = (*list)[TagFromName(DateOfSecondaryCapture)];
	if (DateOfSecondaryCapture) {
		if (DateOfSecondaryCapture->getInformationEntity() == UnknownIE) DateOfSecondaryCapture->setInformationEntity(ie);
	}

	TimeOfSecondaryCapture = (*list)[TagFromName(TimeOfSecondaryCapture)];
	if (TimeOfSecondaryCapture) {
		if (TimeOfSecondaryCapture->getInformationEntity() == UnknownIE) TimeOfSecondaryCapture->setInformationEntity(ie);
	}

	NominalScannedPixelSpacing = (*list)[TagFromName(NominalScannedPixelSpacing)];
	if (NominalScannedPixelSpacing) {
		if (NominalScannedPixelSpacing->getInformationEntity() == UnknownIE) NominalScannedPixelSpacing->setInformationEntity(ie);
	}

	new Macro_BasicPixelSpacingCalibrationMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
}

Module_SCMultiFrameImage::Module_SCMultiFrameImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SCMultiFrameImage";

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	Illumination = (*list)[TagFromName(Illumination)];
	if (Illumination) {
		if (Illumination->getInformationEntity() == UnknownIE) Illumination->setInformationEntity(ie);
	}

	ReflectedAmbientLight = (*list)[TagFromName(ReflectedAmbientLight)];
	if (ReflectedAmbientLight) {
		if (ReflectedAmbientLight->getInformationEntity() == UnknownIE) ReflectedAmbientLight->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	RescaleType = (*list)[TagFromName(RescaleType)];
	if (RescaleType) {
		if (RescaleType->getInformationEntity() == UnknownIE) RescaleType->setInformationEntity(ie);
	}

	FrameIncrementPointer = (*list)[TagFromName(FrameIncrementPointer)];
	if (FrameIncrementPointer) {
		if (FrameIncrementPointer->getInformationEntity() == UnknownIE) FrameIncrementPointer->setInformationEntity(ie);
	}

	NominalScannedPixelSpacing = (*list)[TagFromName(NominalScannedPixelSpacing)];
	if (NominalScannedPixelSpacing) {
		if (NominalScannedPixelSpacing->getInformationEntity() == UnknownIE) NominalScannedPixelSpacing->setInformationEntity(ie);
	}

	new Macro_BasicPixelSpacingCalibrationMacro(list,ie);
	DigitizingDeviceTransportDirection = (*list)[TagFromName(DigitizingDeviceTransportDirection)];
	if (DigitizingDeviceTransportDirection) {
		if (DigitizingDeviceTransportDirection->getInformationEntity() == UnknownIE) DigitizingDeviceTransportDirection->setInformationEntity(ie);
	}

	RotationOfScannedFilm = (*list)[TagFromName(RotationOfScannedFilm)];
	if (RotationOfScannedFilm) {
		if (RotationOfScannedFilm->getInformationEntity() == UnknownIE) RotationOfScannedFilm->setInformationEntity(ie);
	}

}

Module_SCMultiFrameVector::Module_SCMultiFrameVector(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SCMultiFrameVector";

	FrameTimeVector = (*list)[TagFromName(FrameTimeVector)];
	if (FrameTimeVector) {
		if (FrameTimeVector->getInformationEntity() == UnknownIE) FrameTimeVector->setInformationEntity(ie);
	}

	PageNumberVector = (*list)[TagFromName(PageNumberVector)];
	if (PageNumberVector) {
		if (PageNumberVector->getInformationEntity() == UnknownIE) PageNumberVector->setInformationEntity(ie);
	}

	FrameLabelVector = (*list)[TagFromName(FrameLabelVector)];
	if (FrameLabelVector) {
		if (FrameLabelVector->getInformationEntity() == UnknownIE) FrameLabelVector->setInformationEntity(ie);
	}

	FramePrimaryAngleVector = (*list)[TagFromName(FramePrimaryAngleVector)];
	if (FramePrimaryAngleVector) {
		if (FramePrimaryAngleVector->getInformationEntity() == UnknownIE) FramePrimaryAngleVector->setInformationEntity(ie);
	}

	FrameSecondaryAngleVector = (*list)[TagFromName(FrameSecondaryAngleVector)];
	if (FrameSecondaryAngleVector) {
		if (FrameSecondaryAngleVector->getInformationEntity() == UnknownIE) FrameSecondaryAngleVector->setInformationEntity(ie);
	}

	SliceLocationVector = (*list)[TagFromName(SliceLocationVector)];
	if (SliceLocationVector) {
		if (SliceLocationVector->getInformationEntity() == UnknownIE) SliceLocationVector->setInformationEntity(ie);
	}

	DisplayWindowLabelVector = (*list)[TagFromName(DisplayWindowLabelVector)];
	if (DisplayWindowLabelVector) {
		if (DisplayWindowLabelVector->getInformationEntity() == UnknownIE) DisplayWindowLabelVector->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForMFSC::Module_MultiFrameFunctionalGroupsForMFSC(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForMFSC";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
}

Module_OverlayIdentification::Module_OverlayIdentification(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OverlayIdentification";

	OverlayNumber = (*list)[TagFromName(OverlayNumber)];
	if (OverlayNumber) {
		if (OverlayNumber->getInformationEntity() == UnknownIE) OverlayNumber->setInformationEntity(ie);
	}

	OverlayDate = (*list)[TagFromName(OverlayDate)];
	if (OverlayDate) {
		if (OverlayDate->getInformationEntity() == UnknownIE) OverlayDate->setInformationEntity(ie);
	}

	OverlayTime = (*list)[TagFromName(OverlayTime)];
	if (OverlayTime) {
		if (OverlayTime->getInformationEntity() == UnknownIE) OverlayTime->setInformationEntity(ie);
	}

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

}

Module_OverlayPlane::Module_OverlayPlane(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OverlayPlane";

	OverlayRows = (*list)[TagFromName(OverlayRows)];
	if (OverlayRows) {
		if (OverlayRows->getInformationEntity() == UnknownIE) OverlayRows->setInformationEntity(ie);
	}

	OverlayColumns = (*list)[TagFromName(OverlayColumns)];
	if (OverlayColumns) {
		if (OverlayColumns->getInformationEntity() == UnknownIE) OverlayColumns->setInformationEntity(ie);
	}

	OverlayType = (*list)[TagFromName(OverlayType)];
	if (OverlayType) {
		if (OverlayType->getInformationEntity() == UnknownIE) OverlayType->setInformationEntity(ie);
	}

	OverlayOrigin = (*list)[TagFromName(OverlayOrigin)];
	if (OverlayOrigin) {
		if (OverlayOrigin->getInformationEntity() == UnknownIE) OverlayOrigin->setInformationEntity(ie);
	}

	OverlayBitsAllocated = (*list)[TagFromName(OverlayBitsAllocated)];
	if (OverlayBitsAllocated) {
		if (OverlayBitsAllocated->getInformationEntity() == UnknownIE) OverlayBitsAllocated->setInformationEntity(ie);
	}

	OverlayBitPosition = (*list)[TagFromName(OverlayBitPosition)];
	if (OverlayBitPosition) {
		if (OverlayBitPosition->getInformationEntity() == UnknownIE) OverlayBitPosition->setInformationEntity(ie);
	}

	OverlayData = (*list)[TagFromName(OverlayData)];
	if (OverlayData) {
		if (OverlayData->getInformationEntity() == UnknownIE) OverlayData->setInformationEntity(ie);
	}

	OverlayDescription = (*list)[TagFromName(OverlayDescription)];
	if (OverlayDescription) {
		if (OverlayDescription->getInformationEntity() == UnknownIE) OverlayDescription->setInformationEntity(ie);
	}

	OverlaySubtype = (*list)[TagFromName(OverlaySubtype)];
	if (OverlaySubtype) {
		if (OverlaySubtype->getInformationEntity() == UnknownIE) OverlaySubtype->setInformationEntity(ie);
	}

	OverlayLabel = (*list)[TagFromName(OverlayLabel)];
	if (OverlayLabel) {
		if (OverlayLabel->getInformationEntity() == UnknownIE) OverlayLabel->setInformationEntity(ie);
	}

	ROIArea = (*list)[TagFromName(ROIArea)];
	if (ROIArea) {
		if (ROIArea->getInformationEntity() == UnknownIE) ROIArea->setInformationEntity(ie);
	}

	ROIMean = (*list)[TagFromName(ROIMean)];
	if (ROIMean) {
		if (ROIMean->getInformationEntity() == UnknownIE) ROIMean->setInformationEntity(ie);
	}

	ROIStandardDeviation = (*list)[TagFromName(ROIStandardDeviation)];
	if (ROIStandardDeviation) {
		if (ROIStandardDeviation->getInformationEntity() == UnknownIE) ROIStandardDeviation->setInformationEntity(ie);
	}

}

Module_MultiFrameOverlay::Module_MultiFrameOverlay(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameOverlay";

	NumberOfFramesInOverlay = (*list)[TagFromName(NumberOfFramesInOverlay)];
	if (NumberOfFramesInOverlay) {
		if (NumberOfFramesInOverlay->getInformationEntity() == UnknownIE) NumberOfFramesInOverlay->setInformationEntity(ie);
	}

	ImageFrameOrigin = (*list)[TagFromName(ImageFrameOrigin)];
	if (ImageFrameOrigin) {
		if (ImageFrameOrigin->getInformationEntity() == UnknownIE) ImageFrameOrigin->setInformationEntity(ie);
	}

}

Module_CurveIdentification::Module_CurveIdentification(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CurveIdentification";

	CurveNumber = (*list)[TagFromName(CurveNumber)];
	if (CurveNumber) {
		if (CurveNumber->getInformationEntity() == UnknownIE) CurveNumber->setInformationEntity(ie);
	}

	CurveDate = (*list)[TagFromName(CurveDate)];
	if (CurveDate) {
		if (CurveDate->getInformationEntity() == UnknownIE) CurveDate->setInformationEntity(ie);
	}

	CurveTime = (*list)[TagFromName(CurveTime)];
	if (CurveTime) {
		if (CurveTime->getInformationEntity() == UnknownIE) CurveTime->setInformationEntity(ie);
	}

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	ReferencedOverlaySequence = (*list)[TagFromName(ReferencedOverlaySequence)];
	if (ReferencedOverlaySequence) {
		if (ReferencedOverlaySequence->getInformationEntity() == UnknownIE) ReferencedOverlaySequence->setInformationEntity(ie);
	}

	ReferencedCurveSequence = (*list)[TagFromName(ReferencedCurveSequence)];
	if (ReferencedCurveSequence) {
		if (ReferencedCurveSequence->getInformationEntity() == UnknownIE) ReferencedCurveSequence->setInformationEntity(ie);
	}

}

Module_Curve::Module_Curve(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Curve";

	CurveDimensions = (*list)[TagFromName(CurveDimensions)];
	if (CurveDimensions) {
		if (CurveDimensions->getInformationEntity() == UnknownIE) CurveDimensions->setInformationEntity(ie);
	}

	NumberOfPoints = (*list)[TagFromName(NumberOfPoints)];
	if (NumberOfPoints) {
		if (NumberOfPoints->getInformationEntity() == UnknownIE) NumberOfPoints->setInformationEntity(ie);
	}

	TypeOfData = (*list)[TagFromName(TypeOfData)];
	if (TypeOfData) {
		if (TypeOfData->getInformationEntity() == UnknownIE) TypeOfData->setInformationEntity(ie);
	}

	DataValueRepresentation = (*list)[TagFromName(DataValueRepresentation)];
	if (DataValueRepresentation) {
		if (DataValueRepresentation->getInformationEntity() == UnknownIE) DataValueRepresentation->setInformationEntity(ie);
	}

	CurveData = (*list)[TagFromName(CurveData)];
	if (CurveData) {
		if (CurveData->getInformationEntity() == UnknownIE) CurveData->setInformationEntity(ie);
	}

	CurveDescription = (*list)[TagFromName(CurveDescription)];
	if (CurveDescription) {
		if (CurveDescription->getInformationEntity() == UnknownIE) CurveDescription->setInformationEntity(ie);
	}

	AxisUnits = (*list)[TagFromName(AxisUnits)];
	if (AxisUnits) {
		if (AxisUnits->getInformationEntity() == UnknownIE) AxisUnits->setInformationEntity(ie);
	}

	AxisLabels = (*list)[TagFromName(AxisLabels)];
	if (AxisLabels) {
		if (AxisLabels->getInformationEntity() == UnknownIE) AxisLabels->setInformationEntity(ie);
	}

	MinimumCoordinateValue = (*list)[TagFromName(MinimumCoordinateValue)];
	if (MinimumCoordinateValue) {
		if (MinimumCoordinateValue->getInformationEntity() == UnknownIE) MinimumCoordinateValue->setInformationEntity(ie);
	}

	MaximumCoordinateValue = (*list)[TagFromName(MaximumCoordinateValue)];
	if (MaximumCoordinateValue) {
		if (MaximumCoordinateValue->getInformationEntity() == UnknownIE) MaximumCoordinateValue->setInformationEntity(ie);
	}

	CurveRange = (*list)[TagFromName(CurveRange)];
	if (CurveRange) {
		if (CurveRange->getInformationEntity() == UnknownIE) CurveRange->setInformationEntity(ie);
	}

	CurveDataDescriptor = (*list)[TagFromName(CurveDataDescriptor)];
	if (CurveDataDescriptor) {
		if (CurveDataDescriptor->getInformationEntity() == UnknownIE) CurveDataDescriptor->setInformationEntity(ie);
	}

	CoordinateStartValue = (*list)[TagFromName(CoordinateStartValue)];
	if (CoordinateStartValue) {
		if (CoordinateStartValue->getInformationEntity() == UnknownIE) CoordinateStartValue->setInformationEntity(ie);
	}

	CoordinateStepValue = (*list)[TagFromName(CoordinateStepValue)];
	if (CoordinateStepValue) {
		if (CoordinateStepValue->getInformationEntity() == UnknownIE) CoordinateStepValue->setInformationEntity(ie);
	}

	CurveLabel = (*list)[TagFromName(CurveLabel)];
	if (CurveLabel) {
		if (CurveLabel->getInformationEntity() == UnknownIE) CurveLabel->setInformationEntity(ie);
	}

	ReferencedOverlaySequence = (*list)[TagFromName(ReferencedOverlaySequence)];
	if (ReferencedOverlaySequence) {
		if (ReferencedOverlaySequence->getInformationEntity() == UnknownIE) ReferencedOverlaySequence->setInformationEntity(ie);
	}

}

Module_Audio::Module_Audio(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Audio";

	AudioType = (*list)[TagFromName(AudioType)];
	if (AudioType) {
		if (AudioType->getInformationEntity() == UnknownIE) AudioType->setInformationEntity(ie);
	}

	AudioSampleFormat = (*list)[TagFromName(AudioSampleFormat)];
	if (AudioSampleFormat) {
		if (AudioSampleFormat->getInformationEntity() == UnknownIE) AudioSampleFormat->setInformationEntity(ie);
	}

	NumberOfChannels = (*list)[TagFromName(NumberOfChannels)];
	if (NumberOfChannels) {
		if (NumberOfChannels->getInformationEntity() == UnknownIE) NumberOfChannels->setInformationEntity(ie);
	}

	NumberOfSamples = (*list)[TagFromName(NumberOfSamples)];
	if (NumberOfSamples) {
		if (NumberOfSamples->getInformationEntity() == UnknownIE) NumberOfSamples->setInformationEntity(ie);
	}

	SampleRate = (*list)[TagFromName(SampleRate)];
	if (SampleRate) {
		if (SampleRate->getInformationEntity() == UnknownIE) SampleRate->setInformationEntity(ie);
	}

	TotalTime = (*list)[TagFromName(TotalTime)];
	if (TotalTime) {
		if (TotalTime->getInformationEntity() == UnknownIE) TotalTime->setInformationEntity(ie);
	}

	AudioSampleData = (*list)[TagFromName(AudioSampleData)];
	if (AudioSampleData) {
		if (AudioSampleData->getInformationEntity() == UnknownIE) AudioSampleData->setInformationEntity(ie);
	}

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	AudioComments = (*list)[TagFromName(AudioComments)];
	if (AudioComments) {
		if (AudioComments->getInformationEntity() == UnknownIE) AudioComments->setInformationEntity(ie);
	}

}

Macro_ModalityLUTMacro::Macro_ModalityLUTMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ModalityLUTMacro";

	ModalityLUTSequence = (*list)[TagFromName(ModalityLUTSequence)];
	if (ModalityLUTSequence) {
		if (ModalityLUTSequence->getInformationEntity() == UnknownIE) ModalityLUTSequence->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	RescaleType = (*list)[TagFromName(RescaleType)];
	if (RescaleType) {
		if (RescaleType->getInformationEntity() == UnknownIE) RescaleType->setInformationEntity(ie);
	}

}

Module_ModalityLUT::Module_ModalityLUT(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ModalityLUT";

	new Macro_ModalityLUTMacro(list,ie);
}

Macro_VOILUTMacro::Macro_VOILUTMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VOILUTMacro";

	VOILUTSequence = (*list)[TagFromName(VOILUTSequence)];
	if (VOILUTSequence) {
		if (VOILUTSequence->getInformationEntity() == UnknownIE) VOILUTSequence->setInformationEntity(ie);
	}

	WindowCenter = (*list)[TagFromName(WindowCenter)];
	if (WindowCenter) {
		if (WindowCenter->getInformationEntity() == UnknownIE) WindowCenter->setInformationEntity(ie);
	}

	WindowWidth = (*list)[TagFromName(WindowWidth)];
	if (WindowWidth) {
		if (WindowWidth->getInformationEntity() == UnknownIE) WindowWidth->setInformationEntity(ie);
	}

	WindowCenterWidthExplanation = (*list)[TagFromName(WindowCenterWidthExplanation)];
	if (WindowCenterWidthExplanation) {
		if (WindowCenterWidthExplanation->getInformationEntity() == UnknownIE) WindowCenterWidthExplanation->setInformationEntity(ie);
	}

	VOILUTFunction = (*list)[TagFromName(VOILUTFunction)];
	if (VOILUTFunction) {
		if (VOILUTFunction->getInformationEntity() == UnknownIE) VOILUTFunction->setInformationEntity(ie);
	}

}

Module_VOILUT::Module_VOILUT(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VOILUT";

	new Macro_VOILUTMacro(list,ie);
}

Module_LUTIdentification::Module_LUTIdentification(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "LUTIdentification";

	LUTNumber = (*list)[TagFromName(LUTNumber)];
	if (LUTNumber) {
		if (LUTNumber->getInformationEntity() == UnknownIE) LUTNumber->setInformationEntity(ie);
	}

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

}

Macro_DigitalSignaturesMacro::Macro_DigitalSignaturesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DigitalSignaturesMacro";

	MACParametersSequence = (*list)[TagFromName(MACParametersSequence)];
	if (MACParametersSequence) {
		if (MACParametersSequence->getInformationEntity() == UnknownIE) MACParametersSequence->setInformationEntity(ie);
	}

	DigitalSignaturesSequence = (*list)[TagFromName(DigitalSignaturesSequence)];
	if (DigitalSignaturesSequence) {
		if (DigitalSignaturesSequence->getInformationEntity() == UnknownIE) DigitalSignaturesSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_SOPCommon::Module_SOPCommon(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SOPCommon";

	SOPClassUID = (*list)[TagFromName(SOPClassUID)];
	if (SOPClassUID) {
		if (SOPClassUID->getInformationEntity() == UnknownIE) SOPClassUID->setInformationEntity(ie);
	}

	SOPInstanceUID = (*list)[TagFromName(SOPInstanceUID)];
	if (SOPInstanceUID) {
		if (SOPInstanceUID->getInformationEntity() == UnknownIE) SOPInstanceUID->setInformationEntity(ie);
	}

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceCreationDate = (*list)[TagFromName(InstanceCreationDate)];
	if (InstanceCreationDate) {
		if (InstanceCreationDate->getInformationEntity() == UnknownIE) InstanceCreationDate->setInformationEntity(ie);
	}

	InstanceCreationTime = (*list)[TagFromName(InstanceCreationTime)];
	if (InstanceCreationTime) {
		if (InstanceCreationTime->getInformationEntity() == UnknownIE) InstanceCreationTime->setInformationEntity(ie);
	}

	InstanceCoercionDateTime = (*list)[TagFromName(InstanceCoercionDateTime)];
	if (InstanceCoercionDateTime) {
		if (InstanceCoercionDateTime->getInformationEntity() == UnknownIE) InstanceCoercionDateTime->setInformationEntity(ie);
	}

	InstanceCreatorUID = (*list)[TagFromName(InstanceCreatorUID)];
	if (InstanceCreatorUID) {
		if (InstanceCreatorUID->getInformationEntity() == UnknownIE) InstanceCreatorUID->setInformationEntity(ie);
	}

	RelatedGeneralSOPClassUID = (*list)[TagFromName(RelatedGeneralSOPClassUID)];
	if (RelatedGeneralSOPClassUID) {
		if (RelatedGeneralSOPClassUID->getInformationEntity() == UnknownIE) RelatedGeneralSOPClassUID->setInformationEntity(ie);
	}

	OriginalSpecializedSOPClassUID = (*list)[TagFromName(OriginalSpecializedSOPClassUID)];
	if (OriginalSpecializedSOPClassUID) {
		if (OriginalSpecializedSOPClassUID->getInformationEntity() == UnknownIE) OriginalSpecializedSOPClassUID->setInformationEntity(ie);
	}

	CodingSchemeIdentificationSequence = (*list)[TagFromName(CodingSchemeIdentificationSequence)];
	if (CodingSchemeIdentificationSequence) {
		if (CodingSchemeIdentificationSequence->getInformationEntity() == UnknownIE) CodingSchemeIdentificationSequence->setInformationEntity(ie);
	}

	ContextGroupIdentificationSequence = (*list)[TagFromName(ContextGroupIdentificationSequence)];
	if (ContextGroupIdentificationSequence) {
		if (ContextGroupIdentificationSequence->getInformationEntity() == UnknownIE) ContextGroupIdentificationSequence->setInformationEntity(ie);
	}

	MappingResourceIdentificationSequence = (*list)[TagFromName(MappingResourceIdentificationSequence)];
	if (MappingResourceIdentificationSequence) {
		if (MappingResourceIdentificationSequence->getInformationEntity() == UnknownIE) MappingResourceIdentificationSequence->setInformationEntity(ie);
	}

	TimezoneOffsetFromUTC = (*list)[TagFromName(TimezoneOffsetFromUTC)];
	if (TimezoneOffsetFromUTC) {
		if (TimezoneOffsetFromUTC->getInformationEntity() == UnknownIE) TimezoneOffsetFromUTC->setInformationEntity(ie);
	}

	ContributingEquipmentSequence = (*list)[TagFromName(ContributingEquipmentSequence)];
	if (ContributingEquipmentSequence) {
		if (ContributingEquipmentSequence->getInformationEntity() == UnknownIE) ContributingEquipmentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PersonIdentificationMacro(list,ie);
	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	SOPInstanceStatus = (*list)[TagFromName(SOPInstanceStatus)];
	if (SOPInstanceStatus) {
		if (SOPInstanceStatus->getInformationEntity() == UnknownIE) SOPInstanceStatus->setInformationEntity(ie);
	}

	SOPAuthorizationDateTime = (*list)[TagFromName(SOPAuthorizationDateTime)];
	if (SOPAuthorizationDateTime) {
		if (SOPAuthorizationDateTime->getInformationEntity() == UnknownIE) SOPAuthorizationDateTime->setInformationEntity(ie);
	}

	SOPAuthorizationComment = (*list)[TagFromName(SOPAuthorizationComment)];
	if (SOPAuthorizationComment) {
		if (SOPAuthorizationComment->getInformationEntity() == UnknownIE) SOPAuthorizationComment->setInformationEntity(ie);
	}

	AuthorizationEquipmentCertificationNumber = (*list)[TagFromName(AuthorizationEquipmentCertificationNumber)];
	if (AuthorizationEquipmentCertificationNumber) {
		if (AuthorizationEquipmentCertificationNumber->getInformationEntity() == UnknownIE) AuthorizationEquipmentCertificationNumber->setInformationEntity(ie);
	}

	new Macro_DigitalSignaturesMacro(list,ie);
	EncryptedAttributesSequence = (*list)[TagFromName(EncryptedAttributesSequence)];
	if (EncryptedAttributesSequence) {
		if (EncryptedAttributesSequence->getInformationEntity() == UnknownIE) EncryptedAttributesSequence->setInformationEntity(ie);
	}

	OriginalAttributesSequence = (*list)[TagFromName(OriginalAttributesSequence)];
	if (OriginalAttributesSequence) {
		if (OriginalAttributesSequence->getInformationEntity() == UnknownIE) OriginalAttributesSequence->setInformationEntity(ie);
	}

	new Macro_SelectorAttributeMacro(list,ie);
	HL7StructuredDocumentReferenceSequence = (*list)[TagFromName(HL7StructuredDocumentReferenceSequence)];
	if (HL7StructuredDocumentReferenceSequence) {
		if (HL7StructuredDocumentReferenceSequence->getInformationEntity() == UnknownIE) HL7StructuredDocumentReferenceSequence->setInformationEntity(ie);
	}

	LongitudinalTemporalInformationModified = (*list)[TagFromName(LongitudinalTemporalInformationModified)];
	if (LongitudinalTemporalInformationModified) {
		if (LongitudinalTemporalInformationModified->getInformationEntity() == UnknownIE) LongitudinalTemporalInformationModified->setInformationEntity(ie);
	}

	QueryRetrieveView = (*list)[TagFromName(QueryRetrieveView)];
	if (QueryRetrieveView) {
		if (QueryRetrieveView->getInformationEntity() == UnknownIE) QueryRetrieveView->setInformationEntity(ie);
	}

	ConversionSourceAttributesSequence = (*list)[TagFromName(ConversionSourceAttributesSequence)];
	if (ConversionSourceAttributesSequence) {
		if (ConversionSourceAttributesSequence->getInformationEntity() == UnknownIE) ConversionSourceAttributesSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	PrivateDataElementCharacteristicsSequence = (*list)[TagFromName(PrivateDataElementCharacteristicsSequence)];
	if (PrivateDataElementCharacteristicsSequence) {
		if (PrivateDataElementCharacteristicsSequence->getInformationEntity() == UnknownIE) PrivateDataElementCharacteristicsSequence->setInformationEntity(ie);
	}

	InstanceOriginStatus = (*list)[TagFromName(InstanceOriginStatus)];
	if (InstanceOriginStatus) {
		if (InstanceOriginStatus->getInformationEntity() == UnknownIE) InstanceOriginStatus->setInformationEntity(ie);
	}

	BarcodeValue = (*list)[TagFromName(BarcodeValue)];
	if (BarcodeValue) {
		if (BarcodeValue->getInformationEntity() == UnknownIE) BarcodeValue->setInformationEntity(ie);
	}

}

Module_FrameExtraction::Module_FrameExtraction(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameExtraction";

	FrameExtractionSequence = (*list)[TagFromName(FrameExtractionSequence)];
	if (FrameExtractionSequence) {
		if (FrameExtractionSequence->getInformationEntity() == UnknownIE) FrameExtractionSequence->setInformationEntity(ie);
	}

}

Module_MultiframeSingleBitSCImagePseudo::Module_MultiframeSingleBitSCImagePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiframeSingleBitSCImagePseudo";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

}

Module_MultiframeGrayscaleByteSCImagePseudo::Module_MultiframeGrayscaleByteSCImagePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiframeGrayscaleByteSCImagePseudo";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	RescaleType = (*list)[TagFromName(RescaleType)];
	if (RescaleType) {
		if (RescaleType->getInformationEntity() == UnknownIE) RescaleType->setInformationEntity(ie);
	}

}

Module_MultiframeGrayscaleWordSCImagePseudo::Module_MultiframeGrayscaleWordSCImagePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiframeGrayscaleWordSCImagePseudo";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

}

Module_MultiframeTrueColorSCImagePseudo::Module_MultiframeTrueColorSCImagePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiframeTrueColorSCImagePseudo";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

}

Module_CommonInstanceReference::Module_CommonInstanceReference(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CommonInstanceReference";

	ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
	if (ReferencedSeriesSequence) {
		if (ReferencedSeriesSequence->getInformationEntity() == UnknownIE) ReferencedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	StudiesContainingOtherReferencedInstancesSequence = (*list)[TagFromName(StudiesContainingOtherReferencedInstancesSequence)];
	if (StudiesContainingOtherReferencedInstancesSequence) {
		if (StudiesContainingOtherReferencedInstancesSequence->getInformationEntity() == UnknownIE) StudiesContainingOtherReferencedInstancesSequence->setInformationEntity(ie);
	}

	new Macro_SeriesAndInstanceReferenceMacro(list,ie);
}

Module_SegmentationSeries::Module_SegmentationSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SegmentationSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_SegmentationImage::Module_SegmentationImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SegmentationImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	SegmentationType = (*list)[TagFromName(SegmentationType)];
	if (SegmentationType) {
		if (SegmentationType->getInformationEntity() == UnknownIE) SegmentationType->setInformationEntity(ie);
	}

	SegmentationFractionalType = (*list)[TagFromName(SegmentationFractionalType)];
	if (SegmentationFractionalType) {
		if (SegmentationFractionalType->getInformationEntity() == UnknownIE) SegmentationFractionalType->setInformationEntity(ie);
	}

	MaximumFractionalValue = (*list)[TagFromName(MaximumFractionalValue)];
	if (MaximumFractionalValue) {
		if (MaximumFractionalValue->getInformationEntity() == UnknownIE) MaximumFractionalValue->setInformationEntity(ie);
	}

	SegmentsOverlap = (*list)[TagFromName(SegmentsOverlap)];
	if (SegmentsOverlap) {
		if (SegmentsOverlap->getInformationEntity() == UnknownIE) SegmentsOverlap->setInformationEntity(ie);
	}

	SegmentSequence = (*list)[TagFromName(SegmentSequence)];
	if (SegmentSequence) {
		if (SegmentSequence->getInformationEntity() == UnknownIE) SegmentSequence->setInformationEntity(ie);
	}

	new Macro_SegmentDescriptionMacro(list,ie);
	new Macro_AlgorithmIdentificationMacro(list,ie);
}

Macro_SegmentDescriptionMacro::Macro_SegmentDescriptionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SegmentDescriptionMacro";

	SegmentNumber = (*list)[TagFromName(SegmentNumber)];
	if (SegmentNumber) {
		if (SegmentNumber->getInformationEntity() == UnknownIE) SegmentNumber->setInformationEntity(ie);
	}

	SegmentLabel = (*list)[TagFromName(SegmentLabel)];
	if (SegmentLabel) {
		if (SegmentLabel->getInformationEntity() == UnknownIE) SegmentLabel->setInformationEntity(ie);
	}

	SegmentDescription = (*list)[TagFromName(SegmentDescription)];
	if (SegmentDescription) {
		if (SegmentDescription->getInformationEntity() == UnknownIE) SegmentDescription->setInformationEntity(ie);
	}

	SegmentAlgorithmType = (*list)[TagFromName(SegmentAlgorithmType)];
	if (SegmentAlgorithmType) {
		if (SegmentAlgorithmType->getInformationEntity() == UnknownIE) SegmentAlgorithmType->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	SegmentedPropertyCategoryCodeSequence = (*list)[TagFromName(SegmentedPropertyCategoryCodeSequence)];
	if (SegmentedPropertyCategoryCodeSequence) {
		if (SegmentedPropertyCategoryCodeSequence->getInformationEntity() == UnknownIE) SegmentedPropertyCategoryCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	SegmentedPropertyTypeCodeSequence = (*list)[TagFromName(SegmentedPropertyTypeCodeSequence)];
	if (SegmentedPropertyTypeCodeSequence) {
		if (SegmentedPropertyTypeCodeSequence->getInformationEntity() == UnknownIE) SegmentedPropertyTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	TrackingID = (*list)[TagFromName(TrackingID)];
	if (TrackingID) {
		if (TrackingID->getInformationEntity() == UnknownIE) TrackingID->setInformationEntity(ie);
	}

	TrackingUID = (*list)[TagFromName(TrackingUID)];
	if (TrackingUID) {
		if (TrackingUID->getInformationEntity() == UnknownIE) TrackingUID->setInformationEntity(ie);
	}

	DefinitionSourceSequence = (*list)[TagFromName(DefinitionSourceSequence)];
	if (DefinitionSourceSequence) {
		if (DefinitionSourceSequence->getInformationEntity() == UnknownIE) DefinitionSourceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_SegmentationMacro::Macro_SegmentationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SegmentationMacro";

	SegmentIdentificationSequence = (*list)[TagFromName(SegmentIdentificationSequence)];
	if (SegmentIdentificationSequence) {
		if (SegmentIdentificationSequence->getInformationEntity() == UnknownIE) SegmentIdentificationSequence->setInformationEntity(ie);
	}

}

Module_SurfaceSegmentation::Module_SurfaceSegmentation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SurfaceSegmentation";

	new Macro_ContentIdentificationMacro(list,ie);
	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	SegmentSequence = (*list)[TagFromName(SegmentSequence)];
	if (SegmentSequence) {
		if (SegmentSequence->getInformationEntity() == UnknownIE) SegmentSequence->setInformationEntity(ie);
	}

	new Macro_SegmentDescriptionMacro(list,ie);
	new Macro_AlgorithmIdentificationMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Macro_PointsMacro::Macro_PointsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PointsMacro";

	NumberOfSurfacePoints = (*list)[TagFromName(NumberOfSurfacePoints)];
	if (NumberOfSurfacePoints) {
		if (NumberOfSurfacePoints->getInformationEntity() == UnknownIE) NumberOfSurfacePoints->setInformationEntity(ie);
	}

	PointCoordinatesData = (*list)[TagFromName(PointCoordinatesData)];
	if (PointCoordinatesData) {
		if (PointCoordinatesData->getInformationEntity() == UnknownIE) PointCoordinatesData->setInformationEntity(ie);
	}

	PointPositionAccuracy = (*list)[TagFromName(PointPositionAccuracy)];
	if (PointPositionAccuracy) {
		if (PointPositionAccuracy->getInformationEntity() == UnknownIE) PointPositionAccuracy->setInformationEntity(ie);
	}

	MeanPointDistance = (*list)[TagFromName(MeanPointDistance)];
	if (MeanPointDistance) {
		if (MeanPointDistance->getInformationEntity() == UnknownIE) MeanPointDistance->setInformationEntity(ie);
	}

	MaximumPointDistance = (*list)[TagFromName(MaximumPointDistance)];
	if (MaximumPointDistance) {
		if (MaximumPointDistance->getInformationEntity() == UnknownIE) MaximumPointDistance->setInformationEntity(ie);
	}

	PointsBoundingBoxCoordinates = (*list)[TagFromName(PointsBoundingBoxCoordinates)];
	if (PointsBoundingBoxCoordinates) {
		if (PointsBoundingBoxCoordinates->getInformationEntity() == UnknownIE) PointsBoundingBoxCoordinates->setInformationEntity(ie);
	}

	AxisOfRotation = (*list)[TagFromName(AxisOfRotation)];
	if (AxisOfRotation) {
		if (AxisOfRotation->getInformationEntity() == UnknownIE) AxisOfRotation->setInformationEntity(ie);
	}

	CenterOfRotation = (*list)[TagFromName(CenterOfRotation)];
	if (CenterOfRotation) {
		if (CenterOfRotation->getInformationEntity() == UnknownIE) CenterOfRotation->setInformationEntity(ie);
	}

}

Macro_VectorsMacro::Macro_VectorsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VectorsMacro";

	NumberOfVectors = (*list)[TagFromName(NumberOfVectors)];
	if (NumberOfVectors) {
		if (NumberOfVectors->getInformationEntity() == UnknownIE) NumberOfVectors->setInformationEntity(ie);
	}

	VectorDimensionality = (*list)[TagFromName(VectorDimensionality)];
	if (VectorDimensionality) {
		if (VectorDimensionality->getInformationEntity() == UnknownIE) VectorDimensionality->setInformationEntity(ie);
	}

	VectorAccuracy = (*list)[TagFromName(VectorAccuracy)];
	if (VectorAccuracy) {
		if (VectorAccuracy->getInformationEntity() == UnknownIE) VectorAccuracy->setInformationEntity(ie);
	}

	VectorCoordinateData = (*list)[TagFromName(VectorCoordinateData)];
	if (VectorCoordinateData) {
		if (VectorCoordinateData->getInformationEntity() == UnknownIE) VectorCoordinateData->setInformationEntity(ie);
	}

}

Macro_SurfaceMeshPrimitivesMacro::Macro_SurfaceMeshPrimitivesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SurfaceMeshPrimitivesMacro";

	LongVertexPointIndexList = (*list)[TagFromName(LongVertexPointIndexList)];
	if (LongVertexPointIndexList) {
		if (LongVertexPointIndexList->getInformationEntity() == UnknownIE) LongVertexPointIndexList->setInformationEntity(ie);
	}

	LongEdgePointIndexList = (*list)[TagFromName(LongEdgePointIndexList)];
	if (LongEdgePointIndexList) {
		if (LongEdgePointIndexList->getInformationEntity() == UnknownIE) LongEdgePointIndexList->setInformationEntity(ie);
	}

	LongTrianglePointIndexList = (*list)[TagFromName(LongTrianglePointIndexList)];
	if (LongTrianglePointIndexList) {
		if (LongTrianglePointIndexList->getInformationEntity() == UnknownIE) LongTrianglePointIndexList->setInformationEntity(ie);
	}

	TriangleStripSequence = (*list)[TagFromName(TriangleStripSequence)];
	if (TriangleStripSequence) {
		if (TriangleStripSequence->getInformationEntity() == UnknownIE) TriangleStripSequence->setInformationEntity(ie);
	}

	TriangleFanSequence = (*list)[TagFromName(TriangleFanSequence)];
	if (TriangleFanSequence) {
		if (TriangleFanSequence->getInformationEntity() == UnknownIE) TriangleFanSequence->setInformationEntity(ie);
	}

	LineSequence = (*list)[TagFromName(LineSequence)];
	if (LineSequence) {
		if (LineSequence->getInformationEntity() == UnknownIE) LineSequence->setInformationEntity(ie);
	}

	FacetSequence = (*list)[TagFromName(FacetSequence)];
	if (FacetSequence) {
		if (FacetSequence->getInformationEntity() == UnknownIE) FacetSequence->setInformationEntity(ie);
	}

}

Module_SurfaceMesh::Module_SurfaceMesh(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SurfaceMesh";

	NumberOfSurfaces = (*list)[TagFromName(NumberOfSurfaces)];
	if (NumberOfSurfaces) {
		if (NumberOfSurfaces->getInformationEntity() == UnknownIE) NumberOfSurfaces->setInformationEntity(ie);
	}

	SurfaceSequence = (*list)[TagFromName(SurfaceSequence)];
	if (SurfaceSequence) {
		if (SurfaceSequence->getInformationEntity() == UnknownIE) SurfaceSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_AlgorithmIdentificationMacro(list,ie);
	new Macro_PointsMacro(list,ie);
	new Macro_VectorsMacro(list,ie);
	new Macro_SurfaceMeshPrimitivesMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForSegmentation::Module_MultiFrameFunctionalGroupsForSegmentation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForSegmentation";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_SegmentationMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_SegmentationMacro(list,ie);
}

Module_SpatialRegistrationSeries::Module_SpatialRegistrationSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialRegistrationSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_SpatialRegistration::Module_SpatialRegistration(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialRegistration";

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	RegistrationSequence = (*list)[TagFromName(RegistrationSequence)];
	if (RegistrationSequence) {
		if (RegistrationSequence->getInformationEntity() == UnknownIE) RegistrationSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_DeformableSpatialRegistration::Module_DeformableSpatialRegistration(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DeformableSpatialRegistration";

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	DeformableRegistrationSequence = (*list)[TagFromName(DeformableRegistrationSequence)];
	if (DeformableRegistrationSequence) {
		if (DeformableRegistrationSequence->getInformationEntity() == UnknownIE) DeformableRegistrationSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_SpatialFiducialsSeries::Module_SpatialFiducialsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialFiducialsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_SpatialFiducials::Module_SpatialFiducials(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialFiducials";

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	FiducialSetSequence = (*list)[TagFromName(FiducialSetSequence)];
	if (FiducialSetSequence) {
		if (FiducialSetSequence->getInformationEntity() == UnknownIE) FiducialSetSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_EncapsulatedDocumentSeries::Module_EncapsulatedDocumentSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocumentSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ProtocolName = (*list)[TagFromName(ProtocolName)];
	if (ProtocolName) {
		if (ProtocolName->getInformationEntity() == UnknownIE) ProtocolName->setInformationEntity(ie);
	}

	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	SeriesDescriptionCodeSequence = (*list)[TagFromName(SeriesDescriptionCodeSequence)];
	if (SeriesDescriptionCodeSequence) {
		if (SeriesDescriptionCodeSequence->getInformationEntity() == UnknownIE) SeriesDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	RequestAttributesSequence = (*list)[TagFromName(RequestAttributesSequence)];
	if (RequestAttributesSequence) {
		if (RequestAttributesSequence->getInformationEntity() == UnknownIE) RequestAttributesSequence->setInformationEntity(ie);
	}

	new Macro_RequestAttributesMacro(list,ie);
	new Macro_PerformedProcedureStepSummaryMacro(list,ie);
}

Module_EncapsulatedDocument::Module_EncapsulatedDocument(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocument";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	SourceInstanceSequence = (*list)[TagFromName(SourceInstanceSequence)];
	if (SourceInstanceSequence) {
		if (SourceInstanceSequence->getInformationEntity() == UnknownIE) SourceInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	DocumentTitle = (*list)[TagFromName(DocumentTitle)];
	if (DocumentTitle) {
		if (DocumentTitle->getInformationEntity() == UnknownIE) DocumentTitle->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	VerificationFlag = (*list)[TagFromName(VerificationFlag)];
	if (VerificationFlag) {
		if (VerificationFlag->getInformationEntity() == UnknownIE) VerificationFlag->setInformationEntity(ie);
	}

	HL7InstanceIdentifier = (*list)[TagFromName(HL7InstanceIdentifier)];
	if (HL7InstanceIdentifier) {
		if (HL7InstanceIdentifier->getInformationEntity() == UnknownIE) HL7InstanceIdentifier->setInformationEntity(ie);
	}

	PredecessorDocumentsSequence = (*list)[TagFromName(PredecessorDocumentsSequence)];
	if (PredecessorDocumentsSequence) {
		if (PredecessorDocumentsSequence->getInformationEntity() == UnknownIE) PredecessorDocumentsSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	IdenticalDocumentsSequence = (*list)[TagFromName(IdenticalDocumentsSequence)];
	if (IdenticalDocumentsSequence) {
		if (IdenticalDocumentsSequence->getInformationEntity() == UnknownIE) IdenticalDocumentsSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	MIMETypeOfEncapsulatedDocument = (*list)[TagFromName(MIMETypeOfEncapsulatedDocument)];
	if (MIMETypeOfEncapsulatedDocument) {
		if (MIMETypeOfEncapsulatedDocument->getInformationEntity() == UnknownIE) MIMETypeOfEncapsulatedDocument->setInformationEntity(ie);
	}

	ListOfMIMETypes = (*list)[TagFromName(ListOfMIMETypes)];
	if (ListOfMIMETypes) {
		if (ListOfMIMETypes->getInformationEntity() == UnknownIE) ListOfMIMETypes->setInformationEntity(ie);
	}

	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	EncapsulatedDocument = (*list)[TagFromName(EncapsulatedDocument)];
	if (EncapsulatedDocument) {
		if (EncapsulatedDocument->getInformationEntity() == UnknownIE) EncapsulatedDocument->setInformationEntity(ie);
	}

	EncapsulatedDocumentLength = (*list)[TagFromName(EncapsulatedDocumentLength)];
	if (EncapsulatedDocumentLength) {
		if (EncapsulatedDocumentLength->getInformationEntity() == UnknownIE) EncapsulatedDocumentLength->setInformationEntity(ie);
	}

}

Module_EncapsulatedDocumentPDFPseudo::Module_EncapsulatedDocumentPDFPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocumentPDFPseudo";

	MIMETypeOfEncapsulatedDocument = (*list)[TagFromName(MIMETypeOfEncapsulatedDocument)];
	if (MIMETypeOfEncapsulatedDocument) {
		if (MIMETypeOfEncapsulatedDocument->getInformationEntity() == UnknownIE) MIMETypeOfEncapsulatedDocument->setInformationEntity(ie);
	}

}

Module_EncapsulatedDocumentCDAPseudo::Module_EncapsulatedDocumentCDAPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocumentCDAPseudo";

	MIMETypeOfEncapsulatedDocument = (*list)[TagFromName(MIMETypeOfEncapsulatedDocument)];
	if (MIMETypeOfEncapsulatedDocument) {
		if (MIMETypeOfEncapsulatedDocument->getInformationEntity() == UnknownIE) MIMETypeOfEncapsulatedDocument->setInformationEntity(ie);
	}

}

Module_EncapsulatedDocumentSTLPseudo::Module_EncapsulatedDocumentSTLPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocumentSTLPseudo";

	MIMETypeOfEncapsulatedDocument = (*list)[TagFromName(MIMETypeOfEncapsulatedDocument)];
	if (MIMETypeOfEncapsulatedDocument) {
		if (MIMETypeOfEncapsulatedDocument->getInformationEntity() == UnknownIE) MIMETypeOfEncapsulatedDocument->setInformationEntity(ie);
	}

}

Module_EncapsulatedDocumentSTLSeriesPseudo::Module_EncapsulatedDocumentSTLSeriesPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocumentSTLSeriesPseudo";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_CheckSingleFramePseudo::Module_CheckSingleFramePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CheckSingleFramePseudo";

	NumberOfFrames = (*list)[TagFromName(NumberOfFrames)];
	if (NumberOfFrames) {
		if (NumberOfFrames->getInformationEntity() == UnknownIE) NumberOfFrames->setInformationEntity(ie);
	}

}

Module_RealWorldValueMappingSeries::Module_RealWorldValueMappingSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RealWorldValueMappingSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_RealWorldValueMapping::Module_RealWorldValueMapping(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RealWorldValueMapping";

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	ReferencedImageRealWorldValueMappingSequence = (*list)[TagFromName(ReferencedImageRealWorldValueMappingSequence)];
	if (ReferencedImageRealWorldValueMappingSequence) {
		if (ReferencedImageRealWorldValueMappingSequence->getInformationEntity() == UnknownIE) ReferencedImageRealWorldValueMappingSequence->setInformationEntity(ie);
	}

	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_IntravascularOCTSeries::Module_IntravascularOCTSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularOCTSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	PresentationIntentType = (*list)[TagFromName(PresentationIntentType)];
	if (PresentationIntentType) {
		if (PresentationIntentType->getInformationEntity() == UnknownIE) PresentationIntentType->setInformationEntity(ie);
	}

}

Module_IntravascularOCTImage::Module_IntravascularOCTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularOCTImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	PixelPresentation = (*list)[TagFromName(PixelPresentation)];
	if (PixelPresentation) {
		if (PixelPresentation->getInformationEntity() == UnknownIE) PixelPresentation->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	RecommendedDisplayFrameRate = (*list)[TagFromName(RecommendedDisplayFrameRate)];
	if (RecommendedDisplayFrameRate) {
		if (RecommendedDisplayFrameRate->getInformationEntity() == UnknownIE) RecommendedDisplayFrameRate->setInformationEntity(ie);
	}

	InterpolationType = (*list)[TagFromName(InterpolationType)];
	if (InterpolationType) {
		if (InterpolationType->getInformationEntity() == UnknownIE) InterpolationType->setInformationEntity(ie);
	}

	ReferencedColorPaletteInstanceUID = (*list)[TagFromName(ReferencedColorPaletteInstanceUID)];
	if (ReferencedColorPaletteInstanceUID) {
		if (ReferencedColorPaletteInstanceUID->getInformationEntity() == UnknownIE) ReferencedColorPaletteInstanceUID->setInformationEntity(ie);
	}

}

Module_IntravascularOCTAcquisitionParameters::Module_IntravascularOCTAcquisitionParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularOCTAcquisitionParameters";

	OCTFocalDistance = (*list)[TagFromName(OCTFocalDistance)];
	if (OCTFocalDistance) {
		if (OCTFocalDistance->getInformationEntity() == UnknownIE) OCTFocalDistance->setInformationEntity(ie);
	}

	BeamSpotSize = (*list)[TagFromName(BeamSpotSize)];
	if (BeamSpotSize) {
		if (BeamSpotSize->getInformationEntity() == UnknownIE) BeamSpotSize->setInformationEntity(ie);
	}

	EffectiveRefractiveIndex = (*list)[TagFromName(EffectiveRefractiveIndex)];
	if (EffectiveRefractiveIndex) {
		if (EffectiveRefractiveIndex->getInformationEntity() == UnknownIE) EffectiveRefractiveIndex->setInformationEntity(ie);
	}

	OCTAcquisitionDomain = (*list)[TagFromName(OCTAcquisitionDomain)];
	if (OCTAcquisitionDomain) {
		if (OCTAcquisitionDomain->getInformationEntity() == UnknownIE) OCTAcquisitionDomain->setInformationEntity(ie);
	}

	OCTOpticalCenterWavelength = (*list)[TagFromName(OCTOpticalCenterWavelength)];
	if (OCTOpticalCenterWavelength) {
		if (OCTOpticalCenterWavelength->getInformationEntity() == UnknownIE) OCTOpticalCenterWavelength->setInformationEntity(ie);
	}

	AxialResolution = (*list)[TagFromName(AxialResolution)];
	if (AxialResolution) {
		if (AxialResolution->getInformationEntity() == UnknownIE) AxialResolution->setInformationEntity(ie);
	}

	RangingDepth = (*list)[TagFromName(RangingDepth)];
	if (RangingDepth) {
		if (RangingDepth->getInformationEntity() == UnknownIE) RangingDepth->setInformationEntity(ie);
	}

	ALineRate = (*list)[TagFromName(ALineRate)];
	if (ALineRate) {
		if (ALineRate->getInformationEntity() == UnknownIE) ALineRate->setInformationEntity(ie);
	}

	ALinesPerFrame = (*list)[TagFromName(ALinesPerFrame)];
	if (ALinesPerFrame) {
		if (ALinesPerFrame->getInformationEntity() == UnknownIE) ALinesPerFrame->setInformationEntity(ie);
	}

}

Module_IntravascularImageAcquisitionParameters::Module_IntravascularImageAcquisitionParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularImageAcquisitionParameters";

	IVUSAcquisition = (*list)[TagFromName(IVUSAcquisition)];
	if (IVUSAcquisition) {
		if (IVUSAcquisition->getInformationEntity() == UnknownIE) IVUSAcquisition->setInformationEntity(ie);
	}

	IVUSPullbackRate = (*list)[TagFromName(IVUSPullbackRate)];
	if (IVUSPullbackRate) {
		if (IVUSPullbackRate->getInformationEntity() == UnknownIE) IVUSPullbackRate->setInformationEntity(ie);
	}

	IVUSPullbackStartFrameNumber = (*list)[TagFromName(IVUSPullbackStartFrameNumber)];
	if (IVUSPullbackStartFrameNumber) {
		if (IVUSPullbackStartFrameNumber->getInformationEntity() == UnknownIE) IVUSPullbackStartFrameNumber->setInformationEntity(ie);
	}

	IVUSPullbackStopFrameNumber = (*list)[TagFromName(IVUSPullbackStopFrameNumber)];
	if (IVUSPullbackStopFrameNumber) {
		if (IVUSPullbackStopFrameNumber->getInformationEntity() == UnknownIE) IVUSPullbackStopFrameNumber->setInformationEntity(ie);
	}

	CatheterDirectionOfRotation = (*list)[TagFromName(CatheterDirectionOfRotation)];
	if (CatheterDirectionOfRotation) {
		if (CatheterDirectionOfRotation->getInformationEntity() == UnknownIE) CatheterDirectionOfRotation->setInformationEntity(ie);
	}

	CatheterRotationalRate = (*list)[TagFromName(CatheterRotationalRate)];
	if (CatheterRotationalRate) {
		if (CatheterRotationalRate->getInformationEntity() == UnknownIE) CatheterRotationalRate->setInformationEntity(ie);
	}

	ModeOfPercutaneousAccessSequence = (*list)[TagFromName(ModeOfPercutaneousAccessSequence)];
	if (ModeOfPercutaneousAccessSequence) {
		if (ModeOfPercutaneousAccessSequence->getInformationEntity() == UnknownIE) ModeOfPercutaneousAccessSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_IntravascularOCTProcessingParameters::Module_IntravascularOCTProcessingParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularOCTProcessingParameters";

	OCTZOffsetApplied = (*list)[TagFromName(OCTZOffsetApplied)];
	if (OCTZOffsetApplied) {
		if (OCTZOffsetApplied->getInformationEntity() == UnknownIE) OCTZOffsetApplied->setInformationEntity(ie);
	}

	RefractiveIndexApplied = (*list)[TagFromName(RefractiveIndexApplied)];
	if (RefractiveIndexApplied) {
		if (RefractiveIndexApplied->getInformationEntity() == UnknownIE) RefractiveIndexApplied->setInformationEntity(ie);
	}

	ALinePixelSpacing = (*list)[TagFromName(ALinePixelSpacing)];
	if (ALinePixelSpacing) {
		if (ALinePixelSpacing->getInformationEntity() == UnknownIE) ALinePixelSpacing->setInformationEntity(ie);
	}

	PixelIntensityRelationship = (*list)[TagFromName(PixelIntensityRelationship)];
	if (PixelIntensityRelationship) {
		if (PixelIntensityRelationship->getInformationEntity() == UnknownIE) PixelIntensityRelationship->setInformationEntity(ie);
	}

	FirstALineLocation = (*list)[TagFromName(FirstALineLocation)];
	if (FirstALineLocation) {
		if (FirstALineLocation->getInformationEntity() == UnknownIE) FirstALineLocation->setInformationEntity(ie);
	}

}

Macro_IntravascularOCTFrameTypeMacro::Macro_IntravascularOCTFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularOCTFrameTypeMacro";

	IntravascularOCTFrameTypeSequence = (*list)[TagFromName(IntravascularOCTFrameTypeSequence)];
	if (IntravascularOCTFrameTypeSequence) {
		if (IntravascularOCTFrameTypeSequence->getInformationEntity() == UnknownIE) IntravascularOCTFrameTypeSequence->setInformationEntity(ie);
	}

}

Macro_IntravascularFrameContentMacro::Macro_IntravascularFrameContentMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularFrameContentMacro";

	IntravascularFrameContentSequence = (*list)[TagFromName(IntravascularFrameContentSequence)];
	if (IntravascularFrameContentSequence) {
		if (IntravascularFrameContentSequence->getInformationEntity() == UnknownIE) IntravascularFrameContentSequence->setInformationEntity(ie);
	}

}

Macro_IntravascularOCTFrameContentMacro::Macro_IntravascularOCTFrameContentMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntravascularOCTFrameContentMacro";

	IntravascularOCTFrameContentSequence = (*list)[TagFromName(IntravascularOCTFrameContentSequence)];
	if (IntravascularOCTFrameContentSequence) {
		if (IntravascularOCTFrameContentSequence->getInformationEntity() == UnknownIE) IntravascularOCTFrameContentSequence->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation::Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForIVOCTImageForPresentation";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_IntravascularOCTFrameTypeMacro(list,ie);
	new Macro_IntravascularFrameContentMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_IntravascularOCTFrameTypeMacro(list,ie);
	new Macro_IntravascularFrameContentMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing::Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForIVOCTImageForProcessing";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_IntravascularOCTFrameTypeMacro(list,ie);
	new Macro_IntravascularFrameContentMacro(list,ie);
	new Macro_IntravascularOCTFrameContentMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_IntravascularOCTFrameTypeMacro(list,ie);
	new Macro_IntravascularFrameContentMacro(list,ie);
	new Macro_IntravascularOCTFrameContentMacro(list,ie);
}

Module_ParametricMapSeries::Module_ParametricMapSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ParametricMapSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_ParametricMapImage::Module_ParametricMapImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ParametricMapImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	PixelPresentation = (*list)[TagFromName(PixelPresentation)];
	if (PixelPresentation) {
		if (PixelPresentation->getInformationEntity() == UnknownIE) PixelPresentation->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	PaletteColorLookupTableUID = (*list)[TagFromName(PaletteColorLookupTableUID)];
	if (PaletteColorLookupTableUID) {
		if (PaletteColorLookupTableUID->getInformationEntity() == UnknownIE) PaletteColorLookupTableUID->setInformationEntity(ie);
	}

	ICCProfile = (*list)[TagFromName(ICCProfile)];
	if (ICCProfile) {
		if (ICCProfile->getInformationEntity() == UnknownIE) ICCProfile->setInformationEntity(ie);
	}

	ColorSpace = (*list)[TagFromName(ColorSpace)];
	if (ColorSpace) {
		if (ColorSpace->getInformationEntity() == UnknownIE) ColorSpace->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForParametricMap::Module_MultiFrameFunctionalGroupsForParametricMap(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForParametricMap";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_IdentityPixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTWithLUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_ParametricMapFrameTypeMacro(list,ie);
	new Macro_StoredValueColorRangeMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_IdentityPixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTWithLUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_ParametricMapFrameTypeMacro(list,ie);
	new Macro_StoredValueColorRangeMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
}

Macro_ParametricMapFrameTypeMacro::Macro_ParametricMapFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ParametricMapFrameTypeMacro";

	ParametricMapFrameTypeSequence = (*list)[TagFromName(ParametricMapFrameTypeSequence)];
	if (ParametricMapFrameTypeSequence) {
		if (ParametricMapFrameTypeSequence->getInformationEntity() == UnknownIE) ParametricMapFrameTypeSequence->setInformationEntity(ie);
	}

}

Macro_StoredValueColorRangeMacro::Macro_StoredValueColorRangeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StoredValueColorRangeMacro";

	StoredValueColorRangeSequence = (*list)[TagFromName(StoredValueColorRangeSequence)];
	if (StoredValueColorRangeSequence) {
		if (StoredValueColorRangeSequence->getInformationEntity() == UnknownIE) StoredValueColorRangeSequence->setInformationEntity(ie);
	}

}

Module_Manufacturing3DModel::Module_Manufacturing3DModel(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Manufacturing3DModel";

	MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
	if (MeasurementUnitsCodeSequence) {
		if (MeasurementUnitsCodeSequence->getInformationEntity() == UnknownIE) MeasurementUnitsCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ModelModification = (*list)[TagFromName(ModelModification)];
	if (ModelModification) {
		if (ModelModification->getInformationEntity() == UnknownIE) ModelModification->setInformationEntity(ie);
	}

	ModelMirroring = (*list)[TagFromName(ModelMirroring)];
	if (ModelMirroring) {
		if (ModelMirroring->getInformationEntity() == UnknownIE) ModelMirroring->setInformationEntity(ie);
	}

	ModelUsageCodeSequence = (*list)[TagFromName(ModelUsageCodeSequence)];
	if (ModelUsageCodeSequence) {
		if (ModelUsageCodeSequence->getInformationEntity() == UnknownIE) ModelUsageCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ContentDescription = (*list)[TagFromName(ContentDescription)];
	if (ContentDescription) {
		if (ContentDescription->getInformationEntity() == UnknownIE) ContentDescription->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	DerivationAlgorithmSequence = (*list)[TagFromName(DerivationAlgorithmSequence)];
	if (DerivationAlgorithmSequence) {
		if (DerivationAlgorithmSequence->getInformationEntity() == UnknownIE) DerivationAlgorithmSequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
}

Module_FileMetaInformation::Module_FileMetaInformation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FileMetaInformation";

	FileMetaInformationGroupLength = (*list)[TagFromName(FileMetaInformationGroupLength)];
	if (FileMetaInformationGroupLength) {
		if (FileMetaInformationGroupLength->getInformationEntity() == UnknownIE) FileMetaInformationGroupLength->setInformationEntity(ie);
	}

	FileMetaInformationVersion = (*list)[TagFromName(FileMetaInformationVersion)];
	if (FileMetaInformationVersion) {
		if (FileMetaInformationVersion->getInformationEntity() == UnknownIE) FileMetaInformationVersion->setInformationEntity(ie);
	}

	MediaStorageSOPClassUID = (*list)[TagFromName(MediaStorageSOPClassUID)];
	if (MediaStorageSOPClassUID) {
		if (MediaStorageSOPClassUID->getInformationEntity() == UnknownIE) MediaStorageSOPClassUID->setInformationEntity(ie);
	}

	MediaStorageSOPInstanceUID = (*list)[TagFromName(MediaStorageSOPInstanceUID)];
	if (MediaStorageSOPInstanceUID) {
		if (MediaStorageSOPInstanceUID->getInformationEntity() == UnknownIE) MediaStorageSOPInstanceUID->setInformationEntity(ie);
	}

	TransferSyntaxUID = (*list)[TagFromName(TransferSyntaxUID)];
	if (TransferSyntaxUID) {
		if (TransferSyntaxUID->getInformationEntity() == UnknownIE) TransferSyntaxUID->setInformationEntity(ie);
	}

	ImplementationClassUID = (*list)[TagFromName(ImplementationClassUID)];
	if (ImplementationClassUID) {
		if (ImplementationClassUID->getInformationEntity() == UnknownIE) ImplementationClassUID->setInformationEntity(ie);
	}

	ImplementationVersionName = (*list)[TagFromName(ImplementationVersionName)];
	if (ImplementationVersionName) {
		if (ImplementationVersionName->getInformationEntity() == UnknownIE) ImplementationVersionName->setInformationEntity(ie);
	}

	SourceApplicationEntityTitle = (*list)[TagFromName(SourceApplicationEntityTitle)];
	if (SourceApplicationEntityTitle) {
		if (SourceApplicationEntityTitle->getInformationEntity() == UnknownIE) SourceApplicationEntityTitle->setInformationEntity(ie);
	}

	SendingApplicationEntityTitle = (*list)[TagFromName(SendingApplicationEntityTitle)];
	if (SendingApplicationEntityTitle) {
		if (SendingApplicationEntityTitle->getInformationEntity() == UnknownIE) SendingApplicationEntityTitle->setInformationEntity(ie);
	}

	ReceivingApplicationEntityTitle = (*list)[TagFromName(ReceivingApplicationEntityTitle)];
	if (ReceivingApplicationEntityTitle) {
		if (ReceivingApplicationEntityTitle->getInformationEntity() == UnknownIE) ReceivingApplicationEntityTitle->setInformationEntity(ie);
	}

	SourcePresentationAddress = (*list)[TagFromName(SourcePresentationAddress)];
	if (SourcePresentationAddress) {
		if (SourcePresentationAddress->getInformationEntity() == UnknownIE) SourcePresentationAddress->setInformationEntity(ie);
	}

	SendingPresentationAddress = (*list)[TagFromName(SendingPresentationAddress)];
	if (SendingPresentationAddress) {
		if (SendingPresentationAddress->getInformationEntity() == UnknownIE) SendingPresentationAddress->setInformationEntity(ie);
	}

	ReceivingPresentationAddress = (*list)[TagFromName(ReceivingPresentationAddress)];
	if (ReceivingPresentationAddress) {
		if (ReceivingPresentationAddress->getInformationEntity() == UnknownIE) ReceivingPresentationAddress->setInformationEntity(ie);
	}

	PrivateInformationCreatorUID = (*list)[TagFromName(PrivateInformationCreatorUID)];
	if (PrivateInformationCreatorUID) {
		if (PrivateInformationCreatorUID->getInformationEntity() == UnknownIE) PrivateInformationCreatorUID->setInformationEntity(ie);
	}

	PrivateInformation = (*list)[TagFromName(PrivateInformation)];
	if (PrivateInformation) {
		if (PrivateInformation->getInformationEntity() == UnknownIE) PrivateInformation->setInformationEntity(ie);
	}

}

Module_FileSetIdentification::Module_FileSetIdentification(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FileSetIdentification";

	FileSetID = (*list)[TagFromName(FileSetID)];
	if (FileSetID) {
		if (FileSetID->getInformationEntity() == UnknownIE) FileSetID->setInformationEntity(ie);
	}

	FileSetDescriptorFileID = (*list)[TagFromName(FileSetDescriptorFileID)];
	if (FileSetDescriptorFileID) {
		if (FileSetDescriptorFileID->getInformationEntity() == UnknownIE) FileSetDescriptorFileID->setInformationEntity(ie);
	}

	SpecificCharacterSetOfFileSetDescriptorFile = (*list)[TagFromName(SpecificCharacterSetOfFileSetDescriptorFile)];
	if (SpecificCharacterSetOfFileSetDescriptorFile) {
		if (SpecificCharacterSetOfFileSetDescriptorFile->getInformationEntity() == UnknownIE) SpecificCharacterSetOfFileSetDescriptorFile->setInformationEntity(ie);
	}

}

Module_DirectoryInformation::Module_DirectoryInformation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DirectoryInformation";

	OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity = (*list)[TagFromName(OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity)];
	if (OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity) {
		if (OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity->getInformationEntity() == UnknownIE) OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity->setInformationEntity(ie);
	}

	OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity = (*list)[TagFromName(OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity)];
	if (OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity) {
		if (OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity->getInformationEntity() == UnknownIE) OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity->setInformationEntity(ie);
	}

	FileSetConsistencyFlag = (*list)[TagFromName(FileSetConsistencyFlag)];
	if (FileSetConsistencyFlag) {
		if (FileSetConsistencyFlag->getInformationEntity() == UnknownIE) FileSetConsistencyFlag->setInformationEntity(ie);
	}

	DirectoryRecordSequence = (*list)[TagFromName(DirectoryRecordSequence)];
	if (DirectoryRecordSequence) {
		if (DirectoryRecordSequence->getInformationEntity() == UnknownIE) DirectoryRecordSequence->setInformationEntity(ie);
	}

	new Macro_PatientDirectoryRecord(list,ie);
	new Macro_StudyDirectoryRecord(list,ie);
	new Macro_SeriesDirectoryRecord(list,ie);
	new Macro_ImageDirectoryRecord(list,ie);
	new Macro_RTDoseDirectoryRecord(list,ie);
	new Macro_RTStructureSetDirectoryRecord(list,ie);
	new Macro_RTPlanDirectoryRecord(list,ie);
	new Macro_RTTreatmentRecordDirectoryRecord(list,ie);
	new Macro_PresentationDirectoryRecord(list,ie);
	new Macro_WaveformDirectoryRecord(list,ie);
	new Macro_SRDocumentDirectoryRecord(list,ie);
	new Macro_KeyObjectDocumentDirectoryRecord(list,ie);
	new Macro_SpectroscopyDirectoryRecord(list,ie);
	new Macro_RawDataDirectoryRecord(list,ie);
	new Macro_RegistrationDirectoryRecord(list,ie);
	new Macro_FiducialDirectoryRecord(list,ie);
	new Macro_HangingProtocolDirectoryRecord(list,ie);
	new Macro_EncapsulatedDocumentDirectoryRecord(list,ie);
	new Macro_HL7StructuredDocumentDirectoryRecord(list,ie);
	new Macro_RealWorldValueMappingDirectoryRecord(list,ie);
	new Macro_StereometricRelationshipDirectoryRecord(list,ie);
	new Macro_SurfaceDirectoryRecord(list,ie);
}

Macro_PatientDirectoryRecord::Macro_PatientDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	PatientName = (*list)[TagFromName(PatientName)];
	if (PatientName) {
		if (PatientName->getInformationEntity() == UnknownIE) PatientName->setInformationEntity(ie);
	}

	PatientID = (*list)[TagFromName(PatientID)];
	if (PatientID) {
		if (PatientID->getInformationEntity() == UnknownIE) PatientID->setInformationEntity(ie);
	}

}

Macro_StudyDirectoryRecord::Macro_StudyDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StudyDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	StudyDate = (*list)[TagFromName(StudyDate)];
	if (StudyDate) {
		if (StudyDate->getInformationEntity() == UnknownIE) StudyDate->setInformationEntity(ie);
	}

	StudyTime = (*list)[TagFromName(StudyTime)];
	if (StudyTime) {
		if (StudyTime->getInformationEntity() == UnknownIE) StudyTime->setInformationEntity(ie);
	}

	StudyDescription = (*list)[TagFromName(StudyDescription)];
	if (StudyDescription) {
		if (StudyDescription->getInformationEntity() == UnknownIE) StudyDescription->setInformationEntity(ie);
	}

	StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
	if (StudyInstanceUID) {
		if (StudyInstanceUID->getInformationEntity() == UnknownIE) StudyInstanceUID->setInformationEntity(ie);
	}

	StudyID = (*list)[TagFromName(StudyID)];
	if (StudyID) {
		if (StudyID->getInformationEntity() == UnknownIE) StudyID->setInformationEntity(ie);
	}

	AccessionNumber = (*list)[TagFromName(AccessionNumber)];
	if (AccessionNumber) {
		if (AccessionNumber->getInformationEntity() == UnknownIE) AccessionNumber->setInformationEntity(ie);
	}

}

Macro_SeriesDirectoryRecord::Macro_SeriesDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SeriesDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
}

Macro_ImageDirectoryRecord::Macro_ImageDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
}

Macro_RTDoseDirectoryRecord::Macro_RTDoseDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTDoseDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	DoseSummationType = (*list)[TagFromName(DoseSummationType)];
	if (DoseSummationType) {
		if (DoseSummationType->getInformationEntity() == UnknownIE) DoseSummationType->setInformationEntity(ie);
	}

	DoseComment = (*list)[TagFromName(DoseComment)];
	if (DoseComment) {
		if (DoseComment->getInformationEntity() == UnknownIE) DoseComment->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
}

Macro_RTStructureSetDirectoryRecord::Macro_RTStructureSetDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTStructureSetDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	StructureSetLabel = (*list)[TagFromName(StructureSetLabel)];
	if (StructureSetLabel) {
		if (StructureSetLabel->getInformationEntity() == UnknownIE) StructureSetLabel->setInformationEntity(ie);
	}

	StructureSetDate = (*list)[TagFromName(StructureSetDate)];
	if (StructureSetDate) {
		if (StructureSetDate->getInformationEntity() == UnknownIE) StructureSetDate->setInformationEntity(ie);
	}

	StructureSetTime = (*list)[TagFromName(StructureSetTime)];
	if (StructureSetTime) {
		if (StructureSetTime->getInformationEntity() == UnknownIE) StructureSetTime->setInformationEntity(ie);
	}

}

Macro_RTPlanDirectoryRecord::Macro_RTPlanDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTPlanDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	RTPlanLabel = (*list)[TagFromName(RTPlanLabel)];
	if (RTPlanLabel) {
		if (RTPlanLabel->getInformationEntity() == UnknownIE) RTPlanLabel->setInformationEntity(ie);
	}

	RTPlanDate = (*list)[TagFromName(RTPlanDate)];
	if (RTPlanDate) {
		if (RTPlanDate->getInformationEntity() == UnknownIE) RTPlanDate->setInformationEntity(ie);
	}

	RTPlanTime = (*list)[TagFromName(RTPlanTime)];
	if (RTPlanTime) {
		if (RTPlanTime->getInformationEntity() == UnknownIE) RTPlanTime->setInformationEntity(ie);
	}

}

Macro_RTTreatmentRecordDirectoryRecord::Macro_RTTreatmentRecordDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTTreatmentRecordDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	TreatmentDate = (*list)[TagFromName(TreatmentDate)];
	if (TreatmentDate) {
		if (TreatmentDate->getInformationEntity() == UnknownIE) TreatmentDate->setInformationEntity(ie);
	}

	TreatmentTime = (*list)[TagFromName(TreatmentTime)];
	if (TreatmentTime) {
		if (TreatmentTime->getInformationEntity() == UnknownIE) TreatmentTime->setInformationEntity(ie);
	}

}

Macro_PresentationDirectoryRecord::Macro_PresentationDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	PresentationCreationDate = (*list)[TagFromName(PresentationCreationDate)];
	if (PresentationCreationDate) {
		if (PresentationCreationDate->getInformationEntity() == UnknownIE) PresentationCreationDate->setInformationEntity(ie);
	}

	PresentationCreationTime = (*list)[TagFromName(PresentationCreationTime)];
	if (PresentationCreationTime) {
		if (PresentationCreationTime->getInformationEntity() == UnknownIE) PresentationCreationTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
	ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
	if (ReferencedSeriesSequence) {
		if (ReferencedSeriesSequence->getInformationEntity() == UnknownIE) ReferencedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	BlendingSequence = (*list)[TagFromName(BlendingSequence)];
	if (BlendingSequence) {
		if (BlendingSequence->getInformationEntity() == UnknownIE) BlendingSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_WaveformDirectoryRecord::Macro_WaveformDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WaveformDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

}

Macro_SRDocumentDirectoryRecord::Macro_SRDocumentDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SRDocumentDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	CompletionFlag = (*list)[TagFromName(CompletionFlag)];
	if (CompletionFlag) {
		if (CompletionFlag->getInformationEntity() == UnknownIE) CompletionFlag->setInformationEntity(ie);
	}

	VerificationFlag = (*list)[TagFromName(VerificationFlag)];
	if (VerificationFlag) {
		if (VerificationFlag->getInformationEntity() == UnknownIE) VerificationFlag->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	VerificationDateTime = (*list)[TagFromName(VerificationDateTime)];
	if (VerificationDateTime) {
		if (VerificationDateTime->getInformationEntity() == UnknownIE) VerificationDateTime->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ContentSequence = (*list)[TagFromName(ContentSequence)];
	if (ContentSequence) {
		if (ContentSequence->getInformationEntity() == UnknownIE) ContentSequence->setInformationEntity(ie);
	}

	new Macro_DocumentContentMacro(list,ie);
}

Macro_KeyObjectDocumentDirectoryRecord::Macro_KeyObjectDocumentDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeyObjectDocumentDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ContentSequence = (*list)[TagFromName(ContentSequence)];
	if (ContentSequence) {
		if (ContentSequence->getInformationEntity() == UnknownIE) ContentSequence->setInformationEntity(ie);
	}

	new Macro_DocumentContentMacro(list,ie);
}

Macro_SpectroscopyDirectoryRecord::Macro_SpectroscopyDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpectroscopyDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ReferencedImageEvidenceSequence = (*list)[TagFromName(ReferencedImageEvidenceSequence)];
	if (ReferencedImageEvidenceSequence) {
		if (ReferencedImageEvidenceSequence->getInformationEntity() == UnknownIE) ReferencedImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	NumberOfFrames = (*list)[TagFromName(NumberOfFrames)];
	if (NumberOfFrames) {
		if (NumberOfFrames->getInformationEntity() == UnknownIE) NumberOfFrames->setInformationEntity(ie);
	}

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	DataPointRows = (*list)[TagFromName(DataPointRows)];
	if (DataPointRows) {
		if (DataPointRows->getInformationEntity() == UnknownIE) DataPointRows->setInformationEntity(ie);
	}

	DataPointColumns = (*list)[TagFromName(DataPointColumns)];
	if (DataPointColumns) {
		if (DataPointColumns->getInformationEntity() == UnknownIE) DataPointColumns->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
}

Macro_RawDataDirectoryRecord::Macro_RawDataDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RawDataDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
}

Macro_RegistrationDirectoryRecord::Macro_RegistrationDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RegistrationDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
}

Macro_FiducialDirectoryRecord::Macro_FiducialDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FiducialDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
}

Macro_HangingProtocolDirectoryRecord::Macro_HangingProtocolDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HangingProtocolDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	HangingProtocolName = (*list)[TagFromName(HangingProtocolName)];
	if (HangingProtocolName) {
		if (HangingProtocolName->getInformationEntity() == UnknownIE) HangingProtocolName->setInformationEntity(ie);
	}

	HangingProtocolDescription = (*list)[TagFromName(HangingProtocolDescription)];
	if (HangingProtocolDescription) {
		if (HangingProtocolDescription->getInformationEntity() == UnknownIE) HangingProtocolDescription->setInformationEntity(ie);
	}

	HangingProtocolLevel = (*list)[TagFromName(HangingProtocolLevel)];
	if (HangingProtocolLevel) {
		if (HangingProtocolLevel->getInformationEntity() == UnknownIE) HangingProtocolLevel->setInformationEntity(ie);
	}

	HangingProtocolCreator = (*list)[TagFromName(HangingProtocolCreator)];
	if (HangingProtocolCreator) {
		if (HangingProtocolCreator->getInformationEntity() == UnknownIE) HangingProtocolCreator->setInformationEntity(ie);
	}

	HangingProtocolCreationDateTime = (*list)[TagFromName(HangingProtocolCreationDateTime)];
	if (HangingProtocolCreationDateTime) {
		if (HangingProtocolCreationDateTime->getInformationEntity() == UnknownIE) HangingProtocolCreationDateTime->setInformationEntity(ie);
	}

	HangingProtocolDefinitionSequence = (*list)[TagFromName(HangingProtocolDefinitionSequence)];
	if (HangingProtocolDefinitionSequence) {
		if (HangingProtocolDefinitionSequence->getInformationEntity() == UnknownIE) HangingProtocolDefinitionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	NumberOfPriorsReferenced = (*list)[TagFromName(NumberOfPriorsReferenced)];
	if (NumberOfPriorsReferenced) {
		if (NumberOfPriorsReferenced->getInformationEntity() == UnknownIE) NumberOfPriorsReferenced->setInformationEntity(ie);
	}

	HangingProtocolUserIdentificationCodeSequence = (*list)[TagFromName(HangingProtocolUserIdentificationCodeSequence)];
	if (HangingProtocolUserIdentificationCodeSequence) {
		if (HangingProtocolUserIdentificationCodeSequence->getInformationEntity() == UnknownIE) HangingProtocolUserIdentificationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_EncapsulatedDocumentDirectoryRecord::Macro_EncapsulatedDocumentDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EncapsulatedDocumentDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	DocumentTitle = (*list)[TagFromName(DocumentTitle)];
	if (DocumentTitle) {
		if (DocumentTitle->getInformationEntity() == UnknownIE) DocumentTitle->setInformationEntity(ie);
	}

	HL7InstanceIdentifier = (*list)[TagFromName(HL7InstanceIdentifier)];
	if (HL7InstanceIdentifier) {
		if (HL7InstanceIdentifier->getInformationEntity() == UnknownIE) HL7InstanceIdentifier->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	MIMETypeOfEncapsulatedDocument = (*list)[TagFromName(MIMETypeOfEncapsulatedDocument)];
	if (MIMETypeOfEncapsulatedDocument) {
		if (MIMETypeOfEncapsulatedDocument->getInformationEntity() == UnknownIE) MIMETypeOfEncapsulatedDocument->setInformationEntity(ie);
	}

}

Macro_HL7StructuredDocumentDirectoryRecord::Macro_HL7StructuredDocumentDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HL7StructuredDocumentDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	HL7InstanceIdentifier = (*list)[TagFromName(HL7InstanceIdentifier)];
	if (HL7InstanceIdentifier) {
		if (HL7InstanceIdentifier->getInformationEntity() == UnknownIE) HL7InstanceIdentifier->setInformationEntity(ie);
	}

	HL7DocumentEffectiveTime = (*list)[TagFromName(HL7DocumentEffectiveTime)];
	if (HL7DocumentEffectiveTime) {
		if (HL7DocumentEffectiveTime->getInformationEntity() == UnknownIE) HL7DocumentEffectiveTime->setInformationEntity(ie);
	}

	HL7DocumentTypeCodeSequence = (*list)[TagFromName(HL7DocumentTypeCodeSequence)];
	if (HL7DocumentTypeCodeSequence) {
		if (HL7DocumentTypeCodeSequence->getInformationEntity() == UnknownIE) HL7DocumentTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_RealWorldValueMappingDirectoryRecord::Macro_RealWorldValueMappingDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RealWorldValueMappingDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
}

Macro_StereometricRelationshipDirectoryRecord::Macro_StereometricRelationshipDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StereometricRelationshipDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
}

Macro_SurfaceDirectoryRecord::Macro_SurfaceDirectoryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SurfaceDirectoryRecord";

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
}

Module_DirectoryInformationDental::Module_DirectoryInformationDental(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DirectoryInformationDental";

	DirectoryRecordSequence = (*list)[TagFromName(DirectoryRecordSequence)];
	if (DirectoryRecordSequence) {
		if (DirectoryRecordSequence->getInformationEntity() == UnknownIE) DirectoryRecordSequence->setInformationEntity(ie);
	}

}

Module_PETSeries::Module_PETSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETSeries";

	SeriesDate = (*list)[TagFromName(SeriesDate)];
	if (SeriesDate) {
		if (SeriesDate->getInformationEntity() == UnknownIE) SeriesDate->setInformationEntity(ie);
	}

	SeriesTime = (*list)[TagFromName(SeriesTime)];
	if (SeriesTime) {
		if (SeriesTime->getInformationEntity() == UnknownIE) SeriesTime->setInformationEntity(ie);
	}

	Units = (*list)[TagFromName(Units)];
	if (Units) {
		if (Units->getInformationEntity() == UnknownIE) Units->setInformationEntity(ie);
	}

	SUVType = (*list)[TagFromName(SUVType)];
	if (SUVType) {
		if (SUVType->getInformationEntity() == UnknownIE) SUVType->setInformationEntity(ie);
	}

	CountsSource = (*list)[TagFromName(CountsSource)];
	if (CountsSource) {
		if (CountsSource->getInformationEntity() == UnknownIE) CountsSource->setInformationEntity(ie);
	}

	SeriesType = (*list)[TagFromName(SeriesType)];
	if (SeriesType) {
		if (SeriesType->getInformationEntity() == UnknownIE) SeriesType->setInformationEntity(ie);
	}

	ReprojectionMethod = (*list)[TagFromName(ReprojectionMethod)];
	if (ReprojectionMethod) {
		if (ReprojectionMethod->getInformationEntity() == UnknownIE) ReprojectionMethod->setInformationEntity(ie);
	}

	NumberOfRRIntervals = (*list)[TagFromName(NumberOfRRIntervals)];
	if (NumberOfRRIntervals) {
		if (NumberOfRRIntervals->getInformationEntity() == UnknownIE) NumberOfRRIntervals->setInformationEntity(ie);
	}

	NumberOfTimeSlots = (*list)[TagFromName(NumberOfTimeSlots)];
	if (NumberOfTimeSlots) {
		if (NumberOfTimeSlots->getInformationEntity() == UnknownIE) NumberOfTimeSlots->setInformationEntity(ie);
	}

	NumberOfTimeSlices = (*list)[TagFromName(NumberOfTimeSlices)];
	if (NumberOfTimeSlices) {
		if (NumberOfTimeSlices->getInformationEntity() == UnknownIE) NumberOfTimeSlices->setInformationEntity(ie);
	}

	NumberOfSlices = (*list)[TagFromName(NumberOfSlices)];
	if (NumberOfSlices) {
		if (NumberOfSlices->getInformationEntity() == UnknownIE) NumberOfSlices->setInformationEntity(ie);
	}

	CorrectedImage = (*list)[TagFromName(CorrectedImage)];
	if (CorrectedImage) {
		if (CorrectedImage->getInformationEntity() == UnknownIE) CorrectedImage->setInformationEntity(ie);
	}

	RandomsCorrectionMethod = (*list)[TagFromName(RandomsCorrectionMethod)];
	if (RandomsCorrectionMethod) {
		if (RandomsCorrectionMethod->getInformationEntity() == UnknownIE) RandomsCorrectionMethod->setInformationEntity(ie);
	}

	AttenuationCorrectionMethod = (*list)[TagFromName(AttenuationCorrectionMethod)];
	if (AttenuationCorrectionMethod) {
		if (AttenuationCorrectionMethod->getInformationEntity() == UnknownIE) AttenuationCorrectionMethod->setInformationEntity(ie);
	}

	ScatterCorrectionMethod = (*list)[TagFromName(ScatterCorrectionMethod)];
	if (ScatterCorrectionMethod) {
		if (ScatterCorrectionMethod->getInformationEntity() == UnknownIE) ScatterCorrectionMethod->setInformationEntity(ie);
	}

	DecayCorrection = (*list)[TagFromName(DecayCorrection)];
	if (DecayCorrection) {
		if (DecayCorrection->getInformationEntity() == UnknownIE) DecayCorrection->setInformationEntity(ie);
	}

	ReconstructionDiameter = (*list)[TagFromName(ReconstructionDiameter)];
	if (ReconstructionDiameter) {
		if (ReconstructionDiameter->getInformationEntity() == UnknownIE) ReconstructionDiameter->setInformationEntity(ie);
	}

	ConvolutionKernel = (*list)[TagFromName(ConvolutionKernel)];
	if (ConvolutionKernel) {
		if (ConvolutionKernel->getInformationEntity() == UnknownIE) ConvolutionKernel->setInformationEntity(ie);
	}

	ReconstructionMethod = (*list)[TagFromName(ReconstructionMethod)];
	if (ReconstructionMethod) {
		if (ReconstructionMethod->getInformationEntity() == UnknownIE) ReconstructionMethod->setInformationEntity(ie);
	}

	DetectorLinesOfResponseUsed = (*list)[TagFromName(DetectorLinesOfResponseUsed)];
	if (DetectorLinesOfResponseUsed) {
		if (DetectorLinesOfResponseUsed->getInformationEntity() == UnknownIE) DetectorLinesOfResponseUsed->setInformationEntity(ie);
	}

	AcquisitionStartCondition = (*list)[TagFromName(AcquisitionStartCondition)];
	if (AcquisitionStartCondition) {
		if (AcquisitionStartCondition->getInformationEntity() == UnknownIE) AcquisitionStartCondition->setInformationEntity(ie);
	}

	AcquisitionStartConditionData = (*list)[TagFromName(AcquisitionStartConditionData)];
	if (AcquisitionStartConditionData) {
		if (AcquisitionStartConditionData->getInformationEntity() == UnknownIE) AcquisitionStartConditionData->setInformationEntity(ie);
	}

	AcquisitionTerminationCondition = (*list)[TagFromName(AcquisitionTerminationCondition)];
	if (AcquisitionTerminationCondition) {
		if (AcquisitionTerminationCondition->getInformationEntity() == UnknownIE) AcquisitionTerminationCondition->setInformationEntity(ie);
	}

	AcquisitionTerminationConditionData = (*list)[TagFromName(AcquisitionTerminationConditionData)];
	if (AcquisitionTerminationConditionData) {
		if (AcquisitionTerminationConditionData->getInformationEntity() == UnknownIE) AcquisitionTerminationConditionData->setInformationEntity(ie);
	}

	FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
	if (FieldOfViewShape) {
		if (FieldOfViewShape->getInformationEntity() == UnknownIE) FieldOfViewShape->setInformationEntity(ie);
	}

	FieldOfViewDimensions = (*list)[TagFromName(FieldOfViewDimensions)];
	if (FieldOfViewDimensions) {
		if (FieldOfViewDimensions->getInformationEntity() == UnknownIE) FieldOfViewDimensions->setInformationEntity(ie);
	}

	GantryDetectorTilt = (*list)[TagFromName(GantryDetectorTilt)];
	if (GantryDetectorTilt) {
		if (GantryDetectorTilt->getInformationEntity() == UnknownIE) GantryDetectorTilt->setInformationEntity(ie);
	}

	GantryDetectorSlew = (*list)[TagFromName(GantryDetectorSlew)];
	if (GantryDetectorSlew) {
		if (GantryDetectorSlew->getInformationEntity() == UnknownIE) GantryDetectorSlew->setInformationEntity(ie);
	}

	TypeOfDetectorMotion = (*list)[TagFromName(TypeOfDetectorMotion)];
	if (TypeOfDetectorMotion) {
		if (TypeOfDetectorMotion->getInformationEntity() == UnknownIE) TypeOfDetectorMotion->setInformationEntity(ie);
	}

	CollimatorType = (*list)[TagFromName(CollimatorType)];
	if (CollimatorType) {
		if (CollimatorType->getInformationEntity() == UnknownIE) CollimatorType->setInformationEntity(ie);
	}

	CollimatorGridName = (*list)[TagFromName(CollimatorGridName)];
	if (CollimatorGridName) {
		if (CollimatorGridName->getInformationEntity() == UnknownIE) CollimatorGridName->setInformationEntity(ie);
	}

	AxialAcceptance = (*list)[TagFromName(AxialAcceptance)];
	if (AxialAcceptance) {
		if (AxialAcceptance->getInformationEntity() == UnknownIE) AxialAcceptance->setInformationEntity(ie);
	}

	AxialMash = (*list)[TagFromName(AxialMash)];
	if (AxialMash) {
		if (AxialMash->getInformationEntity() == UnknownIE) AxialMash->setInformationEntity(ie);
	}

	TransverseMash = (*list)[TagFromName(TransverseMash)];
	if (TransverseMash) {
		if (TransverseMash->getInformationEntity() == UnknownIE) TransverseMash->setInformationEntity(ie);
	}

	DetectorElementSize = (*list)[TagFromName(DetectorElementSize)];
	if (DetectorElementSize) {
		if (DetectorElementSize->getInformationEntity() == UnknownIE) DetectorElementSize->setInformationEntity(ie);
	}

	CoincidenceWindowWidth = (*list)[TagFromName(CoincidenceWindowWidth)];
	if (CoincidenceWindowWidth) {
		if (CoincidenceWindowWidth->getInformationEntity() == UnknownIE) CoincidenceWindowWidth->setInformationEntity(ie);
	}

	EnergyWindowRangeSequence = (*list)[TagFromName(EnergyWindowRangeSequence)];
	if (EnergyWindowRangeSequence) {
		if (EnergyWindowRangeSequence->getInformationEntity() == UnknownIE) EnergyWindowRangeSequence->setInformationEntity(ie);
	}

	SecondaryCountsType = (*list)[TagFromName(SecondaryCountsType)];
	if (SecondaryCountsType) {
		if (SecondaryCountsType->getInformationEntity() == UnknownIE) SecondaryCountsType->setInformationEntity(ie);
	}

}

Module_PETIsotope::Module_PETIsotope(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETIsotope";

	RadiopharmaceuticalInformationSequence = (*list)[TagFromName(RadiopharmaceuticalInformationSequence)];
	if (RadiopharmaceuticalInformationSequence) {
		if (RadiopharmaceuticalInformationSequence->getInformationEntity() == UnknownIE) RadiopharmaceuticalInformationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	InterventionDrugInformationSequence = (*list)[TagFromName(InterventionDrugInformationSequence)];
	if (InterventionDrugInformationSequence) {
		if (InterventionDrugInformationSequence->getInformationEntity() == UnknownIE) InterventionDrugInformationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_PETMultigatedAcquisition::Module_PETMultigatedAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETMultigatedAcquisition";

	BeatRejectionFlag = (*list)[TagFromName(BeatRejectionFlag)];
	if (BeatRejectionFlag) {
		if (BeatRejectionFlag->getInformationEntity() == UnknownIE) BeatRejectionFlag->setInformationEntity(ie);
	}

	TriggerSourceOrType = (*list)[TagFromName(TriggerSourceOrType)];
	if (TriggerSourceOrType) {
		if (TriggerSourceOrType->getInformationEntity() == UnknownIE) TriggerSourceOrType->setInformationEntity(ie);
	}

	PVCRejection = (*list)[TagFromName(PVCRejection)];
	if (PVCRejection) {
		if (PVCRejection->getInformationEntity() == UnknownIE) PVCRejection->setInformationEntity(ie);
	}

	SkipBeats = (*list)[TagFromName(SkipBeats)];
	if (SkipBeats) {
		if (SkipBeats->getInformationEntity() == UnknownIE) SkipBeats->setInformationEntity(ie);
	}

	HeartRate = (*list)[TagFromName(HeartRate)];
	if (HeartRate) {
		if (HeartRate->getInformationEntity() == UnknownIE) HeartRate->setInformationEntity(ie);
	}

	CardiacFramingType = (*list)[TagFromName(CardiacFramingType)];
	if (CardiacFramingType) {
		if (CardiacFramingType->getInformationEntity() == UnknownIE) CardiacFramingType->setInformationEntity(ie);
	}

}

Module_PETImage::Module_PETImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	FrameReferenceTime = (*list)[TagFromName(FrameReferenceTime)];
	if (FrameReferenceTime) {
		if (FrameReferenceTime->getInformationEntity() == UnknownIE) FrameReferenceTime->setInformationEntity(ie);
	}

	TriggerTime = (*list)[TagFromName(TriggerTime)];
	if (TriggerTime) {
		if (TriggerTime->getInformationEntity() == UnknownIE) TriggerTime->setInformationEntity(ie);
	}

	FrameTime = (*list)[TagFromName(FrameTime)];
	if (FrameTime) {
		if (FrameTime->getInformationEntity() == UnknownIE) FrameTime->setInformationEntity(ie);
	}

	LowRRValue = (*list)[TagFromName(LowRRValue)];
	if (LowRRValue) {
		if (LowRRValue->getInformationEntity() == UnknownIE) LowRRValue->setInformationEntity(ie);
	}

	HighRRValue = (*list)[TagFromName(HighRRValue)];
	if (HighRRValue) {
		if (HighRRValue->getInformationEntity() == UnknownIE) HighRRValue->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	ImageIndex = (*list)[TagFromName(ImageIndex)];
	if (ImageIndex) {
		if (ImageIndex->getInformationEntity() == UnknownIE) ImageIndex->setInformationEntity(ie);
	}

	AcquisitionDate = (*list)[TagFromName(AcquisitionDate)];
	if (AcquisitionDate) {
		if (AcquisitionDate->getInformationEntity() == UnknownIE) AcquisitionDate->setInformationEntity(ie);
	}

	AcquisitionTime = (*list)[TagFromName(AcquisitionTime)];
	if (AcquisitionTime) {
		if (AcquisitionTime->getInformationEntity() == UnknownIE) AcquisitionTime->setInformationEntity(ie);
	}

	ActualFrameDuration = (*list)[TagFromName(ActualFrameDuration)];
	if (ActualFrameDuration) {
		if (ActualFrameDuration->getInformationEntity() == UnknownIE) ActualFrameDuration->setInformationEntity(ie);
	}

	NominalInterval = (*list)[TagFromName(NominalInterval)];
	if (NominalInterval) {
		if (NominalInterval->getInformationEntity() == UnknownIE) NominalInterval->setInformationEntity(ie);
	}

	IntervalsAcquired = (*list)[TagFromName(IntervalsAcquired)];
	if (IntervalsAcquired) {
		if (IntervalsAcquired->getInformationEntity() == UnknownIE) IntervalsAcquired->setInformationEntity(ie);
	}

	IntervalsRejected = (*list)[TagFromName(IntervalsRejected)];
	if (IntervalsRejected) {
		if (IntervalsRejected->getInformationEntity() == UnknownIE) IntervalsRejected->setInformationEntity(ie);
	}

	PrimaryPromptsCountsAccumulated = (*list)[TagFromName(PrimaryPromptsCountsAccumulated)];
	if (PrimaryPromptsCountsAccumulated) {
		if (PrimaryPromptsCountsAccumulated->getInformationEntity() == UnknownIE) PrimaryPromptsCountsAccumulated->setInformationEntity(ie);
	}

	SecondaryCountsAccumulated = (*list)[TagFromName(SecondaryCountsAccumulated)];
	if (SecondaryCountsAccumulated) {
		if (SecondaryCountsAccumulated->getInformationEntity() == UnknownIE) SecondaryCountsAccumulated->setInformationEntity(ie);
	}

	SliceSensitivityFactor = (*list)[TagFromName(SliceSensitivityFactor)];
	if (SliceSensitivityFactor) {
		if (SliceSensitivityFactor->getInformationEntity() == UnknownIE) SliceSensitivityFactor->setInformationEntity(ie);
	}

	DecayFactor = (*list)[TagFromName(DecayFactor)];
	if (DecayFactor) {
		if (DecayFactor->getInformationEntity() == UnknownIE) DecayFactor->setInformationEntity(ie);
	}

	DoseCalibrationFactor = (*list)[TagFromName(DoseCalibrationFactor)];
	if (DoseCalibrationFactor) {
		if (DoseCalibrationFactor->getInformationEntity() == UnknownIE) DoseCalibrationFactor->setInformationEntity(ie);
	}

	ScatterFractionFactor = (*list)[TagFromName(ScatterFractionFactor)];
	if (ScatterFractionFactor) {
		if (ScatterFractionFactor->getInformationEntity() == UnknownIE) ScatterFractionFactor->setInformationEntity(ie);
	}

	DeadTimeFactor = (*list)[TagFromName(DeadTimeFactor)];
	if (DeadTimeFactor) {
		if (DeadTimeFactor->getInformationEntity() == UnknownIE) DeadTimeFactor->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForEnhancedPETImage::Module_MultiFrameFunctionalGroupsForEnhancedPETImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForEnhancedPETImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_RadiopharmaceuticalUsageMacro(list,ie);
	new Macro_PatientPhysiologicalStateMacro(list,ie);
	new Macro_PETFrameTypeMacro(list,ie);
	new Macro_PETFrameAcquisitionMacro(list,ie);
	new Macro_PETDetectorMotionDetailsMacro(list,ie);
	new Macro_PETPositionMacro(list,ie);
	new Macro_PETFrameCorrectionFactorsMacro(list,ie);
	new Macro_PETReconstructionMacro(list,ie);
	new Macro_PETTableDynamicsMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_RadiopharmaceuticalUsageMacro(list,ie);
	new Macro_PatientPhysiologicalStateMacro(list,ie);
	new Macro_PETFrameTypeMacro(list,ie);
	new Macro_PETFrameAcquisitionMacro(list,ie);
	new Macro_PETDetectorMotionDetailsMacro(list,ie);
	new Macro_PETPositionMacro(list,ie);
	new Macro_PETFrameCorrectionFactorsMacro(list,ie);
	new Macro_PETReconstructionMacro(list,ie);
	new Macro_PETTableDynamicsMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage::Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_PETFrameTypeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_PETFrameTypeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage::Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_PETFrameTypeMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_PETFrameTypeMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
}

Macro_PETFrameTypeMacro::Macro_PETFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETFrameTypeMacro";

	PETFrameTypeSequence = (*list)[TagFromName(PETFrameTypeSequence)];
	if (PETFrameTypeSequence) {
		if (PETFrameTypeSequence->getInformationEntity() == UnknownIE) PETFrameTypeSequence->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionFrameLevelMacro(list,ie);
}

Macro_PETFrameAcquisitionMacro::Macro_PETFrameAcquisitionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETFrameAcquisitionMacro";

	PETFrameAcquisitionSequence = (*list)[TagFromName(PETFrameAcquisitionSequence)];
	if (PETFrameAcquisitionSequence) {
		if (PETFrameAcquisitionSequence->getInformationEntity() == UnknownIE) PETFrameAcquisitionSequence->setInformationEntity(ie);
	}

}

Macro_PETDetectorMotionDetailsMacro::Macro_PETDetectorMotionDetailsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETDetectorMotionDetailsMacro";

	PETDetectorMotionDetailsSequence = (*list)[TagFromName(PETDetectorMotionDetailsSequence)];
	if (PETDetectorMotionDetailsSequence) {
		if (PETDetectorMotionDetailsSequence->getInformationEntity() == UnknownIE) PETDetectorMotionDetailsSequence->setInformationEntity(ie);
	}

}

Macro_PETPositionMacro::Macro_PETPositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETPositionMacro";

	PETPositionSequence = (*list)[TagFromName(PETPositionSequence)];
	if (PETPositionSequence) {
		if (PETPositionSequence->getInformationEntity() == UnknownIE) PETPositionSequence->setInformationEntity(ie);
	}

}

Macro_PETFrameCorrectionFactorsMacro::Macro_PETFrameCorrectionFactorsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETFrameCorrectionFactorsMacro";

	PETFrameCorrectionFactorsSequence = (*list)[TagFromName(PETFrameCorrectionFactorsSequence)];
	if (PETFrameCorrectionFactorsSequence) {
		if (PETFrameCorrectionFactorsSequence->getInformationEntity() == UnknownIE) PETFrameCorrectionFactorsSequence->setInformationEntity(ie);
	}

}

Macro_PETReconstructionMacro::Macro_PETReconstructionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETReconstructionMacro";

	PETReconstructionSequence = (*list)[TagFromName(PETReconstructionSequence)];
	if (PETReconstructionSequence) {
		if (PETReconstructionSequence->getInformationEntity() == UnknownIE) PETReconstructionSequence->setInformationEntity(ie);
	}

}

Macro_PETTableDynamicsMacro::Macro_PETTableDynamicsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PETTableDynamicsMacro";

	PETTableDynamicsSequence = (*list)[TagFromName(PETTableDynamicsSequence)];
	if (PETTableDynamicsSequence) {
		if (PETTableDynamicsSequence->getInformationEntity() == UnknownIE) PETTableDynamicsSequence->setInformationEntity(ie);
	}

}

Module_EnhancedPETSeries::Module_EnhancedPETSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedPETSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	RelatedSeriesSequence = (*list)[TagFromName(RelatedSeriesSequence)];
	if (RelatedSeriesSequence) {
		if (RelatedSeriesSequence->getInformationEntity() == UnknownIE) RelatedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_EnhancedPETIsotope::Module_EnhancedPETIsotope(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedPETIsotope";

	RadiopharmaceuticalInformationSequence = (*list)[TagFromName(RadiopharmaceuticalInformationSequence)];
	if (RadiopharmaceuticalInformationSequence) {
		if (RadiopharmaceuticalInformationSequence->getInformationEntity() == UnknownIE) RadiopharmaceuticalInformationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_EnhancedPETAcquisition::Module_EnhancedPETAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedPETAcquisition";

	AcquisitionStartCondition = (*list)[TagFromName(AcquisitionStartCondition)];
	if (AcquisitionStartCondition) {
		if (AcquisitionStartCondition->getInformationEntity() == UnknownIE) AcquisitionStartCondition->setInformationEntity(ie);
	}

	StartDensityThreshold = (*list)[TagFromName(StartDensityThreshold)];
	if (StartDensityThreshold) {
		if (StartDensityThreshold->getInformationEntity() == UnknownIE) StartDensityThreshold->setInformationEntity(ie);
	}

	StartRelativeDensityDifferenceThreshold = (*list)[TagFromName(StartRelativeDensityDifferenceThreshold)];
	if (StartRelativeDensityDifferenceThreshold) {
		if (StartRelativeDensityDifferenceThreshold->getInformationEntity() == UnknownIE) StartRelativeDensityDifferenceThreshold->setInformationEntity(ie);
	}

	StartCardiacTriggerCountThreshold = (*list)[TagFromName(StartCardiacTriggerCountThreshold)];
	if (StartCardiacTriggerCountThreshold) {
		if (StartCardiacTriggerCountThreshold->getInformationEntity() == UnknownIE) StartCardiacTriggerCountThreshold->setInformationEntity(ie);
	}

	StartRespiratoryTriggerCountThreshold = (*list)[TagFromName(StartRespiratoryTriggerCountThreshold)];
	if (StartRespiratoryTriggerCountThreshold) {
		if (StartRespiratoryTriggerCountThreshold->getInformationEntity() == UnknownIE) StartRespiratoryTriggerCountThreshold->setInformationEntity(ie);
	}

	AcquisitionTerminationCondition = (*list)[TagFromName(AcquisitionTerminationCondition)];
	if (AcquisitionTerminationCondition) {
		if (AcquisitionTerminationCondition->getInformationEntity() == UnknownIE) AcquisitionTerminationCondition->setInformationEntity(ie);
	}

	TerminationCountsThreshold = (*list)[TagFromName(TerminationCountsThreshold)];
	if (TerminationCountsThreshold) {
		if (TerminationCountsThreshold->getInformationEntity() == UnknownIE) TerminationCountsThreshold->setInformationEntity(ie);
	}

	TerminationDensityThreshold = (*list)[TagFromName(TerminationDensityThreshold)];
	if (TerminationDensityThreshold) {
		if (TerminationDensityThreshold->getInformationEntity() == UnknownIE) TerminationDensityThreshold->setInformationEntity(ie);
	}

	TerminationRelativeDensityThreshold = (*list)[TagFromName(TerminationRelativeDensityThreshold)];
	if (TerminationRelativeDensityThreshold) {
		if (TerminationRelativeDensityThreshold->getInformationEntity() == UnknownIE) TerminationRelativeDensityThreshold->setInformationEntity(ie);
	}

	TerminationTimeThreshold = (*list)[TagFromName(TerminationTimeThreshold)];
	if (TerminationTimeThreshold) {
		if (TerminationTimeThreshold->getInformationEntity() == UnknownIE) TerminationTimeThreshold->setInformationEntity(ie);
	}

	TerminationCardiacTriggerCountThreshold = (*list)[TagFromName(TerminationCardiacTriggerCountThreshold)];
	if (TerminationCardiacTriggerCountThreshold) {
		if (TerminationCardiacTriggerCountThreshold->getInformationEntity() == UnknownIE) TerminationCardiacTriggerCountThreshold->setInformationEntity(ie);
	}

	TerminationRespiratoryTriggerCountThreshold = (*list)[TagFromName(TerminationRespiratoryTriggerCountThreshold)];
	if (TerminationRespiratoryTriggerCountThreshold) {
		if (TerminationRespiratoryTriggerCountThreshold->getInformationEntity() == UnknownIE) TerminationRespiratoryTriggerCountThreshold->setInformationEntity(ie);
	}

	TypeOfDetectorMotion = (*list)[TagFromName(TypeOfDetectorMotion)];
	if (TypeOfDetectorMotion) {
		if (TypeOfDetectorMotion->getInformationEntity() == UnknownIE) TypeOfDetectorMotion->setInformationEntity(ie);
	}

	DetectorGeometry = (*list)[TagFromName(DetectorGeometry)];
	if (DetectorGeometry) {
		if (DetectorGeometry->getInformationEntity() == UnknownIE) DetectorGeometry->setInformationEntity(ie);
	}

	TransverseDetectorSeparation = (*list)[TagFromName(TransverseDetectorSeparation)];
	if (TransverseDetectorSeparation) {
		if (TransverseDetectorSeparation->getInformationEntity() == UnknownIE) TransverseDetectorSeparation->setInformationEntity(ie);
	}

	AxialDetectorDimension = (*list)[TagFromName(AxialDetectorDimension)];
	if (AxialDetectorDimension) {
		if (AxialDetectorDimension->getInformationEntity() == UnknownIE) AxialDetectorDimension->setInformationEntity(ie);
	}

	CollimatorType = (*list)[TagFromName(CollimatorType)];
	if (CollimatorType) {
		if (CollimatorType->getInformationEntity() == UnknownIE) CollimatorType->setInformationEntity(ie);
	}

	CoincidenceWindowWidth = (*list)[TagFromName(CoincidenceWindowWidth)];
	if (CoincidenceWindowWidth) {
		if (CoincidenceWindowWidth->getInformationEntity() == UnknownIE) CoincidenceWindowWidth->setInformationEntity(ie);
	}

	EnergyWindowRangeSequence = (*list)[TagFromName(EnergyWindowRangeSequence)];
	if (EnergyWindowRangeSequence) {
		if (EnergyWindowRangeSequence->getInformationEntity() == UnknownIE) EnergyWindowRangeSequence->setInformationEntity(ie);
	}

	TableMotion = (*list)[TagFromName(TableMotion)];
	if (TableMotion) {
		if (TableMotion->getInformationEntity() == UnknownIE) TableMotion->setInformationEntity(ie);
	}

	TimeOfFlightInformationUsed = (*list)[TagFromName(TimeOfFlightInformationUsed)];
	if (TimeOfFlightInformationUsed) {
		if (TimeOfFlightInformationUsed->getInformationEntity() == UnknownIE) TimeOfFlightInformationUsed->setInformationEntity(ie);
	}

	new Macro_MandatoryViewAndSliceProgressionDirectionMacro(list,ie);
	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

}

Module_EnhancedPETImage::Module_EnhancedPETImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedPETImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionImageLevelMacro(list,ie);
	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	ReferencedRawDataSequence = (*list)[TagFromName(ReferencedRawDataSequence)];
	if (ReferencedRawDataSequence) {
		if (ReferencedRawDataSequence->getInformationEntity() == UnknownIE) ReferencedRawDataSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedWaveformSequence = (*list)[TagFromName(ReferencedWaveformSequence)];
	if (ReferencedWaveformSequence) {
		if (ReferencedWaveformSequence->getInformationEntity() == UnknownIE) ReferencedWaveformSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedImageEvidenceSequence = (*list)[TagFromName(ReferencedImageEvidenceSequence)];
	if (ReferencedImageEvidenceSequence) {
		if (ReferencedImageEvidenceSequence->getInformationEntity() == UnknownIE) ReferencedImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	SourceImageEvidenceSequence = (*list)[TagFromName(SourceImageEvidenceSequence)];
	if (SourceImageEvidenceSequence) {
		if (SourceImageEvidenceSequence->getInformationEntity() == UnknownIE) SourceImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
}

Module_EnhancedPETCorrections::Module_EnhancedPETCorrections(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedPETCorrections";

	CountsSource = (*list)[TagFromName(CountsSource)];
	if (CountsSource) {
		if (CountsSource->getInformationEntity() == UnknownIE) CountsSource->setInformationEntity(ie);
	}

	DecayCorrected = (*list)[TagFromName(DecayCorrected)];
	if (DecayCorrected) {
		if (DecayCorrected->getInformationEntity() == UnknownIE) DecayCorrected->setInformationEntity(ie);
	}

	AttenuationCorrected = (*list)[TagFromName(AttenuationCorrected)];
	if (AttenuationCorrected) {
		if (AttenuationCorrected->getInformationEntity() == UnknownIE) AttenuationCorrected->setInformationEntity(ie);
	}

	ScatterCorrected = (*list)[TagFromName(ScatterCorrected)];
	if (ScatterCorrected) {
		if (ScatterCorrected->getInformationEntity() == UnknownIE) ScatterCorrected->setInformationEntity(ie);
	}

	DeadTimeCorrected = (*list)[TagFromName(DeadTimeCorrected)];
	if (DeadTimeCorrected) {
		if (DeadTimeCorrected->getInformationEntity() == UnknownIE) DeadTimeCorrected->setInformationEntity(ie);
	}

	GantryMotionCorrected = (*list)[TagFromName(GantryMotionCorrected)];
	if (GantryMotionCorrected) {
		if (GantryMotionCorrected->getInformationEntity() == UnknownIE) GantryMotionCorrected->setInformationEntity(ie);
	}

	PatientMotionCorrected = (*list)[TagFromName(PatientMotionCorrected)];
	if (PatientMotionCorrected) {
		if (PatientMotionCorrected->getInformationEntity() == UnknownIE) PatientMotionCorrected->setInformationEntity(ie);
	}

	CountLossNormalizationCorrected = (*list)[TagFromName(CountLossNormalizationCorrected)];
	if (CountLossNormalizationCorrected) {
		if (CountLossNormalizationCorrected->getInformationEntity() == UnknownIE) CountLossNormalizationCorrected->setInformationEntity(ie);
	}

	RandomsCorrected = (*list)[TagFromName(RandomsCorrected)];
	if (RandomsCorrected) {
		if (RandomsCorrected->getInformationEntity() == UnknownIE) RandomsCorrected->setInformationEntity(ie);
	}

	NonUniformRadialSamplingCorrected = (*list)[TagFromName(NonUniformRadialSamplingCorrected)];
	if (NonUniformRadialSamplingCorrected) {
		if (NonUniformRadialSamplingCorrected->getInformationEntity() == UnknownIE) NonUniformRadialSamplingCorrected->setInformationEntity(ie);
	}

	SensitivityCalibrated = (*list)[TagFromName(SensitivityCalibrated)];
	if (SensitivityCalibrated) {
		if (SensitivityCalibrated->getInformationEntity() == UnknownIE) SensitivityCalibrated->setInformationEntity(ie);
	}

	DetectorNormalizationCorrection = (*list)[TagFromName(DetectorNormalizationCorrection)];
	if (DetectorNormalizationCorrection) {
		if (DetectorNormalizationCorrection->getInformationEntity() == UnknownIE) DetectorNormalizationCorrection->setInformationEntity(ie);
	}

	RandomsCorrectionMethod = (*list)[TagFromName(RandomsCorrectionMethod)];
	if (RandomsCorrectionMethod) {
		if (RandomsCorrectionMethod->getInformationEntity() == UnknownIE) RandomsCorrectionMethod->setInformationEntity(ie);
	}

	AttenuationCorrectionSource = (*list)[TagFromName(AttenuationCorrectionSource)];
	if (AttenuationCorrectionSource) {
		if (AttenuationCorrectionSource->getInformationEntity() == UnknownIE) AttenuationCorrectionSource->setInformationEntity(ie);
	}

	AttenuationCorrectionTemporalRelationship = (*list)[TagFromName(AttenuationCorrectionTemporalRelationship)];
	if (AttenuationCorrectionTemporalRelationship) {
		if (AttenuationCorrectionTemporalRelationship->getInformationEntity() == UnknownIE) AttenuationCorrectionTemporalRelationship->setInformationEntity(ie);
	}

	ScatterCorrectionMethod = (*list)[TagFromName(ScatterCorrectionMethod)];
	if (ScatterCorrectionMethod) {
		if (ScatterCorrectionMethod->getInformationEntity() == UnknownIE) ScatterCorrectionMethod->setInformationEntity(ie);
	}

	DecayCorrectionDateTime = (*list)[TagFromName(DecayCorrectionDateTime)];
	if (DecayCorrectionDateTime) {
		if (DecayCorrectionDateTime->getInformationEntity() == UnknownIE) DecayCorrectionDateTime->setInformationEntity(ie);
	}

}

Macro_BeamLimitingDevicePositionMacro::Macro_BeamLimitingDevicePositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BeamLimitingDevicePositionMacro";

	BeamLimitingDevicePositionSequence = (*list)[TagFromName(BeamLimitingDevicePositionSequence)];
	if (BeamLimitingDevicePositionSequence) {
		if (BeamLimitingDevicePositionSequence->getInformationEntity() == UnknownIE) BeamLimitingDevicePositionSequence->setInformationEntity(ie);
	}

}

Macro_PatientSupportIdentificationMacro::Macro_PatientSupportIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PatientSupportIdentificationMacro";

	PatientSupportType = (*list)[TagFromName(PatientSupportType)];
	if (PatientSupportType) {
		if (PatientSupportType->getInformationEntity() == UnknownIE) PatientSupportType->setInformationEntity(ie);
	}

	PatientSupportID = (*list)[TagFromName(PatientSupportID)];
	if (PatientSupportID) {
		if (PatientSupportID->getInformationEntity() == UnknownIE) PatientSupportID->setInformationEntity(ie);
	}

	PatientSupportAccessoryCode = (*list)[TagFromName(PatientSupportAccessoryCode)];
	if (PatientSupportAccessoryCode) {
		if (PatientSupportAccessoryCode->getInformationEntity() == UnknownIE) PatientSupportAccessoryCode->setInformationEntity(ie);
	}

}

Module_RTSeries::Module_RTSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	SeriesDate = (*list)[TagFromName(SeriesDate)];
	if (SeriesDate) {
		if (SeriesDate->getInformationEntity() == UnknownIE) SeriesDate->setInformationEntity(ie);
	}

	SeriesTime = (*list)[TagFromName(SeriesTime)];
	if (SeriesTime) {
		if (SeriesTime->getInformationEntity() == UnknownIE) SeriesTime->setInformationEntity(ie);
	}

	SeriesDescriptionCodeSequence = (*list)[TagFromName(SeriesDescriptionCodeSequence)];
	if (SeriesDescriptionCodeSequence) {
		if (SeriesDescriptionCodeSequence->getInformationEntity() == UnknownIE) SeriesDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	OperatorsName = (*list)[TagFromName(OperatorsName)];
	if (OperatorsName) {
		if (OperatorsName->getInformationEntity() == UnknownIE) OperatorsName->setInformationEntity(ie);
	}

	OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
	if (OperatorIdentificationSequence) {
		if (OperatorIdentificationSequence->getInformationEntity() == UnknownIE) OperatorIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_PersonIdentificationMacro(list,ie);
	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	RequestAttributesSequence = (*list)[TagFromName(RequestAttributesSequence)];
	if (RequestAttributesSequence) {
		if (RequestAttributesSequence->getInformationEntity() == UnknownIE) RequestAttributesSequence->setInformationEntity(ie);
	}

	new Macro_RequestAttributesMacro(list,ie);
	new Macro_PerformedProcedureStepSummaryMacro(list,ie);
}

Module_RTImage::Module_RTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTImage";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PixelIntensityRelationship = (*list)[TagFromName(PixelIntensityRelationship)];
	if (PixelIntensityRelationship) {
		if (PixelIntensityRelationship->getInformationEntity() == UnknownIE) PixelIntensityRelationship->setInformationEntity(ie);
	}

	PixelIntensityRelationshipSign = (*list)[TagFromName(PixelIntensityRelationshipSign)];
	if (PixelIntensityRelationshipSign) {
		if (PixelIntensityRelationshipSign->getInformationEntity() == UnknownIE) PixelIntensityRelationshipSign->setInformationEntity(ie);
	}

	RTImageLabel = (*list)[TagFromName(RTImageLabel)];
	if (RTImageLabel) {
		if (RTImageLabel->getInformationEntity() == UnknownIE) RTImageLabel->setInformationEntity(ie);
	}

	RTImageName = (*list)[TagFromName(RTImageName)];
	if (RTImageName) {
		if (RTImageName->getInformationEntity() == UnknownIE) RTImageName->setInformationEntity(ie);
	}

	RTImageDescription = (*list)[TagFromName(RTImageDescription)];
	if (RTImageDescription) {
		if (RTImageDescription->getInformationEntity() == UnknownIE) RTImageDescription->setInformationEntity(ie);
	}

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	ConversionType = (*list)[TagFromName(ConversionType)];
	if (ConversionType) {
		if (ConversionType->getInformationEntity() == UnknownIE) ConversionType->setInformationEntity(ie);
	}

	ReportedValuesOrigin = (*list)[TagFromName(ReportedValuesOrigin)];
	if (ReportedValuesOrigin) {
		if (ReportedValuesOrigin->getInformationEntity() == UnknownIE) ReportedValuesOrigin->setInformationEntity(ie);
	}

	RTImagePlane = (*list)[TagFromName(RTImagePlane)];
	if (RTImagePlane) {
		if (RTImagePlane->getInformationEntity() == UnknownIE) RTImagePlane->setInformationEntity(ie);
	}

	XRayImageReceptorAngle = (*list)[TagFromName(XRayImageReceptorAngle)];
	if (XRayImageReceptorAngle) {
		if (XRayImageReceptorAngle->getInformationEntity() == UnknownIE) XRayImageReceptorAngle->setInformationEntity(ie);
	}

	RTImageOrientation = (*list)[TagFromName(RTImageOrientation)];
	if (RTImageOrientation) {
		if (RTImageOrientation->getInformationEntity() == UnknownIE) RTImageOrientation->setInformationEntity(ie);
	}

	ImagePlanePixelSpacing = (*list)[TagFromName(ImagePlanePixelSpacing)];
	if (ImagePlanePixelSpacing) {
		if (ImagePlanePixelSpacing->getInformationEntity() == UnknownIE) ImagePlanePixelSpacing->setInformationEntity(ie);
	}

	RTImagePosition = (*list)[TagFromName(RTImagePosition)];
	if (RTImagePosition) {
		if (RTImagePosition->getInformationEntity() == UnknownIE) RTImagePosition->setInformationEntity(ie);
	}

	RadiationMachineName = (*list)[TagFromName(RadiationMachineName)];
	if (RadiationMachineName) {
		if (RadiationMachineName->getInformationEntity() == UnknownIE) RadiationMachineName->setInformationEntity(ie);
	}

	PrimaryDosimeterUnit = (*list)[TagFromName(PrimaryDosimeterUnit)];
	if (PrimaryDosimeterUnit) {
		if (PrimaryDosimeterUnit->getInformationEntity() == UnknownIE) PrimaryDosimeterUnit->setInformationEntity(ie);
	}

	RadiationMachineSAD = (*list)[TagFromName(RadiationMachineSAD)];
	if (RadiationMachineSAD) {
		if (RadiationMachineSAD->getInformationEntity() == UnknownIE) RadiationMachineSAD->setInformationEntity(ie);
	}

	RadiationMachineSSD = (*list)[TagFromName(RadiationMachineSSD)];
	if (RadiationMachineSSD) {
		if (RadiationMachineSSD->getInformationEntity() == UnknownIE) RadiationMachineSSD->setInformationEntity(ie);
	}

	RTImageSID = (*list)[TagFromName(RTImageSID)];
	if (RTImageSID) {
		if (RTImageSID->getInformationEntity() == UnknownIE) RTImageSID->setInformationEntity(ie);
	}

	SourceToReferenceObjectDistance = (*list)[TagFromName(SourceToReferenceObjectDistance)];
	if (SourceToReferenceObjectDistance) {
		if (SourceToReferenceObjectDistance->getInformationEntity() == UnknownIE) SourceToReferenceObjectDistance->setInformationEntity(ie);
	}

	ReferencedRTPlanSequence = (*list)[TagFromName(ReferencedRTPlanSequence)];
	if (ReferencedRTPlanSequence) {
		if (ReferencedRTPlanSequence->getInformationEntity() == UnknownIE) ReferencedRTPlanSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ReferencedBeamNumber = (*list)[TagFromName(ReferencedBeamNumber)];
	if (ReferencedBeamNumber) {
		if (ReferencedBeamNumber->getInformationEntity() == UnknownIE) ReferencedBeamNumber->setInformationEntity(ie);
	}

	ReferencedFractionGroupNumber = (*list)[TagFromName(ReferencedFractionGroupNumber)];
	if (ReferencedFractionGroupNumber) {
		if (ReferencedFractionGroupNumber->getInformationEntity() == UnknownIE) ReferencedFractionGroupNumber->setInformationEntity(ie);
	}

	FractionNumber = (*list)[TagFromName(FractionNumber)];
	if (FractionNumber) {
		if (FractionNumber->getInformationEntity() == UnknownIE) FractionNumber->setInformationEntity(ie);
	}

	StartCumulativeMetersetWeight = (*list)[TagFromName(StartCumulativeMetersetWeight)];
	if (StartCumulativeMetersetWeight) {
		if (StartCumulativeMetersetWeight->getInformationEntity() == UnknownIE) StartCumulativeMetersetWeight->setInformationEntity(ie);
	}

	EndCumulativeMetersetWeight = (*list)[TagFromName(EndCumulativeMetersetWeight)];
	if (EndCumulativeMetersetWeight) {
		if (EndCumulativeMetersetWeight->getInformationEntity() == UnknownIE) EndCumulativeMetersetWeight->setInformationEntity(ie);
	}

	ExposureSequence = (*list)[TagFromName(ExposureSequence)];
	if (ExposureSequence) {
		if (ExposureSequence->getInformationEntity() == UnknownIE) ExposureSequence->setInformationEntity(ie);
	}

	FluenceMapSequence = (*list)[TagFromName(FluenceMapSequence)];
	if (FluenceMapSequence) {
		if (FluenceMapSequence->getInformationEntity() == UnknownIE) FluenceMapSequence->setInformationEntity(ie);
	}

	GantryAngle = (*list)[TagFromName(GantryAngle)];
	if (GantryAngle) {
		if (GantryAngle->getInformationEntity() == UnknownIE) GantryAngle->setInformationEntity(ie);
	}

	GantryPitchAngle = (*list)[TagFromName(GantryPitchAngle)];
	if (GantryPitchAngle) {
		if (GantryPitchAngle->getInformationEntity() == UnknownIE) GantryPitchAngle->setInformationEntity(ie);
	}

	BeamLimitingDeviceAngle = (*list)[TagFromName(BeamLimitingDeviceAngle)];
	if (BeamLimitingDeviceAngle) {
		if (BeamLimitingDeviceAngle->getInformationEntity() == UnknownIE) BeamLimitingDeviceAngle->setInformationEntity(ie);
	}

	PatientSupportAngle = (*list)[TagFromName(PatientSupportAngle)];
	if (PatientSupportAngle) {
		if (PatientSupportAngle->getInformationEntity() == UnknownIE) PatientSupportAngle->setInformationEntity(ie);
	}

	TableTopEccentricAxisDistance = (*list)[TagFromName(TableTopEccentricAxisDistance)];
	if (TableTopEccentricAxisDistance) {
		if (TableTopEccentricAxisDistance->getInformationEntity() == UnknownIE) TableTopEccentricAxisDistance->setInformationEntity(ie);
	}

	TableTopEccentricAngle = (*list)[TagFromName(TableTopEccentricAngle)];
	if (TableTopEccentricAngle) {
		if (TableTopEccentricAngle->getInformationEntity() == UnknownIE) TableTopEccentricAngle->setInformationEntity(ie);
	}

	TableTopPitchAngle = (*list)[TagFromName(TableTopPitchAngle)];
	if (TableTopPitchAngle) {
		if (TableTopPitchAngle->getInformationEntity() == UnknownIE) TableTopPitchAngle->setInformationEntity(ie);
	}

	TableTopRollAngle = (*list)[TagFromName(TableTopRollAngle)];
	if (TableTopRollAngle) {
		if (TableTopRollAngle->getInformationEntity() == UnknownIE) TableTopRollAngle->setInformationEntity(ie);
	}

	TableTopVerticalPosition = (*list)[TagFromName(TableTopVerticalPosition)];
	if (TableTopVerticalPosition) {
		if (TableTopVerticalPosition->getInformationEntity() == UnknownIE) TableTopVerticalPosition->setInformationEntity(ie);
	}

	TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
	if (TableTopLongitudinalPosition) {
		if (TableTopLongitudinalPosition->getInformationEntity() == UnknownIE) TableTopLongitudinalPosition->setInformationEntity(ie);
	}

	TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
	if (TableTopLateralPosition) {
		if (TableTopLateralPosition->getInformationEntity() == UnknownIE) TableTopLateralPosition->setInformationEntity(ie);
	}

	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

	PatientPosition = (*list)[TagFromName(PatientPosition)];
	if (PatientPosition) {
		if (PatientPosition->getInformationEntity() == UnknownIE) PatientPosition->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
	if (ExposureTimeInms) {
		if (ExposureTimeInms->getInformationEntity() == UnknownIE) ExposureTimeInms->setInformationEntity(ie);
	}

	MetersetExposure = (*list)[TagFromName(MetersetExposure)];
	if (MetersetExposure) {
		if (MetersetExposure->getInformationEntity() == UnknownIE) MetersetExposure->setInformationEntity(ie);
	}

}

Module_RTDose::Module_RTDose(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTDose";

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	DoseUnits = (*list)[TagFromName(DoseUnits)];
	if (DoseUnits) {
		if (DoseUnits->getInformationEntity() == UnknownIE) DoseUnits->setInformationEntity(ie);
	}

	DoseType = (*list)[TagFromName(DoseType)];
	if (DoseType) {
		if (DoseType->getInformationEntity() == UnknownIE) DoseType->setInformationEntity(ie);
	}

	SpatialTransformOfDose = (*list)[TagFromName(SpatialTransformOfDose)];
	if (SpatialTransformOfDose) {
		if (SpatialTransformOfDose->getInformationEntity() == UnknownIE) SpatialTransformOfDose->setInformationEntity(ie);
	}

	ReferencedSpatialRegistrationSequence = (*list)[TagFromName(ReferencedSpatialRegistrationSequence)];
	if (ReferencedSpatialRegistrationSequence) {
		if (ReferencedSpatialRegistrationSequence->getInformationEntity() == UnknownIE) ReferencedSpatialRegistrationSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	DoseComment = (*list)[TagFromName(DoseComment)];
	if (DoseComment) {
		if (DoseComment->getInformationEntity() == UnknownIE) DoseComment->setInformationEntity(ie);
	}

	NormalizationPoint = (*list)[TagFromName(NormalizationPoint)];
	if (NormalizationPoint) {
		if (NormalizationPoint->getInformationEntity() == UnknownIE) NormalizationPoint->setInformationEntity(ie);
	}

	DoseSummationType = (*list)[TagFromName(DoseSummationType)];
	if (DoseSummationType) {
		if (DoseSummationType->getInformationEntity() == UnknownIE) DoseSummationType->setInformationEntity(ie);
	}

	ReferencedRTPlanSequence = (*list)[TagFromName(ReferencedRTPlanSequence)];
	if (ReferencedRTPlanSequence) {
		if (ReferencedRTPlanSequence->getInformationEntity() == UnknownIE) ReferencedRTPlanSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	GridFrameOffsetVector = (*list)[TagFromName(GridFrameOffsetVector)];
	if (GridFrameOffsetVector) {
		if (GridFrameOffsetVector->getInformationEntity() == UnknownIE) GridFrameOffsetVector->setInformationEntity(ie);
	}

	DoseGridScaling = (*list)[TagFromName(DoseGridScaling)];
	if (DoseGridScaling) {
		if (DoseGridScaling->getInformationEntity() == UnknownIE) DoseGridScaling->setInformationEntity(ie);
	}

	TissueHeterogeneityCorrection = (*list)[TagFromName(TissueHeterogeneityCorrection)];
	if (TissueHeterogeneityCorrection) {
		if (TissueHeterogeneityCorrection->getInformationEntity() == UnknownIE) TissueHeterogeneityCorrection->setInformationEntity(ie);
	}

}

Module_RTDVH::Module_RTDVH(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTDVH";

	ReferencedStructureSetSequence = (*list)[TagFromName(ReferencedStructureSetSequence)];
	if (ReferencedStructureSetSequence) {
		if (ReferencedStructureSetSequence->getInformationEntity() == UnknownIE) ReferencedStructureSetSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	DVHNormalizationPoint = (*list)[TagFromName(DVHNormalizationPoint)];
	if (DVHNormalizationPoint) {
		if (DVHNormalizationPoint->getInformationEntity() == UnknownIE) DVHNormalizationPoint->setInformationEntity(ie);
	}

	DVHNormalizationDoseValue = (*list)[TagFromName(DVHNormalizationDoseValue)];
	if (DVHNormalizationDoseValue) {
		if (DVHNormalizationDoseValue->getInformationEntity() == UnknownIE) DVHNormalizationDoseValue->setInformationEntity(ie);
	}

	DVHSequence = (*list)[TagFromName(DVHSequence)];
	if (DVHSequence) {
		if (DVHSequence->getInformationEntity() == UnknownIE) DVHSequence->setInformationEntity(ie);
	}

}

Module_StructureSet::Module_StructureSet(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StructureSet";

	StructureSetLabel = (*list)[TagFromName(StructureSetLabel)];
	if (StructureSetLabel) {
		if (StructureSetLabel->getInformationEntity() == UnknownIE) StructureSetLabel->setInformationEntity(ie);
	}

	StructureSetName = (*list)[TagFromName(StructureSetName)];
	if (StructureSetName) {
		if (StructureSetName->getInformationEntity() == UnknownIE) StructureSetName->setInformationEntity(ie);
	}

	StructureSetDescription = (*list)[TagFromName(StructureSetDescription)];
	if (StructureSetDescription) {
		if (StructureSetDescription->getInformationEntity() == UnknownIE) StructureSetDescription->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	StructureSetDate = (*list)[TagFromName(StructureSetDate)];
	if (StructureSetDate) {
		if (StructureSetDate->getInformationEntity() == UnknownIE) StructureSetDate->setInformationEntity(ie);
	}

	StructureSetTime = (*list)[TagFromName(StructureSetTime)];
	if (StructureSetTime) {
		if (StructureSetTime->getInformationEntity() == UnknownIE) StructureSetTime->setInformationEntity(ie);
	}

	ReferencedFrameOfReferenceSequence = (*list)[TagFromName(ReferencedFrameOfReferenceSequence)];
	if (ReferencedFrameOfReferenceSequence) {
		if (ReferencedFrameOfReferenceSequence->getInformationEntity() == UnknownIE) ReferencedFrameOfReferenceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	StructureSetROISequence = (*list)[TagFromName(StructureSetROISequence)];
	if (StructureSetROISequence) {
		if (StructureSetROISequence->getInformationEntity() == UnknownIE) StructureSetROISequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	PredecessorStructureSetSequence = (*list)[TagFromName(PredecessorStructureSetSequence)];
	if (PredecessorStructureSetSequence) {
		if (PredecessorStructureSetSequence->getInformationEntity() == UnknownIE) PredecessorStructureSetSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_ROIContour::Module_ROIContour(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ROIContour";

	ROIContourSequence = (*list)[TagFromName(ROIContourSequence)];
	if (ROIContourSequence) {
		if (ROIContourSequence->getInformationEntity() == UnknownIE) ROIContourSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_RTDoseROI::Module_RTDoseROI(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTDoseROI";

	RTDoseROISequence = (*list)[TagFromName(RTDoseROISequence)];
	if (RTDoseROISequence) {
		if (RTDoseROISequence->getInformationEntity() == UnknownIE) RTDoseROISequence->setInformationEntity(ie);
	}

}

Module_RTROIObservations::Module_RTROIObservations(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTROIObservations";

	RTROIObservationsSequence = (*list)[TagFromName(RTROIObservationsSequence)];
	if (RTROIObservationsSequence) {
		if (RTROIObservationsSequence->getInformationEntity() == UnknownIE) RTROIObservationsSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_RTGeneralPlan::Module_RTGeneralPlan(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTGeneralPlan";

	RTPlanLabel = (*list)[TagFromName(RTPlanLabel)];
	if (RTPlanLabel) {
		if (RTPlanLabel->getInformationEntity() == UnknownIE) RTPlanLabel->setInformationEntity(ie);
	}

	RTPlanName = (*list)[TagFromName(RTPlanName)];
	if (RTPlanName) {
		if (RTPlanName->getInformationEntity() == UnknownIE) RTPlanName->setInformationEntity(ie);
	}

	RTPlanDescription = (*list)[TagFromName(RTPlanDescription)];
	if (RTPlanDescription) {
		if (RTPlanDescription->getInformationEntity() == UnknownIE) RTPlanDescription->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	RTPlanDate = (*list)[TagFromName(RTPlanDate)];
	if (RTPlanDate) {
		if (RTPlanDate->getInformationEntity() == UnknownIE) RTPlanDate->setInformationEntity(ie);
	}

	RTPlanTime = (*list)[TagFromName(RTPlanTime)];
	if (RTPlanTime) {
		if (RTPlanTime->getInformationEntity() == UnknownIE) RTPlanTime->setInformationEntity(ie);
	}

	TreatmentProtocols = (*list)[TagFromName(TreatmentProtocols)];
	if (TreatmentProtocols) {
		if (TreatmentProtocols->getInformationEntity() == UnknownIE) TreatmentProtocols->setInformationEntity(ie);
	}

	PlanIntent = (*list)[TagFromName(PlanIntent)];
	if (PlanIntent) {
		if (PlanIntent->getInformationEntity() == UnknownIE) PlanIntent->setInformationEntity(ie);
	}

	TreatmentSites = (*list)[TagFromName(TreatmentSites)];
	if (TreatmentSites) {
		if (TreatmentSites->getInformationEntity() == UnknownIE) TreatmentSites->setInformationEntity(ie);
	}

	RTPlanGeometry = (*list)[TagFromName(RTPlanGeometry)];
	if (RTPlanGeometry) {
		if (RTPlanGeometry->getInformationEntity() == UnknownIE) RTPlanGeometry->setInformationEntity(ie);
	}

	ReferencedStructureSetSequence = (*list)[TagFromName(ReferencedStructureSetSequence)];
	if (ReferencedStructureSetSequence) {
		if (ReferencedStructureSetSequence->getInformationEntity() == UnknownIE) ReferencedStructureSetSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ReferencedDoseSequence = (*list)[TagFromName(ReferencedDoseSequence)];
	if (ReferencedDoseSequence) {
		if (ReferencedDoseSequence->getInformationEntity() == UnknownIE) ReferencedDoseSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ReferencedRTPlanSequence = (*list)[TagFromName(ReferencedRTPlanSequence)];
	if (ReferencedRTPlanSequence) {
		if (ReferencedRTPlanSequence->getInformationEntity() == UnknownIE) ReferencedRTPlanSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix = (*list)[TagFromName(FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix)];
	if (FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix) {
		if (FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix->getInformationEntity() == UnknownIE) FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix->setInformationEntity(ie);
	}

}

Module_RTPrescription::Module_RTPrescription(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTPrescription";

	PrescriptionDescription = (*list)[TagFromName(PrescriptionDescription)];
	if (PrescriptionDescription) {
		if (PrescriptionDescription->getInformationEntity() == UnknownIE) PrescriptionDescription->setInformationEntity(ie);
	}

	DoseReferenceSequence = (*list)[TagFromName(DoseReferenceSequence)];
	if (DoseReferenceSequence) {
		if (DoseReferenceSequence->getInformationEntity() == UnknownIE) DoseReferenceSequence->setInformationEntity(ie);
	}

}

Module_RTToleranceTables::Module_RTToleranceTables(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTToleranceTables";

	ToleranceTableSequence = (*list)[TagFromName(ToleranceTableSequence)];
	if (ToleranceTableSequence) {
		if (ToleranceTableSequence->getInformationEntity() == UnknownIE) ToleranceTableSequence->setInformationEntity(ie);
	}

}

Module_RTPatientSetup::Module_RTPatientSetup(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTPatientSetup";

	PatientSetupSequence = (*list)[TagFromName(PatientSetupSequence)];
	if (PatientSetupSequence) {
		if (PatientSetupSequence->getInformationEntity() == UnknownIE) PatientSetupSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_RTFractionScheme::Module_RTFractionScheme(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTFractionScheme";

	FractionGroupSequence = (*list)[TagFromName(FractionGroupSequence)];
	if (FractionGroupSequence) {
		if (FractionGroupSequence->getInformationEntity() == UnknownIE) FractionGroupSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_RTBeams::Module_RTBeams(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTBeams";

	BeamSequence = (*list)[TagFromName(BeamSequence)];
	if (BeamSequence) {
		if (BeamSequence->getInformationEntity() == UnknownIE) BeamSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_RTBrachyApplicationSetups::Module_RTBrachyApplicationSetups(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTBrachyApplicationSetups";

	BrachyTreatmentTechnique = (*list)[TagFromName(BrachyTreatmentTechnique)];
	if (BrachyTreatmentTechnique) {
		if (BrachyTreatmentTechnique->getInformationEntity() == UnknownIE) BrachyTreatmentTechnique->setInformationEntity(ie);
	}

	BrachyTreatmentType = (*list)[TagFromName(BrachyTreatmentType)];
	if (BrachyTreatmentType) {
		if (BrachyTreatmentType->getInformationEntity() == UnknownIE) BrachyTreatmentType->setInformationEntity(ie);
	}

	TreatmentMachineSequence = (*list)[TagFromName(TreatmentMachineSequence)];
	if (TreatmentMachineSequence) {
		if (TreatmentMachineSequence->getInformationEntity() == UnknownIE) TreatmentMachineSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	SourceSequence = (*list)[TagFromName(SourceSequence)];
	if (SourceSequence) {
		if (SourceSequence->getInformationEntity() == UnknownIE) SourceSequence->setInformationEntity(ie);
	}

	ApplicationSetupSequence = (*list)[TagFromName(ApplicationSetupSequence)];
	if (ApplicationSetupSequence) {
		if (ApplicationSetupSequence->getInformationEntity() == UnknownIE) ApplicationSetupSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_Approval::Module_Approval(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Approval";

	ApprovalStatus = (*list)[TagFromName(ApprovalStatus)];
	if (ApprovalStatus) {
		if (ApprovalStatus->getInformationEntity() == UnknownIE) ApprovalStatus->setInformationEntity(ie);
	}

	ReviewDate = (*list)[TagFromName(ReviewDate)];
	if (ReviewDate) {
		if (ReviewDate->getInformationEntity() == UnknownIE) ReviewDate->setInformationEntity(ie);
	}

	ReviewTime = (*list)[TagFromName(ReviewTime)];
	if (ReviewTime) {
		if (ReviewTime->getInformationEntity() == UnknownIE) ReviewTime->setInformationEntity(ie);
	}

	ReviewerName = (*list)[TagFromName(ReviewerName)];
	if (ReviewerName) {
		if (ReviewerName->getInformationEntity() == UnknownIE) ReviewerName->setInformationEntity(ie);
	}

}

Module_RTGeneralTreatmentRecord::Module_RTGeneralTreatmentRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTGeneralTreatmentRecord";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	TreatmentDate = (*list)[TagFromName(TreatmentDate)];
	if (TreatmentDate) {
		if (TreatmentDate->getInformationEntity() == UnknownIE) TreatmentDate->setInformationEntity(ie);
	}

	TreatmentTime = (*list)[TagFromName(TreatmentTime)];
	if (TreatmentTime) {
		if (TreatmentTime->getInformationEntity() == UnknownIE) TreatmentTime->setInformationEntity(ie);
	}

	ReferencedRTPlanSequence = (*list)[TagFromName(ReferencedRTPlanSequence)];
	if (ReferencedRTPlanSequence) {
		if (ReferencedRTPlanSequence->getInformationEntity() == UnknownIE) ReferencedRTPlanSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	ReferencedTreatmentRecordSequence = (*list)[TagFromName(ReferencedTreatmentRecordSequence)];
	if (ReferencedTreatmentRecordSequence) {
		if (ReferencedTreatmentRecordSequence->getInformationEntity() == UnknownIE) ReferencedTreatmentRecordSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_RTTreatmentMachineRecord::Module_RTTreatmentMachineRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTTreatmentMachineRecord";

	TreatmentMachineSequence = (*list)[TagFromName(TreatmentMachineSequence)];
	if (TreatmentMachineSequence) {
		if (TreatmentMachineSequence->getInformationEntity() == UnknownIE) TreatmentMachineSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_MeasuredDoseReferenceRecord::Module_MeasuredDoseReferenceRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MeasuredDoseReferenceRecord";

	MeasuredDoseReferenceSequence = (*list)[TagFromName(MeasuredDoseReferenceSequence)];
	if (MeasuredDoseReferenceSequence) {
		if (MeasuredDoseReferenceSequence->getInformationEntity() == UnknownIE) MeasuredDoseReferenceSequence->setInformationEntity(ie);
	}

}

Module_CalculatedDoseReferenceRecord::Module_CalculatedDoseReferenceRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CalculatedDoseReferenceRecord";

	CalculatedDoseReferenceSequence = (*list)[TagFromName(CalculatedDoseReferenceSequence)];
	if (CalculatedDoseReferenceSequence) {
		if (CalculatedDoseReferenceSequence->getInformationEntity() == UnknownIE) CalculatedDoseReferenceSequence->setInformationEntity(ie);
	}

}

Module_RTBeamsSessionRecord::Module_RTBeamsSessionRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTBeamsSessionRecord";

	ReferencedFractionGroupNumber = (*list)[TagFromName(ReferencedFractionGroupNumber)];
	if (ReferencedFractionGroupNumber) {
		if (ReferencedFractionGroupNumber->getInformationEntity() == UnknownIE) ReferencedFractionGroupNumber->setInformationEntity(ie);
	}

	NumberOfFractionsPlanned = (*list)[TagFromName(NumberOfFractionsPlanned)];
	if (NumberOfFractionsPlanned) {
		if (NumberOfFractionsPlanned->getInformationEntity() == UnknownIE) NumberOfFractionsPlanned->setInformationEntity(ie);
	}

	PrimaryDosimeterUnit = (*list)[TagFromName(PrimaryDosimeterUnit)];
	if (PrimaryDosimeterUnit) {
		if (PrimaryDosimeterUnit->getInformationEntity() == UnknownIE) PrimaryDosimeterUnit->setInformationEntity(ie);
	}

	TreatmentSessionBeamSequence = (*list)[TagFromName(TreatmentSessionBeamSequence)];
	if (TreatmentSessionBeamSequence) {
		if (TreatmentSessionBeamSequence->getInformationEntity() == UnknownIE) TreatmentSessionBeamSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_PersonIdentificationMacro(list,ie);
}

Module_RTBrachySessionRecord::Module_RTBrachySessionRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTBrachySessionRecord";

	ReferencedFractionGroupNumber = (*list)[TagFromName(ReferencedFractionGroupNumber)];
	if (ReferencedFractionGroupNumber) {
		if (ReferencedFractionGroupNumber->getInformationEntity() == UnknownIE) ReferencedFractionGroupNumber->setInformationEntity(ie);
	}

	NumberOfFractionsPlanned = (*list)[TagFromName(NumberOfFractionsPlanned)];
	if (NumberOfFractionsPlanned) {
		if (NumberOfFractionsPlanned->getInformationEntity() == UnknownIE) NumberOfFractionsPlanned->setInformationEntity(ie);
	}

	BrachyTreatmentTechnique = (*list)[TagFromName(BrachyTreatmentTechnique)];
	if (BrachyTreatmentTechnique) {
		if (BrachyTreatmentTechnique->getInformationEntity() == UnknownIE) BrachyTreatmentTechnique->setInformationEntity(ie);
	}

	BrachyTreatmentType = (*list)[TagFromName(BrachyTreatmentType)];
	if (BrachyTreatmentType) {
		if (BrachyTreatmentType->getInformationEntity() == UnknownIE) BrachyTreatmentType->setInformationEntity(ie);
	}

	RecordedSourceSequence = (*list)[TagFromName(RecordedSourceSequence)];
	if (RecordedSourceSequence) {
		if (RecordedSourceSequence->getInformationEntity() == UnknownIE) RecordedSourceSequence->setInformationEntity(ie);
	}

	TreatmentSessionApplicationSetupSequence = (*list)[TagFromName(TreatmentSessionApplicationSetupSequence)];
	if (TreatmentSessionApplicationSetupSequence) {
		if (TreatmentSessionApplicationSetupSequence->getInformationEntity() == UnknownIE) TreatmentSessionApplicationSetupSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_PersonIdentificationMacro(list,ie);
}

Module_RTTreatmentSummaryRecord::Module_RTTreatmentSummaryRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTTreatmentSummaryRecord";

	CurrentTreatmentStatus = (*list)[TagFromName(CurrentTreatmentStatus)];
	if (CurrentTreatmentStatus) {
		if (CurrentTreatmentStatus->getInformationEntity() == UnknownIE) CurrentTreatmentStatus->setInformationEntity(ie);
	}

	TreatmentStatusComment = (*list)[TagFromName(TreatmentStatusComment)];
	if (TreatmentStatusComment) {
		if (TreatmentStatusComment->getInformationEntity() == UnknownIE) TreatmentStatusComment->setInformationEntity(ie);
	}

	FirstTreatmentDate = (*list)[TagFromName(FirstTreatmentDate)];
	if (FirstTreatmentDate) {
		if (FirstTreatmentDate->getInformationEntity() == UnknownIE) FirstTreatmentDate->setInformationEntity(ie);
	}

	MostRecentTreatmentDate = (*list)[TagFromName(MostRecentTreatmentDate)];
	if (MostRecentTreatmentDate) {
		if (MostRecentTreatmentDate->getInformationEntity() == UnknownIE) MostRecentTreatmentDate->setInformationEntity(ie);
	}

	FractionGroupSummarySequence = (*list)[TagFromName(FractionGroupSummarySequence)];
	if (FractionGroupSummarySequence) {
		if (FractionGroupSummarySequence->getInformationEntity() == UnknownIE) FractionGroupSummarySequence->setInformationEntity(ie);
	}

	TreatmentSummaryMeasuredDoseReferenceSequence = (*list)[TagFromName(TreatmentSummaryMeasuredDoseReferenceSequence)];
	if (TreatmentSummaryMeasuredDoseReferenceSequence) {
		if (TreatmentSummaryMeasuredDoseReferenceSequence->getInformationEntity() == UnknownIE) TreatmentSummaryMeasuredDoseReferenceSequence->setInformationEntity(ie);
	}

	TreatmentSummaryCalculatedDoseReferenceSequence = (*list)[TagFromName(TreatmentSummaryCalculatedDoseReferenceSequence)];
	if (TreatmentSummaryCalculatedDoseReferenceSequence) {
		if (TreatmentSummaryCalculatedDoseReferenceSequence->getInformationEntity() == UnknownIE) TreatmentSummaryCalculatedDoseReferenceSequence->setInformationEntity(ie);
	}

}

Module_RTIonToleranceTables::Module_RTIonToleranceTables(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTIonToleranceTables";

	IonToleranceTableSequence = (*list)[TagFromName(IonToleranceTableSequence)];
	if (IonToleranceTableSequence) {
		if (IonToleranceTableSequence->getInformationEntity() == UnknownIE) IonToleranceTableSequence->setInformationEntity(ie);
	}

}

Module_RTIonBeams::Module_RTIonBeams(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTIonBeams";

	IonBeamSequence = (*list)[TagFromName(IonBeamSequence)];
	if (IonBeamSequence) {
		if (IonBeamSequence->getInformationEntity() == UnknownIE) IonBeamSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_PatientSupportIdentificationMacro(list,ie);
	new Macro_BeamLimitingDevicePositionMacro(list,ie);
}

Module_RTIonBeamsSessionRecord::Module_RTIonBeamsSessionRecord(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RTIonBeamsSessionRecord";

	ReferencedFractionGroupNumber = (*list)[TagFromName(ReferencedFractionGroupNumber)];
	if (ReferencedFractionGroupNumber) {
		if (ReferencedFractionGroupNumber->getInformationEntity() == UnknownIE) ReferencedFractionGroupNumber->setInformationEntity(ie);
	}

	NumberOfFractionsPlanned = (*list)[TagFromName(NumberOfFractionsPlanned)];
	if (NumberOfFractionsPlanned) {
		if (NumberOfFractionsPlanned->getInformationEntity() == UnknownIE) NumberOfFractionsPlanned->setInformationEntity(ie);
	}

	PrimaryDosimeterUnit = (*list)[TagFromName(PrimaryDosimeterUnit)];
	if (PrimaryDosimeterUnit) {
		if (PrimaryDosimeterUnit->getInformationEntity() == UnknownIE) PrimaryDosimeterUnit->setInformationEntity(ie);
	}

	TreatmentSessionIonBeamSequence = (*list)[TagFromName(TreatmentSessionIonBeamSequence)];
	if (TreatmentSessionIonBeamSequence) {
		if (TreatmentSessionIonBeamSequence->getInformationEntity() == UnknownIE) TreatmentSessionIonBeamSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_PatientSupportIdentificationMacro(list,ie);
	new Macro_BeamLimitingDevicePositionMacro(list,ie);
	new Macro_PersonIdentificationMacro(list,ie);
}

Module_AcquisitionContext::Module_AcquisitionContext(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "AcquisitionContext";

	AcquisitionContextSequence = (*list)[TagFromName(AcquisitionContextSequence)];
	if (AcquisitionContextSequence) {
		if (AcquisitionContextSequence->getInformationEntity() == UnknownIE) AcquisitionContextSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	AcquisitionContextDescription = (*list)[TagFromName(AcquisitionContextDescription)];
	if (AcquisitionContextDescription) {
		if (AcquisitionContextDescription->getInformationEntity() == UnknownIE) AcquisitionContextDescription->setInformationEntity(ie);
	}

}

Macro_SpecimenMacro::Macro_SpecimenMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpecimenMacro";

	ContainerIdentifier = (*list)[TagFromName(ContainerIdentifier)];
	if (ContainerIdentifier) {
		if (ContainerIdentifier->getInformationEntity() == UnknownIE) ContainerIdentifier->setInformationEntity(ie);
	}

	IssuerOfTheContainerIdentifierSequence = (*list)[TagFromName(IssuerOfTheContainerIdentifierSequence)];
	if (IssuerOfTheContainerIdentifierSequence) {
		if (IssuerOfTheContainerIdentifierSequence->getInformationEntity() == UnknownIE) IssuerOfTheContainerIdentifierSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	AlternateContainerIdentifierSequence = (*list)[TagFromName(AlternateContainerIdentifierSequence)];
	if (AlternateContainerIdentifierSequence) {
		if (AlternateContainerIdentifierSequence->getInformationEntity() == UnknownIE) AlternateContainerIdentifierSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	ContainerTypeCodeSequence = (*list)[TagFromName(ContainerTypeCodeSequence)];
	if (ContainerTypeCodeSequence) {
		if (ContainerTypeCodeSequence->getInformationEntity() == UnknownIE) ContainerTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ContainerDescription = (*list)[TagFromName(ContainerDescription)];
	if (ContainerDescription) {
		if (ContainerDescription->getInformationEntity() == UnknownIE) ContainerDescription->setInformationEntity(ie);
	}

	ContainerComponentSequence = (*list)[TagFromName(ContainerComponentSequence)];
	if (ContainerComponentSequence) {
		if (ContainerComponentSequence->getInformationEntity() == UnknownIE) ContainerComponentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	SpecimenDescriptionSequence = (*list)[TagFromName(SpecimenDescriptionSequence)];
	if (SpecimenDescriptionSequence) {
		if (SpecimenDescriptionSequence->getInformationEntity() == UnknownIE) SpecimenDescriptionSequence->setInformationEntity(ie);
	}

	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	new Macro_PrimaryAnatomicStructureMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
}

Module_Specimen::Module_Specimen(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Specimen";

	new Macro_SpecimenMacro(list,ie);
}

Module_XRayAcquisitionDose::Module_XRayAcquisitionDose(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayAcquisitionDose";

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	XRayTubeCurrent = (*list)[TagFromName(XRayTubeCurrent)];
	if (XRayTubeCurrent) {
		if (XRayTubeCurrent->getInformationEntity() == UnknownIE) XRayTubeCurrent->setInformationEntity(ie);
	}

	XRayTubeCurrentInuA = (*list)[TagFromName(XRayTubeCurrentInuA)];
	if (XRayTubeCurrentInuA) {
		if (XRayTubeCurrentInuA->getInformationEntity() == UnknownIE) XRayTubeCurrentInuA->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	ExposureTimeInuS = (*list)[TagFromName(ExposureTimeInuS)];
	if (ExposureTimeInuS) {
		if (ExposureTimeInuS->getInformationEntity() == UnknownIE) ExposureTimeInuS->setInformationEntity(ie);
	}

	Exposure = (*list)[TagFromName(Exposure)];
	if (Exposure) {
		if (Exposure->getInformationEntity() == UnknownIE) Exposure->setInformationEntity(ie);
	}

	ExposureInuAs = (*list)[TagFromName(ExposureInuAs)];
	if (ExposureInuAs) {
		if (ExposureInuAs->getInformationEntity() == UnknownIE) ExposureInuAs->setInformationEntity(ie);
	}

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	ImageAndFluoroscopyAreaDoseProduct = (*list)[TagFromName(ImageAndFluoroscopyAreaDoseProduct)];
	if (ImageAndFluoroscopyAreaDoseProduct) {
		if (ImageAndFluoroscopyAreaDoseProduct->getInformationEntity() == UnknownIE) ImageAndFluoroscopyAreaDoseProduct->setInformationEntity(ie);
	}

	BodyPartThickness = (*list)[TagFromName(BodyPartThickness)];
	if (BodyPartThickness) {
		if (BodyPartThickness->getInformationEntity() == UnknownIE) BodyPartThickness->setInformationEntity(ie);
	}

	RelativeXRayExposure = (*list)[TagFromName(RelativeXRayExposure)];
	if (RelativeXRayExposure) {
		if (RelativeXRayExposure->getInformationEntity() == UnknownIE) RelativeXRayExposure->setInformationEntity(ie);
	}

	EntranceDose = (*list)[TagFromName(EntranceDose)];
	if (EntranceDose) {
		if (EntranceDose->getInformationEntity() == UnknownIE) EntranceDose->setInformationEntity(ie);
	}

	EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
	if (EntranceDoseInmGy) {
		if (EntranceDoseInmGy->getInformationEntity() == UnknownIE) EntranceDoseInmGy->setInformationEntity(ie);
	}

	EntranceDoseDerivation = (*list)[TagFromName(EntranceDoseDerivation)];
	if (EntranceDoseDerivation) {
		if (EntranceDoseDerivation->getInformationEntity() == UnknownIE) EntranceDoseDerivation->setInformationEntity(ie);
	}

	ExposedArea = (*list)[TagFromName(ExposedArea)];
	if (ExposedArea) {
		if (ExposedArea->getInformationEntity() == UnknownIE) ExposedArea->setInformationEntity(ie);
	}

	DistanceSourceToEntrance = (*list)[TagFromName(DistanceSourceToEntrance)];
	if (DistanceSourceToEntrance) {
		if (DistanceSourceToEntrance->getInformationEntity() == UnknownIE) DistanceSourceToEntrance->setInformationEntity(ie);
	}

	CommentsOnRadiationDose = (*list)[TagFromName(CommentsOnRadiationDose)];
	if (CommentsOnRadiationDose) {
		if (CommentsOnRadiationDose->getInformationEntity() == UnknownIE) CommentsOnRadiationDose->setInformationEntity(ie);
	}

	XRayOutput = (*list)[TagFromName(XRayOutput)];
	if (XRayOutput) {
		if (XRayOutput->getInformationEntity() == UnknownIE) XRayOutput->setInformationEntity(ie);
	}

	HalfValueLayer = (*list)[TagFromName(HalfValueLayer)];
	if (HalfValueLayer) {
		if (HalfValueLayer->getInformationEntity() == UnknownIE) HalfValueLayer->setInformationEntity(ie);
	}

	OrganDose = (*list)[TagFromName(OrganDose)];
	if (OrganDose) {
		if (OrganDose->getInformationEntity() == UnknownIE) OrganDose->setInformationEntity(ie);
	}

	OrganExposed = (*list)[TagFromName(OrganExposed)];
	if (OrganExposed) {
		if (OrganExposed->getInformationEntity() == UnknownIE) OrganExposed->setInformationEntity(ie);
	}

	AnodeTargetMaterial = (*list)[TagFromName(AnodeTargetMaterial)];
	if (AnodeTargetMaterial) {
		if (AnodeTargetMaterial->getInformationEntity() == UnknownIE) AnodeTargetMaterial->setInformationEntity(ie);
	}

	new Macro_XRayFiltrationMacro(list,ie);
	RectificationType = (*list)[TagFromName(RectificationType)];
	if (RectificationType) {
		if (RectificationType->getInformationEntity() == UnknownIE) RectificationType->setInformationEntity(ie);
	}

	new Macro_ExposureIndexMacro(list,ie);
}

Module_XRayGeneration::Module_XRayGeneration(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayGeneration";

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	XRayTubeCurrent = (*list)[TagFromName(XRayTubeCurrent)];
	if (XRayTubeCurrent) {
		if (XRayTubeCurrent->getInformationEntity() == UnknownIE) XRayTubeCurrent->setInformationEntity(ie);
	}

	XRayTubeCurrentInuA = (*list)[TagFromName(XRayTubeCurrentInuA)];
	if (XRayTubeCurrentInuA) {
		if (XRayTubeCurrentInuA->getInformationEntity() == UnknownIE) XRayTubeCurrentInuA->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	ExposureTimeInuS = (*list)[TagFromName(ExposureTimeInuS)];
	if (ExposureTimeInuS) {
		if (ExposureTimeInuS->getInformationEntity() == UnknownIE) ExposureTimeInuS->setInformationEntity(ie);
	}

	Exposure = (*list)[TagFromName(Exposure)];
	if (Exposure) {
		if (Exposure->getInformationEntity() == UnknownIE) Exposure->setInformationEntity(ie);
	}

	ExposureInuAs = (*list)[TagFromName(ExposureInuAs)];
	if (ExposureInuAs) {
		if (ExposureInuAs->getInformationEntity() == UnknownIE) ExposureInuAs->setInformationEntity(ie);
	}

	ExposureControlMode = (*list)[TagFromName(ExposureControlMode)];
	if (ExposureControlMode) {
		if (ExposureControlMode->getInformationEntity() == UnknownIE) ExposureControlMode->setInformationEntity(ie);
	}

	ExposureControlModeDescription = (*list)[TagFromName(ExposureControlModeDescription)];
	if (ExposureControlModeDescription) {
		if (ExposureControlModeDescription->getInformationEntity() == UnknownIE) ExposureControlModeDescription->setInformationEntity(ie);
	}

	ExposureStatus = (*list)[TagFromName(ExposureStatus)];
	if (ExposureStatus) {
		if (ExposureStatus->getInformationEntity() == UnknownIE) ExposureStatus->setInformationEntity(ie);
	}

	PhototimerSetting = (*list)[TagFromName(PhototimerSetting)];
	if (PhototimerSetting) {
		if (PhototimerSetting->getInformationEntity() == UnknownIE) PhototimerSetting->setInformationEntity(ie);
	}

	FocalSpots = (*list)[TagFromName(FocalSpots)];
	if (FocalSpots) {
		if (FocalSpots->getInformationEntity() == UnknownIE) FocalSpots->setInformationEntity(ie);
	}

	AnodeTargetMaterial = (*list)[TagFromName(AnodeTargetMaterial)];
	if (AnodeTargetMaterial) {
		if (AnodeTargetMaterial->getInformationEntity() == UnknownIE) AnodeTargetMaterial->setInformationEntity(ie);
	}

	RectificationType = (*list)[TagFromName(RectificationType)];
	if (RectificationType) {
		if (RectificationType->getInformationEntity() == UnknownIE) RectificationType->setInformationEntity(ie);
	}

	GeneratorID = (*list)[TagFromName(GeneratorID)];
	if (GeneratorID) {
		if (GeneratorID->getInformationEntity() == UnknownIE) GeneratorID->setInformationEntity(ie);
	}

}

Macro_XRayFiltrationMacro::Macro_XRayFiltrationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFiltrationMacro";

	FilterType = (*list)[TagFromName(FilterType)];
	if (FilterType) {
		if (FilterType->getInformationEntity() == UnknownIE) FilterType->setInformationEntity(ie);
	}

	FilterMaterial = (*list)[TagFromName(FilterMaterial)];
	if (FilterMaterial) {
		if (FilterMaterial->getInformationEntity() == UnknownIE) FilterMaterial->setInformationEntity(ie);
	}

	FilterThicknessMaximum = (*list)[TagFromName(FilterThicknessMaximum)];
	if (FilterThicknessMaximum) {
		if (FilterThicknessMaximum->getInformationEntity() == UnknownIE) FilterThicknessMaximum->setInformationEntity(ie);
	}

	FilterThicknessMinimum = (*list)[TagFromName(FilterThicknessMinimum)];
	if (FilterThicknessMinimum) {
		if (FilterThicknessMinimum->getInformationEntity() == UnknownIE) FilterThicknessMinimum->setInformationEntity(ie);
	}

	FilterBeamPathLengthMinimum = (*list)[TagFromName(FilterBeamPathLengthMinimum)];
	if (FilterBeamPathLengthMinimum) {
		if (FilterBeamPathLengthMinimum->getInformationEntity() == UnknownIE) FilterBeamPathLengthMinimum->setInformationEntity(ie);
	}

	FilterBeamPathLengthMaximum = (*list)[TagFromName(FilterBeamPathLengthMaximum)];
	if (FilterBeamPathLengthMaximum) {
		if (FilterBeamPathLengthMaximum->getInformationEntity() == UnknownIE) FilterBeamPathLengthMaximum->setInformationEntity(ie);
	}

}

Module_XRayFiltration::Module_XRayFiltration(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFiltration";

	new Macro_XRayFiltrationMacro(list,ie);
}

Macro_XRayGridDescriptionMacro::Macro_XRayGridDescriptionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayGridDescriptionMacro";

	GridAbsorbingMaterial = (*list)[TagFromName(GridAbsorbingMaterial)];
	if (GridAbsorbingMaterial) {
		if (GridAbsorbingMaterial->getInformationEntity() == UnknownIE) GridAbsorbingMaterial->setInformationEntity(ie);
	}

	GridSpacingMaterial = (*list)[TagFromName(GridSpacingMaterial)];
	if (GridSpacingMaterial) {
		if (GridSpacingMaterial->getInformationEntity() == UnknownIE) GridSpacingMaterial->setInformationEntity(ie);
	}

	GridThickness = (*list)[TagFromName(GridThickness)];
	if (GridThickness) {
		if (GridThickness->getInformationEntity() == UnknownIE) GridThickness->setInformationEntity(ie);
	}

	GridPitch = (*list)[TagFromName(GridPitch)];
	if (GridPitch) {
		if (GridPitch->getInformationEntity() == UnknownIE) GridPitch->setInformationEntity(ie);
	}

	GridAspectRatio = (*list)[TagFromName(GridAspectRatio)];
	if (GridAspectRatio) {
		if (GridAspectRatio->getInformationEntity() == UnknownIE) GridAspectRatio->setInformationEntity(ie);
	}

	GridPeriod = (*list)[TagFromName(GridPeriod)];
	if (GridPeriod) {
		if (GridPeriod->getInformationEntity() == UnknownIE) GridPeriod->setInformationEntity(ie);
	}

	GridFocalDistance = (*list)[TagFromName(GridFocalDistance)];
	if (GridFocalDistance) {
		if (GridFocalDistance->getInformationEntity() == UnknownIE) GridFocalDistance->setInformationEntity(ie);
	}

	GridID = (*list)[TagFromName(GridID)];
	if (GridID) {
		if (GridID->getInformationEntity() == UnknownIE) GridID->setInformationEntity(ie);
	}

}

Module_XRayGrid::Module_XRayGrid(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayGrid";

	Grid = (*list)[TagFromName(Grid)];
	if (Grid) {
		if (Grid->getInformationEntity() == UnknownIE) Grid->setInformationEntity(ie);
	}

	new Macro_XRayGridDescriptionMacro(list,ie);
}

Module_DXSeries::Module_DXSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DXSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	PresentationIntentType = (*list)[TagFromName(PresentationIntentType)];
	if (PresentationIntentType) {
		if (PresentationIntentType->getInformationEntity() == UnknownIE) PresentationIntentType->setInformationEntity(ie);
	}

}

Module_DXAnatomyImaged::Module_DXAnatomyImaged(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DXAnatomyImaged";

	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyRequiredMacro(list,ie);
}

Module_DXImage::Module_DXImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DXImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PixelIntensityRelationship = (*list)[TagFromName(PixelIntensityRelationship)];
	if (PixelIntensityRelationship) {
		if (PixelIntensityRelationship->getInformationEntity() == UnknownIE) PixelIntensityRelationship->setInformationEntity(ie);
	}

	PixelIntensityRelationshipSign = (*list)[TagFromName(PixelIntensityRelationshipSign)];
	if (PixelIntensityRelationshipSign) {
		if (PixelIntensityRelationshipSign->getInformationEntity() == UnknownIE) PixelIntensityRelationshipSign->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	RescaleType = (*list)[TagFromName(RescaleType)];
	if (RescaleType) {
		if (RescaleType->getInformationEntity() == UnknownIE) RescaleType->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	DerivationDescription = (*list)[TagFromName(DerivationDescription)];
	if (DerivationDescription) {
		if (DerivationDescription->getInformationEntity() == UnknownIE) DerivationDescription->setInformationEntity(ie);
	}

	AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
	if (AcquisitionDeviceProcessingDescription) {
		if (AcquisitionDeviceProcessingDescription->getInformationEntity() == UnknownIE) AcquisitionDeviceProcessingDescription->setInformationEntity(ie);
	}

	AcquisitionDeviceProcessingCode = (*list)[TagFromName(AcquisitionDeviceProcessingCode)];
	if (AcquisitionDeviceProcessingCode) {
		if (AcquisitionDeviceProcessingCode->getInformationEntity() == UnknownIE) AcquisitionDeviceProcessingCode->setInformationEntity(ie);
	}

	PatientOrientation = (*list)[TagFromName(PatientOrientation)];
	if (PatientOrientation) {
		if (PatientOrientation->getInformationEntity() == UnknownIE) PatientOrientation->setInformationEntity(ie);
	}

	CalibrationImage = (*list)[TagFromName(CalibrationImage)];
	if (CalibrationImage) {
		if (CalibrationImage->getInformationEntity() == UnknownIE) CalibrationImage->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	VOILUTSequence = (*list)[TagFromName(VOILUTSequence)];
	if (VOILUTSequence) {
		if (VOILUTSequence->getInformationEntity() == UnknownIE) VOILUTSequence->setInformationEntity(ie);
	}

	WindowCenter = (*list)[TagFromName(WindowCenter)];
	if (WindowCenter) {
		if (WindowCenter->getInformationEntity() == UnknownIE) WindowCenter->setInformationEntity(ie);
	}

	WindowWidth = (*list)[TagFromName(WindowWidth)];
	if (WindowWidth) {
		if (WindowWidth->getInformationEntity() == UnknownIE) WindowWidth->setInformationEntity(ie);
	}

	WindowCenterWidthExplanation = (*list)[TagFromName(WindowCenterWidthExplanation)];
	if (WindowCenterWidthExplanation) {
		if (WindowCenterWidthExplanation->getInformationEntity() == UnknownIE) WindowCenterWidthExplanation->setInformationEntity(ie);
	}

}

Macro_DigitalXRayDetectorMacro::Macro_DigitalXRayDetectorMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DigitalXRayDetectorMacro";

	DetectorType = (*list)[TagFromName(DetectorType)];
	if (DetectorType) {
		if (DetectorType->getInformationEntity() == UnknownIE) DetectorType->setInformationEntity(ie);
	}

	DetectorConfiguration = (*list)[TagFromName(DetectorConfiguration)];
	if (DetectorConfiguration) {
		if (DetectorConfiguration->getInformationEntity() == UnknownIE) DetectorConfiguration->setInformationEntity(ie);
	}

	DetectorDescription = (*list)[TagFromName(DetectorDescription)];
	if (DetectorDescription) {
		if (DetectorDescription->getInformationEntity() == UnknownIE) DetectorDescription->setInformationEntity(ie);
	}

	DetectorMode = (*list)[TagFromName(DetectorMode)];
	if (DetectorMode) {
		if (DetectorMode->getInformationEntity() == UnknownIE) DetectorMode->setInformationEntity(ie);
	}

	DetectorID = (*list)[TagFromName(DetectorID)];
	if (DetectorID) {
		if (DetectorID->getInformationEntity() == UnknownIE) DetectorID->setInformationEntity(ie);
	}

	DateOfLastDetectorCalibration = (*list)[TagFromName(DateOfLastDetectorCalibration)];
	if (DateOfLastDetectorCalibration) {
		if (DateOfLastDetectorCalibration->getInformationEntity() == UnknownIE) DateOfLastDetectorCalibration->setInformationEntity(ie);
	}

	TimeOfLastDetectorCalibration = (*list)[TagFromName(TimeOfLastDetectorCalibration)];
	if (TimeOfLastDetectorCalibration) {
		if (TimeOfLastDetectorCalibration->getInformationEntity() == UnknownIE) TimeOfLastDetectorCalibration->setInformationEntity(ie);
	}

	ExposuresOnDetectorSinceLastCalibration = (*list)[TagFromName(ExposuresOnDetectorSinceLastCalibration)];
	if (ExposuresOnDetectorSinceLastCalibration) {
		if (ExposuresOnDetectorSinceLastCalibration->getInformationEntity() == UnknownIE) ExposuresOnDetectorSinceLastCalibration->setInformationEntity(ie);
	}

	ExposuresOnDetectorSinceManufactured = (*list)[TagFromName(ExposuresOnDetectorSinceManufactured)];
	if (ExposuresOnDetectorSinceManufactured) {
		if (ExposuresOnDetectorSinceManufactured->getInformationEntity() == UnknownIE) ExposuresOnDetectorSinceManufactured->setInformationEntity(ie);
	}

	DetectorTimeSinceLastExposure = (*list)[TagFromName(DetectorTimeSinceLastExposure)];
	if (DetectorTimeSinceLastExposure) {
		if (DetectorTimeSinceLastExposure->getInformationEntity() == UnknownIE) DetectorTimeSinceLastExposure->setInformationEntity(ie);
	}

	DetectorBinning = (*list)[TagFromName(DetectorBinning)];
	if (DetectorBinning) {
		if (DetectorBinning->getInformationEntity() == UnknownIE) DetectorBinning->setInformationEntity(ie);
	}

	DetectorManufacturerName = (*list)[TagFromName(DetectorManufacturerName)];
	if (DetectorManufacturerName) {
		if (DetectorManufacturerName->getInformationEntity() == UnknownIE) DetectorManufacturerName->setInformationEntity(ie);
	}

	DetectorManufacturerModelName = (*list)[TagFromName(DetectorManufacturerModelName)];
	if (DetectorManufacturerModelName) {
		if (DetectorManufacturerModelName->getInformationEntity() == UnknownIE) DetectorManufacturerModelName->setInformationEntity(ie);
	}

	DetectorConditionsNominalFlag = (*list)[TagFromName(DetectorConditionsNominalFlag)];
	if (DetectorConditionsNominalFlag) {
		if (DetectorConditionsNominalFlag->getInformationEntity() == UnknownIE) DetectorConditionsNominalFlag->setInformationEntity(ie);
	}

	DetectorTemperature = (*list)[TagFromName(DetectorTemperature)];
	if (DetectorTemperature) {
		if (DetectorTemperature->getInformationEntity() == UnknownIE) DetectorTemperature->setInformationEntity(ie);
	}

	Sensitivity = (*list)[TagFromName(Sensitivity)];
	if (Sensitivity) {
		if (Sensitivity->getInformationEntity() == UnknownIE) Sensitivity->setInformationEntity(ie);
	}

	DetectorElementPhysicalSize = (*list)[TagFromName(DetectorElementPhysicalSize)];
	if (DetectorElementPhysicalSize) {
		if (DetectorElementPhysicalSize->getInformationEntity() == UnknownIE) DetectorElementPhysicalSize->setInformationEntity(ie);
	}

	DetectorElementSpacing = (*list)[TagFromName(DetectorElementSpacing)];
	if (DetectorElementSpacing) {
		if (DetectorElementSpacing->getInformationEntity() == UnknownIE) DetectorElementSpacing->setInformationEntity(ie);
	}

	DetectorActiveShape = (*list)[TagFromName(DetectorActiveShape)];
	if (DetectorActiveShape) {
		if (DetectorActiveShape->getInformationEntity() == UnknownIE) DetectorActiveShape->setInformationEntity(ie);
	}

	DetectorActiveDimensions = (*list)[TagFromName(DetectorActiveDimensions)];
	if (DetectorActiveDimensions) {
		if (DetectorActiveDimensions->getInformationEntity() == UnknownIE) DetectorActiveDimensions->setInformationEntity(ie);
	}

	DetectorActiveOrigin = (*list)[TagFromName(DetectorActiveOrigin)];
	if (DetectorActiveOrigin) {
		if (DetectorActiveOrigin->getInformationEntity() == UnknownIE) DetectorActiveOrigin->setInformationEntity(ie);
	}

	new Macro_ExposureIndexMacro(list,ie);
}

Module_DXDetector::Module_DXDetector(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DXDetector";

	new Macro_DigitalXRayDetectorMacro(list,ie);
	DetectorActiveTime = (*list)[TagFromName(DetectorActiveTime)];
	if (DetectorActiveTime) {
		if (DetectorActiveTime->getInformationEntity() == UnknownIE) DetectorActiveTime->setInformationEntity(ie);
	}

	DetectorActivationOffsetFromExposure = (*list)[TagFromName(DetectorActivationOffsetFromExposure)];
	if (DetectorActivationOffsetFromExposure) {
		if (DetectorActivationOffsetFromExposure->getInformationEntity() == UnknownIE) DetectorActivationOffsetFromExposure->setInformationEntity(ie);
	}

	FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
	if (FieldOfViewShape) {
		if (FieldOfViewShape->getInformationEntity() == UnknownIE) FieldOfViewShape->setInformationEntity(ie);
	}

	FieldOfViewDimensions = (*list)[TagFromName(FieldOfViewDimensions)];
	if (FieldOfViewDimensions) {
		if (FieldOfViewDimensions->getInformationEntity() == UnknownIE) FieldOfViewDimensions->setInformationEntity(ie);
	}

	FieldOfViewOrigin = (*list)[TagFromName(FieldOfViewOrigin)];
	if (FieldOfViewOrigin) {
		if (FieldOfViewOrigin->getInformationEntity() == UnknownIE) FieldOfViewOrigin->setInformationEntity(ie);
	}

	FieldOfViewRotation = (*list)[TagFromName(FieldOfViewRotation)];
	if (FieldOfViewRotation) {
		if (FieldOfViewRotation->getInformationEntity() == UnknownIE) FieldOfViewRotation->setInformationEntity(ie);
	}

	FieldOfViewHorizontalFlip = (*list)[TagFromName(FieldOfViewHorizontalFlip)];
	if (FieldOfViewHorizontalFlip) {
		if (FieldOfViewHorizontalFlip->getInformationEntity() == UnknownIE) FieldOfViewHorizontalFlip->setInformationEntity(ie);
	}

	ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
	if (ImagerPixelSpacing) {
		if (ImagerPixelSpacing->getInformationEntity() == UnknownIE) ImagerPixelSpacing->setInformationEntity(ie);
	}

	new Macro_BasicPixelSpacingCalibrationMacro(list,ie);
	CassetteID = (*list)[TagFromName(CassetteID)];
	if (CassetteID) {
		if (CassetteID->getInformationEntity() == UnknownIE) CassetteID->setInformationEntity(ie);
	}

	PlateID = (*list)[TagFromName(PlateID)];
	if (PlateID) {
		if (PlateID->getInformationEntity() == UnknownIE) PlateID->setInformationEntity(ie);
	}

}

Module_DXPositioning::Module_DXPositioning(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DXPositioning";

	ProjectionEponymousNameCodeSequence = (*list)[TagFromName(ProjectionEponymousNameCodeSequence)];
	if (ProjectionEponymousNameCodeSequence) {
		if (ProjectionEponymousNameCodeSequence->getInformationEntity() == UnknownIE) ProjectionEponymousNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	PatientPosition = (*list)[TagFromName(PatientPosition)];
	if (PatientPosition) {
		if (PatientPosition->getInformationEntity() == UnknownIE) PatientPosition->setInformationEntity(ie);
	}

	ViewPosition = (*list)[TagFromName(ViewPosition)];
	if (ViewPosition) {
		if (ViewPosition->getInformationEntity() == UnknownIE) ViewPosition->setInformationEntity(ie);
	}

	ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
	if (ViewCodeSequence) {
		if (ViewCodeSequence->getInformationEntity() == UnknownIE) ViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
	if (ViewModifierCodeSequence) {
		if (ViewModifierCodeSequence->getInformationEntity() == UnknownIE) ViewModifierCodeSequence->setInformationEntity(ie);
	}

	PatientOrientationCodeSequence = (*list)[TagFromName(PatientOrientationCodeSequence)];
	if (PatientOrientationCodeSequence) {
		if (PatientOrientationCodeSequence->getInformationEntity() == UnknownIE) PatientOrientationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	PatientOrientationModifierCodeSequence = (*list)[TagFromName(PatientOrientationModifierCodeSequence)];
	if (PatientOrientationModifierCodeSequence) {
		if (PatientOrientationModifierCodeSequence->getInformationEntity() == UnknownIE) PatientOrientationModifierCodeSequence->setInformationEntity(ie);
	}

	PatientGantryRelationshipCodeSequence = (*list)[TagFromName(PatientGantryRelationshipCodeSequence)];
	if (PatientGantryRelationshipCodeSequence) {
		if (PatientGantryRelationshipCodeSequence->getInformationEntity() == UnknownIE) PatientGantryRelationshipCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	EstimatedRadiographicMagnificationFactor = (*list)[TagFromName(EstimatedRadiographicMagnificationFactor)];
	if (EstimatedRadiographicMagnificationFactor) {
		if (EstimatedRadiographicMagnificationFactor->getInformationEntity() == UnknownIE) EstimatedRadiographicMagnificationFactor->setInformationEntity(ie);
	}

	PositionerType = (*list)[TagFromName(PositionerType)];
	if (PositionerType) {
		if (PositionerType->getInformationEntity() == UnknownIE) PositionerType->setInformationEntity(ie);
	}

	PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
	if (PositionerPrimaryAngle) {
		if (PositionerPrimaryAngle->getInformationEntity() == UnknownIE) PositionerPrimaryAngle->setInformationEntity(ie);
	}

	PositionerSecondaryAngle = (*list)[TagFromName(PositionerSecondaryAngle)];
	if (PositionerSecondaryAngle) {
		if (PositionerSecondaryAngle->getInformationEntity() == UnknownIE) PositionerSecondaryAngle->setInformationEntity(ie);
	}

	DetectorPrimaryAngle = (*list)[TagFromName(DetectorPrimaryAngle)];
	if (DetectorPrimaryAngle) {
		if (DetectorPrimaryAngle->getInformationEntity() == UnknownIE) DetectorPrimaryAngle->setInformationEntity(ie);
	}

	DetectorSecondaryAngle = (*list)[TagFromName(DetectorSecondaryAngle)];
	if (DetectorSecondaryAngle) {
		if (DetectorSecondaryAngle->getInformationEntity() == UnknownIE) DetectorSecondaryAngle->setInformationEntity(ie);
	}

	ColumnAngulation = (*list)[TagFromName(ColumnAngulation)];
	if (ColumnAngulation) {
		if (ColumnAngulation->getInformationEntity() == UnknownIE) ColumnAngulation->setInformationEntity(ie);
	}

	TableType = (*list)[TagFromName(TableType)];
	if (TableType) {
		if (TableType->getInformationEntity() == UnknownIE) TableType->setInformationEntity(ie);
	}

	TableAngle = (*list)[TagFromName(TableAngle)];
	if (TableAngle) {
		if (TableAngle->getInformationEntity() == UnknownIE) TableAngle->setInformationEntity(ie);
	}

	BodyPartThickness = (*list)[TagFromName(BodyPartThickness)];
	if (BodyPartThickness) {
		if (BodyPartThickness->getInformationEntity() == UnknownIE) BodyPartThickness->setInformationEntity(ie);
	}

	CompressionForce = (*list)[TagFromName(CompressionForce)];
	if (CompressionForce) {
		if (CompressionForce->getInformationEntity() == UnknownIE) CompressionForce->setInformationEntity(ie);
	}

	PaddleDescription = (*list)[TagFromName(PaddleDescription)];
	if (PaddleDescription) {
		if (PaddleDescription->getInformationEntity() == UnknownIE) PaddleDescription->setInformationEntity(ie);
	}

}

Module_MammographySeries::Module_MammographySeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MammographySeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	RequestAttributesSequence = (*list)[TagFromName(RequestAttributesSequence)];
	if (RequestAttributesSequence) {
		if (RequestAttributesSequence->getInformationEntity() == UnknownIE) RequestAttributesSequence->setInformationEntity(ie);
	}

	new Macro_RequestAttributesMacro(list,ie);
}

Module_MammographyImage::Module_MammographyImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MammographyImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	PositionerType = (*list)[TagFromName(PositionerType)];
	if (PositionerType) {
		if (PositionerType->getInformationEntity() == UnknownIE) PositionerType->setInformationEntity(ie);
	}

	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
	if (PositionerPrimaryAngle) {
		if (PositionerPrimaryAngle->getInformationEntity() == UnknownIE) PositionerPrimaryAngle->setInformationEntity(ie);
	}

	PositionerPrimaryAngleDirection = (*list)[TagFromName(PositionerPrimaryAngleDirection)];
	if (PositionerPrimaryAngleDirection) {
		if (PositionerPrimaryAngleDirection->getInformationEntity() == UnknownIE) PositionerPrimaryAngleDirection->setInformationEntity(ie);
	}

	PositionerSecondaryAngle = (*list)[TagFromName(PositionerSecondaryAngle)];
	if (PositionerSecondaryAngle) {
		if (PositionerSecondaryAngle->getInformationEntity() == UnknownIE) PositionerSecondaryAngle->setInformationEntity(ie);
	}

	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	OrganExposed = (*list)[TagFromName(OrganExposed)];
	if (OrganExposed) {
		if (OrganExposed->getInformationEntity() == UnknownIE) OrganExposed->setInformationEntity(ie);
	}

	BreastImplantPresent = (*list)[TagFromName(BreastImplantPresent)];
	if (BreastImplantPresent) {
		if (BreastImplantPresent->getInformationEntity() == UnknownIE) BreastImplantPresent->setInformationEntity(ie);
	}

	PartialView = (*list)[TagFromName(PartialView)];
	if (PartialView) {
		if (PartialView->getInformationEntity() == UnknownIE) PartialView->setInformationEntity(ie);
	}

	PartialViewDescription = (*list)[TagFromName(PartialViewDescription)];
	if (PartialViewDescription) {
		if (PartialViewDescription->getInformationEntity() == UnknownIE) PartialViewDescription->setInformationEntity(ie);
	}

	PartialViewCodeSequence = (*list)[TagFromName(PartialViewCodeSequence)];
	if (PartialViewCodeSequence) {
		if (PartialViewCodeSequence->getInformationEntity() == UnknownIE) PartialViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_GeneralAnatomyMandatoryMacro(list,ie);
	ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
	if (ViewCodeSequence) {
		if (ViewCodeSequence->getInformationEntity() == UnknownIE) ViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	BiopsyTargetSequence = (*list)[TagFromName(BiopsyTargetSequence)];
	if (BiopsyTargetSequence) {
		if (BiopsyTargetSequence->getInformationEntity() == UnknownIE) BiopsyTargetSequence->setInformationEntity(ie);
	}

}

Module_IntraoralSeries::Module_IntraoralSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntraoralSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_IntraoralImage::Module_IntraoralImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntraoralImage";

	PositionerType = (*list)[TagFromName(PositionerType)];
	if (PositionerType) {
		if (PositionerType->getInformationEntity() == UnknownIE) PositionerType->setInformationEntity(ie);
	}

	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	PrimaryAnatomicStructureSequence = (*list)[TagFromName(PrimaryAnatomicStructureSequence)];
	if (PrimaryAnatomicStructureSequence) {
		if (PrimaryAnatomicStructureSequence->getInformationEntity() == UnknownIE) PrimaryAnatomicStructureSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_ImageHistogram::Module_ImageHistogram(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageHistogram";

	HistogramSequence = (*list)[TagFromName(HistogramSequence)];
	if (HistogramSequence) {
		if (HistogramSequence->getInformationEntity() == UnknownIE) HistogramSequence->setInformationEntity(ie);
	}

}

Module_IHEDBTProfile::Module_IHEDBTProfile(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEDBTProfile";

	PatientName = (*list)[TagFromName(PatientName)];
	if (PatientName) {
		if (PatientName->getInformationEntity() == UnknownIE) PatientName->setInformationEntity(ie);
	}

	PatientID = (*list)[TagFromName(PatientID)];
	if (PatientID) {
		if (PatientID->getInformationEntity() == UnknownIE) PatientID->setInformationEntity(ie);
	}

	PatientBirthDate = (*list)[TagFromName(PatientBirthDate)];
	if (PatientBirthDate) {
		if (PatientBirthDate->getInformationEntity() == UnknownIE) PatientBirthDate->setInformationEntity(ie);
	}

	PatientAge = (*list)[TagFromName(PatientAge)];
	if (PatientAge) {
		if (PatientAge->getInformationEntity() == UnknownIE) PatientAge->setInformationEntity(ie);
	}

	OperatorsName = (*list)[TagFromName(OperatorsName)];
	if (OperatorsName) {
		if (OperatorsName->getInformationEntity() == UnknownIE) OperatorsName->setInformationEntity(ie);
	}

	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
	if (InstitutionAddress) {
		if (InstitutionAddress->getInformationEntity() == UnknownIE) InstitutionAddress->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
	if (DeviceSerialNumber) {
		if (DeviceSerialNumber->getInformationEntity() == UnknownIE) DeviceSerialNumber->setInformationEntity(ie);
	}

	StationName = (*list)[TagFromName(StationName)];
	if (StationName) {
		if (StationName->getInformationEntity() == UnknownIE) StationName->setInformationEntity(ie);
	}

	ContributingSourcesSequence = (*list)[TagFromName(ContributingSourcesSequence)];
	if (ContributingSourcesSequence) {
		if (ContributingSourcesSequence->getInformationEntity() == UnknownIE) ContributingSourcesSequence->setInformationEntity(ie);
	}

	XRay3DAcquisitionSequence = (*list)[TagFromName(XRay3DAcquisitionSequence)];
	if (XRay3DAcquisitionSequence) {
		if (XRay3DAcquisitionSequence->getInformationEntity() == UnknownIE) XRay3DAcquisitionSequence->setInformationEntity(ie);
	}

}

Module_IHEMammoProfile::Module_IHEMammoProfile(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEMammoProfile";

	PatientName = (*list)[TagFromName(PatientName)];
	if (PatientName) {
		if (PatientName->getInformationEntity() == UnknownIE) PatientName->setInformationEntity(ie);
	}

	PatientID = (*list)[TagFromName(PatientID)];
	if (PatientID) {
		if (PatientID->getInformationEntity() == UnknownIE) PatientID->setInformationEntity(ie);
	}

	PatientBirthDate = (*list)[TagFromName(PatientBirthDate)];
	if (PatientBirthDate) {
		if (PatientBirthDate->getInformationEntity() == UnknownIE) PatientBirthDate->setInformationEntity(ie);
	}

	PatientAge = (*list)[TagFromName(PatientAge)];
	if (PatientAge) {
		if (PatientAge->getInformationEntity() == UnknownIE) PatientAge->setInformationEntity(ie);
	}

	AcquisitionDate = (*list)[TagFromName(AcquisitionDate)];
	if (AcquisitionDate) {
		if (AcquisitionDate->getInformationEntity() == UnknownIE) AcquisitionDate->setInformationEntity(ie);
	}

	AcquisitionTime = (*list)[TagFromName(AcquisitionTime)];
	if (AcquisitionTime) {
		if (AcquisitionTime->getInformationEntity() == UnknownIE) AcquisitionTime->setInformationEntity(ie);
	}

	OperatorsName = (*list)[TagFromName(OperatorsName)];
	if (OperatorsName) {
		if (OperatorsName->getInformationEntity() == UnknownIE) OperatorsName->setInformationEntity(ie);
	}

	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
	if (InstitutionAddress) {
		if (InstitutionAddress->getInformationEntity() == UnknownIE) InstitutionAddress->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
	if (DeviceSerialNumber) {
		if (DeviceSerialNumber->getInformationEntity() == UnknownIE) DeviceSerialNumber->setInformationEntity(ie);
	}

	DetectorID = (*list)[TagFromName(DetectorID)];
	if (DetectorID) {
		if (DetectorID->getInformationEntity() == UnknownIE) DetectorID->setInformationEntity(ie);
	}

	SoftwareVersions = (*list)[TagFromName(SoftwareVersions)];
	if (SoftwareVersions) {
		if (SoftwareVersions->getInformationEntity() == UnknownIE) SoftwareVersions->setInformationEntity(ie);
	}

	StationName = (*list)[TagFromName(StationName)];
	if (StationName) {
		if (StationName->getInformationEntity() == UnknownIE) StationName->setInformationEntity(ie);
	}

	GantryID = (*list)[TagFromName(GantryID)];
	if (GantryID) {
		if (GantryID->getInformationEntity() == UnknownIE) GantryID->setInformationEntity(ie);
	}

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	Exposure = (*list)[TagFromName(Exposure)];
	if (Exposure) {
		if (Exposure->getInformationEntity() == UnknownIE) Exposure->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	FilterMaterial = (*list)[TagFromName(FilterMaterial)];
	if (FilterMaterial) {
		if (FilterMaterial->getInformationEntity() == UnknownIE) FilterMaterial->setInformationEntity(ie);
	}

	AnodeTargetMaterial = (*list)[TagFromName(AnodeTargetMaterial)];
	if (AnodeTargetMaterial) {
		if (AnodeTargetMaterial->getInformationEntity() == UnknownIE) AnodeTargetMaterial->setInformationEntity(ie);
	}

	CompressionForce = (*list)[TagFromName(CompressionForce)];
	if (CompressionForce) {
		if (CompressionForce->getInformationEntity() == UnknownIE) CompressionForce->setInformationEntity(ie);
	}

	BodyPartThickness = (*list)[TagFromName(BodyPartThickness)];
	if (BodyPartThickness) {
		if (BodyPartThickness->getInformationEntity() == UnknownIE) BodyPartThickness->setInformationEntity(ie);
	}

	PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
	if (PositionerPrimaryAngle) {
		if (PositionerPrimaryAngle->getInformationEntity() == UnknownIE) PositionerPrimaryAngle->setInformationEntity(ie);
	}

	RelativeXRayExposure = (*list)[TagFromName(RelativeXRayExposure)];
	if (RelativeXRayExposure) {
		if (RelativeXRayExposure->getInformationEntity() == UnknownIE) RelativeXRayExposure->setInformationEntity(ie);
	}

	EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
	if (EntranceDoseInmGy) {
		if (EntranceDoseInmGy->getInformationEntity() == UnknownIE) EntranceDoseInmGy->setInformationEntity(ie);
	}

	OrganDose = (*list)[TagFromName(OrganDose)];
	if (OrganDose) {
		if (OrganDose->getInformationEntity() == UnknownIE) OrganDose->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	BreastImplantPresent = (*list)[TagFromName(BreastImplantPresent)];
	if (BreastImplantPresent) {
		if (BreastImplantPresent->getInformationEntity() == UnknownIE) BreastImplantPresent->setInformationEntity(ie);
	}

	PixelPaddingValue = (*list)[TagFromName(PixelPaddingValue)];
	if (PixelPaddingValue) {
		if (PixelPaddingValue->getInformationEntity() == UnknownIE) PixelPaddingValue->setInformationEntity(ie);
	}

	EstimatedRadiographicMagnificationFactor = (*list)[TagFromName(EstimatedRadiographicMagnificationFactor)];
	if (EstimatedRadiographicMagnificationFactor) {
		if (EstimatedRadiographicMagnificationFactor->getInformationEntity() == UnknownIE) EstimatedRadiographicMagnificationFactor->setInformationEntity(ie);
	}

	DateOfLastDetectorCalibration = (*list)[TagFromName(DateOfLastDetectorCalibration)];
	if (DateOfLastDetectorCalibration) {
		if (DateOfLastDetectorCalibration->getInformationEntity() == UnknownIE) DateOfLastDetectorCalibration->setInformationEntity(ie);
	}

}

Module_IHEMammoProfileWithoutPartialViewOption::Module_IHEMammoProfileWithoutPartialViewOption(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEMammoProfileWithoutPartialViewOption";

}

Module_IHEMammoProfileWithPartialViewOption::Module_IHEMammoProfileWithPartialViewOption(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEMammoProfileWithPartialViewOption";

	PartialView = (*list)[TagFromName(PartialView)];
	if (PartialView) {
		if (PartialView->getInformationEntity() == UnknownIE) PartialView->setInformationEntity(ie);
	}

	PartialViewCodeSequence = (*list)[TagFromName(PartialViewCodeSequence)];
	if (PartialViewCodeSequence) {
		if (PartialViewCodeSequence->getInformationEntity() == UnknownIE) PartialViewCodeSequence->setInformationEntity(ie);
	}

}

Module_IHEMammoProfileForPresentationOnly::Module_IHEMammoProfileForPresentationOnly(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEMammoProfileForPresentationOnly";

	SourceImageSequence = (*list)[TagFromName(SourceImageSequence)];
	if (SourceImageSequence) {
		if (SourceImageSequence->getInformationEntity() == UnknownIE) SourceImageSequence->setInformationEntity(ie);
	}

	VOILUTSequence = (*list)[TagFromName(VOILUTSequence)];
	if (VOILUTSequence) {
		if (VOILUTSequence->getInformationEntity() == UnknownIE) VOILUTSequence->setInformationEntity(ie);
	}

	WindowCenterWidthExplanation = (*list)[TagFromName(WindowCenterWidthExplanation)];
	if (WindowCenterWidthExplanation) {
		if (WindowCenterWidthExplanation->getInformationEntity() == UnknownIE) WindowCenterWidthExplanation->setInformationEntity(ie);
	}

	VOILUTFunction = (*list)[TagFromName(VOILUTFunction)];
	if (VOILUTFunction) {
		if (VOILUTFunction->getInformationEntity() == UnknownIE) VOILUTFunction->setInformationEntity(ie);
	}

}

Module_DentalImageOnMediaProfile::Module_DentalImageOnMediaProfile(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DentalImageOnMediaProfile";

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	DetectorID = (*list)[TagFromName(DetectorID)];
	if (DetectorID) {
		if (DetectorID->getInformationEntity() == UnknownIE) DetectorID->setInformationEntity(ie);
	}

	DetectorManufacturerName = (*list)[TagFromName(DetectorManufacturerName)];
	if (DetectorManufacturerName) {
		if (DetectorManufacturerName->getInformationEntity() == UnknownIE) DetectorManufacturerName->setInformationEntity(ie);
	}

	DetectorManufacturerModelName = (*list)[TagFromName(DetectorManufacturerModelName)];
	if (DetectorManufacturerModelName) {
		if (DetectorManufacturerModelName->getInformationEntity() == UnknownIE) DetectorManufacturerModelName->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage::Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForBreastTomosynthesisImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_IdentityPixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTWithLUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_IdentityPixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTWithLUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_XRay3DFrameTypeMacro(list,ie);
}

Macro_IdentityPixelValueTransformationMacro::Macro_IdentityPixelValueTransformationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IdentityPixelValueTransformationMacro";

	PixelValueTransformationSequence = (*list)[TagFromName(PixelValueTransformationSequence)];
	if (PixelValueTransformationSequence) {
		if (PixelValueTransformationSequence->getInformationEntity() == UnknownIE) PixelValueTransformationSequence->setInformationEntity(ie);
	}

}

Macro_FrameVOILUTWithLUTMacro::Macro_FrameVOILUTWithLUTMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FrameVOILUTWithLUTMacro";

	FrameVOILUTSequence = (*list)[TagFromName(FrameVOILUTSequence)];
	if (FrameVOILUTSequence) {
		if (FrameVOILUTSequence->getInformationEntity() == UnknownIE) FrameVOILUTSequence->setInformationEntity(ie);
	}

	new Macro_VOILUTMacro(list,ie);
}

Module_BreastTomosynthesisContributingSources::Module_BreastTomosynthesisContributingSources(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastTomosynthesisContributingSources";

	ContributingSourcesSequence = (*list)[TagFromName(ContributingSourcesSequence)];
	if (ContributingSourcesSequence) {
		if (ContributingSourcesSequence->getInformationEntity() == UnknownIE) ContributingSourcesSequence->setInformationEntity(ie);
	}

	new Macro_GeneralContributingSourcesMacro(list,ie);
	new Macro_ContributingImageSourcesMacro(list,ie);
}

Module_BreastTomosynthesisAcquisition::Module_BreastTomosynthesisAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastTomosynthesisAcquisition";

	XRay3DAcquisitionSequence = (*list)[TagFromName(XRay3DAcquisitionSequence)];
	if (XRay3DAcquisitionSequence) {
		if (XRay3DAcquisitionSequence->getInformationEntity() == UnknownIE) XRay3DAcquisitionSequence->setInformationEntity(ie);
	}

	new Macro_XRay3DGeneralSharedAcquisitionMacro(list,ie);
	new Macro_XRay3DGeneralPositionerMovementMacro(list,ie);
	new Macro_XRay3DGeneralPerProjectionAcquisitionMacro(list,ie);
	new Macro_ExposureIndexMacro(list,ie);
}

Module_BreastView::Module_BreastView(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastView";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
	if (ViewCodeSequence) {
		if (ViewCodeSequence->getInformationEntity() == UnknownIE) ViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	BreastImplantPresent = (*list)[TagFromName(BreastImplantPresent)];
	if (BreastImplantPresent) {
		if (BreastImplantPresent->getInformationEntity() == UnknownIE) BreastImplantPresent->setInformationEntity(ie);
	}

	PartialView = (*list)[TagFromName(PartialView)];
	if (PartialView) {
		if (PartialView->getInformationEntity() == UnknownIE) PartialView->setInformationEntity(ie);
	}

	PartialViewCodeSequence = (*list)[TagFromName(PartialViewCodeSequence)];
	if (PartialViewCodeSequence) {
		if (PartialViewCodeSequence->getInformationEntity() == UnknownIE) PartialViewCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_EnhancedMammographySeries::Module_EnhancedMammographySeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedMammographySeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	RequestAttributesSequence = (*list)[TagFromName(RequestAttributesSequence)];
	if (RequestAttributesSequence) {
		if (RequestAttributesSequence->getInformationEntity() == UnknownIE) RequestAttributesSequence->setInformationEntity(ie);
	}

	new Macro_RequestAttributesMacro(list,ie);
}

Module_EnhancedMammographyImage::Module_EnhancedMammographyImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedMammographyImage";

	PositionerMotion = (*list)[TagFromName(PositionerMotion)];
	if (PositionerMotion) {
		if (PositionerMotion->getInformationEntity() == UnknownIE) PositionerMotion->setInformationEntity(ie);
	}

	PositionerType = (*list)[TagFromName(PositionerType)];
	if (PositionerType) {
		if (PositionerType->getInformationEntity() == UnknownIE) PositionerType->setInformationEntity(ie);
	}

	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	new Macro_DigitalXRayDetectorMacro(list,ie);
	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
	if (XRayTubeCurrentInmA) {
		if (XRayTubeCurrentInmA->getInformationEntity() == UnknownIE) XRayTubeCurrentInmA->setInformationEntity(ie);
	}

	ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
	if (ExposureTimeInms) {
		if (ExposureTimeInms->getInformationEntity() == UnknownIE) ExposureTimeInms->setInformationEntity(ie);
	}

	ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
	if (ExposureInmAs) {
		if (ExposureInmAs->getInformationEntity() == UnknownIE) ExposureInmAs->setInformationEntity(ie);
	}

	FocalSpots = (*list)[TagFromName(FocalSpots)];
	if (FocalSpots) {
		if (FocalSpots->getInformationEntity() == UnknownIE) FocalSpots->setInformationEntity(ie);
	}

	AnodeTargetMaterial = (*list)[TagFromName(AnodeTargetMaterial)];
	if (AnodeTargetMaterial) {
		if (AnodeTargetMaterial->getInformationEntity() == UnknownIE) AnodeTargetMaterial->setInformationEntity(ie);
	}

	BodyPartThickness = (*list)[TagFromName(BodyPartThickness)];
	if (BodyPartThickness) {
		if (BodyPartThickness->getInformationEntity() == UnknownIE) BodyPartThickness->setInformationEntity(ie);
	}

	CompressionForce = (*list)[TagFromName(CompressionForce)];
	if (CompressionForce) {
		if (CompressionForce->getInformationEntity() == UnknownIE) CompressionForce->setInformationEntity(ie);
	}

	PaddleDescription = (*list)[TagFromName(PaddleDescription)];
	if (PaddleDescription) {
		if (PaddleDescription->getInformationEntity() == UnknownIE) PaddleDescription->setInformationEntity(ie);
	}

	ExposureControlMode = (*list)[TagFromName(ExposureControlMode)];
	if (ExposureControlMode) {
		if (ExposureControlMode->getInformationEntity() == UnknownIE) ExposureControlMode->setInformationEntity(ie);
	}

	ExposureControlModeDescription = (*list)[TagFromName(ExposureControlModeDescription)];
	if (ExposureControlModeDescription) {
		if (ExposureControlModeDescription->getInformationEntity() == UnknownIE) ExposureControlModeDescription->setInformationEntity(ie);
	}

	PatientOrientation = (*list)[TagFromName(PatientOrientation)];
	if (PatientOrientation) {
		if (PatientOrientation->getInformationEntity() == UnknownIE) PatientOrientation->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	QualityControlImage = (*list)[TagFromName(QualityControlImage)];
	if (QualityControlImage) {
		if (QualityControlImage->getInformationEntity() == UnknownIE) QualityControlImage->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	OrganDose = (*list)[TagFromName(OrganDose)];
	if (OrganDose) {
		if (OrganDose->getInformationEntity() == UnknownIE) OrganDose->setInformationEntity(ie);
	}

	EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
	if (EntranceDoseInmGy) {
		if (EntranceDoseInmGy->getInformationEntity() == UnknownIE) EntranceDoseInmGy->setInformationEntity(ie);
	}

	EntranceDoseDerivation = (*list)[TagFromName(EntranceDoseDerivation)];
	if (EntranceDoseDerivation) {
		if (EntranceDoseDerivation->getInformationEntity() == UnknownIE) EntranceDoseDerivation->setInformationEntity(ie);
	}

	TypeOfDetectorMotion = (*list)[TagFromName(TypeOfDetectorMotion)];
	if (TypeOfDetectorMotion) {
		if (TypeOfDetectorMotion->getInformationEntity() == UnknownIE) TypeOfDetectorMotion->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

}

Macro_BreastXRayPositionerMacro::Macro_BreastXRayPositionerMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastXRayPositionerMacro";

	PositionerPositionSequence = (*list)[TagFromName(PositionerPositionSequence)];
	if (PositionerPositionSequence) {
		if (PositionerPositionSequence->getInformationEntity() == UnknownIE) PositionerPositionSequence->setInformationEntity(ie);
	}

}

Macro_BreastXRayDetectorMacro::Macro_BreastXRayDetectorMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastXRayDetectorMacro";

	DetectorPositionSequence = (*list)[TagFromName(DetectorPositionSequence)];
	if (DetectorPositionSequence) {
		if (DetectorPositionSequence->getInformationEntity() == UnknownIE) DetectorPositionSequence->setInformationEntity(ie);
	}

}

Macro_BreastXRayGeometryMacro::Macro_BreastXRayGeometryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastXRayGeometryMacro";

	XRayGeometrySequence = (*list)[TagFromName(XRayGeometrySequence)];
	if (XRayGeometrySequence) {
		if (XRayGeometrySequence->getInformationEntity() == UnknownIE) XRayGeometrySequence->setInformationEntity(ie);
	}

}

Macro_BreastXRayAcquisitionDoseMacro::Macro_BreastXRayAcquisitionDoseMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastXRayAcquisitionDoseMacro";

	XRayAcquisitionDoseSequence = (*list)[TagFromName(XRayAcquisitionDoseSequence)];
	if (XRayAcquisitionDoseSequence) {
		if (XRayAcquisitionDoseSequence->getInformationEntity() == UnknownIE) XRayAcquisitionDoseSequence->setInformationEntity(ie);
	}

}

Macro_BreastXRayIsocenterReferenceSystemMacro::Macro_BreastXRayIsocenterReferenceSystemMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BreastXRayIsocenterReferenceSystemMacro";

	IsocenterReferenceSystemSequence = (*list)[TagFromName(IsocenterReferenceSystemSequence)];
	if (IsocenterReferenceSystemSequence) {
		if (IsocenterReferenceSystemSequence->getInformationEntity() == UnknownIE) IsocenterReferenceSystemSequence->setInformationEntity(ie);
	}

}

Macro_XRayGridMacro::Macro_XRayGridMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayGridMacro";

	XRayGridSequence = (*list)[TagFromName(XRayGridSequence)];
	if (XRayGridSequence) {
		if (XRayGridSequence->getInformationEntity() == UnknownIE) XRayGridSequence->setInformationEntity(ie);
	}

	new Macro_XRayGridDescriptionMacro(list,ie);
}

Macro_XRayFilterMacro::Macro_XRayFilterMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFilterMacro";

	XRayFilterSequence = (*list)[TagFromName(XRayFilterSequence)];
	if (XRayFilterSequence) {
		if (XRayFilterSequence->getInformationEntity() == UnknownIE) XRayFilterSequence->setInformationEntity(ie);
	}

	new Macro_XRayFiltrationMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage::Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForBreastProjectionXRayImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_IdentityPixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTWithLUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_XRayFrameCharacteristicsMacro(list,ie);
	new Macro_XRayFieldOfViewMacro(list,ie);
	new Macro_XRayFramePixelDataPropertiesMacro(list,ie);
	new Macro_XRayFrameDetectorParametersMacro(list,ie);
	new Macro_XRayCalibrationDeviceUsageMacro(list,ie);
	new Macro_XRayFrameAcquisitionMacro(list,ie);
	new Macro_XRayCollimatorMacro(list,ie);
	new Macro_BreastXRayPositionerMacro(list,ie);
	new Macro_BreastXRayDetectorMacro(list,ie);
	new Macro_BreastXRayGeometryMacro(list,ie);
	new Macro_BreastXRayAcquisitionDoseMacro(list,ie);
	new Macro_BreastXRayIsocenterReferenceSystemMacro(list,ie);
	new Macro_XRayGridMacro(list,ie);
	new Macro_XRayFilterMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_IdentityPixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTWithLUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_XRayFrameCharacteristicsMacro(list,ie);
	new Macro_XRayFieldOfViewMacro(list,ie);
	new Macro_XRayFramePixelDataPropertiesMacro(list,ie);
	new Macro_XRayFrameDetectorParametersMacro(list,ie);
	new Macro_XRayCalibrationDeviceUsageMacro(list,ie);
	new Macro_XRayFrameAcquisitionMacro(list,ie);
	new Macro_XRayCollimatorMacro(list,ie);
	new Macro_BreastXRayPositionerMacro(list,ie);
	new Macro_BreastXRayDetectorMacro(list,ie);
	new Macro_BreastXRayGeometryMacro(list,ie);
	new Macro_BreastXRayAcquisitionDoseMacro(list,ie);
	new Macro_BreastXRayIsocenterReferenceSystemMacro(list,ie);
	new Macro_XRayGridMacro(list,ie);
	new Macro_XRayFilterMacro(list,ie);
}

Module_VLImage::Module_VLImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VLImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	WindowCenter = (*list)[TagFromName(WindowCenter)];
	if (WindowCenter) {
		if (WindowCenter->getInformationEntity() == UnknownIE) WindowCenter->setInformationEntity(ie);
	}

	WindowWidth = (*list)[TagFromName(WindowWidth)];
	if (WindowWidth) {
		if (WindowWidth->getInformationEntity() == UnknownIE) WindowWidth->setInformationEntity(ie);
	}

	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PrimaryAnatomicStructureMacro(list,ie);
	ChannelDescriptionCodeSequence = (*list)[TagFromName(ChannelDescriptionCodeSequence)];
	if (ChannelDescriptionCodeSequence) {
		if (ChannelDescriptionCodeSequence->getInformationEntity() == UnknownIE) ChannelDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	PixelSpacing = (*list)[TagFromName(PixelSpacing)];
	if (PixelSpacing) {
		if (PixelSpacing->getInformationEntity() == UnknownIE) PixelSpacing->setInformationEntity(ie);
	}

	ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
	if (ImagerPixelSpacing) {
		if (ImagerPixelSpacing->getInformationEntity() == UnknownIE) ImagerPixelSpacing->setInformationEntity(ie);
	}

}

Module_VLEndoscopicSeriesPseudo::Module_VLEndoscopicSeriesPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VLEndoscopicSeriesPseudo";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_VLMicroscopicSeriesPseudo::Module_VLMicroscopicSeriesPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VLMicroscopicSeriesPseudo";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_VLSlideCoordinatesMicroscopicSeriesPseudo::Module_VLSlideCoordinatesMicroscopicSeriesPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VLSlideCoordinatesMicroscopicSeriesPseudo";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_VLPhotographicSeriesPseudo::Module_VLPhotographicSeriesPseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VLPhotographicSeriesPseudo";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_SlideCoordinates::Module_SlideCoordinates(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SlideCoordinates";

	ImageCenterPointCoordinatesSequence = (*list)[TagFromName(ImageCenterPointCoordinatesSequence)];
	if (ImageCenterPointCoordinatesSequence) {
		if (ImageCenterPointCoordinatesSequence->getInformationEntity() == UnknownIE) ImageCenterPointCoordinatesSequence->setInformationEntity(ie);
	}

}

Module_OphthalmicPhotographySeries::Module_OphthalmicPhotographySeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPhotographySeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_OphthalmicPhotography8BitImagePseudo::Module_OphthalmicPhotography8BitImagePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPhotography8BitImagePseudo";

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

}

Module_OphthalmicPhotography16BitImagePseudo::Module_OphthalmicPhotography16BitImagePseudo(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPhotography16BitImagePseudo";

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

}

Module_OphthalmicPhotographyImage::Module_OphthalmicPhotographyImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPhotographyImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	SamplesPerPixelUsed = (*list)[TagFromName(SamplesPerPixelUsed)];
	if (SamplesPerPixelUsed) {
		if (SamplesPerPixelUsed->getInformationEntity() == UnknownIE) SamplesPerPixelUsed->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	PixelSpacing = (*list)[TagFromName(PixelSpacing)];
	if (PixelSpacing) {
		if (PixelSpacing->getInformationEntity() == UnknownIE) PixelSpacing->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	SourceImageSequence = (*list)[TagFromName(SourceImageSequence)];
	if (SourceImageSequence) {
		if (SourceImageSequence->getInformationEntity() == UnknownIE) SourceImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	CalibrationImage = (*list)[TagFromName(CalibrationImage)];
	if (CalibrationImage) {
		if (CalibrationImage->getInformationEntity() == UnknownIE) CalibrationImage->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

}

Module_OphthalmicPhotographicParameters::Module_OphthalmicPhotographicParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPhotographicParameters";

	AcquisitionDeviceTypeCodeSequence = (*list)[TagFromName(AcquisitionDeviceTypeCodeSequence)];
	if (AcquisitionDeviceTypeCodeSequence) {
		if (AcquisitionDeviceTypeCodeSequence->getInformationEntity() == UnknownIE) AcquisitionDeviceTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	IlluminationTypeCodeSequence = (*list)[TagFromName(IlluminationTypeCodeSequence)];
	if (IlluminationTypeCodeSequence) {
		if (IlluminationTypeCodeSequence->getInformationEntity() == UnknownIE) IlluminationTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	LightPathFilterTypeStackCodeSequence = (*list)[TagFromName(LightPathFilterTypeStackCodeSequence)];
	if (LightPathFilterTypeStackCodeSequence) {
		if (LightPathFilterTypeStackCodeSequence->getInformationEntity() == UnknownIE) LightPathFilterTypeStackCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	LightPathFilterPassThroughWavelength = (*list)[TagFromName(LightPathFilterPassThroughWavelength)];
	if (LightPathFilterPassThroughWavelength) {
		if (LightPathFilterPassThroughWavelength->getInformationEntity() == UnknownIE) LightPathFilterPassThroughWavelength->setInformationEntity(ie);
	}

	LightPathFilterPassBand = (*list)[TagFromName(LightPathFilterPassBand)];
	if (LightPathFilterPassBand) {
		if (LightPathFilterPassBand->getInformationEntity() == UnknownIE) LightPathFilterPassBand->setInformationEntity(ie);
	}

	ImagePathFilterTypeStackCodeSequence = (*list)[TagFromName(ImagePathFilterTypeStackCodeSequence)];
	if (ImagePathFilterTypeStackCodeSequence) {
		if (ImagePathFilterTypeStackCodeSequence->getInformationEntity() == UnknownIE) ImagePathFilterTypeStackCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ImagePathFilterPassThroughWavelength = (*list)[TagFromName(ImagePathFilterPassThroughWavelength)];
	if (ImagePathFilterPassThroughWavelength) {
		if (ImagePathFilterPassThroughWavelength->getInformationEntity() == UnknownIE) ImagePathFilterPassThroughWavelength->setInformationEntity(ie);
	}

	ImagePathFilterPassBand = (*list)[TagFromName(ImagePathFilterPassBand)];
	if (ImagePathFilterPassBand) {
		if (ImagePathFilterPassBand->getInformationEntity() == UnknownIE) ImagePathFilterPassBand->setInformationEntity(ie);
	}

	LensesCodeSequence = (*list)[TagFromName(LensesCodeSequence)];
	if (LensesCodeSequence) {
		if (LensesCodeSequence->getInformationEntity() == UnknownIE) LensesCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	DetectorType = (*list)[TagFromName(DetectorType)];
	if (DetectorType) {
		if (DetectorType->getInformationEntity() == UnknownIE) DetectorType->setInformationEntity(ie);
	}

	ChannelDescriptionCodeSequence = (*list)[TagFromName(ChannelDescriptionCodeSequence)];
	if (ChannelDescriptionCodeSequence) {
		if (ChannelDescriptionCodeSequence->getInformationEntity() == UnknownIE) ChannelDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	CameraAngleOfView = (*list)[TagFromName(CameraAngleOfView)];
	if (CameraAngleOfView) {
		if (CameraAngleOfView->getInformationEntity() == UnknownIE) CameraAngleOfView->setInformationEntity(ie);
	}

}

Macro_OphthalmicAcquisitionParametersMacro::Macro_OphthalmicAcquisitionParametersMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAcquisitionParametersMacro";

	RefractiveStateSequence = (*list)[TagFromName(RefractiveStateSequence)];
	if (RefractiveStateSequence) {
		if (RefractiveStateSequence->getInformationEntity() == UnknownIE) RefractiveStateSequence->setInformationEntity(ie);
	}

	EmmetropicMagnification = (*list)[TagFromName(EmmetropicMagnification)];
	if (EmmetropicMagnification) {
		if (EmmetropicMagnification->getInformationEntity() == UnknownIE) EmmetropicMagnification->setInformationEntity(ie);
	}

	IntraOcularPressure = (*list)[TagFromName(IntraOcularPressure)];
	if (IntraOcularPressure) {
		if (IntraOcularPressure->getInformationEntity() == UnknownIE) IntraOcularPressure->setInformationEntity(ie);
	}

	PupilDilated = (*list)[TagFromName(PupilDilated)];
	if (PupilDilated) {
		if (PupilDilated->getInformationEntity() == UnknownIE) PupilDilated->setInformationEntity(ie);
	}

	MydriaticAgentSequence = (*list)[TagFromName(MydriaticAgentSequence)];
	if (MydriaticAgentSequence) {
		if (MydriaticAgentSequence->getInformationEntity() == UnknownIE) MydriaticAgentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	DegreeOfDilation = (*list)[TagFromName(DegreeOfDilation)];
	if (DegreeOfDilation) {
		if (DegreeOfDilation->getInformationEntity() == UnknownIE) DegreeOfDilation->setInformationEntity(ie);
	}

}

Module_OphthalmicPhotographyAcquisitionParameters::Module_OphthalmicPhotographyAcquisitionParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPhotographyAcquisitionParameters";

	PatientEyeMovementCommanded = (*list)[TagFromName(PatientEyeMovementCommanded)];
	if (PatientEyeMovementCommanded) {
		if (PatientEyeMovementCommanded->getInformationEntity() == UnknownIE) PatientEyeMovementCommanded->setInformationEntity(ie);
	}

	PatientEyeMovementCommandCodeSequence = (*list)[TagFromName(PatientEyeMovementCommandCodeSequence)];
	if (PatientEyeMovementCommandCodeSequence) {
		if (PatientEyeMovementCommandCodeSequence->getInformationEntity() == UnknownIE) PatientEyeMovementCommandCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	HorizontalFieldOfView = (*list)[TagFromName(HorizontalFieldOfView)];
	if (HorizontalFieldOfView) {
		if (HorizontalFieldOfView->getInformationEntity() == UnknownIE) HorizontalFieldOfView->setInformationEntity(ie);
	}

	new Macro_OphthalmicAcquisitionParametersMacro(list,ie);
}

Module_OcularRegionImaged::Module_OcularRegionImaged(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OcularRegionImaged";

	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	RelativeImagePositionCodeSequence = (*list)[TagFromName(RelativeImagePositionCodeSequence)];
	if (RelativeImagePositionCodeSequence) {
		if (RelativeImagePositionCodeSequence->getInformationEntity() == UnknownIE) RelativeImagePositionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_GeneralAnatomyMandatoryMacro(list,ie);
}

Module_StereometricSeries::Module_StereometricSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StereometricSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_StereometricRelationship::Module_StereometricRelationship(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StereometricRelationship";

	StereoPairsSequence = (*list)[TagFromName(StereoPairsSequence)];
	if (StereoPairsSequence) {
		if (StereoPairsSequence->getInformationEntity() == UnknownIE) StereoPairsSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_OphthalmicTomographySeries::Module_OphthalmicTomographySeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicTomographySeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_OphthalmicTomographyImage::Module_OphthalmicTomographyImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicTomographyImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	ConcatenationFrameOffsetNumber = (*list)[TagFromName(ConcatenationFrameOffsetNumber)];
	if (ConcatenationFrameOffsetNumber) {
		if (ConcatenationFrameOffsetNumber->getInformationEntity() == UnknownIE) ConcatenationFrameOffsetNumber->setInformationEntity(ie);
	}

	InConcatenationNumber = (*list)[TagFromName(InConcatenationNumber)];
	if (InConcatenationNumber) {
		if (InConcatenationNumber->getInformationEntity() == UnknownIE) InConcatenationNumber->setInformationEntity(ie);
	}

	InConcatenationTotalNumber = (*list)[TagFromName(InConcatenationTotalNumber)];
	if (InConcatenationTotalNumber) {
		if (InConcatenationTotalNumber->getInformationEntity() == UnknownIE) InConcatenationTotalNumber->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

}

Module_OphthalmicTomographyAcquisitionParameters::Module_OphthalmicTomographyAcquisitionParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicTomographyAcquisitionParameters";

	AxialLengthOfTheEye = (*list)[TagFromName(AxialLengthOfTheEye)];
	if (AxialLengthOfTheEye) {
		if (AxialLengthOfTheEye->getInformationEntity() == UnknownIE) AxialLengthOfTheEye->setInformationEntity(ie);
	}

	HorizontalFieldOfView = (*list)[TagFromName(HorizontalFieldOfView)];
	if (HorizontalFieldOfView) {
		if (HorizontalFieldOfView->getInformationEntity() == UnknownIE) HorizontalFieldOfView->setInformationEntity(ie);
	}

	new Macro_OphthalmicAcquisitionParametersMacro(list,ie);
}

Module_OphthalmicTomographyParameters::Module_OphthalmicTomographyParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicTomographyParameters";

	AcquisitionDeviceTypeCodeSequence = (*list)[TagFromName(AcquisitionDeviceTypeCodeSequence)];
	if (AcquisitionDeviceTypeCodeSequence) {
		if (AcquisitionDeviceTypeCodeSequence->getInformationEntity() == UnknownIE) AcquisitionDeviceTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	LightPathFilterTypeStackCodeSequence = (*list)[TagFromName(LightPathFilterTypeStackCodeSequence)];
	if (LightPathFilterTypeStackCodeSequence) {
		if (LightPathFilterTypeStackCodeSequence->getInformationEntity() == UnknownIE) LightPathFilterTypeStackCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	LightPathFilterPassThroughWavelength = (*list)[TagFromName(LightPathFilterPassThroughWavelength)];
	if (LightPathFilterPassThroughWavelength) {
		if (LightPathFilterPassThroughWavelength->getInformationEntity() == UnknownIE) LightPathFilterPassThroughWavelength->setInformationEntity(ie);
	}

	LightPathFilterPassBand = (*list)[TagFromName(LightPathFilterPassBand)];
	if (LightPathFilterPassBand) {
		if (LightPathFilterPassBand->getInformationEntity() == UnknownIE) LightPathFilterPassBand->setInformationEntity(ie);
	}

	DetectorType = (*list)[TagFromName(DetectorType)];
	if (DetectorType) {
		if (DetectorType->getInformationEntity() == UnknownIE) DetectorType->setInformationEntity(ie);
	}

	IlluminationWaveLength = (*list)[TagFromName(IlluminationWaveLength)];
	if (IlluminationWaveLength) {
		if (IlluminationWaveLength->getInformationEntity() == UnknownIE) IlluminationWaveLength->setInformationEntity(ie);
	}

	IlluminationPower = (*list)[TagFromName(IlluminationPower)];
	if (IlluminationPower) {
		if (IlluminationPower->getInformationEntity() == UnknownIE) IlluminationPower->setInformationEntity(ie);
	}

	IlluminationBandwidth = (*list)[TagFromName(IlluminationBandwidth)];
	if (IlluminationBandwidth) {
		if (IlluminationBandwidth->getInformationEntity() == UnknownIE) IlluminationBandwidth->setInformationEntity(ie);
	}

	DepthSpatialResolution = (*list)[TagFromName(DepthSpatialResolution)];
	if (DepthSpatialResolution) {
		if (DepthSpatialResolution->getInformationEntity() == UnknownIE) DepthSpatialResolution->setInformationEntity(ie);
	}

	MaximumDepthDistortion = (*list)[TagFromName(MaximumDepthDistortion)];
	if (MaximumDepthDistortion) {
		if (MaximumDepthDistortion->getInformationEntity() == UnknownIE) MaximumDepthDistortion->setInformationEntity(ie);
	}

	AlongScanSpatialResolution = (*list)[TagFromName(AlongScanSpatialResolution)];
	if (AlongScanSpatialResolution) {
		if (AlongScanSpatialResolution->getInformationEntity() == UnknownIE) AlongScanSpatialResolution->setInformationEntity(ie);
	}

	MaximumAlongScanDistortion = (*list)[TagFromName(MaximumAlongScanDistortion)];
	if (MaximumAlongScanDistortion) {
		if (MaximumAlongScanDistortion->getInformationEntity() == UnknownIE) MaximumAlongScanDistortion->setInformationEntity(ie);
	}

	AcrossScanSpatialResolution = (*list)[TagFromName(AcrossScanSpatialResolution)];
	if (AcrossScanSpatialResolution) {
		if (AcrossScanSpatialResolution->getInformationEntity() == UnknownIE) AcrossScanSpatialResolution->setInformationEntity(ie);
	}

	MaximumAcrossScanDistortion = (*list)[TagFromName(MaximumAcrossScanDistortion)];
	if (MaximumAcrossScanDistortion) {
		if (MaximumAcrossScanDistortion->getInformationEntity() == UnknownIE) MaximumAcrossScanDistortion->setInformationEntity(ie);
	}

}

Macro_OphthalmicFrameLocationMacro::Macro_OphthalmicFrameLocationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicFrameLocationMacro";

	OphthalmicFrameLocationSequence = (*list)[TagFromName(OphthalmicFrameLocationSequence)];
	if (OphthalmicFrameLocationSequence) {
		if (OphthalmicFrameLocationSequence->getInformationEntity() == UnknownIE) OphthalmicFrameLocationSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForOphthalmicTomography::Module_MultiFrameFunctionalGroupsForOphthalmicTomography(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForOphthalmicTomography";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_OphthalmicFrameLocationMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_OphthalmicFrameLocationMacro(list,ie);
}

Module_WholeSlideMicroscopySeries::Module_WholeSlideMicroscopySeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WholeSlideMicroscopySeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_WholeSlideMicroscopyImage::Module_WholeSlideMicroscopyImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WholeSlideMicroscopyImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	ImagedVolumeWidth = (*list)[TagFromName(ImagedVolumeWidth)];
	if (ImagedVolumeWidth) {
		if (ImagedVolumeWidth->getInformationEntity() == UnknownIE) ImagedVolumeWidth->setInformationEntity(ie);
	}

	ImagedVolumeHeight = (*list)[TagFromName(ImagedVolumeHeight)];
	if (ImagedVolumeHeight) {
		if (ImagedVolumeHeight->getInformationEntity() == UnknownIE) ImagedVolumeHeight->setInformationEntity(ie);
	}

	ImagedVolumeDepth = (*list)[TagFromName(ImagedVolumeDepth)];
	if (ImagedVolumeDepth) {
		if (ImagedVolumeDepth->getInformationEntity() == UnknownIE) ImagedVolumeDepth->setInformationEntity(ie);
	}

	TotalPixelMatrixColumns = (*list)[TagFromName(TotalPixelMatrixColumns)];
	if (TotalPixelMatrixColumns) {
		if (TotalPixelMatrixColumns->getInformationEntity() == UnknownIE) TotalPixelMatrixColumns->setInformationEntity(ie);
	}

	TotalPixelMatrixRows = (*list)[TagFromName(TotalPixelMatrixRows)];
	if (TotalPixelMatrixRows) {
		if (TotalPixelMatrixRows->getInformationEntity() == UnknownIE) TotalPixelMatrixRows->setInformationEntity(ie);
	}

	TotalPixelMatrixFocalPlanes = (*list)[TagFromName(TotalPixelMatrixFocalPlanes)];
	if (TotalPixelMatrixFocalPlanes) {
		if (TotalPixelMatrixFocalPlanes->getInformationEntity() == UnknownIE) TotalPixelMatrixFocalPlanes->setInformationEntity(ie);
	}

	TotalPixelMatrixOriginSequence = (*list)[TagFromName(TotalPixelMatrixOriginSequence)];
	if (TotalPixelMatrixOriginSequence) {
		if (TotalPixelMatrixOriginSequence->getInformationEntity() == UnknownIE) TotalPixelMatrixOriginSequence->setInformationEntity(ie);
	}

	ImageOrientationSlide = (*list)[TagFromName(ImageOrientationSlide)];
	if (ImageOrientationSlide) {
		if (ImageOrientationSlide->getInformationEntity() == UnknownIE) ImageOrientationSlide->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	NumberOfFrames = (*list)[TagFromName(NumberOfFrames)];
	if (NumberOfFrames) {
		if (NumberOfFrames->getInformationEntity() == UnknownIE) NumberOfFrames->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	SpecimenLabelInImage = (*list)[TagFromName(SpecimenLabelInImage)];
	if (SpecimenLabelInImage) {
		if (SpecimenLabelInImage->getInformationEntity() == UnknownIE) SpecimenLabelInImage->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	FocusMethod = (*list)[TagFromName(FocusMethod)];
	if (FocusMethod) {
		if (FocusMethod->getInformationEntity() == UnknownIE) FocusMethod->setInformationEntity(ie);
	}

	ExtendedDepthOfField = (*list)[TagFromName(ExtendedDepthOfField)];
	if (ExtendedDepthOfField) {
		if (ExtendedDepthOfField->getInformationEntity() == UnknownIE) ExtendedDepthOfField->setInformationEntity(ie);
	}

	NumberOfFocalPlanes = (*list)[TagFromName(NumberOfFocalPlanes)];
	if (NumberOfFocalPlanes) {
		if (NumberOfFocalPlanes->getInformationEntity() == UnknownIE) NumberOfFocalPlanes->setInformationEntity(ie);
	}

	DistanceBetweenFocalPlanes = (*list)[TagFromName(DistanceBetweenFocalPlanes)];
	if (DistanceBetweenFocalPlanes) {
		if (DistanceBetweenFocalPlanes->getInformationEntity() == UnknownIE) DistanceBetweenFocalPlanes->setInformationEntity(ie);
	}

	AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
	if (AcquisitionDeviceProcessingDescription) {
		if (AcquisitionDeviceProcessingDescription->getInformationEntity() == UnknownIE) AcquisitionDeviceProcessingDescription->setInformationEntity(ie);
	}

	ConvolutionKernel = (*list)[TagFromName(ConvolutionKernel)];
	if (ConvolutionKernel) {
		if (ConvolutionKernel->getInformationEntity() == UnknownIE) ConvolutionKernel->setInformationEntity(ie);
	}

	RecommendedAbsentPixelCIELabValue = (*list)[TagFromName(RecommendedAbsentPixelCIELabValue)];
	if (RecommendedAbsentPixelCIELabValue) {
		if (RecommendedAbsentPixelCIELabValue->getInformationEntity() == UnknownIE) RecommendedAbsentPixelCIELabValue->setInformationEntity(ie);
	}

}

Module_OpticalPath::Module_OpticalPath(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OpticalPath";

	NumberOfOpticalPaths = (*list)[TagFromName(NumberOfOpticalPaths)];
	if (NumberOfOpticalPaths) {
		if (NumberOfOpticalPaths->getInformationEntity() == UnknownIE) NumberOfOpticalPaths->setInformationEntity(ie);
	}

	OpticalPathSequence = (*list)[TagFromName(OpticalPathSequence)];
	if (OpticalPathSequence) {
		if (OpticalPathSequence->getInformationEntity() == UnknownIE) OpticalPathSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_PaletteColorLookupTableMacro(list,ie);
}

Macro_PlanePositionSlideMacro::Macro_PlanePositionSlideMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PlanePositionSlideMacro";

	PlanePositionSlideSequence = (*list)[TagFromName(PlanePositionSlideSequence)];
	if (PlanePositionSlideSequence) {
		if (PlanePositionSlideSequence->getInformationEntity() == UnknownIE) PlanePositionSlideSequence->setInformationEntity(ie);
	}

}

Macro_OpticalPathIdentificationMacro::Macro_OpticalPathIdentificationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OpticalPathIdentificationMacro";

	OpticalPathIdentificationSequence = (*list)[TagFromName(OpticalPathIdentificationSequence)];
	if (OpticalPathIdentificationSequence) {
		if (OpticalPathIdentificationSequence->getInformationEntity() == UnknownIE) OpticalPathIdentificationSequence->setInformationEntity(ie);
	}

}

Macro_SpecimenReferenceMacro::Macro_SpecimenReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpecimenReferenceMacro";

	SpecimenReferenceSequence = (*list)[TagFromName(SpecimenReferenceSequence)];
	if (SpecimenReferenceSequence) {
		if (SpecimenReferenceSequence->getInformationEntity() == UnknownIE) SpecimenReferenceSequence->setInformationEntity(ie);
	}

}

Macro_WholeSlideMicroscopyImageFrameTypeMacro::Macro_WholeSlideMicroscopyImageFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WholeSlideMicroscopyImageFrameTypeMacro";

	WholeSlideMicroscopyImageFrameTypeSequence = (*list)[TagFromName(WholeSlideMicroscopyImageFrameTypeSequence)];
	if (WholeSlideMicroscopyImageFrameTypeSequence) {
		if (WholeSlideMicroscopyImageFrameTypeSequence->getInformationEntity() == UnknownIE) WholeSlideMicroscopyImageFrameTypeSequence->setInformationEntity(ie);
	}

}

Module_MultiResolutionNavigation::Module_MultiResolutionNavigation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiResolutionNavigation";

	ReferencedImageNavigationSequence = (*list)[TagFromName(ReferencedImageNavigationSequence)];
	if (ReferencedImageNavigationSequence) {
		if (ReferencedImageNavigationSequence->getInformationEntity() == UnknownIE) ReferencedImageNavigationSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_SlideLabel::Module_SlideLabel(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SlideLabel";

	BarcodeValue = (*list)[TagFromName(BarcodeValue)];
	if (BarcodeValue) {
		if (BarcodeValue->getInformationEntity() == UnknownIE) BarcodeValue->setInformationEntity(ie);
	}

	LabelText = (*list)[TagFromName(LabelText)];
	if (LabelText) {
		if (LabelText->getInformationEntity() == UnknownIE) LabelText->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy::Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForWholeSlideMicroscopy";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_PlanePositionSlideMacro(list,ie);
	new Macro_OpticalPathIdentificationMacro(list,ie);
	new Macro_SpecimenReferenceMacro(list,ie);
	new Macro_WholeSlideMicroscopyImageFrameTypeMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_PlanePositionSlideMacro(list,ie);
	new Macro_OpticalPathIdentificationMacro(list,ie);
	new Macro_SpecimenReferenceMacro(list,ie);
}

Module_LensometryMeasurementsSeries::Module_LensometryMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "LensometryMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_AutorefractionMeasurementsSeries::Module_AutorefractionMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "AutorefractionMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_KeratometryMeasurementsSeries::Module_KeratometryMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeratometryMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_SubjectiveRefractionMeasurementsSeries::Module_SubjectiveRefractionMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SubjectiveRefractionMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_VisualAcuityMeasurementsSeries::Module_VisualAcuityMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualAcuityMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_CylinderSequenceMacro::Macro_CylinderSequenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CylinderSequenceMacro";

	CylinderSequence = (*list)[TagFromName(CylinderSequence)];
	if (CylinderSequence) {
		if (CylinderSequence->getInformationEntity() == UnknownIE) CylinderSequence->setInformationEntity(ie);
	}

}

Macro_PrismSequenceMacro::Macro_PrismSequenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PrismSequenceMacro";

	PrismSequence = (*list)[TagFromName(PrismSequence)];
	if (PrismSequence) {
		if (PrismSequence->getInformationEntity() == UnknownIE) PrismSequence->setInformationEntity(ie);
	}

}

Module_GeneralOphthalmicRefractiveMeasurements::Module_GeneralOphthalmicRefractiveMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GeneralOphthalmicRefractiveMeasurements";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	MeasurementLaterality = (*list)[TagFromName(MeasurementLaterality)];
	if (MeasurementLaterality) {
		if (MeasurementLaterality->getInformationEntity() == UnknownIE) MeasurementLaterality->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	ReferencedRefractiveMeasurementsSequence = (*list)[TagFromName(ReferencedRefractiveMeasurementsSequence)];
	if (ReferencedRefractiveMeasurementsSequence) {
		if (ReferencedRefractiveMeasurementsSequence->getInformationEntity() == UnknownIE) ReferencedRefractiveMeasurementsSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_LensometryMeasurements::Module_LensometryMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "LensometryMeasurements";

	LensDescription = (*list)[TagFromName(LensDescription)];
	if (LensDescription) {
		if (LensDescription->getInformationEntity() == UnknownIE) LensDescription->setInformationEntity(ie);
	}

	RightLensSequence = (*list)[TagFromName(RightLensSequence)];
	if (RightLensSequence) {
		if (RightLensSequence->getInformationEntity() == UnknownIE) RightLensSequence->setInformationEntity(ie);
	}

	new Macro_LensometryMeasurementsMacro(list,ie);
	LeftLensSequence = (*list)[TagFromName(LeftLensSequence)];
	if (LeftLensSequence) {
		if (LeftLensSequence->getInformationEntity() == UnknownIE) LeftLensSequence->setInformationEntity(ie);
	}

	new Macro_LensometryMeasurementsMacro(list,ie);
	UnspecifiedLateralityLensSequence = (*list)[TagFromName(UnspecifiedLateralityLensSequence)];
	if (UnspecifiedLateralityLensSequence) {
		if (UnspecifiedLateralityLensSequence->getInformationEntity() == UnknownIE) UnspecifiedLateralityLensSequence->setInformationEntity(ie);
	}

	new Macro_LensometryMeasurementsMacro(list,ie);
}

Macro_LensometryMeasurementsMacro::Macro_LensometryMeasurementsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "LensometryMeasurementsMacro";

	SpherePower = (*list)[TagFromName(SpherePower)];
	if (SpherePower) {
		if (SpherePower->getInformationEntity() == UnknownIE) SpherePower->setInformationEntity(ie);
	}

	new Macro_CylinderSequenceMacro(list,ie);
	AddNearSequence = (*list)[TagFromName(AddNearSequence)];
	if (AddNearSequence) {
		if (AddNearSequence->getInformationEntity() == UnknownIE) AddNearSequence->setInformationEntity(ie);
	}

	AddIntermediateSequence = (*list)[TagFromName(AddIntermediateSequence)];
	if (AddIntermediateSequence) {
		if (AddIntermediateSequence->getInformationEntity() == UnknownIE) AddIntermediateSequence->setInformationEntity(ie);
	}

	new Macro_PrismSequenceMacro(list,ie);
	LensSegmentType = (*list)[TagFromName(LensSegmentType)];
	if (LensSegmentType) {
		if (LensSegmentType->getInformationEntity() == UnknownIE) LensSegmentType->setInformationEntity(ie);
	}

	OpticalTransmittance = (*list)[TagFromName(OpticalTransmittance)];
	if (OpticalTransmittance) {
		if (OpticalTransmittance->getInformationEntity() == UnknownIE) OpticalTransmittance->setInformationEntity(ie);
	}

	ChannelWidth = (*list)[TagFromName(ChannelWidth)];
	if (ChannelWidth) {
		if (ChannelWidth->getInformationEntity() == UnknownIE) ChannelWidth->setInformationEntity(ie);
	}

}

Module_AutorefractionMeasurements::Module_AutorefractionMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "AutorefractionMeasurements";

	AutorefractionRightEyeSequence = (*list)[TagFromName(AutorefractionRightEyeSequence)];
	if (AutorefractionRightEyeSequence) {
		if (AutorefractionRightEyeSequence->getInformationEntity() == UnknownIE) AutorefractionRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_CylinderSequenceMacro(list,ie);
	AutorefractionLeftEyeSequence = (*list)[TagFromName(AutorefractionLeftEyeSequence)];
	if (AutorefractionLeftEyeSequence) {
		if (AutorefractionLeftEyeSequence->getInformationEntity() == UnknownIE) AutorefractionLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_CylinderSequenceMacro(list,ie);
	DistancePupillaryDistance = (*list)[TagFromName(DistancePupillaryDistance)];
	if (DistancePupillaryDistance) {
		if (DistancePupillaryDistance->getInformationEntity() == UnknownIE) DistancePupillaryDistance->setInformationEntity(ie);
	}

	NearPupillaryDistance = (*list)[TagFromName(NearPupillaryDistance)];
	if (NearPupillaryDistance) {
		if (NearPupillaryDistance->getInformationEntity() == UnknownIE) NearPupillaryDistance->setInformationEntity(ie);
	}

}

Module_KeratometryMeasurements::Module_KeratometryMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeratometryMeasurements";

	KeratometryRightEyeSequence = (*list)[TagFromName(KeratometryRightEyeSequence)];
	if (KeratometryRightEyeSequence) {
		if (KeratometryRightEyeSequence->getInformationEntity() == UnknownIE) KeratometryRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_KeratometricMeasurementsMacro(list,ie);
	KeratometryLeftEyeSequence = (*list)[TagFromName(KeratometryLeftEyeSequence)];
	if (KeratometryLeftEyeSequence) {
		if (KeratometryLeftEyeSequence->getInformationEntity() == UnknownIE) KeratometryLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_KeratometricMeasurementsMacro(list,ie);
}

Macro_KeratometricMeasurementsMacro::Macro_KeratometricMeasurementsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeratometricMeasurementsMacro";

	SteepKeratometricAxisSequence = (*list)[TagFromName(SteepKeratometricAxisSequence)];
	if (SteepKeratometricAxisSequence) {
		if (SteepKeratometricAxisSequence->getInformationEntity() == UnknownIE) SteepKeratometricAxisSequence->setInformationEntity(ie);
	}

	FlatKeratometricAxisSequence = (*list)[TagFromName(FlatKeratometricAxisSequence)];
	if (FlatKeratometricAxisSequence) {
		if (FlatKeratometricAxisSequence->getInformationEntity() == UnknownIE) FlatKeratometricAxisSequence->setInformationEntity(ie);
	}

}

Module_SubjectiveRefractionMeasurements::Module_SubjectiveRefractionMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SubjectiveRefractionMeasurements";

	SubjectiveRefractionRightEyeSequence = (*list)[TagFromName(SubjectiveRefractionRightEyeSequence)];
	if (SubjectiveRefractionRightEyeSequence) {
		if (SubjectiveRefractionRightEyeSequence->getInformationEntity() == UnknownIE) SubjectiveRefractionRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_SubjectiveRefractionMeasurementsMacro(list,ie);
	SubjectiveRefractionLeftEyeSequence = (*list)[TagFromName(SubjectiveRefractionLeftEyeSequence)];
	if (SubjectiveRefractionLeftEyeSequence) {
		if (SubjectiveRefractionLeftEyeSequence->getInformationEntity() == UnknownIE) SubjectiveRefractionLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_SubjectiveRefractionMeasurementsMacro(list,ie);
	DistancePupillaryDistance = (*list)[TagFromName(DistancePupillaryDistance)];
	if (DistancePupillaryDistance) {
		if (DistancePupillaryDistance->getInformationEntity() == UnknownIE) DistancePupillaryDistance->setInformationEntity(ie);
	}

	NearPupillaryDistance = (*list)[TagFromName(NearPupillaryDistance)];
	if (NearPupillaryDistance) {
		if (NearPupillaryDistance->getInformationEntity() == UnknownIE) NearPupillaryDistance->setInformationEntity(ie);
	}

	IntermediatePupillaryDistance = (*list)[TagFromName(IntermediatePupillaryDistance)];
	if (IntermediatePupillaryDistance) {
		if (IntermediatePupillaryDistance->getInformationEntity() == UnknownIE) IntermediatePupillaryDistance->setInformationEntity(ie);
	}

	OtherPupillaryDistance = (*list)[TagFromName(OtherPupillaryDistance)];
	if (OtherPupillaryDistance) {
		if (OtherPupillaryDistance->getInformationEntity() == UnknownIE) OtherPupillaryDistance->setInformationEntity(ie);
	}

}

Macro_SubjectiveRefractionMeasurementsMacro::Macro_SubjectiveRefractionMeasurementsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SubjectiveRefractionMeasurementsMacro";

	SpherePower = (*list)[TagFromName(SpherePower)];
	if (SpherePower) {
		if (SpherePower->getInformationEntity() == UnknownIE) SpherePower->setInformationEntity(ie);
	}

	new Macro_CylinderSequenceMacro(list,ie);
	new Macro_PrismSequenceMacro(list,ie);
	AddNearSequence = (*list)[TagFromName(AddNearSequence)];
	if (AddNearSequence) {
		if (AddNearSequence->getInformationEntity() == UnknownIE) AddNearSequence->setInformationEntity(ie);
	}

	AddIntermediateSequence = (*list)[TagFromName(AddIntermediateSequence)];
	if (AddIntermediateSequence) {
		if (AddIntermediateSequence->getInformationEntity() == UnknownIE) AddIntermediateSequence->setInformationEntity(ie);
	}

	AddOtherSequence = (*list)[TagFromName(AddOtherSequence)];
	if (AddOtherSequence) {
		if (AddOtherSequence->getInformationEntity() == UnknownIE) AddOtherSequence->setInformationEntity(ie);
	}

}

Module_VisualAcuityMeasurements::Module_VisualAcuityMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualAcuityMeasurements";

	ViewingDistanceType = (*list)[TagFromName(ViewingDistanceType)];
	if (ViewingDistanceType) {
		if (ViewingDistanceType->getInformationEntity() == UnknownIE) ViewingDistanceType->setInformationEntity(ie);
	}

	VisualAcuityTypeCodeSequence = (*list)[TagFromName(VisualAcuityTypeCodeSequence)];
	if (VisualAcuityTypeCodeSequence) {
		if (VisualAcuityTypeCodeSequence->getInformationEntity() == UnknownIE) VisualAcuityTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	BackgroundColor = (*list)[TagFromName(BackgroundColor)];
	if (BackgroundColor) {
		if (BackgroundColor->getInformationEntity() == UnknownIE) BackgroundColor->setInformationEntity(ie);
	}

	Optotype = (*list)[TagFromName(Optotype)];
	if (Optotype) {
		if (Optotype->getInformationEntity() == UnknownIE) Optotype->setInformationEntity(ie);
	}

	OptotypeDetailedDefinition = (*list)[TagFromName(OptotypeDetailedDefinition)];
	if (OptotypeDetailedDefinition) {
		if (OptotypeDetailedDefinition->getInformationEntity() == UnknownIE) OptotypeDetailedDefinition->setInformationEntity(ie);
	}

	OptotypePresentation = (*list)[TagFromName(OptotypePresentation)];
	if (OptotypePresentation) {
		if (OptotypePresentation->getInformationEntity() == UnknownIE) OptotypePresentation->setInformationEntity(ie);
	}

	VisualAcuityRightEyeSequence = (*list)[TagFromName(VisualAcuityRightEyeSequence)];
	if (VisualAcuityRightEyeSequence) {
		if (VisualAcuityRightEyeSequence->getInformationEntity() == UnknownIE) VisualAcuityRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_VisualAcuityMeasurementsMacro(list,ie);
	VisualAcuityLeftEyeSequence = (*list)[TagFromName(VisualAcuityLeftEyeSequence)];
	if (VisualAcuityLeftEyeSequence) {
		if (VisualAcuityLeftEyeSequence->getInformationEntity() == UnknownIE) VisualAcuityLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_VisualAcuityMeasurementsMacro(list,ie);
	VisualAcuityBothEyesOpenSequence = (*list)[TagFromName(VisualAcuityBothEyesOpenSequence)];
	if (VisualAcuityBothEyesOpenSequence) {
		if (VisualAcuityBothEyesOpenSequence->getInformationEntity() == UnknownIE) VisualAcuityBothEyesOpenSequence->setInformationEntity(ie);
	}

	new Macro_VisualAcuityMeasurementsMacro(list,ie);
}

Macro_VisualAcuityMeasurementsMacro::Macro_VisualAcuityMeasurementsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualAcuityMeasurementsMacro";

	DecimalVisualAcuity = (*list)[TagFromName(DecimalVisualAcuity)];
	if (DecimalVisualAcuity) {
		if (DecimalVisualAcuity->getInformationEntity() == UnknownIE) DecimalVisualAcuity->setInformationEntity(ie);
	}

	VisualAcuityModifiers = (*list)[TagFromName(VisualAcuityModifiers)];
	if (VisualAcuityModifiers) {
		if (VisualAcuityModifiers->getInformationEntity() == UnknownIE) VisualAcuityModifiers->setInformationEntity(ie);
	}

}

Module_OphthalmicAxialMeasurementsSeries::Module_OphthalmicAxialMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_OphthalmicAxialMeasurements::Module_OphthalmicAxialMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialMeasurements";

	OphthalmicAxialMeasurementsDeviceType = (*list)[TagFromName(OphthalmicAxialMeasurementsDeviceType)];
	if (OphthalmicAxialMeasurementsDeviceType) {
		if (OphthalmicAxialMeasurementsDeviceType->getInformationEntity() == UnknownIE) OphthalmicAxialMeasurementsDeviceType->setInformationEntity(ie);
	}

	OphthalmicUltrasoundMethodCodeSequence = (*list)[TagFromName(OphthalmicUltrasoundMethodCodeSequence)];
	if (OphthalmicUltrasoundMethodCodeSequence) {
		if (OphthalmicUltrasoundMethodCodeSequence->getInformationEntity() == UnknownIE) OphthalmicUltrasoundMethodCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	AnteriorChamberDepthDefinitionCodeSequence = (*list)[TagFromName(AnteriorChamberDepthDefinitionCodeSequence)];
	if (AnteriorChamberDepthDefinitionCodeSequence) {
		if (AnteriorChamberDepthDefinitionCodeSequence->getInformationEntity() == UnknownIE) AnteriorChamberDepthDefinitionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	OphthalmicAxialMeasurementsRightEyeSequence = (*list)[TagFromName(OphthalmicAxialMeasurementsRightEyeSequence)];
	if (OphthalmicAxialMeasurementsRightEyeSequence) {
		if (OphthalmicAxialMeasurementsRightEyeSequence->getInformationEntity() == UnknownIE) OphthalmicAxialMeasurementsRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicAxialMeasurementsMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsSelectedMacro(list,ie);
	OphthalmicAxialMeasurementsLeftEyeSequence = (*list)[TagFromName(OphthalmicAxialMeasurementsLeftEyeSequence)];
	if (OphthalmicAxialMeasurementsLeftEyeSequence) {
		if (OphthalmicAxialMeasurementsLeftEyeSequence->getInformationEntity() == UnknownIE) OphthalmicAxialMeasurementsLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicAxialMeasurementsMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsSelectedMacro(list,ie);
}

Macro_OphthalmicAxialMeasurementsMacro::Macro_OphthalmicAxialMeasurementsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialMeasurementsMacro";

	LensStatusCodeSequence = (*list)[TagFromName(LensStatusCodeSequence)];
	if (LensStatusCodeSequence) {
		if (LensStatusCodeSequence->getInformationEntity() == UnknownIE) LensStatusCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	LensStatusDescription = (*list)[TagFromName(LensStatusDescription)];
	if (LensStatusDescription) {
		if (LensStatusDescription->getInformationEntity() == UnknownIE) LensStatusDescription->setInformationEntity(ie);
	}

	VitreousStatusCodeSequence = (*list)[TagFromName(VitreousStatusCodeSequence)];
	if (VitreousStatusCodeSequence) {
		if (VitreousStatusCodeSequence->getInformationEntity() == UnknownIE) VitreousStatusCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	VitreousStatusDescription = (*list)[TagFromName(VitreousStatusDescription)];
	if (VitreousStatusDescription) {
		if (VitreousStatusDescription->getInformationEntity() == UnknownIE) VitreousStatusDescription->setInformationEntity(ie);
	}

	PupilDilated = (*list)[TagFromName(PupilDilated)];
	if (PupilDilated) {
		if (PupilDilated->getInformationEntity() == UnknownIE) PupilDilated->setInformationEntity(ie);
	}

	DegreeOfDilation = (*list)[TagFromName(DegreeOfDilation)];
	if (DegreeOfDilation) {
		if (DegreeOfDilation->getInformationEntity() == UnknownIE) DegreeOfDilation->setInformationEntity(ie);
	}

	MydriaticAgentSequence = (*list)[TagFromName(MydriaticAgentSequence)];
	if (MydriaticAgentSequence) {
		if (MydriaticAgentSequence->getInformationEntity() == UnknownIE) MydriaticAgentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	OphthalmicAxialLengthMeasurementsSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsSequence)];
	if (OphthalmicAxialLengthMeasurementsSequence) {
		if (OphthalmicAxialLengthMeasurementsSequence->getInformationEntity() == UnknownIE) OphthalmicAxialLengthMeasurementsSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsRelatedInformationMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie);
	new Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro(list,ie);
	new Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro(list,ie);
}

Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro::Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialLengthSegmentalMeasurementsMacro";

	OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
	if (OphthalmicAxialLength) {
		if (OphthalmicAxialLength->getInformationEntity() == UnknownIE) OphthalmicAxialLength->setInformationEntity(ie);
	}

	OphthalmicAxialLengthMeasurementModified = (*list)[TagFromName(OphthalmicAxialLengthMeasurementModified)];
	if (OphthalmicAxialLengthMeasurementModified) {
		if (OphthalmicAxialLengthMeasurementModified->getInformationEntity() == UnknownIE) OphthalmicAxialLengthMeasurementModified->setInformationEntity(ie);
	}

	OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence)];
	if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence) {
		if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getInformationEntity() == UnknownIE) OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsRelatedInformationMacro(list,ie);
}

Macro_OphthalmicAxialMeasurementsRelatedInformationMacro::Macro_OphthalmicAxialMeasurementsRelatedInformationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialMeasurementsRelatedInformationMacro";

	UltrasoundOphthalmicAxialLengthMeasurementsSequence = (*list)[TagFromName(UltrasoundOphthalmicAxialLengthMeasurementsSequence)];
	if (UltrasoundOphthalmicAxialLengthMeasurementsSequence) {
		if (UltrasoundOphthalmicAxialLengthMeasurementsSequence->getInformationEntity() == UnknownIE) UltrasoundOphthalmicAxialLengthMeasurementsSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	OpticalOphthalmicAxialLengthMeasurementsSequence = (*list)[TagFromName(OpticalOphthalmicAxialLengthMeasurementsSequence)];
	if (OpticalOphthalmicAxialLengthMeasurementsSequence) {
		if (OpticalOphthalmicAxialLengthMeasurementsSequence->getInformationEntity() == UnknownIE) OpticalOphthalmicAxialLengthMeasurementsSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_OphthalmicAxialMeasurementsSelectedMacro::Macro_OphthalmicAxialMeasurementsSelectedMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialMeasurementsSelectedMacro";

	UltrasoundSelectedOphthalmicAxialLengthSequence = (*list)[TagFromName(UltrasoundSelectedOphthalmicAxialLengthSequence)];
	if (UltrasoundSelectedOphthalmicAxialLengthSequence) {
		if (UltrasoundSelectedOphthalmicAxialLengthSequence->getInformationEntity() == UnknownIE) UltrasoundSelectedOphthalmicAxialLengthSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie);
	new Macro_OphthalmicAxialLengthQualityMetricMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	OpticalSelectedOphthalmicAxialLengthSequence = (*list)[TagFromName(OpticalSelectedOphthalmicAxialLengthSequence)];
	if (OpticalSelectedOphthalmicAxialLengthSequence) {
		if (OpticalSelectedOphthalmicAxialLengthSequence->getInformationEntity() == UnknownIE) OpticalSelectedOphthalmicAxialLengthSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie);
	new Macro_OphthalmicAxialLengthQualityMetricMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie);
	new Macro_OphthalmicAxialLengthQualityMetricMacro(list,ie);
}

Macro_OphthalmicAxialLengthQualityMetricMacro::Macro_OphthalmicAxialLengthQualityMetricMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialLengthQualityMetricMacro";

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	NumericValue = (*list)[TagFromName(NumericValue)];
	if (NumericValue) {
		if (NumericValue->getInformationEntity() == UnknownIE) NumericValue->setInformationEntity(ie);
	}

	MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
	if (MeasurementUnitsCodeSequence) {
		if (MeasurementUnitsCodeSequence->getInformationEntity() == UnknownIE) MeasurementUnitsCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_IntraocularLensCalculationsSeries::Module_IntraocularLensCalculationsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntraocularLensCalculationsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_IntraocularLensCalculations::Module_IntraocularLensCalculations(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntraocularLensCalculations";

	IntraocularLensCalculationsRightEyeSequence = (*list)[TagFromName(IntraocularLensCalculationsRightEyeSequence)];
	if (IntraocularLensCalculationsRightEyeSequence) {
		if (IntraocularLensCalculationsRightEyeSequence->getInformationEntity() == UnknownIE) IntraocularLensCalculationsRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_IntraocularLensCalculationsMacro(list,ie);
	IntraocularLensCalculationsLeftEyeSequence = (*list)[TagFromName(IntraocularLensCalculationsLeftEyeSequence)];
	if (IntraocularLensCalculationsLeftEyeSequence) {
		if (IntraocularLensCalculationsLeftEyeSequence->getInformationEntity() == UnknownIE) IntraocularLensCalculationsLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_IntraocularLensCalculationsMacro(list,ie);
}

Macro_IntraocularLensCalculationsMacro::Macro_IntraocularLensCalculationsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IntraocularLensCalculationsMacro";

	TargetRefraction = (*list)[TagFromName(TargetRefraction)];
	if (TargetRefraction) {
		if (TargetRefraction->getInformationEntity() == UnknownIE) TargetRefraction->setInformationEntity(ie);
	}

	RefractiveProcedureOccurred = (*list)[TagFromName(RefractiveProcedureOccurred)];
	if (RefractiveProcedureOccurred) {
		if (RefractiveProcedureOccurred->getInformationEntity() == UnknownIE) RefractiveProcedureOccurred->setInformationEntity(ie);
	}

	RefractiveSurgeryTypeCodeSequence = (*list)[TagFromName(RefractiveSurgeryTypeCodeSequence)];
	if (RefractiveSurgeryTypeCodeSequence) {
		if (RefractiveSurgeryTypeCodeSequence->getInformationEntity() == UnknownIE) RefractiveSurgeryTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	RefractiveErrorBeforeRefractiveSurgeryCodeSequence = (*list)[TagFromName(RefractiveErrorBeforeRefractiveSurgeryCodeSequence)];
	if (RefractiveErrorBeforeRefractiveSurgeryCodeSequence) {
		if (RefractiveErrorBeforeRefractiveSurgeryCodeSequence->getInformationEntity() == UnknownIE) RefractiveErrorBeforeRefractiveSurgeryCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	CornealSizeSequence = (*list)[TagFromName(CornealSizeSequence)];
	if (CornealSizeSequence) {
		if (CornealSizeSequence->getInformationEntity() == UnknownIE) CornealSizeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	LensThicknessSequence = (*list)[TagFromName(LensThicknessSequence)];
	if (LensThicknessSequence) {
		if (LensThicknessSequence->getInformationEntity() == UnknownIE) LensThicknessSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	AnteriorChamberDepthSequence = (*list)[TagFromName(AnteriorChamberDepthSequence)];
	if (AnteriorChamberDepthSequence) {
		if (AnteriorChamberDepthSequence->getInformationEntity() == UnknownIE) AnteriorChamberDepthSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	RefractiveStateSequence = (*list)[TagFromName(RefractiveStateSequence)];
	if (RefractiveStateSequence) {
		if (RefractiveStateSequence->getInformationEntity() == UnknownIE) RefractiveStateSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_KeratometryMacro(list,ie);
	IOLFormulaCodeSequence = (*list)[TagFromName(IOLFormulaCodeSequence)];
	if (IOLFormulaCodeSequence) {
		if (IOLFormulaCodeSequence->getInformationEntity() == UnknownIE) IOLFormulaCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	IOLFormulaDetail = (*list)[TagFromName(IOLFormulaDetail)];
	if (IOLFormulaDetail) {
		if (IOLFormulaDetail->getInformationEntity() == UnknownIE) IOLFormulaDetail->setInformationEntity(ie);
	}

	new Macro_IOLOphthalmicAxialLengthMacro(list,ie);
	new Macro_CalculatedIOLMacro(list,ie);
}

Macro_KeratometryMacro::Macro_KeratometryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeratometryMacro";

	SteepKeratometricAxisSequence = (*list)[TagFromName(SteepKeratometricAxisSequence)];
	if (SteepKeratometricAxisSequence) {
		if (SteepKeratometricAxisSequence->getInformationEntity() == UnknownIE) SteepKeratometricAxisSequence->setInformationEntity(ie);
	}

	FlatKeratometricAxisSequence = (*list)[TagFromName(FlatKeratometricAxisSequence)];
	if (FlatKeratometricAxisSequence) {
		if (FlatKeratometricAxisSequence->getInformationEntity() == UnknownIE) FlatKeratometricAxisSequence->setInformationEntity(ie);
	}

	KeratometryMeasurementTypeCodeSequence = (*list)[TagFromName(KeratometryMeasurementTypeCodeSequence)];
	if (KeratometryMeasurementTypeCodeSequence) {
		if (KeratometryMeasurementTypeCodeSequence->getInformationEntity() == UnknownIE) KeratometryMeasurementTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	KeratometerIndex = (*list)[TagFromName(KeratometerIndex)];
	if (KeratometerIndex) {
		if (KeratometerIndex->getInformationEntity() == UnknownIE) KeratometerIndex->setInformationEntity(ie);
	}

}

Macro_IOLOphthalmicAxialLengthMacro::Macro_IOLOphthalmicAxialLengthMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IOLOphthalmicAxialLengthMacro";

	OphthalmicAxialLengthSequence = (*list)[TagFromName(OphthalmicAxialLengthSequence)];
	if (OphthalmicAxialLengthSequence) {
		if (OphthalmicAxialLengthSequence->getInformationEntity() == UnknownIE) OphthalmicAxialLengthSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_CalculatedIOLMacro::Macro_CalculatedIOLMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CalculatedIOLMacro";

	IOLManufacturer = (*list)[TagFromName(IOLManufacturer)];
	if (IOLManufacturer) {
		if (IOLManufacturer->getInformationEntity() == UnknownIE) IOLManufacturer->setInformationEntity(ie);
	}

	ImplantName = (*list)[TagFromName(ImplantName)];
	if (ImplantName) {
		if (ImplantName->getInformationEntity() == UnknownIE) ImplantName->setInformationEntity(ie);
	}

	LensConstantSequence = (*list)[TagFromName(LensConstantSequence)];
	if (LensConstantSequence) {
		if (LensConstantSequence->getInformationEntity() == UnknownIE) LensConstantSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	IOLPowerSequence = (*list)[TagFromName(IOLPowerSequence)];
	if (IOLPowerSequence) {
		if (IOLPowerSequence->getInformationEntity() == UnknownIE) IOLPowerSequence->setInformationEntity(ie);
	}

	IOLPowerForExactEmmetropia = (*list)[TagFromName(IOLPowerForExactEmmetropia)];
	if (IOLPowerForExactEmmetropia) {
		if (IOLPowerForExactEmmetropia->getInformationEntity() == UnknownIE) IOLPowerForExactEmmetropia->setInformationEntity(ie);
	}

	IOLPowerForExactTargetRefraction = (*list)[TagFromName(IOLPowerForExactTargetRefraction)];
	if (IOLPowerForExactTargetRefraction) {
		if (IOLPowerForExactTargetRefraction->getInformationEntity() == UnknownIE) IOLPowerForExactTargetRefraction->setInformationEntity(ie);
	}

}

Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro::Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro";

	ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
	if (ReferencedSOPClassUID) {
		if (ReferencedSOPClassUID->getInformationEntity() == UnknownIE) ReferencedSOPClassUID->setInformationEntity(ie);
	}

	ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
	if (ReferencedSOPInstanceUID) {
		if (ReferencedSOPInstanceUID->getInformationEntity() == UnknownIE) ReferencedSOPInstanceUID->setInformationEntity(ie);
	}

	ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
	if (ReferencedFrameNumber) {
		if (ReferencedFrameNumber->getInformationEntity() == UnknownIE) ReferencedFrameNumber->setInformationEntity(ie);
	}

}

Module_VisualFieldStaticPerimetryMeasurementsSeries::Module_VisualFieldStaticPerimetryMeasurementsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualFieldStaticPerimetryMeasurementsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	RequestAttributesSequence = (*list)[TagFromName(RequestAttributesSequence)];
	if (RequestAttributesSequence) {
		if (RequestAttributesSequence->getInformationEntity() == UnknownIE) RequestAttributesSequence->setInformationEntity(ie);
	}

	new Macro_RequestAttributesMacro(list,ie);
	new Macro_PerformedProcedureStepSummaryMacro(list,ie);
}

Module_VisualFieldStaticPerimetryTestParameters::Module_VisualFieldStaticPerimetryTestParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualFieldStaticPerimetryTestParameters";

	VisualFieldHorizontalExtent = (*list)[TagFromName(VisualFieldHorizontalExtent)];
	if (VisualFieldHorizontalExtent) {
		if (VisualFieldHorizontalExtent->getInformationEntity() == UnknownIE) VisualFieldHorizontalExtent->setInformationEntity(ie);
	}

	VisualFieldVerticalExtent = (*list)[TagFromName(VisualFieldVerticalExtent)];
	if (VisualFieldVerticalExtent) {
		if (VisualFieldVerticalExtent->getInformationEntity() == UnknownIE) VisualFieldVerticalExtent->setInformationEntity(ie);
	}

	VisualFieldShape = (*list)[TagFromName(VisualFieldShape)];
	if (VisualFieldShape) {
		if (VisualFieldShape->getInformationEntity() == UnknownIE) VisualFieldShape->setInformationEntity(ie);
	}

	ScreeningTestModeCodeSequence = (*list)[TagFromName(ScreeningTestModeCodeSequence)];
	if (ScreeningTestModeCodeSequence) {
		if (ScreeningTestModeCodeSequence->getInformationEntity() == UnknownIE) ScreeningTestModeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	MaximumStimulusLuminance = (*list)[TagFromName(MaximumStimulusLuminance)];
	if (MaximumStimulusLuminance) {
		if (MaximumStimulusLuminance->getInformationEntity() == UnknownIE) MaximumStimulusLuminance->setInformationEntity(ie);
	}

	BackgroundLuminance = (*list)[TagFromName(BackgroundLuminance)];
	if (BackgroundLuminance) {
		if (BackgroundLuminance->getInformationEntity() == UnknownIE) BackgroundLuminance->setInformationEntity(ie);
	}

	StimulusColorCodeSequence = (*list)[TagFromName(StimulusColorCodeSequence)];
	if (StimulusColorCodeSequence) {
		if (StimulusColorCodeSequence->getInformationEntity() == UnknownIE) StimulusColorCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	BackgroundIlluminationColorCodeSequence = (*list)[TagFromName(BackgroundIlluminationColorCodeSequence)];
	if (BackgroundIlluminationColorCodeSequence) {
		if (BackgroundIlluminationColorCodeSequence->getInformationEntity() == UnknownIE) BackgroundIlluminationColorCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	StimulusArea = (*list)[TagFromName(StimulusArea)];
	if (StimulusArea) {
		if (StimulusArea->getInformationEntity() == UnknownIE) StimulusArea->setInformationEntity(ie);
	}

	StimulusPresentationTime = (*list)[TagFromName(StimulusPresentationTime)];
	if (StimulusPresentationTime) {
		if (StimulusPresentationTime->getInformationEntity() == UnknownIE) StimulusPresentationTime->setInformationEntity(ie);
	}

}

Module_VisualFieldStaticPerimetryTestReliability::Module_VisualFieldStaticPerimetryTestReliability(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualFieldStaticPerimetryTestReliability";

	FixationSequence = (*list)[TagFromName(FixationSequence)];
	if (FixationSequence) {
		if (FixationSequence->getInformationEntity() == UnknownIE) FixationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	VisualFieldCatchTrialSequence = (*list)[TagFromName(VisualFieldCatchTrialSequence)];
	if (VisualFieldCatchTrialSequence) {
		if (VisualFieldCatchTrialSequence->getInformationEntity() == UnknownIE) VisualFieldCatchTrialSequence->setInformationEntity(ie);
	}

	StimuliRetestingQuantity = (*list)[TagFromName(StimuliRetestingQuantity)];
	if (StimuliRetestingQuantity) {
		if (StimuliRetestingQuantity->getInformationEntity() == UnknownIE) StimuliRetestingQuantity->setInformationEntity(ie);
	}

	PatientReliabilityIndicator = (*list)[TagFromName(PatientReliabilityIndicator)];
	if (PatientReliabilityIndicator) {
		if (PatientReliabilityIndicator->getInformationEntity() == UnknownIE) PatientReliabilityIndicator->setInformationEntity(ie);
	}

	CommentsOnPatientPerformanceOfVisualField = (*list)[TagFromName(CommentsOnPatientPerformanceOfVisualField)];
	if (CommentsOnPatientPerformanceOfVisualField) {
		if (CommentsOnPatientPerformanceOfVisualField->getInformationEntity() == UnknownIE) CommentsOnPatientPerformanceOfVisualField->setInformationEntity(ie);
	}

	VisualFieldTestReliabilityGlobalIndexSequence = (*list)[TagFromName(VisualFieldTestReliabilityGlobalIndexSequence)];
	if (VisualFieldTestReliabilityGlobalIndexSequence) {
		if (VisualFieldTestReliabilityGlobalIndexSequence->getInformationEntity() == UnknownIE) VisualFieldTestReliabilityGlobalIndexSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicVisualFieldGlobalIndexMacro(list,ie);
}

Macro_OphthalmicVisualFieldGlobalIndexMacro::Macro_OphthalmicVisualFieldGlobalIndexMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicVisualFieldGlobalIndexMacro";

	DataObservationSequence = (*list)[TagFromName(DataObservationSequence)];
	if (DataObservationSequence) {
		if (DataObservationSequence->getInformationEntity() == UnknownIE) DataObservationSequence->setInformationEntity(ie);
	}

	new Macro_ContentItemMacro(list,ie);
	IndexNormalsFlag = (*list)[TagFromName(IndexNormalsFlag)];
	if (IndexNormalsFlag) {
		if (IndexNormalsFlag->getInformationEntity() == UnknownIE) IndexNormalsFlag->setInformationEntity(ie);
	}

	IndexProbabilitySequence = (*list)[TagFromName(IndexProbabilitySequence)];
	if (IndexProbabilitySequence) {
		if (IndexProbabilitySequence->getInformationEntity() == UnknownIE) IndexProbabilitySequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
}

Module_VisualFieldStaticPerimetryTestMeasurements::Module_VisualFieldStaticPerimetryTestMeasurements(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualFieldStaticPerimetryTestMeasurements";

	MeasurementLaterality = (*list)[TagFromName(MeasurementLaterality)];
	if (MeasurementLaterality) {
		if (MeasurementLaterality->getInformationEntity() == UnknownIE) MeasurementLaterality->setInformationEntity(ie);
	}

	PresentedVisualStimuliDataFlag = (*list)[TagFromName(PresentedVisualStimuliDataFlag)];
	if (PresentedVisualStimuliDataFlag) {
		if (PresentedVisualStimuliDataFlag->getInformationEntity() == UnknownIE) PresentedVisualStimuliDataFlag->setInformationEntity(ie);
	}

	NumberOfVisualStimuli = (*list)[TagFromName(NumberOfVisualStimuli)];
	if (NumberOfVisualStimuli) {
		if (NumberOfVisualStimuli->getInformationEntity() == UnknownIE) NumberOfVisualStimuli->setInformationEntity(ie);
	}

	VisualFieldTestDuration = (*list)[TagFromName(VisualFieldTestDuration)];
	if (VisualFieldTestDuration) {
		if (VisualFieldTestDuration->getInformationEntity() == UnknownIE) VisualFieldTestDuration->setInformationEntity(ie);
	}

	FovealSensitivityMeasured = (*list)[TagFromName(FovealSensitivityMeasured)];
	if (FovealSensitivityMeasured) {
		if (FovealSensitivityMeasured->getInformationEntity() == UnknownIE) FovealSensitivityMeasured->setInformationEntity(ie);
	}

	FovealSensitivity = (*list)[TagFromName(FovealSensitivity)];
	if (FovealSensitivity) {
		if (FovealSensitivity->getInformationEntity() == UnknownIE) FovealSensitivity->setInformationEntity(ie);
	}

	FovealPointNormativeDataFlag = (*list)[TagFromName(FovealPointNormativeDataFlag)];
	if (FovealPointNormativeDataFlag) {
		if (FovealPointNormativeDataFlag->getInformationEntity() == UnknownIE) FovealPointNormativeDataFlag->setInformationEntity(ie);
	}

	FovealPointProbabilityValue = (*list)[TagFromName(FovealPointProbabilityValue)];
	if (FovealPointProbabilityValue) {
		if (FovealPointProbabilityValue->getInformationEntity() == UnknownIE) FovealPointProbabilityValue->setInformationEntity(ie);
	}

	ScreeningBaselineMeasured = (*list)[TagFromName(ScreeningBaselineMeasured)];
	if (ScreeningBaselineMeasured) {
		if (ScreeningBaselineMeasured->getInformationEntity() == UnknownIE) ScreeningBaselineMeasured->setInformationEntity(ie);
	}

	ScreeningBaselineMeasuredSequence = (*list)[TagFromName(ScreeningBaselineMeasuredSequence)];
	if (ScreeningBaselineMeasuredSequence) {
		if (ScreeningBaselineMeasuredSequence->getInformationEntity() == UnknownIE) ScreeningBaselineMeasuredSequence->setInformationEntity(ie);
	}

	BlindSpotLocalized = (*list)[TagFromName(BlindSpotLocalized)];
	if (BlindSpotLocalized) {
		if (BlindSpotLocalized->getInformationEntity() == UnknownIE) BlindSpotLocalized->setInformationEntity(ie);
	}

	BlindSpotXCoordinate = (*list)[TagFromName(BlindSpotXCoordinate)];
	if (BlindSpotXCoordinate) {
		if (BlindSpotXCoordinate->getInformationEntity() == UnknownIE) BlindSpotXCoordinate->setInformationEntity(ie);
	}

	BlindSpotYCoordinate = (*list)[TagFromName(BlindSpotYCoordinate)];
	if (BlindSpotYCoordinate) {
		if (BlindSpotYCoordinate->getInformationEntity() == UnknownIE) BlindSpotYCoordinate->setInformationEntity(ie);
	}

	MinimumSensitivityValue = (*list)[TagFromName(MinimumSensitivityValue)];
	if (MinimumSensitivityValue) {
		if (MinimumSensitivityValue->getInformationEntity() == UnknownIE) MinimumSensitivityValue->setInformationEntity(ie);
	}

	TestPointNormalsDataFlag = (*list)[TagFromName(TestPointNormalsDataFlag)];
	if (TestPointNormalsDataFlag) {
		if (TestPointNormalsDataFlag->getInformationEntity() == UnknownIE) TestPointNormalsDataFlag->setInformationEntity(ie);
	}

	TestPointNormalsSequence = (*list)[TagFromName(TestPointNormalsSequence)];
	if (TestPointNormalsSequence) {
		if (TestPointNormalsSequence->getInformationEntity() == UnknownIE) TestPointNormalsSequence->setInformationEntity(ie);
	}

	new Macro_DataSetIdentificationMacro(list,ie);
	AgeCorrectedSensitivityDeviationAlgorithmSequence = (*list)[TagFromName(AgeCorrectedSensitivityDeviationAlgorithmSequence)];
	if (AgeCorrectedSensitivityDeviationAlgorithmSequence) {
		if (AgeCorrectedSensitivityDeviationAlgorithmSequence->getInformationEntity() == UnknownIE) AgeCorrectedSensitivityDeviationAlgorithmSequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
	GeneralizedDefectSensitivityDeviationAlgorithmSequence = (*list)[TagFromName(GeneralizedDefectSensitivityDeviationAlgorithmSequence)];
	if (GeneralizedDefectSensitivityDeviationAlgorithmSequence) {
		if (GeneralizedDefectSensitivityDeviationAlgorithmSequence->getInformationEntity() == UnknownIE) GeneralizedDefectSensitivityDeviationAlgorithmSequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
	VisualFieldTestPointSequence = (*list)[TagFromName(VisualFieldTestPointSequence)];
	if (VisualFieldTestPointSequence) {
		if (VisualFieldTestPointSequence->getInformationEntity() == UnknownIE) VisualFieldTestPointSequence->setInformationEntity(ie);
	}

}

Module_VisualFieldStaticPerimetryTestResults::Module_VisualFieldStaticPerimetryTestResults(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "VisualFieldStaticPerimetryTestResults";

	VisualFieldMeanSensitivity = (*list)[TagFromName(VisualFieldMeanSensitivity)];
	if (VisualFieldMeanSensitivity) {
		if (VisualFieldMeanSensitivity->getInformationEntity() == UnknownIE) VisualFieldMeanSensitivity->setInformationEntity(ie);
	}

	VisualFieldTestNormalsFlag = (*list)[TagFromName(VisualFieldTestNormalsFlag)];
	if (VisualFieldTestNormalsFlag) {
		if (VisualFieldTestNormalsFlag->getInformationEntity() == UnknownIE) VisualFieldTestNormalsFlag->setInformationEntity(ie);
	}

	ResultsNormalsSequence = (*list)[TagFromName(ResultsNormalsSequence)];
	if (ResultsNormalsSequence) {
		if (ResultsNormalsSequence->getInformationEntity() == UnknownIE) ResultsNormalsSequence->setInformationEntity(ie);
	}

	new Macro_DataSetIdentificationMacro(list,ie);
	new Macro_AlgorithmIdentificationMacro(list,ie);
	new Macro_AlgorithmIdentificationMacro(list,ie);
	ShortTermFluctuationCalculated = (*list)[TagFromName(ShortTermFluctuationCalculated)];
	if (ShortTermFluctuationCalculated) {
		if (ShortTermFluctuationCalculated->getInformationEntity() == UnknownIE) ShortTermFluctuationCalculated->setInformationEntity(ie);
	}

	ShortTermFluctuation = (*list)[TagFromName(ShortTermFluctuation)];
	if (ShortTermFluctuation) {
		if (ShortTermFluctuation->getInformationEntity() == UnknownIE) ShortTermFluctuation->setInformationEntity(ie);
	}

	ShortTermFluctuationProbabilityCalculated = (*list)[TagFromName(ShortTermFluctuationProbabilityCalculated)];
	if (ShortTermFluctuationProbabilityCalculated) {
		if (ShortTermFluctuationProbabilityCalculated->getInformationEntity() == UnknownIE) ShortTermFluctuationProbabilityCalculated->setInformationEntity(ie);
	}

	ShortTermFluctuationProbability = (*list)[TagFromName(ShortTermFluctuationProbability)];
	if (ShortTermFluctuationProbability) {
		if (ShortTermFluctuationProbability->getInformationEntity() == UnknownIE) ShortTermFluctuationProbability->setInformationEntity(ie);
	}

	CorrectedLocalizedDeviationFromNormalCalculated = (*list)[TagFromName(CorrectedLocalizedDeviationFromNormalCalculated)];
	if (CorrectedLocalizedDeviationFromNormalCalculated) {
		if (CorrectedLocalizedDeviationFromNormalCalculated->getInformationEntity() == UnknownIE) CorrectedLocalizedDeviationFromNormalCalculated->setInformationEntity(ie);
	}

	CorrectedLocalizedDeviationFromNormal = (*list)[TagFromName(CorrectedLocalizedDeviationFromNormal)];
	if (CorrectedLocalizedDeviationFromNormal) {
		if (CorrectedLocalizedDeviationFromNormal->getInformationEntity() == UnknownIE) CorrectedLocalizedDeviationFromNormal->setInformationEntity(ie);
	}

	CorrectedLocalizedDeviationFromNormalProbabilityCalculated = (*list)[TagFromName(CorrectedLocalizedDeviationFromNormalProbabilityCalculated)];
	if (CorrectedLocalizedDeviationFromNormalProbabilityCalculated) {
		if (CorrectedLocalizedDeviationFromNormalProbabilityCalculated->getInformationEntity() == UnknownIE) CorrectedLocalizedDeviationFromNormalProbabilityCalculated->setInformationEntity(ie);
	}

	CorrectedLocalizedDeviationFromNormalProbability = (*list)[TagFromName(CorrectedLocalizedDeviationFromNormalProbability)];
	if (CorrectedLocalizedDeviationFromNormalProbability) {
		if (CorrectedLocalizedDeviationFromNormalProbability->getInformationEntity() == UnknownIE) CorrectedLocalizedDeviationFromNormalProbability->setInformationEntity(ie);
	}

	VisualFieldGlobalResultsIndexSequence = (*list)[TagFromName(VisualFieldGlobalResultsIndexSequence)];
	if (VisualFieldGlobalResultsIndexSequence) {
		if (VisualFieldGlobalResultsIndexSequence->getInformationEntity() == UnknownIE) VisualFieldGlobalResultsIndexSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicVisualFieldGlobalIndexMacro(list,ie);
}

Module_OphthalmicPatientClinicalInformationandTestLensParameters::Module_OphthalmicPatientClinicalInformationandTestLensParameters(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPatientClinicalInformationandTestLensParameters";

	OphthalmicPatientClinicalInformationLeftEyeSequence = (*list)[TagFromName(OphthalmicPatientClinicalInformationLeftEyeSequence)];
	if (OphthalmicPatientClinicalInformationLeftEyeSequence) {
		if (OphthalmicPatientClinicalInformationLeftEyeSequence->getInformationEntity() == UnknownIE) OphthalmicPatientClinicalInformationLeftEyeSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro(list,ie);
	OphthalmicPatientClinicalInformationRightEyeSequence = (*list)[TagFromName(OphthalmicPatientClinicalInformationRightEyeSequence)];
	if (OphthalmicPatientClinicalInformationRightEyeSequence) {
		if (OphthalmicPatientClinicalInformationRightEyeSequence->getInformationEntity() == UnknownIE) OphthalmicPatientClinicalInformationRightEyeSequence->setInformationEntity(ie);
	}

	new Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro(list,ie);
}

Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro::Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OphthalmicPatientClinicalInformationandTestLensParametersMacro";

	RefractiveParametersUsedOnPatientSequence = (*list)[TagFromName(RefractiveParametersUsedOnPatientSequence)];
	if (RefractiveParametersUsedOnPatientSequence) {
		if (RefractiveParametersUsedOnPatientSequence->getInformationEntity() == UnknownIE) RefractiveParametersUsedOnPatientSequence->setInformationEntity(ie);
	}

	PupilSize = (*list)[TagFromName(PupilSize)];
	if (PupilSize) {
		if (PupilSize->getInformationEntity() == UnknownIE) PupilSize->setInformationEntity(ie);
	}

	PupilDilated = (*list)[TagFromName(PupilDilated)];
	if (PupilDilated) {
		if (PupilDilated->getInformationEntity() == UnknownIE) PupilDilated->setInformationEntity(ie);
	}

	IntraOcularPressure = (*list)[TagFromName(IntraOcularPressure)];
	if (IntraOcularPressure) {
		if (IntraOcularPressure->getInformationEntity() == UnknownIE) IntraOcularPressure->setInformationEntity(ie);
	}

	VisualAcuityMeasurementSequence = (*list)[TagFromName(VisualAcuityMeasurementSequence)];
	if (VisualAcuityMeasurementSequence) {
		if (VisualAcuityMeasurementSequence->getInformationEntity() == UnknownIE) VisualAcuityMeasurementSequence->setInformationEntity(ie);
	}

	new Macro_VisualAcuityMeasurementsMacro(list,ie);
}

Module_Synchronization::Module_Synchronization(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Synchronization";

	SynchronizationFrameOfReferenceUID = (*list)[TagFromName(SynchronizationFrameOfReferenceUID)];
	if (SynchronizationFrameOfReferenceUID) {
		if (SynchronizationFrameOfReferenceUID->getInformationEntity() == UnknownIE) SynchronizationFrameOfReferenceUID->setInformationEntity(ie);
	}

	SynchronizationTrigger = (*list)[TagFromName(SynchronizationTrigger)];
	if (SynchronizationTrigger) {
		if (SynchronizationTrigger->getInformationEntity() == UnknownIE) SynchronizationTrigger->setInformationEntity(ie);
	}

	TriggerSourceOrType = (*list)[TagFromName(TriggerSourceOrType)];
	if (TriggerSourceOrType) {
		if (TriggerSourceOrType->getInformationEntity() == UnknownIE) TriggerSourceOrType->setInformationEntity(ie);
	}

	SynchronizationChannel = (*list)[TagFromName(SynchronizationChannel)];
	if (SynchronizationChannel) {
		if (SynchronizationChannel->getInformationEntity() == UnknownIE) SynchronizationChannel->setInformationEntity(ie);
	}

	AcquisitionTimeSynchronized = (*list)[TagFromName(AcquisitionTimeSynchronized)];
	if (AcquisitionTimeSynchronized) {
		if (AcquisitionTimeSynchronized->getInformationEntity() == UnknownIE) AcquisitionTimeSynchronized->setInformationEntity(ie);
	}

	TimeSource = (*list)[TagFromName(TimeSource)];
	if (TimeSource) {
		if (TimeSource->getInformationEntity() == UnknownIE) TimeSource->setInformationEntity(ie);
	}

	TimeDistributionProtocol = (*list)[TagFromName(TimeDistributionProtocol)];
	if (TimeDistributionProtocol) {
		if (TimeDistributionProtocol->getInformationEntity() == UnknownIE) TimeDistributionProtocol->setInformationEntity(ie);
	}

	NTPSourceAddress = (*list)[TagFromName(NTPSourceAddress)];
	if (NTPSourceAddress) {
		if (NTPSourceAddress->getInformationEntity() == UnknownIE) NTPSourceAddress->setInformationEntity(ie);
	}

}

Module_WaveformIdentification::Module_WaveformIdentification(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WaveformIdentification";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_Waveform::Module_Waveform(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Waveform";

	WaveformSequence = (*list)[TagFromName(WaveformSequence)];
	if (WaveformSequence) {
		if (WaveformSequence->getInformationEntity() == UnknownIE) WaveformSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_WaveformAnnotation::Module_WaveformAnnotation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WaveformAnnotation";

	WaveformAnnotationSequence = (*list)[TagFromName(WaveformAnnotationSequence)];
	if (WaveformAnnotationSequence) {
		if (WaveformAnnotationSequence->getInformationEntity() == UnknownIE) WaveformAnnotationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_HierarchicalSOPInstanceReferenceMacro::Macro_HierarchicalSOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HierarchicalSOPInstanceReferenceMacro";

	StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
	if (StudyInstanceUID) {
		if (StudyInstanceUID->getInformationEntity() == UnknownIE) StudyInstanceUID->setInformationEntity(ie);
	}

	ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
	if (ReferencedSeriesSequence) {
		if (ReferencedSeriesSequence->getInformationEntity() == UnknownIE) ReferencedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSeriesReferenceMacro(list,ie);
}

Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro::Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro";

	StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
	if (StudyInstanceUID) {
		if (StudyInstanceUID->getInformationEntity() == UnknownIE) StudyInstanceUID->setInformationEntity(ie);
	}

	ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
	if (ReferencedSeriesSequence) {
		if (ReferencedSeriesSequence->getInformationEntity() == UnknownIE) ReferencedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro(list,ie);
}

Macro_HierarchicalSeriesReferenceMacro::Macro_HierarchicalSeriesReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HierarchicalSeriesReferenceMacro";

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	RetrieveAETitle = (*list)[TagFromName(RetrieveAETitle)];
	if (RetrieveAETitle) {
		if (RetrieveAETitle->getInformationEntity() == UnknownIE) RetrieveAETitle->setInformationEntity(ie);
	}

	RetrieveLocationUID = (*list)[TagFromName(RetrieveLocationUID)];
	if (RetrieveLocationUID) {
		if (RetrieveLocationUID->getInformationEntity() == UnknownIE) RetrieveLocationUID->setInformationEntity(ie);
	}

	StorageMediaFileSetID = (*list)[TagFromName(StorageMediaFileSetID)];
	if (StorageMediaFileSetID) {
		if (StorageMediaFileSetID->getInformationEntity() == UnknownIE) StorageMediaFileSetID->setInformationEntity(ie);
	}

	StorageMediaFileSetUID = (*list)[TagFromName(StorageMediaFileSetUID)];
	if (StorageMediaFileSetUID) {
		if (StorageMediaFileSetUID->getInformationEntity() == UnknownIE) StorageMediaFileSetUID->setInformationEntity(ie);
	}

	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro::Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro";

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	RetrieveAETitle = (*list)[TagFromName(RetrieveAETitle)];
	if (RetrieveAETitle) {
		if (RetrieveAETitle->getInformationEntity() == UnknownIE) RetrieveAETitle->setInformationEntity(ie);
	}

	RetrieveLocationUID = (*list)[TagFromName(RetrieveLocationUID)];
	if (RetrieveLocationUID) {
		if (RetrieveLocationUID->getInformationEntity() == UnknownIE) RetrieveLocationUID->setInformationEntity(ie);
	}

	StorageMediaFileSetID = (*list)[TagFromName(StorageMediaFileSetID)];
	if (StorageMediaFileSetID) {
		if (StorageMediaFileSetID->getInformationEntity() == UnknownIE) StorageMediaFileSetID->setInformationEntity(ie);
	}

	StorageMediaFileSetUID = (*list)[TagFromName(StorageMediaFileSetUID)];
	if (StorageMediaFileSetUID) {
		if (StorageMediaFileSetUID->getInformationEntity() == UnknownIE) StorageMediaFileSetUID->setInformationEntity(ie);
	}

	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_IdentifiedPersonOrDeviceMacro::Macro_IdentifiedPersonOrDeviceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IdentifiedPersonOrDeviceMacro";

	ObserverType = (*list)[TagFromName(ObserverType)];
	if (ObserverType) {
		if (ObserverType->getInformationEntity() == UnknownIE) ObserverType->setInformationEntity(ie);
	}

	PersonName = (*list)[TagFromName(PersonName)];
	if (PersonName) {
		if (PersonName->getInformationEntity() == UnknownIE) PersonName->setInformationEntity(ie);
	}

	PersonIdentificationCodeSequence = (*list)[TagFromName(PersonIdentificationCodeSequence)];
	if (PersonIdentificationCodeSequence) {
		if (PersonIdentificationCodeSequence->getInformationEntity() == UnknownIE) PersonIdentificationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	StationName = (*list)[TagFromName(StationName)];
	if (StationName) {
		if (StationName->getInformationEntity() == UnknownIE) StationName->setInformationEntity(ie);
	}

	DeviceUID = (*list)[TagFromName(DeviceUID)];
	if (DeviceUID) {
		if (DeviceUID->getInformationEntity() == UnknownIE) DeviceUID->setInformationEntity(ie);
	}

	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	StationAETitle = (*list)[TagFromName(StationAETitle)];
	if (StationAETitle) {
		if (StationAETitle->getInformationEntity() == UnknownIE) StationAETitle->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	InstitutionCodeSequence = (*list)[TagFromName(InstitutionCodeSequence)];
	if (InstitutionCodeSequence) {
		if (InstitutionCodeSequence->getInformationEntity() == UnknownIE) InstitutionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
	if (InstitutionalDepartmentName) {
		if (InstitutionalDepartmentName->getInformationEntity() == UnknownIE) InstitutionalDepartmentName->setInformationEntity(ie);
	}

	InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
	if (InstitutionalDepartmentTypeCodeSequence) {
		if (InstitutionalDepartmentTypeCodeSequence->getInformationEntity() == UnknownIE) InstitutionalDepartmentTypeCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_NumericMeasurementMacro::Macro_NumericMeasurementMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "NumericMeasurementMacro";

	MeasuredValueSequence = (*list)[TagFromName(MeasuredValueSequence)];
	if (MeasuredValueSequence) {
		if (MeasuredValueSequence->getInformationEntity() == UnknownIE) MeasuredValueSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	NumericValueQualifierCodeSequence = (*list)[TagFromName(NumericValueQualifierCodeSequence)];
	if (NumericValueQualifierCodeSequence) {
		if (NumericValueQualifierCodeSequence->getInformationEntity() == UnknownIE) NumericValueQualifierCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_CodeMacro::Macro_CodeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CodeMacro";

	ConceptCodeSequence = (*list)[TagFromName(ConceptCodeSequence)];
	if (ConceptCodeSequence) {
		if (ConceptCodeSequence->getInformationEntity() == UnknownIE) ConceptCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_CompositeObjectReferenceMacro::Macro_CompositeObjectReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CompositeObjectReferenceMacro";

	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_ImageReferenceMacro::Macro_ImageReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageReferenceMacro";

	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_IconImageSequenceMacro(list,ie);
}

Macro_WaveformReferenceMacro::Macro_WaveformReferenceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "WaveformReferenceMacro";

	ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
	if (ReferencedSOPSequence) {
		if (ReferencedSOPSequence->getInformationEntity() == UnknownIE) ReferencedSOPSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Macro_SpatialCoordinatesMacro::Macro_SpatialCoordinatesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialCoordinatesMacro";

	GraphicData = (*list)[TagFromName(GraphicData)];
	if (GraphicData) {
		if (GraphicData->getInformationEntity() == UnknownIE) GraphicData->setInformationEntity(ie);
	}

	GraphicType = (*list)[TagFromName(GraphicType)];
	if (GraphicType) {
		if (GraphicType->getInformationEntity() == UnknownIE) GraphicType->setInformationEntity(ie);
	}

	PixelOriginInterpretation = (*list)[TagFromName(PixelOriginInterpretation)];
	if (PixelOriginInterpretation) {
		if (PixelOriginInterpretation->getInformationEntity() == UnknownIE) PixelOriginInterpretation->setInformationEntity(ie);
	}

	FiducialUID = (*list)[TagFromName(FiducialUID)];
	if (FiducialUID) {
		if (FiducialUID->getInformationEntity() == UnknownIE) FiducialUID->setInformationEntity(ie);
	}

}

Macro_SpatialCoordinates3DMacro::Macro_SpatialCoordinates3DMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialCoordinates3DMacro";

	ReferencedFrameOfReferenceUID = (*list)[TagFromName(ReferencedFrameOfReferenceUID)];
	if (ReferencedFrameOfReferenceUID) {
		if (ReferencedFrameOfReferenceUID->getInformationEntity() == UnknownIE) ReferencedFrameOfReferenceUID->setInformationEntity(ie);
	}

	GraphicData = (*list)[TagFromName(GraphicData)];
	if (GraphicData) {
		if (GraphicData->getInformationEntity() == UnknownIE) GraphicData->setInformationEntity(ie);
	}

	GraphicType = (*list)[TagFromName(GraphicType)];
	if (GraphicType) {
		if (GraphicType->getInformationEntity() == UnknownIE) GraphicType->setInformationEntity(ie);
	}

	FiducialUID = (*list)[TagFromName(FiducialUID)];
	if (FiducialUID) {
		if (FiducialUID->getInformationEntity() == UnknownIE) FiducialUID->setInformationEntity(ie);
	}

}

Macro_TemporalCoordinatesMacro::Macro_TemporalCoordinatesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "TemporalCoordinatesMacro";

	TemporalRangeType = (*list)[TagFromName(TemporalRangeType)];
	if (TemporalRangeType) {
		if (TemporalRangeType->getInformationEntity() == UnknownIE) TemporalRangeType->setInformationEntity(ie);
	}

	ReferencedSamplePositions = (*list)[TagFromName(ReferencedSamplePositions)];
	if (ReferencedSamplePositions) {
		if (ReferencedSamplePositions->getInformationEntity() == UnknownIE) ReferencedSamplePositions->setInformationEntity(ie);
	}

	ReferencedTimeOffsets = (*list)[TagFromName(ReferencedTimeOffsets)];
	if (ReferencedTimeOffsets) {
		if (ReferencedTimeOffsets->getInformationEntity() == UnknownIE) ReferencedTimeOffsets->setInformationEntity(ie);
	}

	ReferencedDateTime = (*list)[TagFromName(ReferencedDateTime)];
	if (ReferencedDateTime) {
		if (ReferencedDateTime->getInformationEntity() == UnknownIE) ReferencedDateTime->setInformationEntity(ie);
	}

}

Macro_ContainerMacro::Macro_ContainerMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ContainerMacro";

	ContinuityOfContent = (*list)[TagFromName(ContinuityOfContent)];
	if (ContinuityOfContent) {
		if (ContinuityOfContent->getInformationEntity() == UnknownIE) ContinuityOfContent->setInformationEntity(ie);
	}

	ContentTemplateSequence = (*list)[TagFromName(ContentTemplateSequence)];
	if (ContentTemplateSequence) {
		if (ContentTemplateSequence->getInformationEntity() == UnknownIE) ContentTemplateSequence->setInformationEntity(ie);
	}

}

Macro_DocumentContentMacro::Macro_DocumentContentMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DocumentContentMacro";

	ValueType = (*list)[TagFromName(ValueType)];
	if (ValueType) {
		if (ValueType->getInformationEntity() == UnknownIE) ValueType->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	TextValue = (*list)[TagFromName(TextValue)];
	if (TextValue) {
		if (TextValue->getInformationEntity() == UnknownIE) TextValue->setInformationEntity(ie);
	}

	DateTime = (*list)[TagFromName(DateTime)];
	if (DateTime) {
		if (DateTime->getInformationEntity() == UnknownIE) DateTime->setInformationEntity(ie);
	}

	Date = (*list)[TagFromName(Date)];
	if (Date) {
		if (Date->getInformationEntity() == UnknownIE) Date->setInformationEntity(ie);
	}

	Time = (*list)[TagFromName(Time)];
	if (Time) {
		if (Time->getInformationEntity() == UnknownIE) Time->setInformationEntity(ie);
	}

	PersonName = (*list)[TagFromName(PersonName)];
	if (PersonName) {
		if (PersonName->getInformationEntity() == UnknownIE) PersonName->setInformationEntity(ie);
	}

	UID = (*list)[TagFromName(UID)];
	if (UID) {
		if (UID->getInformationEntity() == UnknownIE) UID->setInformationEntity(ie);
	}

	new Macro_NumericMeasurementMacro(list,ie);
	new Macro_CodeMacro(list,ie);
	new Macro_CompositeObjectReferenceMacro(list,ie);
	new Macro_ImageReferenceMacro(list,ie);
	new Macro_WaveformReferenceMacro(list,ie);
	new Macro_SpatialCoordinatesMacro(list,ie);
	new Macro_SpatialCoordinates3DMacro(list,ie);
	new Macro_ContainerMacro(list,ie);
}

Macro_DocumentRelationshipMacro::Macro_DocumentRelationshipMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DocumentRelationshipMacro";

	ObservationDateTime = (*list)[TagFromName(ObservationDateTime)];
	if (ObservationDateTime) {
		if (ObservationDateTime->getInformationEntity() == UnknownIE) ObservationDateTime->setInformationEntity(ie);
	}

	ObservationUID = (*list)[TagFromName(ObservationUID)];
	if (ObservationUID) {
		if (ObservationUID->getInformationEntity() == UnknownIE) ObservationUID->setInformationEntity(ie);
	}

	ContentSequence = (*list)[TagFromName(ContentSequence)];
	if (ContentSequence) {
		if (ContentSequence->getInformationEntity() == UnknownIE) ContentSequence->setInformationEntity(ie);
	}

}

Module_SRDocumentSeries::Module_SRDocumentSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SRDocumentSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	SeriesDate = (*list)[TagFromName(SeriesDate)];
	if (SeriesDate) {
		if (SeriesDate->getInformationEntity() == UnknownIE) SeriesDate->setInformationEntity(ie);
	}

	SeriesTime = (*list)[TagFromName(SeriesTime)];
	if (SeriesTime) {
		if (SeriesTime->getInformationEntity() == UnknownIE) SeriesTime->setInformationEntity(ie);
	}

	ProtocolName = (*list)[TagFromName(ProtocolName)];
	if (ProtocolName) {
		if (ProtocolName->getInformationEntity() == UnknownIE) ProtocolName->setInformationEntity(ie);
	}

	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	SeriesDescriptionCodeSequence = (*list)[TagFromName(SeriesDescriptionCodeSequence)];
	if (SeriesDescriptionCodeSequence) {
		if (SeriesDescriptionCodeSequence->getInformationEntity() == UnknownIE) SeriesDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_SRDocumentGeneral::Module_SRDocumentGeneral(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SRDocumentGeneral";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	PreliminaryFlag = (*list)[TagFromName(PreliminaryFlag)];
	if (PreliminaryFlag) {
		if (PreliminaryFlag->getInformationEntity() == UnknownIE) PreliminaryFlag->setInformationEntity(ie);
	}

	CompletionFlag = (*list)[TagFromName(CompletionFlag)];
	if (CompletionFlag) {
		if (CompletionFlag->getInformationEntity() == UnknownIE) CompletionFlag->setInformationEntity(ie);
	}

	CompletionFlagDescription = (*list)[TagFromName(CompletionFlagDescription)];
	if (CompletionFlagDescription) {
		if (CompletionFlagDescription->getInformationEntity() == UnknownIE) CompletionFlagDescription->setInformationEntity(ie);
	}

	VerificationFlag = (*list)[TagFromName(VerificationFlag)];
	if (VerificationFlag) {
		if (VerificationFlag->getInformationEntity() == UnknownIE) VerificationFlag->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	VerifyingObserverSequence = (*list)[TagFromName(VerifyingObserverSequence)];
	if (VerifyingObserverSequence) {
		if (VerifyingObserverSequence->getInformationEntity() == UnknownIE) VerifyingObserverSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	AuthorObserverSequence = (*list)[TagFromName(AuthorObserverSequence)];
	if (AuthorObserverSequence) {
		if (AuthorObserverSequence->getInformationEntity() == UnknownIE) AuthorObserverSequence->setInformationEntity(ie);
	}

	new Macro_IdentifiedPersonOrDeviceMacro(list,ie);
	ParticipantSequence = (*list)[TagFromName(ParticipantSequence)];
	if (ParticipantSequence) {
		if (ParticipantSequence->getInformationEntity() == UnknownIE) ParticipantSequence->setInformationEntity(ie);
	}

	new Macro_IdentifiedPersonOrDeviceMacro(list,ie);
	CustodialOrganizationSequence = (*list)[TagFromName(CustodialOrganizationSequence)];
	if (CustodialOrganizationSequence) {
		if (CustodialOrganizationSequence->getInformationEntity() == UnknownIE) CustodialOrganizationSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	PredecessorDocumentsSequence = (*list)[TagFromName(PredecessorDocumentsSequence)];
	if (PredecessorDocumentsSequence) {
		if (PredecessorDocumentsSequence->getInformationEntity() == UnknownIE) PredecessorDocumentsSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	IdenticalDocumentsSequence = (*list)[TagFromName(IdenticalDocumentsSequence)];
	if (IdenticalDocumentsSequence) {
		if (IdenticalDocumentsSequence->getInformationEntity() == UnknownIE) IdenticalDocumentsSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedRequestSequence = (*list)[TagFromName(ReferencedRequestSequence)];
	if (ReferencedRequestSequence) {
		if (ReferencedRequestSequence->getInformationEntity() == UnknownIE) ReferencedRequestSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	PerformedProcedureCodeSequence = (*list)[TagFromName(PerformedProcedureCodeSequence)];
	if (PerformedProcedureCodeSequence) {
		if (PerformedProcedureCodeSequence->getInformationEntity() == UnknownIE) PerformedProcedureCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	CurrentRequestedProcedureEvidenceSequence = (*list)[TagFromName(CurrentRequestedProcedureEvidenceSequence)];
	if (CurrentRequestedProcedureEvidenceSequence) {
		if (CurrentRequestedProcedureEvidenceSequence->getInformationEntity() == UnknownIE) CurrentRequestedProcedureEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	PertinentOtherEvidenceSequence = (*list)[TagFromName(PertinentOtherEvidenceSequence)];
	if (PertinentOtherEvidenceSequence) {
		if (PertinentOtherEvidenceSequence->getInformationEntity() == UnknownIE) PertinentOtherEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_SRDocumentContent::Module_SRDocumentContent(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SRDocumentContent";

	new Macro_DocumentContentMacro(list,ie);
	new Macro_DocumentRelationshipMacro(list,ie);
}

Module_KeyObjectDocumentSeries::Module_KeyObjectDocumentSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeyObjectDocumentSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
	if (SeriesInstanceUID) {
		if (SeriesInstanceUID->getInformationEntity() == UnknownIE) SeriesInstanceUID->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	SeriesDate = (*list)[TagFromName(SeriesDate)];
	if (SeriesDate) {
		if (SeriesDate->getInformationEntity() == UnknownIE) SeriesDate->setInformationEntity(ie);
	}

	SeriesTime = (*list)[TagFromName(SeriesTime)];
	if (SeriesTime) {
		if (SeriesTime->getInformationEntity() == UnknownIE) SeriesTime->setInformationEntity(ie);
	}

	ProtocolName = (*list)[TagFromName(ProtocolName)];
	if (ProtocolName) {
		if (ProtocolName->getInformationEntity() == UnknownIE) ProtocolName->setInformationEntity(ie);
	}

	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	SeriesDescriptionCodeSequence = (*list)[TagFromName(SeriesDescriptionCodeSequence)];
	if (SeriesDescriptionCodeSequence) {
		if (SeriesDescriptionCodeSequence->getInformationEntity() == UnknownIE) SeriesDescriptionCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_KeyObjectDocument::Module_KeyObjectDocument(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "KeyObjectDocument";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	ReferencedRequestSequence = (*list)[TagFromName(ReferencedRequestSequence)];
	if (ReferencedRequestSequence) {
		if (ReferencedRequestSequence->getInformationEntity() == UnknownIE) ReferencedRequestSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	CurrentRequestedProcedureEvidenceSequence = (*list)[TagFromName(CurrentRequestedProcedureEvidenceSequence)];
	if (CurrentRequestedProcedureEvidenceSequence) {
		if (CurrentRequestedProcedureEvidenceSequence->getInformationEntity() == UnknownIE) CurrentRequestedProcedureEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	IdenticalDocumentsSequence = (*list)[TagFromName(IdenticalDocumentsSequence)];
	if (IdenticalDocumentsSequence) {
		if (IdenticalDocumentsSequence->getInformationEntity() == UnknownIE) IdenticalDocumentsSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
}

Module_IHEXDSIManifestProfile::Module_IHEXDSIManifestProfile(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEXDSIManifestProfile";

	CurrentRequestedProcedureEvidenceSequence = (*list)[TagFromName(CurrentRequestedProcedureEvidenceSequence)];
	if (CurrentRequestedProcedureEvidenceSequence) {
		if (CurrentRequestedProcedureEvidenceSequence->getInformationEntity() == UnknownIE) CurrentRequestedProcedureEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro(list,ie);
}

Module_IHEREMProfile::Module_IHEREMProfile(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IHEREMProfile";

	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	PerformedProcedureCodeSequence = (*list)[TagFromName(PerformedProcedureCodeSequence)];
	if (PerformedProcedureCodeSequence) {
		if (PerformedProcedureCodeSequence->getInformationEntity() == UnknownIE) PerformedProcedureCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ReferencedRequestSequence = (*list)[TagFromName(ReferencedRequestSequence)];
	if (ReferencedRequestSequence) {
		if (ReferencedRequestSequence->getInformationEntity() == UnknownIE) ReferencedRequestSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_HL7v2HierarchicDesignatorMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	AdmittingDiagnosesDescription = (*list)[TagFromName(AdmittingDiagnosesDescription)];
	if (AdmittingDiagnosesDescription) {
		if (AdmittingDiagnosesDescription->getInformationEntity() == UnknownIE) AdmittingDiagnosesDescription->setInformationEntity(ie);
	}

	AdmittingDiagnosesCodeSequence = (*list)[TagFromName(AdmittingDiagnosesCodeSequence)];
	if (AdmittingDiagnosesCodeSequence) {
		if (AdmittingDiagnosesCodeSequence->getInformationEntity() == UnknownIE) AdmittingDiagnosesCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	PatientWeight = (*list)[TagFromName(PatientWeight)];
	if (PatientWeight) {
		if (PatientWeight->getInformationEntity() == UnknownIE) PatientWeight->setInformationEntity(ie);
	}

	PatientSize = (*list)[TagFromName(PatientSize)];
	if (PatientSize) {
		if (PatientSize->getInformationEntity() == UnknownIE) PatientSize->setInformationEntity(ie);
	}

	PatientAge = (*list)[TagFromName(PatientAge)];
	if (PatientAge) {
		if (PatientAge->getInformationEntity() == UnknownIE) PatientAge->setInformationEntity(ie);
	}

	PatientSex = (*list)[TagFromName(PatientSex)];
	if (PatientSex) {
		if (PatientSex->getInformationEntity() == UnknownIE) PatientSex->setInformationEntity(ie);
	}

}

Module_BitmapDisplayShutter::Module_BitmapDisplayShutter(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "BitmapDisplayShutter";

	ShutterShape = (*list)[TagFromName(ShutterShape)];
	if (ShutterShape) {
		if (ShutterShape->getInformationEntity() == UnknownIE) ShutterShape->setInformationEntity(ie);
	}

	ShutterOverlayGroup = (*list)[TagFromName(ShutterOverlayGroup)];
	if (ShutterOverlayGroup) {
		if (ShutterOverlayGroup->getInformationEntity() == UnknownIE) ShutterOverlayGroup->setInformationEntity(ie);
	}

	ShutterPresentationValue = (*list)[TagFromName(ShutterPresentationValue)];
	if (ShutterPresentationValue) {
		if (ShutterPresentationValue->getInformationEntity() == UnknownIE) ShutterPresentationValue->setInformationEntity(ie);
	}

	ShutterPresentationColorCIELabValue = (*list)[TagFromName(ShutterPresentationColorCIELabValue)];
	if (ShutterPresentationColorCIELabValue) {
		if (ShutterPresentationColorCIELabValue->getInformationEntity() == UnknownIE) ShutterPresentationColorCIELabValue->setInformationEntity(ie);
	}

}

Module_DisplayedArea::Module_DisplayedArea(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DisplayedArea";

	DisplayedAreaSelectionSequence = (*list)[TagFromName(DisplayedAreaSelectionSequence)];
	if (DisplayedAreaSelectionSequence) {
		if (DisplayedAreaSelectionSequence->getInformationEntity() == UnknownIE) DisplayedAreaSelectionSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_GraphicAnnotation::Module_GraphicAnnotation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GraphicAnnotation";

	GraphicAnnotationSequence = (*list)[TagFromName(GraphicAnnotationSequence)];
	if (GraphicAnnotationSequence) {
		if (GraphicAnnotationSequence->getInformationEntity() == UnknownIE) GraphicAnnotationSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_SpatialTransformation::Module_SpatialTransformation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SpatialTransformation";

	ImageRotation = (*list)[TagFromName(ImageRotation)];
	if (ImageRotation) {
		if (ImageRotation->getInformationEntity() == UnknownIE) ImageRotation->setInformationEntity(ie);
	}

	ImageHorizontalFlip = (*list)[TagFromName(ImageHorizontalFlip)];
	if (ImageHorizontalFlip) {
		if (ImageHorizontalFlip->getInformationEntity() == UnknownIE) ImageHorizontalFlip->setInformationEntity(ie);
	}

}

Module_GraphicLayer::Module_GraphicLayer(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "GraphicLayer";

	GraphicLayerSequence = (*list)[TagFromName(GraphicLayerSequence)];
	if (GraphicLayerSequence) {
		if (GraphicLayerSequence->getInformationEntity() == UnknownIE) GraphicLayerSequence->setInformationEntity(ie);
	}

}

Module_SoftcopyPresentationLUT::Module_SoftcopyPresentationLUT(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SoftcopyPresentationLUT";

	PresentationLUTSequence = (*list)[TagFromName(PresentationLUTSequence)];
	if (PresentationLUTSequence) {
		if (PresentationLUTSequence->getInformationEntity() == UnknownIE) PresentationLUTSequence->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

}

Module_OverlayActivation::Module_OverlayActivation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "OverlayActivation";

	OverlayActivationLayer = (*list)[TagFromName(OverlayActivationLayer)];
	if (OverlayActivationLayer) {
		if (OverlayActivationLayer->getInformationEntity() == UnknownIE) OverlayActivationLayer->setInformationEntity(ie);
	}

}

Module_SoftcopyVOILUT::Module_SoftcopyVOILUT(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "SoftcopyVOILUT";

	SoftcopyVOILUTSequence = (*list)[TagFromName(SoftcopyVOILUTSequence)];
	if (SoftcopyVOILUTSequence) {
		if (SoftcopyVOILUTSequence->getInformationEntity() == UnknownIE) SoftcopyVOILUTSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_VOILUTMacro(list,ie);
}

Module_PresentationSeries::Module_PresentationSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

}

Module_PresentationStateIdentification::Module_PresentationStateIdentification(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationStateIdentification";

	PresentationCreationDate = (*list)[TagFromName(PresentationCreationDate)];
	if (PresentationCreationDate) {
		if (PresentationCreationDate->getInformationEntity() == UnknownIE) PresentationCreationDate->setInformationEntity(ie);
	}

	PresentationCreationTime = (*list)[TagFromName(PresentationCreationTime)];
	if (PresentationCreationTime) {
		if (PresentationCreationTime->getInformationEntity() == UnknownIE) PresentationCreationTime->setInformationEntity(ie);
	}

	new Macro_ContentIdentificationMacro(list,ie);
}

Macro_PresentationStateRelationshipMacro::Macro_PresentationStateRelationshipMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationStateRelationshipMacro";

	ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
	if (ReferencedSeriesSequence) {
		if (ReferencedSeriesSequence->getInformationEntity() == UnknownIE) ReferencedSeriesSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_PresentationStateRelationship::Module_PresentationStateRelationship(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationStateRelationship";

	new Macro_PresentationStateRelationshipMacro(list,ie);
}

Module_PresentationStateShutter::Module_PresentationStateShutter(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationStateShutter";

	ShutterPresentationValue = (*list)[TagFromName(ShutterPresentationValue)];
	if (ShutterPresentationValue) {
		if (ShutterPresentationValue->getInformationEntity() == UnknownIE) ShutterPresentationValue->setInformationEntity(ie);
	}

	ShutterPresentationColorCIELabValue = (*list)[TagFromName(ShutterPresentationColorCIELabValue)];
	if (ShutterPresentationColorCIELabValue) {
		if (ShutterPresentationColorCIELabValue->getInformationEntity() == UnknownIE) ShutterPresentationColorCIELabValue->setInformationEntity(ie);
	}

}

Module_PresentationStateMask::Module_PresentationStateMask(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationStateMask";

	MaskSubtractionSequence = (*list)[TagFromName(MaskSubtractionSequence)];
	if (MaskSubtractionSequence) {
		if (MaskSubtractionSequence->getInformationEntity() == UnknownIE) MaskSubtractionSequence->setInformationEntity(ie);
	}

	RecommendedViewingMode = (*list)[TagFromName(RecommendedViewingMode)];
	if (RecommendedViewingMode) {
		if (RecommendedViewingMode->getInformationEntity() == UnknownIE) RecommendedViewingMode->setInformationEntity(ie);
	}

}

Module_PresentationStateBlending::Module_PresentationStateBlending(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PresentationStateBlending";

	BlendingSequence = (*list)[TagFromName(BlendingSequence)];
	if (BlendingSequence) {
		if (BlendingSequence->getInformationEntity() == UnknownIE) BlendingSequence->setInformationEntity(ie);
	}

	new Macro_PresentationStateRelationshipMacro(list,ie);
	new Macro_ModalityLUTMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_VOILUTMacro(list,ie);
	RelativeOpacity = (*list)[TagFromName(RelativeOpacity)];
	if (RelativeOpacity) {
		if (RelativeOpacity->getInformationEntity() == UnknownIE) RelativeOpacity->setInformationEntity(ie);
	}

	ReferencedSpatialRegistrationSequence = (*list)[TagFromName(ReferencedSpatialRegistrationSequence)];
	if (ReferencedSpatialRegistrationSequence) {
		if (ReferencedSpatialRegistrationSequence->getInformationEntity() == UnknownIE) ReferencedSpatialRegistrationSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
}

Module_ICCProfile::Module_ICCProfile(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ICCProfile";

	ICCProfile = (*list)[TagFromName(ICCProfile)];
	if (ICCProfile) {
		if (ICCProfile->getInformationEntity() == UnknownIE) ICCProfile->setInformationEntity(ie);
	}

	ColorSpace = (*list)[TagFromName(ColorSpace)];
	if (ColorSpace) {
		if (ColorSpace->getInformationEntity() == UnknownIE) ColorSpace->setInformationEntity(ie);
	}

}

Macro_HangingProtocolSelectorAttributeContextMacro::Macro_HangingProtocolSelectorAttributeContextMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HangingProtocolSelectorAttributeContextMacro";

	SelectorSequencePointer = (*list)[TagFromName(SelectorSequencePointer)];
	if (SelectorSequencePointer) {
		if (SelectorSequencePointer->getInformationEntity() == UnknownIE) SelectorSequencePointer->setInformationEntity(ie);
	}

	FunctionalGroupPointer = (*list)[TagFromName(FunctionalGroupPointer)];
	if (FunctionalGroupPointer) {
		if (FunctionalGroupPointer->getInformationEntity() == UnknownIE) FunctionalGroupPointer->setInformationEntity(ie);
	}

	SelectorSequencePointerPrivateCreator = (*list)[TagFromName(SelectorSequencePointerPrivateCreator)];
	if (SelectorSequencePointerPrivateCreator) {
		if (SelectorSequencePointerPrivateCreator->getInformationEntity() == UnknownIE) SelectorSequencePointerPrivateCreator->setInformationEntity(ie);
	}

	FunctionalGroupPrivateCreator = (*list)[TagFromName(FunctionalGroupPrivateCreator)];
	if (FunctionalGroupPrivateCreator) {
		if (FunctionalGroupPrivateCreator->getInformationEntity() == UnknownIE) FunctionalGroupPrivateCreator->setInformationEntity(ie);
	}

	SelectorAttributePrivateCreator = (*list)[TagFromName(SelectorAttributePrivateCreator)];
	if (SelectorAttributePrivateCreator) {
		if (SelectorAttributePrivateCreator->getInformationEntity() == UnknownIE) SelectorAttributePrivateCreator->setInformationEntity(ie);
	}

}

Macro_HangingProtocolSelectorAttributeValueMacro::Macro_HangingProtocolSelectorAttributeValueMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HangingProtocolSelectorAttributeValueMacro";

	SelectorATValue = (*list)[TagFromName(SelectorATValue)];
	if (SelectorATValue) {
		if (SelectorATValue->getInformationEntity() == UnknownIE) SelectorATValue->setInformationEntity(ie);
	}

	SelectorCSValue = (*list)[TagFromName(SelectorCSValue)];
	if (SelectorCSValue) {
		if (SelectorCSValue->getInformationEntity() == UnknownIE) SelectorCSValue->setInformationEntity(ie);
	}

	SelectorISValue = (*list)[TagFromName(SelectorISValue)];
	if (SelectorISValue) {
		if (SelectorISValue->getInformationEntity() == UnknownIE) SelectorISValue->setInformationEntity(ie);
	}

	SelectorLOValue = (*list)[TagFromName(SelectorLOValue)];
	if (SelectorLOValue) {
		if (SelectorLOValue->getInformationEntity() == UnknownIE) SelectorLOValue->setInformationEntity(ie);
	}

	SelectorLTValue = (*list)[TagFromName(SelectorLTValue)];
	if (SelectorLTValue) {
		if (SelectorLTValue->getInformationEntity() == UnknownIE) SelectorLTValue->setInformationEntity(ie);
	}

	SelectorPNValue = (*list)[TagFromName(SelectorPNValue)];
	if (SelectorPNValue) {
		if (SelectorPNValue->getInformationEntity() == UnknownIE) SelectorPNValue->setInformationEntity(ie);
	}

	SelectorSHValue = (*list)[TagFromName(SelectorSHValue)];
	if (SelectorSHValue) {
		if (SelectorSHValue->getInformationEntity() == UnknownIE) SelectorSHValue->setInformationEntity(ie);
	}

	SelectorSTValue = (*list)[TagFromName(SelectorSTValue)];
	if (SelectorSTValue) {
		if (SelectorSTValue->getInformationEntity() == UnknownIE) SelectorSTValue->setInformationEntity(ie);
	}

	SelectorUTValue = (*list)[TagFromName(SelectorUTValue)];
	if (SelectorUTValue) {
		if (SelectorUTValue->getInformationEntity() == UnknownIE) SelectorUTValue->setInformationEntity(ie);
	}

	SelectorDSValue = (*list)[TagFromName(SelectorDSValue)];
	if (SelectorDSValue) {
		if (SelectorDSValue->getInformationEntity() == UnknownIE) SelectorDSValue->setInformationEntity(ie);
	}

	SelectorFDValue = (*list)[TagFromName(SelectorFDValue)];
	if (SelectorFDValue) {
		if (SelectorFDValue->getInformationEntity() == UnknownIE) SelectorFDValue->setInformationEntity(ie);
	}

	SelectorFLValue = (*list)[TagFromName(SelectorFLValue)];
	if (SelectorFLValue) {
		if (SelectorFLValue->getInformationEntity() == UnknownIE) SelectorFLValue->setInformationEntity(ie);
	}

	SelectorULValue = (*list)[TagFromName(SelectorULValue)];
	if (SelectorULValue) {
		if (SelectorULValue->getInformationEntity() == UnknownIE) SelectorULValue->setInformationEntity(ie);
	}

	SelectorUSValue = (*list)[TagFromName(SelectorUSValue)];
	if (SelectorUSValue) {
		if (SelectorUSValue->getInformationEntity() == UnknownIE) SelectorUSValue->setInformationEntity(ie);
	}

	SelectorSLValue = (*list)[TagFromName(SelectorSLValue)];
	if (SelectorSLValue) {
		if (SelectorSLValue->getInformationEntity() == UnknownIE) SelectorSLValue->setInformationEntity(ie);
	}

	SelectorSSValue = (*list)[TagFromName(SelectorSSValue)];
	if (SelectorSSValue) {
		if (SelectorSSValue->getInformationEntity() == UnknownIE) SelectorSSValue->setInformationEntity(ie);
	}

	SelectorCodeSequenceValue = (*list)[TagFromName(SelectorCodeSequenceValue)];
	if (SelectorCodeSequenceValue) {
		if (SelectorCodeSequenceValue->getInformationEntity() == UnknownIE) SelectorCodeSequenceValue->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_HangingProtocolDefinition::Module_HangingProtocolDefinition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HangingProtocolDefinition";

	HangingProtocolName = (*list)[TagFromName(HangingProtocolName)];
	if (HangingProtocolName) {
		if (HangingProtocolName->getInformationEntity() == UnknownIE) HangingProtocolName->setInformationEntity(ie);
	}

	HangingProtocolDescription = (*list)[TagFromName(HangingProtocolDescription)];
	if (HangingProtocolDescription) {
		if (HangingProtocolDescription->getInformationEntity() == UnknownIE) HangingProtocolDescription->setInformationEntity(ie);
	}

	HangingProtocolLevel = (*list)[TagFromName(HangingProtocolLevel)];
	if (HangingProtocolLevel) {
		if (HangingProtocolLevel->getInformationEntity() == UnknownIE) HangingProtocolLevel->setInformationEntity(ie);
	}

	HangingProtocolCreator = (*list)[TagFromName(HangingProtocolCreator)];
	if (HangingProtocolCreator) {
		if (HangingProtocolCreator->getInformationEntity() == UnknownIE) HangingProtocolCreator->setInformationEntity(ie);
	}

	HangingProtocolCreationDateTime = (*list)[TagFromName(HangingProtocolCreationDateTime)];
	if (HangingProtocolCreationDateTime) {
		if (HangingProtocolCreationDateTime->getInformationEntity() == UnknownIE) HangingProtocolCreationDateTime->setInformationEntity(ie);
	}

	HangingProtocolDefinitionSequence = (*list)[TagFromName(HangingProtocolDefinitionSequence)];
	if (HangingProtocolDefinitionSequence) {
		if (HangingProtocolDefinitionSequence->getInformationEntity() == UnknownIE) HangingProtocolDefinitionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	NumberOfPriorsReferenced = (*list)[TagFromName(NumberOfPriorsReferenced)];
	if (NumberOfPriorsReferenced) {
		if (NumberOfPriorsReferenced->getInformationEntity() == UnknownIE) NumberOfPriorsReferenced->setInformationEntity(ie);
	}

	ImageSetsSequence = (*list)[TagFromName(ImageSetsSequence)];
	if (ImageSetsSequence) {
		if (ImageSetsSequence->getInformationEntity() == UnknownIE) ImageSetsSequence->setInformationEntity(ie);
	}

	new Macro_HangingProtocolSelectorAttributeContextMacro(list,ie);
	new Macro_HangingProtocolSelectorAttributeValueMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	HangingProtocolUserIdentificationCodeSequence = (*list)[TagFromName(HangingProtocolUserIdentificationCodeSequence)];
	if (HangingProtocolUserIdentificationCodeSequence) {
		if (HangingProtocolUserIdentificationCodeSequence->getInformationEntity() == UnknownIE) HangingProtocolUserIdentificationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	HangingProtocolUserGroupName = (*list)[TagFromName(HangingProtocolUserGroupName)];
	if (HangingProtocolUserGroupName) {
		if (HangingProtocolUserGroupName->getInformationEntity() == UnknownIE) HangingProtocolUserGroupName->setInformationEntity(ie);
	}

	SourceHangingProtocolSequence = (*list)[TagFromName(SourceHangingProtocolSequence)];
	if (SourceHangingProtocolSequence) {
		if (SourceHangingProtocolSequence->getInformationEntity() == UnknownIE) SourceHangingProtocolSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_HangingProtocolEnvironment::Module_HangingProtocolEnvironment(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HangingProtocolEnvironment";

	NumberOfScreens = (*list)[TagFromName(NumberOfScreens)];
	if (NumberOfScreens) {
		if (NumberOfScreens->getInformationEntity() == UnknownIE) NumberOfScreens->setInformationEntity(ie);
	}

	NominalScreenDefinitionSequence = (*list)[TagFromName(NominalScreenDefinitionSequence)];
	if (NominalScreenDefinitionSequence) {
		if (NominalScreenDefinitionSequence->getInformationEntity() == UnknownIE) NominalScreenDefinitionSequence->setInformationEntity(ie);
	}

	new Macro_ScreenSpecificationsMacro(list,ie);
}

Macro_ScreenSpecificationsMacro::Macro_ScreenSpecificationsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ScreenSpecificationsMacro";

	NumberOfVerticalPixels = (*list)[TagFromName(NumberOfVerticalPixels)];
	if (NumberOfVerticalPixels) {
		if (NumberOfVerticalPixels->getInformationEntity() == UnknownIE) NumberOfVerticalPixels->setInformationEntity(ie);
	}

	NumberOfHorizontalPixels = (*list)[TagFromName(NumberOfHorizontalPixels)];
	if (NumberOfHorizontalPixels) {
		if (NumberOfHorizontalPixels->getInformationEntity() == UnknownIE) NumberOfHorizontalPixels->setInformationEntity(ie);
	}

	DisplayEnvironmentSpatialPosition = (*list)[TagFromName(DisplayEnvironmentSpatialPosition)];
	if (DisplayEnvironmentSpatialPosition) {
		if (DisplayEnvironmentSpatialPosition->getInformationEntity() == UnknownIE) DisplayEnvironmentSpatialPosition->setInformationEntity(ie);
	}

	ScreenMinimumGrayscaleBitDepth = (*list)[TagFromName(ScreenMinimumGrayscaleBitDepth)];
	if (ScreenMinimumGrayscaleBitDepth) {
		if (ScreenMinimumGrayscaleBitDepth->getInformationEntity() == UnknownIE) ScreenMinimumGrayscaleBitDepth->setInformationEntity(ie);
	}

	ScreenMinimumColorBitDepth = (*list)[TagFromName(ScreenMinimumColorBitDepth)];
	if (ScreenMinimumColorBitDepth) {
		if (ScreenMinimumColorBitDepth->getInformationEntity() == UnknownIE) ScreenMinimumColorBitDepth->setInformationEntity(ie);
	}

	ApplicationMaximumRepaintTime = (*list)[TagFromName(ApplicationMaximumRepaintTime)];
	if (ApplicationMaximumRepaintTime) {
		if (ApplicationMaximumRepaintTime->getInformationEntity() == UnknownIE) ApplicationMaximumRepaintTime->setInformationEntity(ie);
	}

}

Module_HangingProtocolDisplay::Module_HangingProtocolDisplay(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "HangingProtocolDisplay";

	DisplaySetsSequence = (*list)[TagFromName(DisplaySetsSequence)];
	if (DisplaySetsSequence) {
		if (DisplaySetsSequence->getInformationEntity() == UnknownIE) DisplaySetsSequence->setInformationEntity(ie);
	}

	new Macro_HangingProtocolSelectorAttributeContextMacro(list,ie);
	new Macro_HangingProtocolSelectorAttributeValueMacro(list,ie);
	new Macro_HangingProtocolSelectorAttributeContextMacro(list,ie);
	PartialDataDisplayHandling = (*list)[TagFromName(PartialDataDisplayHandling)];
	if (PartialDataDisplayHandling) {
		if (PartialDataDisplayHandling->getInformationEntity() == UnknownIE) PartialDataDisplayHandling->setInformationEntity(ie);
	}

	SynchronizedScrollingSequence = (*list)[TagFromName(SynchronizedScrollingSequence)];
	if (SynchronizedScrollingSequence) {
		if (SynchronizedScrollingSequence->getInformationEntity() == UnknownIE) SynchronizedScrollingSequence->setInformationEntity(ie);
	}

	NavigationIndicatorSequence = (*list)[TagFromName(NavigationIndicatorSequence)];
	if (NavigationIndicatorSequence) {
		if (NavigationIndicatorSequence->getInformationEntity() == UnknownIE) NavigationIndicatorSequence->setInformationEntity(ie);
	}

}

Module_ColorPaletteDefinition::Module_ColorPaletteDefinition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ColorPaletteDefinition";

	new Macro_ContentIdentificationMacro(list,ie);
}

Module_StructuredDisplay::Module_StructuredDisplay(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StructuredDisplay";

	new Macro_ContentIdentificationMacro(list,ie);
	PresentationCreationDate = (*list)[TagFromName(PresentationCreationDate)];
	if (PresentationCreationDate) {
		if (PresentationCreationDate->getInformationEntity() == UnknownIE) PresentationCreationDate->setInformationEntity(ie);
	}

	PresentationCreationTime = (*list)[TagFromName(PresentationCreationTime)];
	if (PresentationCreationTime) {
		if (PresentationCreationTime->getInformationEntity() == UnknownIE) PresentationCreationTime->setInformationEntity(ie);
	}

	NumberOfScreens = (*list)[TagFromName(NumberOfScreens)];
	if (NumberOfScreens) {
		if (NumberOfScreens->getInformationEntity() == UnknownIE) NumberOfScreens->setInformationEntity(ie);
	}

	NominalScreenDefinitionSequence = (*list)[TagFromName(NominalScreenDefinitionSequence)];
	if (NominalScreenDefinitionSequence) {
		if (NominalScreenDefinitionSequence->getInformationEntity() == UnknownIE) NominalScreenDefinitionSequence->setInformationEntity(ie);
	}

	new Macro_ScreenSpecificationsMacro(list,ie);
	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	StructuredDisplayBackgroundCIELabValue = (*list)[TagFromName(StructuredDisplayBackgroundCIELabValue)];
	if (StructuredDisplayBackgroundCIELabValue) {
		if (StructuredDisplayBackgroundCIELabValue->getInformationEntity() == UnknownIE) StructuredDisplayBackgroundCIELabValue->setInformationEntity(ie);
	}

	EmptyImageBoxCIELabValue = (*list)[TagFromName(EmptyImageBoxCIELabValue)];
	if (EmptyImageBoxCIELabValue) {
		if (EmptyImageBoxCIELabValue->getInformationEntity() == UnknownIE) EmptyImageBoxCIELabValue->setInformationEntity(ie);
	}

	HangingProtocolName = (*list)[TagFromName(HangingProtocolName)];
	if (HangingProtocolName) {
		if (HangingProtocolName->getInformationEntity() == UnknownIE) HangingProtocolName->setInformationEntity(ie);
	}

	HangingProtocolCreator = (*list)[TagFromName(HangingProtocolCreator)];
	if (HangingProtocolCreator) {
		if (HangingProtocolCreator->getInformationEntity() == UnknownIE) HangingProtocolCreator->setInformationEntity(ie);
	}

}

Module_StructuredDisplayImageBox::Module_StructuredDisplayImageBox(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StructuredDisplayImageBox";

	StructuredDisplayImageBoxSequence = (*list)[TagFromName(StructuredDisplayImageBoxSequence)];
	if (StructuredDisplayImageBoxSequence) {
		if (StructuredDisplayImageBoxSequence->getInformationEntity() == UnknownIE) StructuredDisplayImageBoxSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_SOPInstanceReferenceMacro(list,ie);
	ImageBoxSynchronizationSequence = (*list)[TagFromName(ImageBoxSynchronizationSequence)];
	if (ImageBoxSynchronizationSequence) {
		if (ImageBoxSynchronizationSequence->getInformationEntity() == UnknownIE) ImageBoxSynchronizationSequence->setInformationEntity(ie);
	}

}

Module_StructuredDisplayAnnotation::Module_StructuredDisplayAnnotation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "StructuredDisplayAnnotation";

	StructuredDisplayTextBoxSequence = (*list)[TagFromName(StructuredDisplayTextBoxSequence)];
	if (StructuredDisplayTextBoxSequence) {
		if (StructuredDisplayTextBoxSequence->getInformationEntity() == UnknownIE) StructuredDisplayTextBoxSequence->setInformationEntity(ie);
	}

}

Macro_CommonCTMRImageDescriptionImageLevelMacro::Macro_CommonCTMRImageDescriptionImageLevelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CommonCTMRImageDescriptionImageLevelMacro";

	PixelPresentation = (*list)[TagFromName(PixelPresentation)];
	if (PixelPresentation) {
		if (PixelPresentation->getInformationEntity() == UnknownIE) PixelPresentation->setInformationEntity(ie);
	}

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
	if (VolumeBasedCalculationTechnique) {
		if (VolumeBasedCalculationTechnique->getInformationEntity() == UnknownIE) VolumeBasedCalculationTechnique->setInformationEntity(ie);
	}

}

Macro_CommonCTMRImageDescriptionFrameLevelMacro::Macro_CommonCTMRImageDescriptionFrameLevelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CommonCTMRImageDescriptionFrameLevelMacro";

	PixelPresentation = (*list)[TagFromName(PixelPresentation)];
	if (PixelPresentation) {
		if (PixelPresentation->getInformationEntity() == UnknownIE) PixelPresentation->setInformationEntity(ie);
	}

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
	if (VolumeBasedCalculationTechnique) {
		if (VolumeBasedCalculationTechnique->getInformationEntity() == UnknownIE) VolumeBasedCalculationTechnique->setInformationEntity(ie);
	}

}

Macro_MRImageDescriptionImageLevelMacro::Macro_MRImageDescriptionImageLevelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRImageDescriptionImageLevelMacro";

	ComplexImageComponent = (*list)[TagFromName(ComplexImageComponent)];
	if (ComplexImageComponent) {
		if (ComplexImageComponent->getInformationEntity() == UnknownIE) ComplexImageComponent->setInformationEntity(ie);
	}

	AcquisitionContrast = (*list)[TagFromName(AcquisitionContrast)];
	if (AcquisitionContrast) {
		if (AcquisitionContrast->getInformationEntity() == UnknownIE) AcquisitionContrast->setInformationEntity(ie);
	}

}

Macro_MRImageDescriptionFrameLevelMacro::Macro_MRImageDescriptionFrameLevelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRImageDescriptionFrameLevelMacro";

	ComplexImageComponent = (*list)[TagFromName(ComplexImageComponent)];
	if (ComplexImageComponent) {
		if (ComplexImageComponent->getInformationEntity() == UnknownIE) ComplexImageComponent->setInformationEntity(ie);
	}

	AcquisitionContrast = (*list)[TagFromName(AcquisitionContrast)];
	if (AcquisitionContrast) {
		if (AcquisitionContrast->getInformationEntity() == UnknownIE) AcquisitionContrast->setInformationEntity(ie);
	}

}

Macro_MRSpectroscopyDescriptionImageLevelMacro::Macro_MRSpectroscopyDescriptionImageLevelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopyDescriptionImageLevelMacro";

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
	if (VolumeBasedCalculationTechnique) {
		if (VolumeBasedCalculationTechnique->getInformationEntity() == UnknownIE) VolumeBasedCalculationTechnique->setInformationEntity(ie);
	}

	ComplexImageComponent = (*list)[TagFromName(ComplexImageComponent)];
	if (ComplexImageComponent) {
		if (ComplexImageComponent->getInformationEntity() == UnknownIE) ComplexImageComponent->setInformationEntity(ie);
	}

	AcquisitionContrast = (*list)[TagFromName(AcquisitionContrast)];
	if (AcquisitionContrast) {
		if (AcquisitionContrast->getInformationEntity() == UnknownIE) AcquisitionContrast->setInformationEntity(ie);
	}

}

Macro_MRSpectroscopyDescriptionFrameLevelMacro::Macro_MRSpectroscopyDescriptionFrameLevelMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopyDescriptionFrameLevelMacro";

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
	if (VolumeBasedCalculationTechnique) {
		if (VolumeBasedCalculationTechnique->getInformationEntity() == UnknownIE) VolumeBasedCalculationTechnique->setInformationEntity(ie);
	}

	ComplexImageComponent = (*list)[TagFromName(ComplexImageComponent)];
	if (ComplexImageComponent) {
		if (ComplexImageComponent->getInformationEntity() == UnknownIE) ComplexImageComponent->setInformationEntity(ie);
	}

	AcquisitionContrast = (*list)[TagFromName(AcquisitionContrast)];
	if (AcquisitionContrast) {
		if (AcquisitionContrast->getInformationEntity() == UnknownIE) AcquisitionContrast->setInformationEntity(ie);
	}

}

Macro_MRImageFrameTypeMacro::Macro_MRImageFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRImageFrameTypeMacro";

	MRImageFrameTypeSequence = (*list)[TagFromName(MRImageFrameTypeSequence)];
	if (MRImageFrameTypeSequence) {
		if (MRImageFrameTypeSequence->getInformationEntity() == UnknownIE) MRImageFrameTypeSequence->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionFrameLevelMacro(list,ie);
	new Macro_MRImageDescriptionFrameLevelMacro(list,ie);
}

Macro_MRTimingAndRelatedParametersMacro::Macro_MRTimingAndRelatedParametersMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRTimingAndRelatedParametersMacro";

	MRTimingAndRelatedParametersSequence = (*list)[TagFromName(MRTimingAndRelatedParametersSequence)];
	if (MRTimingAndRelatedParametersSequence) {
		if (MRTimingAndRelatedParametersSequence->getInformationEntity() == UnknownIE) MRTimingAndRelatedParametersSequence->setInformationEntity(ie);
	}

}

Macro_MRFOVGeometryMacro::Macro_MRFOVGeometryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRFOVGeometryMacro";

	MRFOVGeometrySequence = (*list)[TagFromName(MRFOVGeometrySequence)];
	if (MRFOVGeometrySequence) {
		if (MRFOVGeometrySequence->getInformationEntity() == UnknownIE) MRFOVGeometrySequence->setInformationEntity(ie);
	}

}

Macro_MREchoMacro::Macro_MREchoMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MREchoMacro";

	MREchoSequence = (*list)[TagFromName(MREchoSequence)];
	if (MREchoSequence) {
		if (MREchoSequence->getInformationEntity() == UnknownIE) MREchoSequence->setInformationEntity(ie);
	}

}

Macro_MRModifierMacro::Macro_MRModifierMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRModifierMacro";

	MRModifierSequence = (*list)[TagFromName(MRModifierSequence)];
	if (MRModifierSequence) {
		if (MRModifierSequence->getInformationEntity() == UnknownIE) MRModifierSequence->setInformationEntity(ie);
	}

}

Macro_MRImagingModifierMacro::Macro_MRImagingModifierMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRImagingModifierMacro";

	MRImagingModifierSequence = (*list)[TagFromName(MRImagingModifierSequence)];
	if (MRImagingModifierSequence) {
		if (MRImagingModifierSequence->getInformationEntity() == UnknownIE) MRImagingModifierSequence->setInformationEntity(ie);
	}

}

Macro_MRReceiveCoilMacro::Macro_MRReceiveCoilMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRReceiveCoilMacro";

	MRReceiveCoilSequence = (*list)[TagFromName(MRReceiveCoilSequence)];
	if (MRReceiveCoilSequence) {
		if (MRReceiveCoilSequence->getInformationEntity() == UnknownIE) MRReceiveCoilSequence->setInformationEntity(ie);
	}

}

Macro_MRTransmitCoilMacro::Macro_MRTransmitCoilMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRTransmitCoilMacro";

	MRTransmitCoilSequence = (*list)[TagFromName(MRTransmitCoilSequence)];
	if (MRTransmitCoilSequence) {
		if (MRTransmitCoilSequence->getInformationEntity() == UnknownIE) MRTransmitCoilSequence->setInformationEntity(ie);
	}

}

Macro_MRDiffusionMacro::Macro_MRDiffusionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRDiffusionMacro";

	MRDiffusionSequence = (*list)[TagFromName(MRDiffusionSequence)];
	if (MRDiffusionSequence) {
		if (MRDiffusionSequence->getInformationEntity() == UnknownIE) MRDiffusionSequence->setInformationEntity(ie);
	}

}

Macro_MRAveragesMacro::Macro_MRAveragesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRAveragesMacro";

	MRAveragesSequence = (*list)[TagFromName(MRAveragesSequence)];
	if (MRAveragesSequence) {
		if (MRAveragesSequence->getInformationEntity() == UnknownIE) MRAveragesSequence->setInformationEntity(ie);
	}

}

Macro_MRSpatialSaturationMacro::Macro_MRSpatialSaturationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpatialSaturationMacro";

	MRSpatialSaturationSequence = (*list)[TagFromName(MRSpatialSaturationSequence)];
	if (MRSpatialSaturationSequence) {
		if (MRSpatialSaturationSequence->getInformationEntity() == UnknownIE) MRSpatialSaturationSequence->setInformationEntity(ie);
	}

}

Macro_MRMetaboliteMapMacro::Macro_MRMetaboliteMapMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRMetaboliteMapMacro";

	MRMetaboliteMapSequence = (*list)[TagFromName(MRMetaboliteMapSequence)];
	if (MRMetaboliteMapSequence) {
		if (MRMetaboliteMapSequence->getInformationEntity() == UnknownIE) MRMetaboliteMapSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_MRVelocityEncodingMacro::Macro_MRVelocityEncodingMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRVelocityEncodingMacro";

	MRVelocityEncodingSequence = (*list)[TagFromName(MRVelocityEncodingSequence)];
	if (MRVelocityEncodingSequence) {
		if (MRVelocityEncodingSequence->getInformationEntity() == UnknownIE) MRVelocityEncodingSequence->setInformationEntity(ie);
	}

}

Macro_MRArterialSpinLabelingMacro::Macro_MRArterialSpinLabelingMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRArterialSpinLabelingMacro";

	MRArterialSpinLabelingSequence = (*list)[TagFromName(MRArterialSpinLabelingSequence)];
	if (MRArterialSpinLabelingSequence) {
		if (MRArterialSpinLabelingSequence->getInformationEntity() == UnknownIE) MRArterialSpinLabelingSequence->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
}

Macro_MRImageAndSpectroscopyInstanceMacro::Macro_MRImageAndSpectroscopyInstanceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRImageAndSpectroscopyInstanceMacro";

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	ReferencedRawDataSequence = (*list)[TagFromName(ReferencedRawDataSequence)];
	if (ReferencedRawDataSequence) {
		if (ReferencedRawDataSequence->getInformationEntity() == UnknownIE) ReferencedRawDataSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedWaveformSequence = (*list)[TagFromName(ReferencedWaveformSequence)];
	if (ReferencedWaveformSequence) {
		if (ReferencedWaveformSequence->getInformationEntity() == UnknownIE) ReferencedWaveformSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedImageEvidenceSequence = (*list)[TagFromName(ReferencedImageEvidenceSequence)];
	if (ReferencedImageEvidenceSequence) {
		if (ReferencedImageEvidenceSequence->getInformationEntity() == UnknownIE) ReferencedImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	SourceImageEvidenceSequence = (*list)[TagFromName(SourceImageEvidenceSequence)];
	if (SourceImageEvidenceSequence) {
		if (SourceImageEvidenceSequence->getInformationEntity() == UnknownIE) SourceImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedPresentationStateSequence = (*list)[TagFromName(ReferencedPresentationStateSequence)];
	if (ReferencedPresentationStateSequence) {
		if (ReferencedPresentationStateSequence->getInformationEntity() == UnknownIE) ReferencedPresentationStateSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	ResonantNucleus = (*list)[TagFromName(ResonantNucleus)];
	if (ResonantNucleus) {
		if (ResonantNucleus->getInformationEntity() == UnknownIE) ResonantNucleus->setInformationEntity(ie);
	}

	KSpaceFiltering = (*list)[TagFromName(KSpaceFiltering)];
	if (KSpaceFiltering) {
		if (KSpaceFiltering->getInformationEntity() == UnknownIE) KSpaceFiltering->setInformationEntity(ie);
	}

	MagneticFieldStrength = (*list)[TagFromName(MagneticFieldStrength)];
	if (MagneticFieldStrength) {
		if (MagneticFieldStrength->getInformationEntity() == UnknownIE) MagneticFieldStrength->setInformationEntity(ie);
	}

	ApplicableSafetyStandardAgency = (*list)[TagFromName(ApplicableSafetyStandardAgency)];
	if (ApplicableSafetyStandardAgency) {
		if (ApplicableSafetyStandardAgency->getInformationEntity() == UnknownIE) ApplicableSafetyStandardAgency->setInformationEntity(ie);
	}

	ApplicableSafetyStandardDescription = (*list)[TagFromName(ApplicableSafetyStandardDescription)];
	if (ApplicableSafetyStandardDescription) {
		if (ApplicableSafetyStandardDescription->getInformationEntity() == UnknownIE) ApplicableSafetyStandardDescription->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

	B1rms = (*list)[TagFromName(B1rms)];
	if (B1rms) {
		if (B1rms->getInformationEntity() == UnknownIE) B1rms->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForEnhancedMRImage::Module_MultiFrameFunctionalGroupsForEnhancedMRImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForEnhancedMRImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRImageFrameTypeMacro(list,ie);
	new Macro_MRTimingAndRelatedParametersMacro(list,ie);
	new Macro_MRFOVGeometryMacro(list,ie);
	new Macro_MREchoMacro(list,ie);
	new Macro_MRModifierMacro(list,ie);
	new Macro_MRImagingModifierMacro(list,ie);
	new Macro_MRReceiveCoilMacro(list,ie);
	new Macro_MRTransmitCoilMacro(list,ie);
	new Macro_MRDiffusionMacro(list,ie);
	new Macro_MRAveragesMacro(list,ie);
	new Macro_MRSpatialSaturationMacro(list,ie);
	new Macro_MRMetaboliteMapMacro(list,ie);
	new Macro_MRVelocityEncodingMacro(list,ie);
	new Macro_MRArterialSpinLabelingMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRImageFrameTypeMacro(list,ie);
	new Macro_MRTimingAndRelatedParametersMacro(list,ie);
	new Macro_MRFOVGeometryMacro(list,ie);
	new Macro_MREchoMacro(list,ie);
	new Macro_MRModifierMacro(list,ie);
	new Macro_MRImagingModifierMacro(list,ie);
	new Macro_MRReceiveCoilMacro(list,ie);
	new Macro_MRTransmitCoilMacro(list,ie);
	new Macro_MRDiffusionMacro(list,ie);
	new Macro_MRAveragesMacro(list,ie);
	new Macro_MRSpatialSaturationMacro(list,ie);
	new Macro_MRMetaboliteMapMacro(list,ie);
	new Macro_MRVelocityEncodingMacro(list,ie);
	new Macro_MRArterialSpinLabelingMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
}

Macro_MRSpectroscopyFrameTypeMacro::Macro_MRSpectroscopyFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopyFrameTypeMacro";

	MRSpectroscopyFrameTypeSequence = (*list)[TagFromName(MRSpectroscopyFrameTypeSequence)];
	if (MRSpectroscopyFrameTypeSequence) {
		if (MRSpectroscopyFrameTypeSequence->getInformationEntity() == UnknownIE) MRSpectroscopyFrameTypeSequence->setInformationEntity(ie);
	}

	new Macro_MRSpectroscopyDescriptionFrameLevelMacro(list,ie);
}

Macro_MRSpectroscopyFOVGeometryMacro::Macro_MRSpectroscopyFOVGeometryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopyFOVGeometryMacro";

	MRSpectroscopyFOVGeometrySequence = (*list)[TagFromName(MRSpectroscopyFOVGeometrySequence)];
	if (MRSpectroscopyFOVGeometrySequence) {
		if (MRSpectroscopyFOVGeometrySequence->getInformationEntity() == UnknownIE) MRSpectroscopyFOVGeometrySequence->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForMRSpectroscopy::Module_MultiFrameFunctionalGroupsForMRSpectroscopy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForMRSpectroscopy";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRSpectroscopyFrameTypeMacro(list,ie);
	new Macro_MRTimingAndRelatedParametersMacro(list,ie);
	new Macro_MRSpectroscopyFOVGeometryMacro(list,ie);
	new Macro_MREchoMacro(list,ie);
	new Macro_MRModifierMacro(list,ie);
	new Macro_MRReceiveCoilMacro(list,ie);
	new Macro_MRTransmitCoilMacro(list,ie);
	new Macro_MRDiffusionMacro(list,ie);
	new Macro_MRAveragesMacro(list,ie);
	new Macro_MRSpatialSaturationMacro(list,ie);
	new Macro_MRVelocityEncodingMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRSpectroscopyFrameTypeMacro(list,ie);
	new Macro_MRTimingAndRelatedParametersMacro(list,ie);
	new Macro_MRSpectroscopyFOVGeometryMacro(list,ie);
	new Macro_MREchoMacro(list,ie);
	new Macro_MRModifierMacro(list,ie);
	new Macro_MRReceiveCoilMacro(list,ie);
	new Macro_MRTransmitCoilMacro(list,ie);
	new Macro_MRDiffusionMacro(list,ie);
	new Macro_MRAveragesMacro(list,ie);
	new Macro_MRSpatialSaturationMacro(list,ie);
	new Macro_MRVelocityEncodingMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
}

Module_EnhancedMRImage::Module_EnhancedMRImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedMRImage";

	new Macro_MRImageAndSpectroscopyInstanceMacro(list,ie);
	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionImageLevelMacro(list,ie);
	new Macro_MRImageDescriptionImageLevelMacro(list,ie);
	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PlanarConfiguration = (*list)[TagFromName(PlanarConfiguration)];
	if (PlanarConfiguration) {
		if (PlanarConfiguration->getInformationEntity() == UnknownIE) PlanarConfiguration->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
}

Module_MRPulseSequence::Module_MRPulseSequence(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRPulseSequence";

	PulseSequenceName = (*list)[TagFromName(PulseSequenceName)];
	if (PulseSequenceName) {
		if (PulseSequenceName->getInformationEntity() == UnknownIE) PulseSequenceName->setInformationEntity(ie);
	}

	MRAcquisitionType = (*list)[TagFromName(MRAcquisitionType)];
	if (MRAcquisitionType) {
		if (MRAcquisitionType->getInformationEntity() == UnknownIE) MRAcquisitionType->setInformationEntity(ie);
	}

	EchoPulseSequence = (*list)[TagFromName(EchoPulseSequence)];
	if (EchoPulseSequence) {
		if (EchoPulseSequence->getInformationEntity() == UnknownIE) EchoPulseSequence->setInformationEntity(ie);
	}

	MultipleSpinEcho = (*list)[TagFromName(MultipleSpinEcho)];
	if (MultipleSpinEcho) {
		if (MultipleSpinEcho->getInformationEntity() == UnknownIE) MultipleSpinEcho->setInformationEntity(ie);
	}

	MultiPlanarExcitation = (*list)[TagFromName(MultiPlanarExcitation)];
	if (MultiPlanarExcitation) {
		if (MultiPlanarExcitation->getInformationEntity() == UnknownIE) MultiPlanarExcitation->setInformationEntity(ie);
	}

	PhaseContrast = (*list)[TagFromName(PhaseContrast)];
	if (PhaseContrast) {
		if (PhaseContrast->getInformationEntity() == UnknownIE) PhaseContrast->setInformationEntity(ie);
	}

	VelocityEncodingAcquisitionSequence = (*list)[TagFromName(VelocityEncodingAcquisitionSequence)];
	if (VelocityEncodingAcquisitionSequence) {
		if (VelocityEncodingAcquisitionSequence->getInformationEntity() == UnknownIE) VelocityEncodingAcquisitionSequence->setInformationEntity(ie);
	}

	TimeOfFlightContrast = (*list)[TagFromName(TimeOfFlightContrast)];
	if (TimeOfFlightContrast) {
		if (TimeOfFlightContrast->getInformationEntity() == UnknownIE) TimeOfFlightContrast->setInformationEntity(ie);
	}

	ArterialSpinLabelingContrast = (*list)[TagFromName(ArterialSpinLabelingContrast)];
	if (ArterialSpinLabelingContrast) {
		if (ArterialSpinLabelingContrast->getInformationEntity() == UnknownIE) ArterialSpinLabelingContrast->setInformationEntity(ie);
	}

	SteadyStatePulseSequence = (*list)[TagFromName(SteadyStatePulseSequence)];
	if (SteadyStatePulseSequence) {
		if (SteadyStatePulseSequence->getInformationEntity() == UnknownIE) SteadyStatePulseSequence->setInformationEntity(ie);
	}

	EchoPlanarPulseSequence = (*list)[TagFromName(EchoPlanarPulseSequence)];
	if (EchoPlanarPulseSequence) {
		if (EchoPlanarPulseSequence->getInformationEntity() == UnknownIE) EchoPlanarPulseSequence->setInformationEntity(ie);
	}

	SaturationRecovery = (*list)[TagFromName(SaturationRecovery)];
	if (SaturationRecovery) {
		if (SaturationRecovery->getInformationEntity() == UnknownIE) SaturationRecovery->setInformationEntity(ie);
	}

	SpectrallySelectedSuppression = (*list)[TagFromName(SpectrallySelectedSuppression)];
	if (SpectrallySelectedSuppression) {
		if (SpectrallySelectedSuppression->getInformationEntity() == UnknownIE) SpectrallySelectedSuppression->setInformationEntity(ie);
	}

	OversamplingPhase = (*list)[TagFromName(OversamplingPhase)];
	if (OversamplingPhase) {
		if (OversamplingPhase->getInformationEntity() == UnknownIE) OversamplingPhase->setInformationEntity(ie);
	}

	GeometryOfKSpaceTraversal = (*list)[TagFromName(GeometryOfKSpaceTraversal)];
	if (GeometryOfKSpaceTraversal) {
		if (GeometryOfKSpaceTraversal->getInformationEntity() == UnknownIE) GeometryOfKSpaceTraversal->setInformationEntity(ie);
	}

	RectilinearPhaseEncodeReordering = (*list)[TagFromName(RectilinearPhaseEncodeReordering)];
	if (RectilinearPhaseEncodeReordering) {
		if (RectilinearPhaseEncodeReordering->getInformationEntity() == UnknownIE) RectilinearPhaseEncodeReordering->setInformationEntity(ie);
	}

	SegmentedKSpaceTraversal = (*list)[TagFromName(SegmentedKSpaceTraversal)];
	if (SegmentedKSpaceTraversal) {
		if (SegmentedKSpaceTraversal->getInformationEntity() == UnknownIE) SegmentedKSpaceTraversal->setInformationEntity(ie);
	}

	CoverageOfKSpace = (*list)[TagFromName(CoverageOfKSpace)];
	if (CoverageOfKSpace) {
		if (CoverageOfKSpace->getInformationEntity() == UnknownIE) CoverageOfKSpace->setInformationEntity(ie);
	}

	NumberOfKSpaceTrajectories = (*list)[TagFromName(NumberOfKSpaceTrajectories)];
	if (NumberOfKSpaceTrajectories) {
		if (NumberOfKSpaceTrajectories->getInformationEntity() == UnknownIE) NumberOfKSpaceTrajectories->setInformationEntity(ie);
	}

}

Module_MRSpectroscopy::Module_MRSpectroscopy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopy";

	new Macro_MRImageAndSpectroscopyInstanceMacro(list,ie);
	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	new Macro_MRSpectroscopyDescriptionImageLevelMacro(list,ie);
	TransmitterFrequency = (*list)[TagFromName(TransmitterFrequency)];
	if (TransmitterFrequency) {
		if (TransmitterFrequency->getInformationEntity() == UnknownIE) TransmitterFrequency->setInformationEntity(ie);
	}

	SpectralWidth = (*list)[TagFromName(SpectralWidth)];
	if (SpectralWidth) {
		if (SpectralWidth->getInformationEntity() == UnknownIE) SpectralWidth->setInformationEntity(ie);
	}

	ChemicalShiftReference = (*list)[TagFromName(ChemicalShiftReference)];
	if (ChemicalShiftReference) {
		if (ChemicalShiftReference->getInformationEntity() == UnknownIE) ChemicalShiftReference->setInformationEntity(ie);
	}

	VolumeLocalizationTechnique = (*list)[TagFromName(VolumeLocalizationTechnique)];
	if (VolumeLocalizationTechnique) {
		if (VolumeLocalizationTechnique->getInformationEntity() == UnknownIE) VolumeLocalizationTechnique->setInformationEntity(ie);
	}

	VolumeLocalizationSequence = (*list)[TagFromName(VolumeLocalizationSequence)];
	if (VolumeLocalizationSequence) {
		if (VolumeLocalizationSequence->getInformationEntity() == UnknownIE) VolumeLocalizationSequence->setInformationEntity(ie);
	}

	Decoupling = (*list)[TagFromName(Decoupling)];
	if (Decoupling) {
		if (Decoupling->getInformationEntity() == UnknownIE) Decoupling->setInformationEntity(ie);
	}

	DecoupledNucleus = (*list)[TagFromName(DecoupledNucleus)];
	if (DecoupledNucleus) {
		if (DecoupledNucleus->getInformationEntity() == UnknownIE) DecoupledNucleus->setInformationEntity(ie);
	}

	DecouplingFrequency = (*list)[TagFromName(DecouplingFrequency)];
	if (DecouplingFrequency) {
		if (DecouplingFrequency->getInformationEntity() == UnknownIE) DecouplingFrequency->setInformationEntity(ie);
	}

	DecouplingMethod = (*list)[TagFromName(DecouplingMethod)];
	if (DecouplingMethod) {
		if (DecouplingMethod->getInformationEntity() == UnknownIE) DecouplingMethod->setInformationEntity(ie);
	}

	DecouplingChemicalShiftReference = (*list)[TagFromName(DecouplingChemicalShiftReference)];
	if (DecouplingChemicalShiftReference) {
		if (DecouplingChemicalShiftReference->getInformationEntity() == UnknownIE) DecouplingChemicalShiftReference->setInformationEntity(ie);
	}

	TimeDomainFiltering = (*list)[TagFromName(TimeDomainFiltering)];
	if (TimeDomainFiltering) {
		if (TimeDomainFiltering->getInformationEntity() == UnknownIE) TimeDomainFiltering->setInformationEntity(ie);
	}

	NumberOfZeroFills = (*list)[TagFromName(NumberOfZeroFills)];
	if (NumberOfZeroFills) {
		if (NumberOfZeroFills->getInformationEntity() == UnknownIE) NumberOfZeroFills->setInformationEntity(ie);
	}

	BaselineCorrection = (*list)[TagFromName(BaselineCorrection)];
	if (BaselineCorrection) {
		if (BaselineCorrection->getInformationEntity() == UnknownIE) BaselineCorrection->setInformationEntity(ie);
	}

	FrequencyCorrection = (*list)[TagFromName(FrequencyCorrection)];
	if (FrequencyCorrection) {
		if (FrequencyCorrection->getInformationEntity() == UnknownIE) FrequencyCorrection->setInformationEntity(ie);
	}

	FirstOrderPhaseCorrection = (*list)[TagFromName(FirstOrderPhaseCorrection)];
	if (FirstOrderPhaseCorrection) {
		if (FirstOrderPhaseCorrection->getInformationEntity() == UnknownIE) FirstOrderPhaseCorrection->setInformationEntity(ie);
	}

	WaterReferencedPhaseCorrection = (*list)[TagFromName(WaterReferencedPhaseCorrection)];
	if (WaterReferencedPhaseCorrection) {
		if (WaterReferencedPhaseCorrection->getInformationEntity() == UnknownIE) WaterReferencedPhaseCorrection->setInformationEntity(ie);
	}

}

Module_MRSpectroscopyPulseSequence::Module_MRSpectroscopyPulseSequence(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopyPulseSequence";

	PulseSequenceName = (*list)[TagFromName(PulseSequenceName)];
	if (PulseSequenceName) {
		if (PulseSequenceName->getInformationEntity() == UnknownIE) PulseSequenceName->setInformationEntity(ie);
	}

	MRSpectroscopyAcquisitionType = (*list)[TagFromName(MRSpectroscopyAcquisitionType)];
	if (MRSpectroscopyAcquisitionType) {
		if (MRSpectroscopyAcquisitionType->getInformationEntity() == UnknownIE) MRSpectroscopyAcquisitionType->setInformationEntity(ie);
	}

	EchoPulseSequence = (*list)[TagFromName(EchoPulseSequence)];
	if (EchoPulseSequence) {
		if (EchoPulseSequence->getInformationEntity() == UnknownIE) EchoPulseSequence->setInformationEntity(ie);
	}

	MultipleSpinEcho = (*list)[TagFromName(MultipleSpinEcho)];
	if (MultipleSpinEcho) {
		if (MultipleSpinEcho->getInformationEntity() == UnknownIE) MultipleSpinEcho->setInformationEntity(ie);
	}

	MultiPlanarExcitation = (*list)[TagFromName(MultiPlanarExcitation)];
	if (MultiPlanarExcitation) {
		if (MultiPlanarExcitation->getInformationEntity() == UnknownIE) MultiPlanarExcitation->setInformationEntity(ie);
	}

	SteadyStatePulseSequence = (*list)[TagFromName(SteadyStatePulseSequence)];
	if (SteadyStatePulseSequence) {
		if (SteadyStatePulseSequence->getInformationEntity() == UnknownIE) SteadyStatePulseSequence->setInformationEntity(ie);
	}

	EchoPlanarPulseSequence = (*list)[TagFromName(EchoPlanarPulseSequence)];
	if (EchoPlanarPulseSequence) {
		if (EchoPlanarPulseSequence->getInformationEntity() == UnknownIE) EchoPlanarPulseSequence->setInformationEntity(ie);
	}

	SpectrallySelectedSuppression = (*list)[TagFromName(SpectrallySelectedSuppression)];
	if (SpectrallySelectedSuppression) {
		if (SpectrallySelectedSuppression->getInformationEntity() == UnknownIE) SpectrallySelectedSuppression->setInformationEntity(ie);
	}

	GeometryOfKSpaceTraversal = (*list)[TagFromName(GeometryOfKSpaceTraversal)];
	if (GeometryOfKSpaceTraversal) {
		if (GeometryOfKSpaceTraversal->getInformationEntity() == UnknownIE) GeometryOfKSpaceTraversal->setInformationEntity(ie);
	}

	RectilinearPhaseEncodeReordering = (*list)[TagFromName(RectilinearPhaseEncodeReordering)];
	if (RectilinearPhaseEncodeReordering) {
		if (RectilinearPhaseEncodeReordering->getInformationEntity() == UnknownIE) RectilinearPhaseEncodeReordering->setInformationEntity(ie);
	}

	SegmentedKSpaceTraversal = (*list)[TagFromName(SegmentedKSpaceTraversal)];
	if (SegmentedKSpaceTraversal) {
		if (SegmentedKSpaceTraversal->getInformationEntity() == UnknownIE) SegmentedKSpaceTraversal->setInformationEntity(ie);
	}

	CoverageOfKSpace = (*list)[TagFromName(CoverageOfKSpace)];
	if (CoverageOfKSpace) {
		if (CoverageOfKSpace->getInformationEntity() == UnknownIE) CoverageOfKSpace->setInformationEntity(ie);
	}

	NumberOfKSpaceTrajectories = (*list)[TagFromName(NumberOfKSpaceTrajectories)];
	if (NumberOfKSpaceTrajectories) {
		if (NumberOfKSpaceTrajectories->getInformationEntity() == UnknownIE) NumberOfKSpaceTrajectories->setInformationEntity(ie);
	}

}

Module_MRSpectroscopyData::Module_MRSpectroscopyData(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSpectroscopyData";

	Rows = (*list)[TagFromName(Rows)];
	if (Rows) {
		if (Rows->getInformationEntity() == UnknownIE) Rows->setInformationEntity(ie);
	}

	Columns = (*list)[TagFromName(Columns)];
	if (Columns) {
		if (Columns->getInformationEntity() == UnknownIE) Columns->setInformationEntity(ie);
	}

	DataPointRows = (*list)[TagFromName(DataPointRows)];
	if (DataPointRows) {
		if (DataPointRows->getInformationEntity() == UnknownIE) DataPointRows->setInformationEntity(ie);
	}

	DataPointColumns = (*list)[TagFromName(DataPointColumns)];
	if (DataPointColumns) {
		if (DataPointColumns->getInformationEntity() == UnknownIE) DataPointColumns->setInformationEntity(ie);
	}

	DataRepresentation = (*list)[TagFromName(DataRepresentation)];
	if (DataRepresentation) {
		if (DataRepresentation->getInformationEntity() == UnknownIE) DataRepresentation->setInformationEntity(ie);
	}

	SignalDomainColumns = (*list)[TagFromName(SignalDomainColumns)];
	if (SignalDomainColumns) {
		if (SignalDomainColumns->getInformationEntity() == UnknownIE) SignalDomainColumns->setInformationEntity(ie);
	}

	SignalDomainRows = (*list)[TagFromName(SignalDomainRows)];
	if (SignalDomainRows) {
		if (SignalDomainRows->getInformationEntity() == UnknownIE) SignalDomainRows->setInformationEntity(ie);
	}

	FirstOrderPhaseCorrectionAngle = (*list)[TagFromName(FirstOrderPhaseCorrectionAngle)];
	if (FirstOrderPhaseCorrectionAngle) {
		if (FirstOrderPhaseCorrectionAngle->getInformationEntity() == UnknownIE) FirstOrderPhaseCorrectionAngle->setInformationEntity(ie);
	}

	SpectroscopyData = (*list)[TagFromName(SpectroscopyData)];
	if (SpectroscopyData) {
		if (SpectroscopyData->getInformationEntity() == UnknownIE) SpectroscopyData->setInformationEntity(ie);
	}

}

Module_RawData::Module_RawData(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "RawData";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	ContentLabel = (*list)[TagFromName(ContentLabel)];
	if (ContentLabel) {
		if (ContentLabel->getInformationEntity() == UnknownIE) ContentLabel->setInformationEntity(ie);
	}

	ContentDescription = (*list)[TagFromName(ContentDescription)];
	if (ContentDescription) {
		if (ContentDescription->getInformationEntity() == UnknownIE) ContentDescription->setInformationEntity(ie);
	}

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ImageLaterality = (*list)[TagFromName(ImageLaterality)];
	if (ImageLaterality) {
		if (ImageLaterality->getInformationEntity() == UnknownIE) ImageLaterality->setInformationEntity(ie);
	}

	CreatorVersionUID = (*list)[TagFromName(CreatorVersionUID)];
	if (CreatorVersionUID) {
		if (CreatorVersionUID->getInformationEntity() == UnknownIE) CreatorVersionUID->setInformationEntity(ie);
	}

	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_MRSeries::Module_MRSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MRSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage::Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRImageFrameTypeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRImageFrameTypeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage::Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRImageFrameTypeMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_MRImageFrameTypeMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
}

Module_TractographyResultsSeries::Module_TractographyResultsSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "TractographyResultsSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_TractographyResults::Module_TractographyResults(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "TractographyResults";

	new Macro_ContentIdentificationMacro(list,ie);
	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	TrackSetSequence = (*list)[TagFromName(TrackSetSequence)];
	if (TrackSetSequence) {
		if (TrackSetSequence->getInformationEntity() == UnknownIE) TrackSetSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_TableSummaryStatisticsMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_AlgorithmIdentificationMacro(list,ie);
	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Macro_TableSummaryStatisticsMacro::Macro_TableSummaryStatisticsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "TableSummaryStatisticsMacro";

	ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
	if (ConceptNameCodeSequence) {
		if (ConceptNameCodeSequence->getInformationEntity() == UnknownIE) ConceptNameCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ModifierCodeSequence = (*list)[TagFromName(ModifierCodeSequence)];
	if (ModifierCodeSequence) {
		if (ModifierCodeSequence->getInformationEntity() == UnknownIE) ModifierCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
	if (MeasurementUnitsCodeSequence) {
		if (MeasurementUnitsCodeSequence->getInformationEntity() == UnknownIE) MeasurementUnitsCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	FloatingPointValue = (*list)[TagFromName(FloatingPointValue)];
	if (FloatingPointValue) {
		if (FloatingPointValue->getInformationEntity() == UnknownIE) FloatingPointValue->setInformationEntity(ie);
	}

}

Macro_CTFrameVOILUTMacro::Macro_CTFrameVOILUTMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTFrameVOILUTMacro";

	FrameVOILUTSequence = (*list)[TagFromName(FrameVOILUTSequence)];
	if (FrameVOILUTSequence) {
		if (FrameVOILUTSequence->getInformationEntity() == UnknownIE) FrameVOILUTSequence->setInformationEntity(ie);
	}

}

Module_CTSeries::Module_CTSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_EnhancedCTImage::Module_EnhancedCTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedCTImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	MultienergyCTAcquisition = (*list)[TagFromName(MultienergyCTAcquisition)];
	if (MultienergyCTAcquisition) {
		if (MultienergyCTAcquisition->getInformationEntity() == UnknownIE) MultienergyCTAcquisition->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionImageLevelMacro(list,ie);
	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	ReferencedRawDataSequence = (*list)[TagFromName(ReferencedRawDataSequence)];
	if (ReferencedRawDataSequence) {
		if (ReferencedRawDataSequence->getInformationEntity() == UnknownIE) ReferencedRawDataSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedWaveformSequence = (*list)[TagFromName(ReferencedWaveformSequence)];
	if (ReferencedWaveformSequence) {
		if (ReferencedWaveformSequence->getInformationEntity() == UnknownIE) ReferencedWaveformSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedImageEvidenceSequence = (*list)[TagFromName(ReferencedImageEvidenceSequence)];
	if (ReferencedImageEvidenceSequence) {
		if (ReferencedImageEvidenceSequence->getInformationEntity() == UnknownIE) ReferencedImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	SourceImageEvidenceSequence = (*list)[TagFromName(SourceImageEvidenceSequence)];
	if (SourceImageEvidenceSequence) {
		if (SourceImageEvidenceSequence->getInformationEntity() == UnknownIE) SourceImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedPresentationStateSequence = (*list)[TagFromName(ReferencedPresentationStateSequence)];
	if (ReferencedPresentationStateSequence) {
		if (ReferencedPresentationStateSequence->getInformationEntity() == UnknownIE) ReferencedPresentationStateSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	new Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie);
	IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
	if (IsocenterPosition) {
		if (IsocenterPosition->getInformationEntity() == UnknownIE) IsocenterPosition->setInformationEntity(ie);
	}

	new Macro_RTEquipmentCorrelationMacro(list,ie);
}

Macro_CTImageFrameTypeMacro::Macro_CTImageFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTImageFrameTypeMacro";

	CTImageFrameTypeSequence = (*list)[TagFromName(CTImageFrameTypeSequence)];
	if (CTImageFrameTypeSequence) {
		if (CTImageFrameTypeSequence->getInformationEntity() == UnknownIE) CTImageFrameTypeSequence->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionFrameLevelMacro(list,ie);
}

Macro_CTAcquisitionTypeMacro::Macro_CTAcquisitionTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTAcquisitionTypeMacro";

	CTAcquisitionTypeSequence = (*list)[TagFromName(CTAcquisitionTypeSequence)];
	if (CTAcquisitionTypeSequence) {
		if (CTAcquisitionTypeSequence->getInformationEntity() == UnknownIE) CTAcquisitionTypeSequence->setInformationEntity(ie);
	}

}

Macro_CTAcquisitionDetailsMacro::Macro_CTAcquisitionDetailsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTAcquisitionDetailsMacro";

	CTAcquisitionDetailsSequence = (*list)[TagFromName(CTAcquisitionDetailsSequence)];
	if (CTAcquisitionDetailsSequence) {
		if (CTAcquisitionDetailsSequence->getInformationEntity() == UnknownIE) CTAcquisitionDetailsSequence->setInformationEntity(ie);
	}

}

Macro_CTTableDynamicsMacro::Macro_CTTableDynamicsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTTableDynamicsMacro";

	CTTableDynamicsSequence = (*list)[TagFromName(CTTableDynamicsSequence)];
	if (CTTableDynamicsSequence) {
		if (CTTableDynamicsSequence->getInformationEntity() == UnknownIE) CTTableDynamicsSequence->setInformationEntity(ie);
	}

}

Macro_CTPositionMacro::Macro_CTPositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTPositionMacro";

	CTPositionSequence = (*list)[TagFromName(CTPositionSequence)];
	if (CTPositionSequence) {
		if (CTPositionSequence->getInformationEntity() == UnknownIE) CTPositionSequence->setInformationEntity(ie);
	}

}

Macro_CTGeometryMacro::Macro_CTGeometryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTGeometryMacro";

	CTGeometrySequence = (*list)[TagFromName(CTGeometrySequence)];
	if (CTGeometrySequence) {
		if (CTGeometrySequence->getInformationEntity() == UnknownIE) CTGeometrySequence->setInformationEntity(ie);
	}

}

Macro_CTReconstructionMacro::Macro_CTReconstructionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTReconstructionMacro";

	CTReconstructionSequence = (*list)[TagFromName(CTReconstructionSequence)];
	if (CTReconstructionSequence) {
		if (CTReconstructionSequence->getInformationEntity() == UnknownIE) CTReconstructionSequence->setInformationEntity(ie);
	}

}

Macro_CTExposureMacro::Macro_CTExposureMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTExposureMacro";

	CTExposureSequence = (*list)[TagFromName(CTExposureSequence)];
	if (CTExposureSequence) {
		if (CTExposureSequence->getInformationEntity() == UnknownIE) CTExposureSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Macro_CTXRayDetailsMacro::Macro_CTXRayDetailsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTXRayDetailsMacro";

	CTXRayDetailsSequence = (*list)[TagFromName(CTXRayDetailsSequence)];
	if (CTXRayDetailsSequence) {
		if (CTXRayDetailsSequence->getInformationEntity() == UnknownIE) CTXRayDetailsSequence->setInformationEntity(ie);
	}

}

Macro_CTPixelValueTransformationMacro::Macro_CTPixelValueTransformationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTPixelValueTransformationMacro";

	PixelValueTransformationSequence = (*list)[TagFromName(PixelValueTransformationSequence)];
	if (PixelValueTransformationSequence) {
		if (PixelValueTransformationSequence->getInformationEntity() == UnknownIE) PixelValueTransformationSequence->setInformationEntity(ie);
	}

}

Macro_CTAdditionalXRaySourceMacro::Macro_CTAdditionalXRaySourceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CTAdditionalXRaySourceMacro";

	CTAdditionalXRaySourceSequence = (*list)[TagFromName(CTAdditionalXRaySourceSequence)];
	if (CTAdditionalXRaySourceSequence) {
		if (CTAdditionalXRaySourceSequence->getInformationEntity() == UnknownIE) CTAdditionalXRaySourceSequence->setInformationEntity(ie);
	}

}

Macro_UnassignedSharedConvertedAttributesMacro::Macro_UnassignedSharedConvertedAttributesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "UnassignedSharedConvertedAttributesMacro";

	UnassignedSharedConvertedAttributesSequence = (*list)[TagFromName(UnassignedSharedConvertedAttributesSequence)];
	if (UnassignedSharedConvertedAttributesSequence) {
		if (UnassignedSharedConvertedAttributesSequence->getInformationEntity() == UnknownIE) UnassignedSharedConvertedAttributesSequence->setInformationEntity(ie);
	}

}

Macro_UnassignedPerFrameConvertedAttributesMacro::Macro_UnassignedPerFrameConvertedAttributesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "UnassignedPerFrameConvertedAttributesMacro";

	UnassignedPerFrameConvertedAttributesSequence = (*list)[TagFromName(UnassignedPerFrameConvertedAttributesSequence)];
	if (UnassignedPerFrameConvertedAttributesSequence) {
		if (UnassignedPerFrameConvertedAttributesSequence->getInformationEntity() == UnknownIE) UnassignedPerFrameConvertedAttributesSequence->setInformationEntity(ie);
	}

}

Macro_ImageFrameConversionSourceMacro::Macro_ImageFrameConversionSourceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageFrameConversionSourceMacro";

	ConversionSourceAttributesSequence = (*list)[TagFromName(ConversionSourceAttributesSequence)];
	if (ConversionSourceAttributesSequence) {
		if (ConversionSourceAttributesSequence->getInformationEntity() == UnknownIE) ConversionSourceAttributesSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForEnhancedCTImage::Module_MultiFrameFunctionalGroupsForEnhancedCTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForEnhancedCTImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_CTFrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_CTImageFrameTypeMacro(list,ie);
	new Macro_CTAcquisitionTypeMacro(list,ie);
	new Macro_CTAcquisitionDetailsMacro(list,ie);
	new Macro_CTTableDynamicsMacro(list,ie);
	new Macro_CTPositionMacro(list,ie);
	new Macro_CTGeometryMacro(list,ie);
	new Macro_CTReconstructionMacro(list,ie);
	new Macro_CTExposureMacro(list,ie);
	new Macro_CTXRayDetailsMacro(list,ie);
	new Macro_CTPixelValueTransformationMacro(list,ie);
	new Macro_CTAdditionalXRaySourceMacro(list,ie);
	new Macro_MultienergyCTProcessingMacro(list,ie);
	new Macro_MultienergyCTCharacteristicsMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_CTFrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_CTImageFrameTypeMacro(list,ie);
	new Macro_CTAcquisitionTypeMacro(list,ie);
	new Macro_CTAcquisitionDetailsMacro(list,ie);
	new Macro_CTTableDynamicsMacro(list,ie);
	new Macro_CTPositionMacro(list,ie);
	new Macro_CTGeometryMacro(list,ie);
	new Macro_CTReconstructionMacro(list,ie);
	new Macro_CTExposureMacro(list,ie);
	new Macro_CTXRayDetailsMacro(list,ie);
	new Macro_CTPixelValueTransformationMacro(list,ie);
	new Macro_CTAdditionalXRaySourceMacro(list,ie);
	new Macro_MultienergyCTProcessingMacro(list,ie);
	new Macro_MultienergyCTCharacteristicsMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage::Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_CTImageFrameTypeMacro(list,ie);
	new Macro_CTPixelValueTransformationMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_CTImageFrameTypeMacro(list,ie);
	new Macro_CTPixelValueTransformationMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage::Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_CTFrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_CTImageFrameTypeMacro(list,ie);
	new Macro_CTPixelValueTransformationMacro(list,ie);
	new Macro_UnassignedSharedConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_CTFrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_CTImageFrameTypeMacro(list,ie);
	new Macro_CTPixelValueTransformationMacro(list,ie);
	new Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie);
	new Macro_ImageFrameConversionSourceMacro(list,ie);
}

Module_MultienergyCTImage::Module_MultienergyCTImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultienergyCTImage";

	MultienergyCTAcquisitionSequence = (*list)[TagFromName(MultienergyCTAcquisitionSequence)];
	if (MultienergyCTAcquisitionSequence) {
		if (MultienergyCTAcquisitionSequence->getInformationEntity() == UnknownIE) MultienergyCTAcquisitionSequence->setInformationEntity(ie);
	}

	new Macro_MultienergyCTXRaySourceMacro(list,ie);
	new Macro_MultienergyCTXRayDetectorMacro(list,ie);
	new Macro_MultienergyCTPathMacro(list,ie);
	new Macro_CTExposureMacro(list,ie);
	new Macro_CTXRayDetailsMacro(list,ie);
	new Macro_CTAcquisitionDetailsMacro(list,ie);
	new Macro_CTGeometryMacro(list,ie);
	MultienergyCTProcessingSequence = (*list)[TagFromName(MultienergyCTProcessingSequence)];
	if (MultienergyCTProcessingSequence) {
		if (MultienergyCTProcessingSequence->getInformationEntity() == UnknownIE) MultienergyCTProcessingSequence->setInformationEntity(ie);
	}

	new Macro_MultienergyCTProcessingMacro(list,ie);
	MultienergyCTCharacteristicsSequence = (*list)[TagFromName(MultienergyCTCharacteristicsSequence)];
	if (MultienergyCTCharacteristicsSequence) {
		if (MultienergyCTCharacteristicsSequence->getInformationEntity() == UnknownIE) MultienergyCTCharacteristicsSequence->setInformationEntity(ie);
	}

	new Macro_MultienergyCTCharacteristicsMacro(list,ie);
}

Macro_MultienergyCTXRaySourceMacro::Macro_MultienergyCTXRaySourceMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultienergyCTXRaySourceMacro";

	MultienergyCTXRaySourceSequence = (*list)[TagFromName(MultienergyCTXRaySourceSequence)];
	if (MultienergyCTXRaySourceSequence) {
		if (MultienergyCTXRaySourceSequence->getInformationEntity() == UnknownIE) MultienergyCTXRaySourceSequence->setInformationEntity(ie);
	}

}

Macro_MultienergyCTXRayDetectorMacro::Macro_MultienergyCTXRayDetectorMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultienergyCTXRayDetectorMacro";

	MultienergyCTXRayDetectorSequence = (*list)[TagFromName(MultienergyCTXRayDetectorSequence)];
	if (MultienergyCTXRayDetectorSequence) {
		if (MultienergyCTXRayDetectorSequence->getInformationEntity() == UnknownIE) MultienergyCTXRayDetectorSequence->setInformationEntity(ie);
	}

}

Macro_MultienergyCTPathMacro::Macro_MultienergyCTPathMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultienergyCTPathMacro";

	MultienergyCTPathSequence = (*list)[TagFromName(MultienergyCTPathSequence)];
	if (MultienergyCTPathSequence) {
		if (MultienergyCTPathSequence->getInformationEntity() == UnknownIE) MultienergyCTPathSequence->setInformationEntity(ie);
	}

}

Macro_MultienergyCTCharacteristicsMacro::Macro_MultienergyCTCharacteristicsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultienergyCTCharacteristicsMacro";

	MonoenergeticEnergyEquivalent = (*list)[TagFromName(MonoenergeticEnergyEquivalent)];
	if (MonoenergeticEnergyEquivalent) {
		if (MonoenergeticEnergyEquivalent->getInformationEntity() == UnknownIE) MonoenergeticEnergyEquivalent->setInformationEntity(ie);
	}

	DerivationAlgorithmSequence = (*list)[TagFromName(DerivationAlgorithmSequence)];
	if (DerivationAlgorithmSequence) {
		if (DerivationAlgorithmSequence->getInformationEntity() == UnknownIE) DerivationAlgorithmSequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
	PerformedProcessingParametersSequence = (*list)[TagFromName(PerformedProcessingParametersSequence)];
	if (PerformedProcessingParametersSequence) {
		if (PerformedProcessingParametersSequence->getInformationEntity() == UnknownIE) PerformedProcessingParametersSequence->setInformationEntity(ie);
	}

	new Macro_ContentItemWithModifiersMacro(list,ie);
}

Macro_MultienergyCTProcessingMacro::Macro_MultienergyCTProcessingMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultienergyCTProcessingMacro";

	DecompositionMethod = (*list)[TagFromName(DecompositionMethod)];
	if (DecompositionMethod) {
		if (DecompositionMethod->getInformationEntity() == UnknownIE) DecompositionMethod->setInformationEntity(ie);
	}

	DecompositionDescription = (*list)[TagFromName(DecompositionDescription)];
	if (DecompositionDescription) {
		if (DecompositionDescription->getInformationEntity() == UnknownIE) DecompositionDescription->setInformationEntity(ie);
	}

	DecompositionAlgorithmIdentificationSequence = (*list)[TagFromName(DecompositionAlgorithmIdentificationSequence)];
	if (DecompositionAlgorithmIdentificationSequence) {
		if (DecompositionAlgorithmIdentificationSequence->getInformationEntity() == UnknownIE) DecompositionAlgorithmIdentificationSequence->setInformationEntity(ie);
	}

	new Macro_AlgorithmIdentificationMacro(list,ie);
	DecompositionMaterialSequence = (*list)[TagFromName(DecompositionMaterialSequence)];
	if (DecompositionMaterialSequence) {
		if (DecompositionMaterialSequence->getInformationEntity() == UnknownIE) DecompositionMaterialSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_EnhancedMultienergyCTAcquisition::Module_EnhancedMultienergyCTAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedMultienergyCTAcquisition";

	new Macro_MultienergyCTXRaySourceMacro(list,ie);
	new Macro_MultienergyCTXRayDetectorMacro(list,ie);
	new Macro_MultienergyCTPathMacro(list,ie);
}

Module_FramePointers::Module_FramePointers(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "FramePointers";

	RepresentativeFrameNumber = (*list)[TagFromName(RepresentativeFrameNumber)];
	if (RepresentativeFrameNumber) {
		if (RepresentativeFrameNumber->getInformationEntity() == UnknownIE) RepresentativeFrameNumber->setInformationEntity(ie);
	}

	FrameNumbersOfInterest = (*list)[TagFromName(FrameNumbersOfInterest)];
	if (FrameNumbersOfInterest) {
		if (FrameNumbersOfInterest->getInformationEntity() == UnknownIE) FrameNumbersOfInterest->setInformationEntity(ie);
	}

	FrameOfInterestDescription = (*list)[TagFromName(FrameOfInterestDescription)];
	if (FrameOfInterestDescription) {
		if (FrameOfInterestDescription->getInformationEntity() == UnknownIE) FrameOfInterestDescription->setInformationEntity(ie);
	}

	FrameOfInterestType = (*list)[TagFromName(FrameOfInterestType)];
	if (FrameOfInterestType) {
		if (FrameOfInterestType->getInformationEntity() == UnknownIE) FrameOfInterestType->setInformationEntity(ie);
	}

}

Module_Mask::Module_Mask(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Mask";

	MaskSubtractionSequence = (*list)[TagFromName(MaskSubtractionSequence)];
	if (MaskSubtractionSequence) {
		if (MaskSubtractionSequence->getInformationEntity() == UnknownIE) MaskSubtractionSequence->setInformationEntity(ie);
	}

	RecommendedViewingMode = (*list)[TagFromName(RecommendedViewingMode)];
	if (RecommendedViewingMode) {
		if (RecommendedViewingMode->getInformationEntity() == UnknownIE) RecommendedViewingMode->setInformationEntity(ie);
	}

}

Module_DisplayShutter::Module_DisplayShutter(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "DisplayShutter";

	new Macro_DisplayShutterMacro(list,ie);
}

Module_Device::Module_Device(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Device";

	DeviceSequence = (*list)[TagFromName(DeviceSequence)];
	if (DeviceSequence) {
		if (DeviceSequence->getInformationEntity() == UnknownIE) DeviceSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Module_Intervention::Module_Intervention(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "Intervention";

	InterventionSequence = (*list)[TagFromName(InterventionSequence)];
	if (InterventionSequence) {
		if (InterventionSequence->getInformationEntity() == UnknownIE) InterventionSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
}

Module_XRayImage::Module_XRayImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayImage";

	FrameIncrementPointer = (*list)[TagFromName(FrameIncrementPointer)];
	if (FrameIncrementPointer) {
		if (FrameIncrementPointer->getInformationEntity() == UnknownIE) FrameIncrementPointer->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	PixelIntensityRelationship = (*list)[TagFromName(PixelIntensityRelationship)];
	if (PixelIntensityRelationship) {
		if (PixelIntensityRelationship->getInformationEntity() == UnknownIE) PixelIntensityRelationship->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	ScanOptions = (*list)[TagFromName(ScanOptions)];
	if (ScanOptions) {
		if (ScanOptions->getInformationEntity() == UnknownIE) ScanOptions->setInformationEntity(ie);
	}

	new Macro_GeneralAnatomyOptionalMacro(list,ie);
	RWavePointer = (*list)[TagFromName(RWavePointer)];
	if (RWavePointer) {
		if (RWavePointer->getInformationEntity() == UnknownIE) RWavePointer->setInformationEntity(ie);
	}

	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	DerivationDescription = (*list)[TagFromName(DerivationDescription)];
	if (DerivationDescription) {
		if (DerivationDescription->getInformationEntity() == UnknownIE) DerivationDescription->setInformationEntity(ie);
	}

	AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
	if (AcquisitionDeviceProcessingDescription) {
		if (AcquisitionDeviceProcessingDescription->getInformationEntity() == UnknownIE) AcquisitionDeviceProcessingDescription->setInformationEntity(ie);
	}

	FrameLabelVector = (*list)[TagFromName(FrameLabelVector)];
	if (FrameLabelVector) {
		if (FrameLabelVector->getInformationEntity() == UnknownIE) FrameLabelVector->setInformationEntity(ie);
	}

	FrameDimensionPointer = (*list)[TagFromName(FrameDimensionPointer)];
	if (FrameDimensionPointer) {
		if (FrameDimensionPointer->getInformationEntity() == UnknownIE) FrameDimensionPointer->setInformationEntity(ie);
	}

	CalibrationImage = (*list)[TagFromName(CalibrationImage)];
	if (CalibrationImage) {
		if (CalibrationImage->getInformationEntity() == UnknownIE) CalibrationImage->setInformationEntity(ie);
	}

}

Module_XRayAcquisition::Module_XRayAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayAcquisition";

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	RadiationSetting = (*list)[TagFromName(RadiationSetting)];
	if (RadiationSetting) {
		if (RadiationSetting->getInformationEntity() == UnknownIE) RadiationSetting->setInformationEntity(ie);
	}

	XRayTubeCurrent = (*list)[TagFromName(XRayTubeCurrent)];
	if (XRayTubeCurrent) {
		if (XRayTubeCurrent->getInformationEntity() == UnknownIE) XRayTubeCurrent->setInformationEntity(ie);
	}

	XRayTubeCurrentInuA = (*list)[TagFromName(XRayTubeCurrentInuA)];
	if (XRayTubeCurrentInuA) {
		if (XRayTubeCurrentInuA->getInformationEntity() == UnknownIE) XRayTubeCurrentInuA->setInformationEntity(ie);
	}

	ExposureTime = (*list)[TagFromName(ExposureTime)];
	if (ExposureTime) {
		if (ExposureTime->getInformationEntity() == UnknownIE) ExposureTime->setInformationEntity(ie);
	}

	ExposureTimeInuS = (*list)[TagFromName(ExposureTimeInuS)];
	if (ExposureTimeInuS) {
		if (ExposureTimeInuS->getInformationEntity() == UnknownIE) ExposureTimeInuS->setInformationEntity(ie);
	}

	Exposure = (*list)[TagFromName(Exposure)];
	if (Exposure) {
		if (Exposure->getInformationEntity() == UnknownIE) Exposure->setInformationEntity(ie);
	}

	ExposureInuAs = (*list)[TagFromName(ExposureInuAs)];
	if (ExposureInuAs) {
		if (ExposureInuAs->getInformationEntity() == UnknownIE) ExposureInuAs->setInformationEntity(ie);
	}

	Grid = (*list)[TagFromName(Grid)];
	if (Grid) {
		if (Grid->getInformationEntity() == UnknownIE) Grid->setInformationEntity(ie);
	}

	AveragePulseWidth = (*list)[TagFromName(AveragePulseWidth)];
	if (AveragePulseWidth) {
		if (AveragePulseWidth->getInformationEntity() == UnknownIE) AveragePulseWidth->setInformationEntity(ie);
	}

	RadiationMode = (*list)[TagFromName(RadiationMode)];
	if (RadiationMode) {
		if (RadiationMode->getInformationEntity() == UnknownIE) RadiationMode->setInformationEntity(ie);
	}

	TypeOfFilters = (*list)[TagFromName(TypeOfFilters)];
	if (TypeOfFilters) {
		if (TypeOfFilters->getInformationEntity() == UnknownIE) TypeOfFilters->setInformationEntity(ie);
	}

	IntensifierSize = (*list)[TagFromName(IntensifierSize)];
	if (IntensifierSize) {
		if (IntensifierSize->getInformationEntity() == UnknownIE) IntensifierSize->setInformationEntity(ie);
	}

	FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
	if (FieldOfViewShape) {
		if (FieldOfViewShape->getInformationEntity() == UnknownIE) FieldOfViewShape->setInformationEntity(ie);
	}

	FieldOfViewDimensions = (*list)[TagFromName(FieldOfViewDimensions)];
	if (FieldOfViewDimensions) {
		if (FieldOfViewDimensions->getInformationEntity() == UnknownIE) FieldOfViewDimensions->setInformationEntity(ie);
	}

	ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
	if (ImagerPixelSpacing) {
		if (ImagerPixelSpacing->getInformationEntity() == UnknownIE) ImagerPixelSpacing->setInformationEntity(ie);
	}

	new Macro_BasicPixelSpacingCalibrationMacro(list,ie);
	FocalSpots = (*list)[TagFromName(FocalSpots)];
	if (FocalSpots) {
		if (FocalSpots->getInformationEntity() == UnknownIE) FocalSpots->setInformationEntity(ie);
	}

	ImageAndFluoroscopyAreaDoseProduct = (*list)[TagFromName(ImageAndFluoroscopyAreaDoseProduct)];
	if (ImageAndFluoroscopyAreaDoseProduct) {
		if (ImageAndFluoroscopyAreaDoseProduct->getInformationEntity() == UnknownIE) ImageAndFluoroscopyAreaDoseProduct->setInformationEntity(ie);
	}

}

Macro_XRayCollimatorDimensionsMacro::Macro_XRayCollimatorDimensionsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayCollimatorDimensionsMacro";

	CollimatorLeftVerticalEdge = (*list)[TagFromName(CollimatorLeftVerticalEdge)];
	if (CollimatorLeftVerticalEdge) {
		if (CollimatorLeftVerticalEdge->getInformationEntity() == UnknownIE) CollimatorLeftVerticalEdge->setInformationEntity(ie);
	}

	CollimatorRightVerticalEdge = (*list)[TagFromName(CollimatorRightVerticalEdge)];
	if (CollimatorRightVerticalEdge) {
		if (CollimatorRightVerticalEdge->getInformationEntity() == UnknownIE) CollimatorRightVerticalEdge->setInformationEntity(ie);
	}

	CollimatorUpperHorizontalEdge = (*list)[TagFromName(CollimatorUpperHorizontalEdge)];
	if (CollimatorUpperHorizontalEdge) {
		if (CollimatorUpperHorizontalEdge->getInformationEntity() == UnknownIE) CollimatorUpperHorizontalEdge->setInformationEntity(ie);
	}

	CollimatorLowerHorizontalEdge = (*list)[TagFromName(CollimatorLowerHorizontalEdge)];
	if (CollimatorLowerHorizontalEdge) {
		if (CollimatorLowerHorizontalEdge->getInformationEntity() == UnknownIE) CollimatorLowerHorizontalEdge->setInformationEntity(ie);
	}

	CenterOfCircularCollimator = (*list)[TagFromName(CenterOfCircularCollimator)];
	if (CenterOfCircularCollimator) {
		if (CenterOfCircularCollimator->getInformationEntity() == UnknownIE) CenterOfCircularCollimator->setInformationEntity(ie);
	}

	RadiusOfCircularCollimator = (*list)[TagFromName(RadiusOfCircularCollimator)];
	if (RadiusOfCircularCollimator) {
		if (RadiusOfCircularCollimator->getInformationEntity() == UnknownIE) RadiusOfCircularCollimator->setInformationEntity(ie);
	}

	VerticesOfThePolygonalCollimator = (*list)[TagFromName(VerticesOfThePolygonalCollimator)];
	if (VerticesOfThePolygonalCollimator) {
		if (VerticesOfThePolygonalCollimator->getInformationEntity() == UnknownIE) VerticesOfThePolygonalCollimator->setInformationEntity(ie);
	}

}

Module_XRayCollimator::Module_XRayCollimator(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayCollimator";

	CollimatorShape = (*list)[TagFromName(CollimatorShape)];
	if (CollimatorShape) {
		if (CollimatorShape->getInformationEntity() == UnknownIE) CollimatorShape->setInformationEntity(ie);
	}

	new Macro_XRayCollimatorDimensionsMacro(list,ie);
}

Module_XRayTable::Module_XRayTable(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayTable";

	TableMotion = (*list)[TagFromName(TableMotion)];
	if (TableMotion) {
		if (TableMotion->getInformationEntity() == UnknownIE) TableMotion->setInformationEntity(ie);
	}

	TableVerticalIncrement = (*list)[TagFromName(TableVerticalIncrement)];
	if (TableVerticalIncrement) {
		if (TableVerticalIncrement->getInformationEntity() == UnknownIE) TableVerticalIncrement->setInformationEntity(ie);
	}

	TableLongitudinalIncrement = (*list)[TagFromName(TableLongitudinalIncrement)];
	if (TableLongitudinalIncrement) {
		if (TableLongitudinalIncrement->getInformationEntity() == UnknownIE) TableLongitudinalIncrement->setInformationEntity(ie);
	}

	TableLateralIncrement = (*list)[TagFromName(TableLateralIncrement)];
	if (TableLateralIncrement) {
		if (TableLateralIncrement->getInformationEntity() == UnknownIE) TableLateralIncrement->setInformationEntity(ie);
	}

	TableAngle = (*list)[TagFromName(TableAngle)];
	if (TableAngle) {
		if (TableAngle->getInformationEntity() == UnknownIE) TableAngle->setInformationEntity(ie);
	}

}

Module_XAPositioner::Module_XAPositioner(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XAPositioner";

	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	EstimatedRadiographicMagnificationFactor = (*list)[TagFromName(EstimatedRadiographicMagnificationFactor)];
	if (EstimatedRadiographicMagnificationFactor) {
		if (EstimatedRadiographicMagnificationFactor->getInformationEntity() == UnknownIE) EstimatedRadiographicMagnificationFactor->setInformationEntity(ie);
	}

	PositionerMotion = (*list)[TagFromName(PositionerMotion)];
	if (PositionerMotion) {
		if (PositionerMotion->getInformationEntity() == UnknownIE) PositionerMotion->setInformationEntity(ie);
	}

	PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
	if (PositionerPrimaryAngle) {
		if (PositionerPrimaryAngle->getInformationEntity() == UnknownIE) PositionerPrimaryAngle->setInformationEntity(ie);
	}

	PositionerSecondaryAngle = (*list)[TagFromName(PositionerSecondaryAngle)];
	if (PositionerSecondaryAngle) {
		if (PositionerSecondaryAngle->getInformationEntity() == UnknownIE) PositionerSecondaryAngle->setInformationEntity(ie);
	}

	PositionerPrimaryAngleIncrement = (*list)[TagFromName(PositionerPrimaryAngleIncrement)];
	if (PositionerPrimaryAngleIncrement) {
		if (PositionerPrimaryAngleIncrement->getInformationEntity() == UnknownIE) PositionerPrimaryAngleIncrement->setInformationEntity(ie);
	}

	PositionerSecondaryAngleIncrement = (*list)[TagFromName(PositionerSecondaryAngleIncrement)];
	if (PositionerSecondaryAngleIncrement) {
		if (PositionerSecondaryAngleIncrement->getInformationEntity() == UnknownIE) PositionerSecondaryAngleIncrement->setInformationEntity(ie);
	}

	DetectorPrimaryAngle = (*list)[TagFromName(DetectorPrimaryAngle)];
	if (DetectorPrimaryAngle) {
		if (DetectorPrimaryAngle->getInformationEntity() == UnknownIE) DetectorPrimaryAngle->setInformationEntity(ie);
	}

	DetectorSecondaryAngle = (*list)[TagFromName(DetectorSecondaryAngle)];
	if (DetectorSecondaryAngle) {
		if (DetectorSecondaryAngle->getInformationEntity() == UnknownIE) DetectorSecondaryAngle->setInformationEntity(ie);
	}

}

Module_XRFPositioner::Module_XRFPositioner(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRFPositioner";

	DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
	if (DistanceSourceToDetector) {
		if (DistanceSourceToDetector->getInformationEntity() == UnknownIE) DistanceSourceToDetector->setInformationEntity(ie);
	}

	DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
	if (DistanceSourceToPatient) {
		if (DistanceSourceToPatient->getInformationEntity() == UnknownIE) DistanceSourceToPatient->setInformationEntity(ie);
	}

	EstimatedRadiographicMagnificationFactor = (*list)[TagFromName(EstimatedRadiographicMagnificationFactor)];
	if (EstimatedRadiographicMagnificationFactor) {
		if (EstimatedRadiographicMagnificationFactor->getInformationEntity() == UnknownIE) EstimatedRadiographicMagnificationFactor->setInformationEntity(ie);
	}

	ColumnAngulation = (*list)[TagFromName(ColumnAngulation)];
	if (ColumnAngulation) {
		if (ColumnAngulation->getInformationEntity() == UnknownIE) ColumnAngulation->setInformationEntity(ie);
	}

}

Module_XRayTomographyAcquisition::Module_XRayTomographyAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayTomographyAcquisition";

	TomoLayerHeight = (*list)[TagFromName(TomoLayerHeight)];
	if (TomoLayerHeight) {
		if (TomoLayerHeight->getInformationEntity() == UnknownIE) TomoLayerHeight->setInformationEntity(ie);
	}

	TomoAngle = (*list)[TagFromName(TomoAngle)];
	if (TomoAngle) {
		if (TomoAngle->getInformationEntity() == UnknownIE) TomoAngle->setInformationEntity(ie);
	}

	TomoTime = (*list)[TagFromName(TomoTime)];
	if (TomoTime) {
		if (TomoTime->getInformationEntity() == UnknownIE) TomoTime->setInformationEntity(ie);
	}

	TomoType = (*list)[TagFromName(TomoType)];
	if (TomoType) {
		if (TomoType->getInformationEntity() == UnknownIE) TomoType->setInformationEntity(ie);
	}

	TomoClass = (*list)[TagFromName(TomoClass)];
	if (TomoClass) {
		if (TomoClass->getInformationEntity() == UnknownIE) TomoClass->setInformationEntity(ie);
	}

	NumberOfTomosynthesisSourceImages = (*list)[TagFromName(NumberOfTomosynthesisSourceImages)];
	if (NumberOfTomosynthesisSourceImages) {
		if (NumberOfTomosynthesisSourceImages->getInformationEntity() == UnknownIE) NumberOfTomosynthesisSourceImages->setInformationEntity(ie);
	}

}

Module_XAXRFSeries::Module_XAXRFSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XAXRFSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
}

Module_EnhancedXAXRFImage::Module_EnhancedXAXRFImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedXAXRFImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	PlanesInAcquisition = (*list)[TagFromName(PlanesInAcquisition)];
	if (PlanesInAcquisition) {
		if (PlanesInAcquisition->getInformationEntity() == UnknownIE) PlanesInAcquisition->setInformationEntity(ie);
	}

	PlaneIdentification = (*list)[TagFromName(PlaneIdentification)];
	if (PlaneIdentification) {
		if (PlaneIdentification->getInformationEntity() == UnknownIE) PlaneIdentification->setInformationEntity(ie);
	}

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	AcquisitionProtocolName = (*list)[TagFromName(AcquisitionProtocolName)];
	if (AcquisitionProtocolName) {
		if (AcquisitionProtocolName->getInformationEntity() == UnknownIE) AcquisitionProtocolName->setInformationEntity(ie);
	}

	AcquisitionProtocolDescription = (*list)[TagFromName(AcquisitionProtocolDescription)];
	if (AcquisitionProtocolDescription) {
		if (AcquisitionProtocolDescription->getInformationEntity() == UnknownIE) AcquisitionProtocolDescription->setInformationEntity(ie);
	}

	ScanOptions = (*list)[TagFromName(ScanOptions)];
	if (ScanOptions) {
		if (ScanOptions->getInformationEntity() == UnknownIE) ScanOptions->setInformationEntity(ie);
	}

	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	PatientOrientationCodeSequence = (*list)[TagFromName(PatientOrientationCodeSequence)];
	if (PatientOrientationCodeSequence) {
		if (PatientOrientationCodeSequence->getInformationEntity() == UnknownIE) PatientOrientationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	PatientGantryRelationshipCodeSequence = (*list)[TagFromName(PatientGantryRelationshipCodeSequence)];
	if (PatientGantryRelationshipCodeSequence) {
		if (PatientGantryRelationshipCodeSequence->getInformationEntity() == UnknownIE) PatientGantryRelationshipCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ExaminedBodyThickness = (*list)[TagFromName(ExaminedBodyThickness)];
	if (ExaminedBodyThickness) {
		if (ExaminedBodyThickness->getInformationEntity() == UnknownIE) ExaminedBodyThickness->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	ReferencedOtherPlaneSequence = (*list)[TagFromName(ReferencedOtherPlaneSequence)];
	if (ReferencedOtherPlaneSequence) {
		if (ReferencedOtherPlaneSequence->getInformationEntity() == UnknownIE) ReferencedOtherPlaneSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	ReferencedImageEvidenceSequence = (*list)[TagFromName(ReferencedImageEvidenceSequence)];
	if (ReferencedImageEvidenceSequence) {
		if (ReferencedImageEvidenceSequence->getInformationEntity() == UnknownIE) ReferencedImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	SourceImageEvidenceSequence = (*list)[TagFromName(SourceImageEvidenceSequence)];
	if (SourceImageEvidenceSequence) {
		if (SourceImageEvidenceSequence->getInformationEntity() == UnknownIE) SourceImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	QualityControlImage = (*list)[TagFromName(QualityControlImage)];
	if (QualityControlImage) {
		if (QualityControlImage->getInformationEntity() == UnknownIE) QualityControlImage->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

}

Module_XAXRFAcquisition::Module_XAXRFAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XAXRFAcquisition";

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	RadiationSetting = (*list)[TagFromName(RadiationSetting)];
	if (RadiationSetting) {
		if (RadiationSetting->getInformationEntity() == UnknownIE) RadiationSetting->setInformationEntity(ie);
	}

	XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
	if (XRayTubeCurrentInmA) {
		if (XRayTubeCurrentInmA->getInformationEntity() == UnknownIE) XRayTubeCurrentInmA->setInformationEntity(ie);
	}

	ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
	if (ExposureTimeInms) {
		if (ExposureTimeInms->getInformationEntity() == UnknownIE) ExposureTimeInms->setInformationEntity(ie);
	}

	ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
	if (ExposureInmAs) {
		if (ExposureInmAs->getInformationEntity() == UnknownIE) ExposureInmAs->setInformationEntity(ie);
	}

	AveragePulseWidth = (*list)[TagFromName(AveragePulseWidth)];
	if (AveragePulseWidth) {
		if (AveragePulseWidth->getInformationEntity() == UnknownIE) AveragePulseWidth->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	RadiationMode = (*list)[TagFromName(RadiationMode)];
	if (RadiationMode) {
		if (RadiationMode->getInformationEntity() == UnknownIE) RadiationMode->setInformationEntity(ie);
	}

	FocalSpots = (*list)[TagFromName(FocalSpots)];
	if (FocalSpots) {
		if (FocalSpots->getInformationEntity() == UnknownIE) FocalSpots->setInformationEntity(ie);
	}

	AnodeTargetMaterial = (*list)[TagFromName(AnodeTargetMaterial)];
	if (AnodeTargetMaterial) {
		if (AnodeTargetMaterial->getInformationEntity() == UnknownIE) AnodeTargetMaterial->setInformationEntity(ie);
	}

	RectificationType = (*list)[TagFromName(RectificationType)];
	if (RectificationType) {
		if (RectificationType->getInformationEntity() == UnknownIE) RectificationType->setInformationEntity(ie);
	}

	XRayReceptorType = (*list)[TagFromName(XRayReceptorType)];
	if (XRayReceptorType) {
		if (XRayReceptorType->getInformationEntity() == UnknownIE) XRayReceptorType->setInformationEntity(ie);
	}

	DistanceReceptorPlaneToDetectorHousing = (*list)[TagFromName(DistanceReceptorPlaneToDetectorHousing)];
	if (DistanceReceptorPlaneToDetectorHousing) {
		if (DistanceReceptorPlaneToDetectorHousing->getInformationEntity() == UnknownIE) DistanceReceptorPlaneToDetectorHousing->setInformationEntity(ie);
	}

	PositionerType = (*list)[TagFromName(PositionerType)];
	if (PositionerType) {
		if (PositionerType->getInformationEntity() == UnknownIE) PositionerType->setInformationEntity(ie);
	}

	CArmPositionerTabletopRelationship = (*list)[TagFromName(CArmPositionerTabletopRelationship)];
	if (CArmPositionerTabletopRelationship) {
		if (CArmPositionerTabletopRelationship->getInformationEntity() == UnknownIE) CArmPositionerTabletopRelationship->setInformationEntity(ie);
	}

	AcquiredImageAreaDoseProduct = (*list)[TagFromName(AcquiredImageAreaDoseProduct)];
	if (AcquiredImageAreaDoseProduct) {
		if (AcquiredImageAreaDoseProduct->getInformationEntity() == UnknownIE) AcquiredImageAreaDoseProduct->setInformationEntity(ie);
	}

}

Module_XRayImageIntensifier::Module_XRayImageIntensifier(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayImageIntensifier";

	IntensifierSize = (*list)[TagFromName(IntensifierSize)];
	if (IntensifierSize) {
		if (IntensifierSize->getInformationEntity() == UnknownIE) IntensifierSize->setInformationEntity(ie);
	}

	IntensifierActiveShape = (*list)[TagFromName(IntensifierActiveShape)];
	if (IntensifierActiveShape) {
		if (IntensifierActiveShape->getInformationEntity() == UnknownIE) IntensifierActiveShape->setInformationEntity(ie);
	}

	IntensifierActiveDimensions = (*list)[TagFromName(IntensifierActiveDimensions)];
	if (IntensifierActiveDimensions) {
		if (IntensifierActiveDimensions->getInformationEntity() == UnknownIE) IntensifierActiveDimensions->setInformationEntity(ie);
	}

}

Module_XRayDetector::Module_XRayDetector(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayDetector";

	new Macro_DigitalXRayDetectorMacro(list,ie);
	PhysicalDetectorSize = (*list)[TagFromName(PhysicalDetectorSize)];
	if (PhysicalDetectorSize) {
		if (PhysicalDetectorSize->getInformationEntity() == UnknownIE) PhysicalDetectorSize->setInformationEntity(ie);
	}

	PositionOfIsocenterProjection = (*list)[TagFromName(PositionOfIsocenterProjection)];
	if (PositionOfIsocenterProjection) {
		if (PositionOfIsocenterProjection->getInformationEntity() == UnknownIE) PositionOfIsocenterProjection->setInformationEntity(ie);
	}

}

Macro_XRayFrameCharacteristicsMacro::Macro_XRayFrameCharacteristicsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFrameCharacteristicsMacro";

	XAXRFFrameCharacteristicsSequence = (*list)[TagFromName(XAXRFFrameCharacteristicsSequence)];
	if (XAXRFFrameCharacteristicsSequence) {
		if (XAXRFFrameCharacteristicsSequence->getInformationEntity() == UnknownIE) XAXRFFrameCharacteristicsSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
}

Macro_XRayFieldOfViewMacro::Macro_XRayFieldOfViewMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFieldOfViewMacro";

	FieldOfViewSequence = (*list)[TagFromName(FieldOfViewSequence)];
	if (FieldOfViewSequence) {
		if (FieldOfViewSequence->getInformationEntity() == UnknownIE) FieldOfViewSequence->setInformationEntity(ie);
	}

}

Macro_XRayExposureControlSensingRegionsMacro::Macro_XRayExposureControlSensingRegionsMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayExposureControlSensingRegionsMacro";

	ExposureControlSensingRegionsSequence = (*list)[TagFromName(ExposureControlSensingRegionsSequence)];
	if (ExposureControlSensingRegionsSequence) {
		if (ExposureControlSensingRegionsSequence->getInformationEntity() == UnknownIE) ExposureControlSensingRegionsSequence->setInformationEntity(ie);
	}

}

Macro_XRayFramePixelDataPropertiesMacro::Macro_XRayFramePixelDataPropertiesMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFramePixelDataPropertiesMacro";

	FramePixelDataPropertiesSequence = (*list)[TagFromName(FramePixelDataPropertiesSequence)];
	if (FramePixelDataPropertiesSequence) {
		if (FramePixelDataPropertiesSequence->getInformationEntity() == UnknownIE) FramePixelDataPropertiesSequence->setInformationEntity(ie);
	}

}

Macro_XRayFrameDetectorParametersMacro::Macro_XRayFrameDetectorParametersMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFrameDetectorParametersMacro";

	FrameDetectorParametersSequence = (*list)[TagFromName(FrameDetectorParametersSequence)];
	if (FrameDetectorParametersSequence) {
		if (FrameDetectorParametersSequence->getInformationEntity() == UnknownIE) FrameDetectorParametersSequence->setInformationEntity(ie);
	}

}

Macro_XRayCalibrationDeviceUsageMacro::Macro_XRayCalibrationDeviceUsageMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayCalibrationDeviceUsageMacro";

	CalibrationSequence = (*list)[TagFromName(CalibrationSequence)];
	if (CalibrationSequence) {
		if (CalibrationSequence->getInformationEntity() == UnknownIE) CalibrationSequence->setInformationEntity(ie);
	}

}

Macro_XRayObjectThicknessMacro::Macro_XRayObjectThicknessMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayObjectThicknessMacro";

	ObjectThicknessSequence = (*list)[TagFromName(ObjectThicknessSequence)];
	if (ObjectThicknessSequence) {
		if (ObjectThicknessSequence->getInformationEntity() == UnknownIE) ObjectThicknessSequence->setInformationEntity(ie);
	}

}

Macro_XRayFrameAcquisitionMacro::Macro_XRayFrameAcquisitionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayFrameAcquisitionMacro";

	FrameAcquisitionSequence = (*list)[TagFromName(FrameAcquisitionSequence)];
	if (FrameAcquisitionSequence) {
		if (FrameAcquisitionSequence->getInformationEntity() == UnknownIE) FrameAcquisitionSequence->setInformationEntity(ie);
	}

}

Macro_XRayProjectionPixelCalibrationMacro::Macro_XRayProjectionPixelCalibrationMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayProjectionPixelCalibrationMacro";

	ProjectionPixelCalibrationSequence = (*list)[TagFromName(ProjectionPixelCalibrationSequence)];
	if (ProjectionPixelCalibrationSequence) {
		if (ProjectionPixelCalibrationSequence->getInformationEntity() == UnknownIE) ProjectionPixelCalibrationSequence->setInformationEntity(ie);
	}

}

Macro_XRayPositionerMacro::Macro_XRayPositionerMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayPositionerMacro";

	PositionerPositionSequence = (*list)[TagFromName(PositionerPositionSequence)];
	if (PositionerPositionSequence) {
		if (PositionerPositionSequence->getInformationEntity() == UnknownIE) PositionerPositionSequence->setInformationEntity(ie);
	}

}

Macro_XRayTablePositionMacro::Macro_XRayTablePositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayTablePositionMacro";

	TablePositionSequence = (*list)[TagFromName(TablePositionSequence)];
	if (TablePositionSequence) {
		if (TablePositionSequence->getInformationEntity() == UnknownIE) TablePositionSequence->setInformationEntity(ie);
	}

}

Macro_XRayCollimatorMacro::Macro_XRayCollimatorMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayCollimatorMacro";

	CollimatorShapeSequence = (*list)[TagFromName(CollimatorShapeSequence)];
	if (CollimatorShapeSequence) {
		if (CollimatorShapeSequence->getInformationEntity() == UnknownIE) CollimatorShapeSequence->setInformationEntity(ie);
	}

}

Macro_XRayIsocenterReferenceSystemMacro::Macro_XRayIsocenterReferenceSystemMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayIsocenterReferenceSystemMacro";

	IsocenterReferenceSystemSequence = (*list)[TagFromName(IsocenterReferenceSystemSequence)];
	if (IsocenterReferenceSystemSequence) {
		if (IsocenterReferenceSystemSequence->getInformationEntity() == UnknownIE) IsocenterReferenceSystemSequence->setInformationEntity(ie);
	}

}

Macro_XRayGeometryMacro::Macro_XRayGeometryMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRayGeometryMacro";

	XRayGeometrySequence = (*list)[TagFromName(XRayGeometrySequence)];
	if (XRayGeometrySequence) {
		if (XRayGeometrySequence->getInformationEntity() == UnknownIE) XRayGeometrySequence->setInformationEntity(ie);
	}

}

Module_XAXRFMultiFramePresentation::Module_XAXRFMultiFramePresentation(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XAXRFMultiFramePresentation";

	PreferredPlaybackSequencing = (*list)[TagFromName(PreferredPlaybackSequencing)];
	if (PreferredPlaybackSequencing) {
		if (PreferredPlaybackSequencing->getInformationEntity() == UnknownIE) PreferredPlaybackSequencing->setInformationEntity(ie);
	}

	FrameDisplaySequence = (*list)[TagFromName(FrameDisplaySequence)];
	if (FrameDisplaySequence) {
		if (FrameDisplaySequence->getInformationEntity() == UnknownIE) FrameDisplaySequence->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForEnhancedXAImage::Module_MultiFrameFunctionalGroupsForEnhancedXAImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForEnhancedXAImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_FramePixelShiftMacro(list,ie);
	new Macro_PatientOrientationInFrameMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_XRayFrameCharacteristicsMacro(list,ie);
	new Macro_XRayFieldOfViewMacro(list,ie);
	new Macro_XRayExposureControlSensingRegionsMacro(list,ie);
	new Macro_XRayFramePixelDataPropertiesMacro(list,ie);
	new Macro_XRayFrameDetectorParametersMacro(list,ie);
	new Macro_XRayCalibrationDeviceUsageMacro(list,ie);
	new Macro_XRayObjectThicknessMacro(list,ie);
	new Macro_XRayFrameAcquisitionMacro(list,ie);
	new Macro_XRayProjectionPixelCalibrationMacro(list,ie);
	new Macro_XRayPositionerMacro(list,ie);
	new Macro_XRayTablePositionMacro(list,ie);
	new Macro_XRayCollimatorMacro(list,ie);
	new Macro_XRayIsocenterReferenceSystemMacro(list,ie);
	new Macro_XRayGeometryMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_FramePixelShiftMacro(list,ie);
	new Macro_PatientOrientationInFrameMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_XRayFrameCharacteristicsMacro(list,ie);
	new Macro_XRayFieldOfViewMacro(list,ie);
	new Macro_XRayExposureControlSensingRegionsMacro(list,ie);
	new Macro_XRayFramePixelDataPropertiesMacro(list,ie);
	new Macro_XRayFrameDetectorParametersMacro(list,ie);
	new Macro_XRayCalibrationDeviceUsageMacro(list,ie);
	new Macro_XRayObjectThicknessMacro(list,ie);
	new Macro_XRayFrameAcquisitionMacro(list,ie);
	new Macro_XRayProjectionPixelCalibrationMacro(list,ie);
	new Macro_XRayPositionerMacro(list,ie);
	new Macro_XRayTablePositionMacro(list,ie);
	new Macro_XRayCollimatorMacro(list,ie);
	new Macro_XRayIsocenterReferenceSystemMacro(list,ie);
	new Macro_XRayGeometryMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForEnhancedXRFImage::Module_MultiFrameFunctionalGroupsForEnhancedXRFImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForEnhancedXRFImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_FramePixelShiftMacro(list,ie);
	new Macro_PatientOrientationInFrameMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_XRayFrameCharacteristicsMacro(list,ie);
	new Macro_XRayFieldOfViewMacro(list,ie);
	new Macro_XRayExposureControlSensingRegionsMacro(list,ie);
	new Macro_XRayFramePixelDataPropertiesMacro(list,ie);
	new Macro_XRayFrameDetectorParametersMacro(list,ie);
	new Macro_XRayCalibrationDeviceUsageMacro(list,ie);
	new Macro_XRayObjectThicknessMacro(list,ie);
	new Macro_XRayFrameAcquisitionMacro(list,ie);
	new Macro_XRayPositionerMacro(list,ie);
	new Macro_XRayTablePositionMacro(list,ie);
	new Macro_XRayCollimatorMacro(list,ie);
	new Macro_XRayGeometryMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_PixelIntensityRelationshipLUTMacro(list,ie);
	new Macro_FramePixelShiftMacro(list,ie);
	new Macro_PatientOrientationInFrameMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_IrradiationEventIdentificationMacro(list,ie);
	new Macro_XRayFrameCharacteristicsMacro(list,ie);
	new Macro_XRayFieldOfViewMacro(list,ie);
	new Macro_XRayExposureControlSensingRegionsMacro(list,ie);
	new Macro_XRayFramePixelDataPropertiesMacro(list,ie);
	new Macro_XRayFrameDetectorParametersMacro(list,ie);
	new Macro_XRayCalibrationDeviceUsageMacro(list,ie);
	new Macro_XRayObjectThicknessMacro(list,ie);
	new Macro_XRayFrameAcquisitionMacro(list,ie);
	new Macro_XRayPositionerMacro(list,ie);
	new Macro_XRayTablePositionMacro(list,ie);
	new Macro_XRayCollimatorMacro(list,ie);
	new Macro_XRayGeometryMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage::Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForXRay3DAngiographicImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_XRay3DFrameTypeMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_XRay3DFrameTypeMacro(list,ie);
}

Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage::Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForXRay3DCraniofacialImage";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_XRay3DFrameTypeMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_FrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_FrameAnatomyMacro(list,ie);
	new Macro_PixelValueTransformationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_XRay3DFrameTypeMacro(list,ie);
}

Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage::Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage";

	PixelPresentation = (*list)[TagFromName(PixelPresentation)];
	if (PixelPresentation) {
		if (PixelPresentation->getInformationEntity() == UnknownIE) PixelPresentation->setInformationEntity(ie);
	}

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
	if (VolumeBasedCalculationTechnique) {
		if (VolumeBasedCalculationTechnique->getInformationEntity() == UnknownIE) VolumeBasedCalculationTechnique->setInformationEntity(ie);
	}

}

Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage::Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage";

	PixelPresentation = (*list)[TagFromName(PixelPresentation)];
	if (PixelPresentation) {
		if (PixelPresentation->getInformationEntity() == UnknownIE) PixelPresentation->setInformationEntity(ie);
	}

	VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
	if (VolumetricProperties) {
		if (VolumetricProperties->getInformationEntity() == UnknownIE) VolumetricProperties->setInformationEntity(ie);
	}

	VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
	if (VolumeBasedCalculationTechnique) {
		if (VolumeBasedCalculationTechnique->getInformationEntity() == UnknownIE) VolumeBasedCalculationTechnique->setInformationEntity(ie);
	}

}

Module_XRay3DImage::Module_XRay3DImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage(list,ie);
	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	ContentQualification = (*list)[TagFromName(ContentQualification)];
	if (ContentQualification) {
		if (ContentQualification->getInformationEntity() == UnknownIE) ContentQualification->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	ReferencedImageEvidenceSequence = (*list)[TagFromName(ReferencedImageEvidenceSequence)];
	if (ReferencedImageEvidenceSequence) {
		if (ReferencedImageEvidenceSequence->getInformationEntity() == UnknownIE) ReferencedImageEvidenceSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ImageComments = (*list)[TagFromName(ImageComments)];
	if (ImageComments) {
		if (ImageComments->getInformationEntity() == UnknownIE) ImageComments->setInformationEntity(ie);
	}

	QualityControlImage = (*list)[TagFromName(QualityControlImage)];
	if (QualityControlImage) {
		if (QualityControlImage->getInformationEntity() == UnknownIE) QualityControlImage->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	SourceIrradiationEventSequence = (*list)[TagFromName(SourceIrradiationEventSequence)];
	if (SourceIrradiationEventSequence) {
		if (SourceIrradiationEventSequence->getInformationEntity() == UnknownIE) SourceIrradiationEventSequence->setInformationEntity(ie);
	}

}

Module_XRay3DAngiographicImageContributingSources::Module_XRay3DAngiographicImageContributingSources(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DAngiographicImageContributingSources";

	ContributingSourcesSequence = (*list)[TagFromName(ContributingSourcesSequence)];
	if (ContributingSourcesSequence) {
		if (ContributingSourcesSequence->getInformationEntity() == UnknownIE) ContributingSourcesSequence->setInformationEntity(ie);
	}

	new Macro_GeneralContributingSourcesMacro(list,ie);
	new Macro_ContributingImageSourcesMacro(list,ie);
}

Module_XRay3DCraniofacialImageContributingSources::Module_XRay3DCraniofacialImageContributingSources(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DCraniofacialImageContributingSources";

	ContributingSourcesSequence = (*list)[TagFromName(ContributingSourcesSequence)];
	if (ContributingSourcesSequence) {
		if (ContributingSourcesSequence->getInformationEntity() == UnknownIE) ContributingSourcesSequence->setInformationEntity(ie);
	}

	new Macro_GeneralContributingSourcesMacro(list,ie);
	new Macro_ContributingImageSourcesMacro(list,ie);
}

Macro_XRay3DGeneralSharedAcquisitionMacro::Macro_XRay3DGeneralSharedAcquisitionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DGeneralSharedAcquisitionMacro";

	SourceImageSequence = (*list)[TagFromName(SourceImageSequence)];
	if (SourceImageSequence) {
		if (SourceImageSequence->getInformationEntity() == UnknownIE) SourceImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	FieldOfViewDimensionsInFloat = (*list)[TagFromName(FieldOfViewDimensionsInFloat)];
	if (FieldOfViewDimensionsInFloat) {
		if (FieldOfViewDimensionsInFloat->getInformationEntity() == UnknownIE) FieldOfViewDimensionsInFloat->setInformationEntity(ie);
	}

	FieldOfViewOrigin = (*list)[TagFromName(FieldOfViewOrigin)];
	if (FieldOfViewOrigin) {
		if (FieldOfViewOrigin->getInformationEntity() == UnknownIE) FieldOfViewOrigin->setInformationEntity(ie);
	}

	FieldOfViewRotation = (*list)[TagFromName(FieldOfViewRotation)];
	if (FieldOfViewRotation) {
		if (FieldOfViewRotation->getInformationEntity() == UnknownIE) FieldOfViewRotation->setInformationEntity(ie);
	}

	FieldOfViewHorizontalFlip = (*list)[TagFromName(FieldOfViewHorizontalFlip)];
	if (FieldOfViewHorizontalFlip) {
		if (FieldOfViewHorizontalFlip->getInformationEntity() == UnknownIE) FieldOfViewHorizontalFlip->setInformationEntity(ie);
	}

	Grid = (*list)[TagFromName(Grid)];
	if (Grid) {
		if (Grid->getInformationEntity() == UnknownIE) Grid->setInformationEntity(ie);
	}

	new Macro_XRayGridDescriptionMacro(list,ie);
	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
	if (XRayTubeCurrentInmA) {
		if (XRayTubeCurrentInmA->getInformationEntity() == UnknownIE) XRayTubeCurrentInmA->setInformationEntity(ie);
	}

	ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
	if (ExposureTimeInms) {
		if (ExposureTimeInms->getInformationEntity() == UnknownIE) ExposureTimeInms->setInformationEntity(ie);
	}

	ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
	if (ExposureInmAs) {
		if (ExposureInmAs->getInformationEntity() == UnknownIE) ExposureInmAs->setInformationEntity(ie);
	}

	ContrastBolusAgent = (*list)[TagFromName(ContrastBolusAgent)];
	if (ContrastBolusAgent) {
		if (ContrastBolusAgent->getInformationEntity() == UnknownIE) ContrastBolusAgent->setInformationEntity(ie);
	}

	ContrastBolusAgentSequence = (*list)[TagFromName(ContrastBolusAgentSequence)];
	if (ContrastBolusAgentSequence) {
		if (ContrastBolusAgentSequence->getInformationEntity() == UnknownIE) ContrastBolusAgentSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	StartAcquisitionDateTime = (*list)[TagFromName(StartAcquisitionDateTime)];
	if (StartAcquisitionDateTime) {
		if (StartAcquisitionDateTime->getInformationEntity() == UnknownIE) StartAcquisitionDateTime->setInformationEntity(ie);
	}

	EndAcquisitionDateTime = (*list)[TagFromName(EndAcquisitionDateTime)];
	if (EndAcquisitionDateTime) {
		if (EndAcquisitionDateTime->getInformationEntity() == UnknownIE) EndAcquisitionDateTime->setInformationEntity(ie);
	}

}

Macro_XRay3DGeneralPerProjectionAcquisitionMacro::Macro_XRay3DGeneralPerProjectionAcquisitionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DGeneralPerProjectionAcquisitionMacro";

	KVP = (*list)[TagFromName(KVP)];
	if (KVP) {
		if (KVP->getInformationEntity() == UnknownIE) KVP->setInformationEntity(ie);
	}

	XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
	if (XRayTubeCurrentInmA) {
		if (XRayTubeCurrentInmA->getInformationEntity() == UnknownIE) XRayTubeCurrentInmA->setInformationEntity(ie);
	}

	FrameAcquisitionDuration = (*list)[TagFromName(FrameAcquisitionDuration)];
	if (FrameAcquisitionDuration) {
		if (FrameAcquisitionDuration->getInformationEntity() == UnknownIE) FrameAcquisitionDuration->setInformationEntity(ie);
	}

	CollimatorShape = (*list)[TagFromName(CollimatorShape)];
	if (CollimatorShape) {
		if (CollimatorShape->getInformationEntity() == UnknownIE) CollimatorShape->setInformationEntity(ie);
	}

	new Macro_XRayCollimatorDimensionsMacro(list,ie);
}

Macro_XRay3DGeneralPositionerMovementMacro::Macro_XRay3DGeneralPositionerMovementMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DGeneralPositionerMovementMacro";

	PrimaryPositionerScanArc = (*list)[TagFromName(PrimaryPositionerScanArc)];
	if (PrimaryPositionerScanArc) {
		if (PrimaryPositionerScanArc->getInformationEntity() == UnknownIE) PrimaryPositionerScanArc->setInformationEntity(ie);
	}

	PrimaryPositionerScanStartAngle = (*list)[TagFromName(PrimaryPositionerScanStartAngle)];
	if (PrimaryPositionerScanStartAngle) {
		if (PrimaryPositionerScanStartAngle->getInformationEntity() == UnknownIE) PrimaryPositionerScanStartAngle->setInformationEntity(ie);
	}

	PrimaryPositionerIncrement = (*list)[TagFromName(PrimaryPositionerIncrement)];
	if (PrimaryPositionerIncrement) {
		if (PrimaryPositionerIncrement->getInformationEntity() == UnknownIE) PrimaryPositionerIncrement->setInformationEntity(ie);
	}

	SecondaryPositionerScanArc = (*list)[TagFromName(SecondaryPositionerScanArc)];
	if (SecondaryPositionerScanArc) {
		if (SecondaryPositionerScanArc->getInformationEntity() == UnknownIE) SecondaryPositionerScanArc->setInformationEntity(ie);
	}

	SecondaryPositionerScanStartAngle = (*list)[TagFromName(SecondaryPositionerScanStartAngle)];
	if (SecondaryPositionerScanStartAngle) {
		if (SecondaryPositionerScanStartAngle->getInformationEntity() == UnknownIE) SecondaryPositionerScanStartAngle->setInformationEntity(ie);
	}

	SecondaryPositionerIncrement = (*list)[TagFromName(SecondaryPositionerIncrement)];
	if (SecondaryPositionerIncrement) {
		if (SecondaryPositionerIncrement->getInformationEntity() == UnknownIE) SecondaryPositionerIncrement->setInformationEntity(ie);
	}

}

Module_XRay3DAngiographicAcquisition::Module_XRay3DAngiographicAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DAngiographicAcquisition";

	XRay3DAcquisitionSequence = (*list)[TagFromName(XRay3DAcquisitionSequence)];
	if (XRay3DAcquisitionSequence) {
		if (XRay3DAcquisitionSequence->getInformationEntity() == UnknownIE) XRay3DAcquisitionSequence->setInformationEntity(ie);
	}

	new Macro_XRay3DGeneralSharedAcquisitionMacro(list,ie);
	new Macro_DigitalXRayDetectorMacro(list,ie);
	new Macro_XRay3DGeneralPositionerMovementMacro(list,ie);
	new Macro_XRay3DGeneralPerProjectionAcquisitionMacro(list,ie);
}

Module_XRay3DCraniofacialAcquisition::Module_XRay3DCraniofacialAcquisition(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DCraniofacialAcquisition";

	XRay3DAcquisitionSequence = (*list)[TagFromName(XRay3DAcquisitionSequence)];
	if (XRay3DAcquisitionSequence) {
		if (XRay3DAcquisitionSequence->getInformationEntity() == UnknownIE) XRay3DAcquisitionSequence->setInformationEntity(ie);
	}

	new Macro_XRay3DGeneralSharedAcquisitionMacro(list,ie);
	new Macro_DigitalXRayDetectorMacro(list,ie);
	new Macro_XRay3DGeneralPerProjectionAcquisitionMacro(list,ie);
}

Module_XRay3DReconstruction::Module_XRay3DReconstruction(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DReconstruction";

	XRay3DReconstructionSequence = (*list)[TagFromName(XRay3DReconstructionSequence)];
	if (XRay3DReconstructionSequence) {
		if (XRay3DReconstructionSequence->getInformationEntity() == UnknownIE) XRay3DReconstructionSequence->setInformationEntity(ie);
	}

}

Macro_XRay3DFrameTypeMacro::Macro_XRay3DFrameTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "XRay3DFrameTypeMacro";

	XRay3DFrameTypeSequence = (*list)[TagFromName(XRay3DFrameTypeSequence)];
	if (XRay3DFrameTypeSequence) {
		if (XRay3DFrameTypeSequence->getInformationEntity() == UnknownIE) XRay3DFrameTypeSequence->setInformationEntity(ie);
	}

	new Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage(list,ie);
}

Module_EnhancedPaletteColorLookupTable::Module_EnhancedPaletteColorLookupTable(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedPaletteColorLookupTable";

	DataFrameAssignmentSequence = (*list)[TagFromName(DataFrameAssignmentSequence)];
	if (DataFrameAssignmentSequence) {
		if (DataFrameAssignmentSequence->getInformationEntity() == UnknownIE) DataFrameAssignmentSequence->setInformationEntity(ie);
	}

	new Macro_VOILUTMacro(list,ie);
	BlendingLUT1Sequence = (*list)[TagFromName(BlendingLUT1Sequence)];
	if (BlendingLUT1Sequence) {
		if (BlendingLUT1Sequence->getInformationEntity() == UnknownIE) BlendingLUT1Sequence->setInformationEntity(ie);
	}

	BlendingLUT2Sequence = (*list)[TagFromName(BlendingLUT2Sequence)];
	if (BlendingLUT2Sequence) {
		if (BlendingLUT2Sequence->getInformationEntity() == UnknownIE) BlendingLUT2Sequence->setInformationEntity(ie);
	}

	EnhancedPaletteColorLookupTableSequence = (*list)[TagFromName(EnhancedPaletteColorLookupTableSequence)];
	if (EnhancedPaletteColorLookupTableSequence) {
		if (EnhancedPaletteColorLookupTableSequence->getInformationEntity() == UnknownIE) EnhancedPaletteColorLookupTableSequence->setInformationEntity(ie);
	}

	ICCProfile = (*list)[TagFromName(ICCProfile)];
	if (ICCProfile) {
		if (ICCProfile->getInformationEntity() == UnknownIE) ICCProfile->setInformationEntity(ie);
	}

	ColorSpace = (*list)[TagFromName(ColorSpace)];
	if (ColorSpace) {
		if (ColorSpace->getInformationEntity() == UnknownIE) ColorSpace->setInformationEntity(ie);
	}

}

Macro_PlanePositionVolumeMacro::Macro_PlanePositionVolumeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PlanePositionVolumeMacro";

	PlanePositionVolumeSequence = (*list)[TagFromName(PlanePositionVolumeSequence)];
	if (PlanePositionVolumeSequence) {
		if (PlanePositionVolumeSequence->getInformationEntity() == UnknownIE) PlanePositionVolumeSequence->setInformationEntity(ie);
	}

}

Macro_PlaneOrientationVolumeMacro::Macro_PlaneOrientationVolumeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "PlaneOrientationVolumeMacro";

	PlaneOrientationVolumeSequence = (*list)[TagFromName(PlaneOrientationVolumeSequence)];
	if (PlaneOrientationVolumeSequence) {
		if (PlaneOrientationVolumeSequence->getInformationEntity() == UnknownIE) PlaneOrientationVolumeSequence->setInformationEntity(ie);
	}

}

Macro_TemporalPositionMacro::Macro_TemporalPositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "TemporalPositionMacro";

	TemporalPositionSequence = (*list)[TagFromName(TemporalPositionSequence)];
	if (TemporalPositionSequence) {
		if (TemporalPositionSequence->getInformationEntity() == UnknownIE) TemporalPositionSequence->setInformationEntity(ie);
	}

}

Macro_ImageDataTypeMacro::Macro_ImageDataTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ImageDataTypeMacro";

	ImageDataTypeSequence = (*list)[TagFromName(ImageDataTypeSequence)];
	if (ImageDataTypeSequence) {
		if (ImageDataTypeSequence->getInformationEntity() == UnknownIE) ImageDataTypeSequence->setInformationEntity(ie);
	}

}

Module_EnhancedUSSeries::Module_EnhancedUSSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedUSSeries";

	Modality = (*list)[TagFromName(Modality)];
	if (Modality) {
		if (Modality->getInformationEntity() == UnknownIE) Modality->setInformationEntity(ie);
	}

	ReferencedPerformedProcedureStepSequence = (*list)[TagFromName(ReferencedPerformedProcedureStepSequence)];
	if (ReferencedPerformedProcedureStepSequence) {
		if (ReferencedPerformedProcedureStepSequence->getInformationEntity() == UnknownIE) ReferencedPerformedProcedureStepSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	PerformedProtocolCodeSequence = (*list)[TagFromName(PerformedProtocolCodeSequence)];
	if (PerformedProtocolCodeSequence) {
		if (PerformedProtocolCodeSequence->getInformationEntity() == UnknownIE) PerformedProtocolCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	new Macro_ContentItemMacro(list,ie);
	PerformedProtocolType = (*list)[TagFromName(PerformedProtocolType)];
	if (PerformedProtocolType) {
		if (PerformedProtocolType->getInformationEntity() == UnknownIE) PerformedProtocolType->setInformationEntity(ie);
	}

}

Module_UltrasoundFrameOfReference::Module_UltrasoundFrameOfReference(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "UltrasoundFrameOfReference";

	VolumeFrameOfReferenceUID = (*list)[TagFromName(VolumeFrameOfReferenceUID)];
	if (VolumeFrameOfReferenceUID) {
		if (VolumeFrameOfReferenceUID->getInformationEntity() == UnknownIE) VolumeFrameOfReferenceUID->setInformationEntity(ie);
	}

	UltrasoundAcquisitionGeometry = (*list)[TagFromName(UltrasoundAcquisitionGeometry)];
	if (UltrasoundAcquisitionGeometry) {
		if (UltrasoundAcquisitionGeometry->getInformationEntity() == UnknownIE) UltrasoundAcquisitionGeometry->setInformationEntity(ie);
	}

	ApexPosition = (*list)[TagFromName(ApexPosition)];
	if (ApexPosition) {
		if (ApexPosition->getInformationEntity() == UnknownIE) ApexPosition->setInformationEntity(ie);
	}

	VolumeToTransducerRelationship = (*list)[TagFromName(VolumeToTransducerRelationship)];
	if (VolumeToTransducerRelationship) {
		if (VolumeToTransducerRelationship->getInformationEntity() == UnknownIE) VolumeToTransducerRelationship->setInformationEntity(ie);
	}

	VolumeToTransducerMappingMatrix = (*list)[TagFromName(VolumeToTransducerMappingMatrix)];
	if (VolumeToTransducerMappingMatrix) {
		if (VolumeToTransducerMappingMatrix->getInformationEntity() == UnknownIE) VolumeToTransducerMappingMatrix->setInformationEntity(ie);
	}

	PatientFrameOfReferenceSource = (*list)[TagFromName(PatientFrameOfReferenceSource)];
	if (PatientFrameOfReferenceSource) {
		if (PatientFrameOfReferenceSource->getInformationEntity() == UnknownIE) PatientFrameOfReferenceSource->setInformationEntity(ie);
	}

	TableFrameOfReferenceUID = (*list)[TagFromName(TableFrameOfReferenceUID)];
	if (TableFrameOfReferenceUID) {
		if (TableFrameOfReferenceUID->getInformationEntity() == UnknownIE) TableFrameOfReferenceUID->setInformationEntity(ie);
	}

	VolumeToTableMappingMatrix = (*list)[TagFromName(VolumeToTableMappingMatrix)];
	if (VolumeToTableMappingMatrix) {
		if (VolumeToTableMappingMatrix->getInformationEntity() == UnknownIE) VolumeToTableMappingMatrix->setInformationEntity(ie);
	}

}

Module_EnhancedUSImage::Module_EnhancedUSImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "EnhancedUSImage";

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
	if (SamplesPerPixel) {
		if (SamplesPerPixel->getInformationEntity() == UnknownIE) SamplesPerPixel->setInformationEntity(ie);
	}

	PhotometricInterpretation = (*list)[TagFromName(PhotometricInterpretation)];
	if (PhotometricInterpretation) {
		if (PhotometricInterpretation->getInformationEntity() == UnknownIE) PhotometricInterpretation->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	DimensionOrganizationType = (*list)[TagFromName(DimensionOrganizationType)];
	if (DimensionOrganizationType) {
		if (DimensionOrganizationType->getInformationEntity() == UnknownIE) DimensionOrganizationType->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	AcquisitionDuration = (*list)[TagFromName(AcquisitionDuration)];
	if (AcquisitionDuration) {
		if (AcquisitionDuration->getInformationEntity() == UnknownIE) AcquisitionDuration->setInformationEntity(ie);
	}

	PositionMeasuringDeviceUsed = (*list)[TagFromName(PositionMeasuringDeviceUsed)];
	if (PositionMeasuringDeviceUsed) {
		if (PositionMeasuringDeviceUsed->getInformationEntity() == UnknownIE) PositionMeasuringDeviceUsed->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	LossyImageCompressionRatio = (*list)[TagFromName(LossyImageCompressionRatio)];
	if (LossyImageCompressionRatio) {
		if (LossyImageCompressionRatio->getInformationEntity() == UnknownIE) LossyImageCompressionRatio->setInformationEntity(ie);
	}

	LossyImageCompressionMethod = (*list)[TagFromName(LossyImageCompressionMethod)];
	if (LossyImageCompressionMethod) {
		if (LossyImageCompressionMethod->getInformationEntity() == UnknownIE) LossyImageCompressionMethod->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
	if (RescaleIntercept) {
		if (RescaleIntercept->getInformationEntity() == UnknownIE) RescaleIntercept->setInformationEntity(ie);
	}

	RescaleSlope = (*list)[TagFromName(RescaleSlope)];
	if (RescaleSlope) {
		if (RescaleSlope->getInformationEntity() == UnknownIE) RescaleSlope->setInformationEntity(ie);
	}

	SourceImageSequence = (*list)[TagFromName(SourceImageSequence)];
	if (SourceImageSequence) {
		if (SourceImageSequence->getInformationEntity() == UnknownIE) SourceImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
	if (ReferencedImageSequence) {
		if (ReferencedImageSequence->getInformationEntity() == UnknownIE) ReferencedImageSequence->setInformationEntity(ie);
	}

	new Macro_ImageSOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	ReferencedRawDataSequence = (*list)[TagFromName(ReferencedRawDataSequence)];
	if (ReferencedRawDataSequence) {
		if (ReferencedRawDataSequence->getInformationEntity() == UnknownIE) ReferencedRawDataSequence->setInformationEntity(ie);
	}

	new Macro_HierarchicalSOPInstanceReferenceMacro(list,ie);
	ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
	if (ReferencedInstanceSequence) {
		if (ReferencedInstanceSequence->getInformationEntity() == UnknownIE) ReferencedInstanceSequence->setInformationEntity(ie);
	}

	new Macro_SOPInstanceReferenceMacro(list,ie);
	new Macro_CodeSequenceMacro(list,ie);
	NumberOfStages = (*list)[TagFromName(NumberOfStages)];
	if (NumberOfStages) {
		if (NumberOfStages->getInformationEntity() == UnknownIE) NumberOfStages->setInformationEntity(ie);
	}

	StageNumber = (*list)[TagFromName(StageNumber)];
	if (StageNumber) {
		if (StageNumber->getInformationEntity() == UnknownIE) StageNumber->setInformationEntity(ie);
	}

	StageCodeSequence = (*list)[TagFromName(StageCodeSequence)];
	if (StageCodeSequence) {
		if (StageCodeSequence->getInformationEntity() == UnknownIE) StageCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_MandatoryViewAndSliceProgressionDirectionMacro(list,ie);
	EventTimerSequence = (*list)[TagFromName(EventTimerSequence)];
	if (EventTimerSequence) {
		if (EventTimerSequence->getInformationEntity() == UnknownIE) EventTimerSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	new Macro_GeneralAnatomyMandatoryMacro(list,ie);
	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	IconImageSequence = (*list)[TagFromName(IconImageSequence)];
	if (IconImageSequence) {
		if (IconImageSequence->getInformationEntity() == UnknownIE) IconImageSequence->setInformationEntity(ie);
	}

	new Macro_IconImageSequenceMacro(list,ie);
	TransducerData = (*list)[TagFromName(TransducerData)];
	if (TransducerData) {
		if (TransducerData->getInformationEntity() == UnknownIE) TransducerData->setInformationEntity(ie);
	}

	TransducerScanPatternCodeSequence = (*list)[TagFromName(TransducerScanPatternCodeSequence)];
	if (TransducerScanPatternCodeSequence) {
		if (TransducerScanPatternCodeSequence->getInformationEntity() == UnknownIE) TransducerScanPatternCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	TransducerGeometryCodeSequence = (*list)[TagFromName(TransducerGeometryCodeSequence)];
	if (TransducerGeometryCodeSequence) {
		if (TransducerGeometryCodeSequence->getInformationEntity() == UnknownIE) TransducerGeometryCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	TransducerBeamSteeringCodeSequence = (*list)[TagFromName(TransducerBeamSteeringCodeSequence)];
	if (TransducerBeamSteeringCodeSequence) {
		if (TransducerBeamSteeringCodeSequence->getInformationEntity() == UnknownIE) TransducerBeamSteeringCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	TransducerApplicationCodeSequence = (*list)[TagFromName(TransducerApplicationCodeSequence)];
	if (TransducerApplicationCodeSequence) {
		if (TransducerApplicationCodeSequence->getInformationEntity() == UnknownIE) TransducerApplicationCodeSequence->setInformationEntity(ie);
	}

	new Macro_CodeSequenceMacro(list,ie);
	ProcessingFunction = (*list)[TagFromName(ProcessingFunction)];
	if (ProcessingFunction) {
		if (ProcessingFunction->getInformationEntity() == UnknownIE) ProcessingFunction->setInformationEntity(ie);
	}

	MechanicalIndex = (*list)[TagFromName(MechanicalIndex)];
	if (MechanicalIndex) {
		if (MechanicalIndex->getInformationEntity() == UnknownIE) MechanicalIndex->setInformationEntity(ie);
	}

	BoneThermalIndex = (*list)[TagFromName(BoneThermalIndex)];
	if (BoneThermalIndex) {
		if (BoneThermalIndex->getInformationEntity() == UnknownIE) BoneThermalIndex->setInformationEntity(ie);
	}

	CranialThermalIndex = (*list)[TagFromName(CranialThermalIndex)];
	if (CranialThermalIndex) {
		if (CranialThermalIndex->getInformationEntity() == UnknownIE) CranialThermalIndex->setInformationEntity(ie);
	}

	SoftTissueThermalIndex = (*list)[TagFromName(SoftTissueThermalIndex)];
	if (SoftTissueThermalIndex) {
		if (SoftTissueThermalIndex->getInformationEntity() == UnknownIE) SoftTissueThermalIndex->setInformationEntity(ie);
	}

	DepthsOfFocus = (*list)[TagFromName(DepthsOfFocus)];
	if (DepthsOfFocus) {
		if (DepthsOfFocus->getInformationEntity() == UnknownIE) DepthsOfFocus->setInformationEntity(ie);
	}

	DepthOfScanField = (*list)[TagFromName(DepthOfScanField)];
	if (DepthOfScanField) {
		if (DepthOfScanField->getInformationEntity() == UnknownIE) DepthOfScanField->setInformationEntity(ie);
	}

}

Module_IVUSImage::Module_IVUSImage(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "IVUSImage";

	IVUSAcquisition = (*list)[TagFromName(IVUSAcquisition)];
	if (IVUSAcquisition) {
		if (IVUSAcquisition->getInformationEntity() == UnknownIE) IVUSAcquisition->setInformationEntity(ie);
	}

	IVUSPullbackRate = (*list)[TagFromName(IVUSPullbackRate)];
	if (IVUSPullbackRate) {
		if (IVUSPullbackRate->getInformationEntity() == UnknownIE) IVUSPullbackRate->setInformationEntity(ie);
	}

	IVUSGatedRate = (*list)[TagFromName(IVUSGatedRate)];
	if (IVUSGatedRate) {
		if (IVUSGatedRate->getInformationEntity() == UnknownIE) IVUSGatedRate->setInformationEntity(ie);
	}

	IVUSPullbackStartFrameNumber = (*list)[TagFromName(IVUSPullbackStartFrameNumber)];
	if (IVUSPullbackStartFrameNumber) {
		if (IVUSPullbackStartFrameNumber->getInformationEntity() == UnknownIE) IVUSPullbackStartFrameNumber->setInformationEntity(ie);
	}

	IVUSPullbackStopFrameNumber = (*list)[TagFromName(IVUSPullbackStopFrameNumber)];
	if (IVUSPullbackStopFrameNumber) {
		if (IVUSPullbackStopFrameNumber->getInformationEntity() == UnknownIE) IVUSPullbackStopFrameNumber->setInformationEntity(ie);
	}

}

Module_ExcludedIntervals::Module_ExcludedIntervals(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "ExcludedIntervals";

	ExcludedIntervalsSequence = (*list)[TagFromName(ExcludedIntervalsSequence)];
	if (ExcludedIntervalsSequence) {
		if (ExcludedIntervalsSequence->getInformationEntity() == UnknownIE) ExcludedIntervalsSequence->setInformationEntity(ie);
	}

}

Macro_USImageDescriptionMacro::Macro_USImageDescriptionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "USImageDescriptionMacro";

	USImageDescriptionSequence = (*list)[TagFromName(USImageDescriptionSequence)];
	if (USImageDescriptionSequence) {
		if (USImageDescriptionSequence->getInformationEntity() == UnknownIE) USImageDescriptionSequence->setInformationEntity(ie);
	}

}

Macro_USImageDescriptionMacroForEnhancedUSVolume::Macro_USImageDescriptionMacroForEnhancedUSVolume(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "USImageDescriptionMacroForEnhancedUSVolume";

	USImageDescriptionSequence = (*list)[TagFromName(USImageDescriptionSequence)];
	if (USImageDescriptionSequence) {
		if (USImageDescriptionSequence->getInformationEntity() == UnknownIE) USImageDescriptionSequence->setInformationEntity(ie);
	}

}

Module_MultiFrameFunctionalGroupsForEnhancedUSVolume::Module_MultiFrameFunctionalGroupsForEnhancedUSVolume(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "MultiFrameFunctionalGroupsForEnhancedUSVolume";

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_PatientOrientationInFrameMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_PlaneOrientationVolumeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_ImageDataTypeMacro(list,ie);
	new Macro_USImageDescriptionMacro(list,ie);
	new Macro_USImageDescriptionMacroForEnhancedUSVolume(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_FrameContentMacro(list,ie);
	new Macro_PixelMeasuresMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_ReferencedImageMacro(list,ie);
	new Macro_DerivationImageMacro(list,ie);
	new Macro_CardiacSynchronizationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_RealWorldValueMappingMacro(list,ie);
	new Macro_ContrastBolusUsageMacro(list,ie);
	new Macro_PatientOrientationInFrameMacro(list,ie);
	new Macro_FrameDisplayShutterMacro(list,ie);
	new Macro_RespiratorySynchronizationMacro(list,ie);
	new Macro_PlanePositionVolumeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_ImageDataTypeMacro(list,ie);
}

Module_QTUSEnhancedUltrasoundVolumeProfilePatient::Module_QTUSEnhancedUltrasoundVolumeProfilePatient(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSEnhancedUltrasoundVolumeProfilePatient";

	IssuerOfPatientID = (*list)[TagFromName(IssuerOfPatientID)];
	if (IssuerOfPatientID) {
		if (IssuerOfPatientID->getInformationEntity() == UnknownIE) IssuerOfPatientID->setInformationEntity(ie);
	}

}

Module_QTUSEnhancedUltrasoundVolumeProfileStudy::Module_QTUSEnhancedUltrasoundVolumeProfileStudy(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSEnhancedUltrasoundVolumeProfileStudy";

	StudyDate = (*list)[TagFromName(StudyDate)];
	if (StudyDate) {
		if (StudyDate->getInformationEntity() == UnknownIE) StudyDate->setInformationEntity(ie);
	}

	StudyTime = (*list)[TagFromName(StudyTime)];
	if (StudyTime) {
		if (StudyTime->getInformationEntity() == UnknownIE) StudyTime->setInformationEntity(ie);
	}

	StudyID = (*list)[TagFromName(StudyID)];
	if (StudyID) {
		if (StudyID->getInformationEntity() == UnknownIE) StudyID->setInformationEntity(ie);
	}

	AccessionNumber = (*list)[TagFromName(AccessionNumber)];
	if (AccessionNumber) {
		if (AccessionNumber->getInformationEntity() == UnknownIE) AccessionNumber->setInformationEntity(ie);
	}

	StudyDescription = (*list)[TagFromName(StudyDescription)];
	if (StudyDescription) {
		if (StudyDescription->getInformationEntity() == UnknownIE) StudyDescription->setInformationEntity(ie);
	}

	ProcedureCodeSequence = (*list)[TagFromName(ProcedureCodeSequence)];
	if (ProcedureCodeSequence) {
		if (ProcedureCodeSequence->getInformationEntity() == UnknownIE) ProcedureCodeSequence->setInformationEntity(ie);
	}

	PatientSize = (*list)[TagFromName(PatientSize)];
	if (PatientSize) {
		if (PatientSize->getInformationEntity() == UnknownIE) PatientSize->setInformationEntity(ie);
	}

	PatientWeight = (*list)[TagFromName(PatientWeight)];
	if (PatientWeight) {
		if (PatientWeight->getInformationEntity() == UnknownIE) PatientWeight->setInformationEntity(ie);
	}

}

Module_QTUSEnhancedUltrasoundVolumeProfileSeries::Module_QTUSEnhancedUltrasoundVolumeProfileSeries(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSEnhancedUltrasoundVolumeProfileSeries";

	SeriesNumber = (*list)[TagFromName(SeriesNumber)];
	if (SeriesNumber) {
		if (SeriesNumber->getInformationEntity() == UnknownIE) SeriesNumber->setInformationEntity(ie);
	}

	Laterality = (*list)[TagFromName(Laterality)];
	if (Laterality) {
		if (Laterality->getInformationEntity() == UnknownIE) Laterality->setInformationEntity(ie);
	}

	SeriesDate = (*list)[TagFromName(SeriesDate)];
	if (SeriesDate) {
		if (SeriesDate->getInformationEntity() == UnknownIE) SeriesDate->setInformationEntity(ie);
	}

	SeriesTime = (*list)[TagFromName(SeriesTime)];
	if (SeriesTime) {
		if (SeriesTime->getInformationEntity() == UnknownIE) SeriesTime->setInformationEntity(ie);
	}

	SeriesDescription = (*list)[TagFromName(SeriesDescription)];
	if (SeriesDescription) {
		if (SeriesDescription->getInformationEntity() == UnknownIE) SeriesDescription->setInformationEntity(ie);
	}

	OperatorsName = (*list)[TagFromName(OperatorsName)];
	if (OperatorsName) {
		if (OperatorsName->getInformationEntity() == UnknownIE) OperatorsName->setInformationEntity(ie);
	}

	BodyPartExamined = (*list)[TagFromName(BodyPartExamined)];
	if (BodyPartExamined) {
		if (BodyPartExamined->getInformationEntity() == UnknownIE) BodyPartExamined->setInformationEntity(ie);
	}

}

Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference::Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSEnhancedUltrasoundVolumeProfileFrameOfReference";

	UltrasoundAcquisitionGeometry = (*list)[TagFromName(UltrasoundAcquisitionGeometry)];
	if (UltrasoundAcquisitionGeometry) {
		if (UltrasoundAcquisitionGeometry->getInformationEntity() == UnknownIE) UltrasoundAcquisitionGeometry->setInformationEntity(ie);
	}

	VolumeToTransducerRelationship = (*list)[TagFromName(VolumeToTransducerRelationship)];
	if (VolumeToTransducerRelationship) {
		if (VolumeToTransducerRelationship->getInformationEntity() == UnknownIE) VolumeToTransducerRelationship->setInformationEntity(ie);
	}

	VolumeToTransducerMappingMatrix = (*list)[TagFromName(VolumeToTransducerMappingMatrix)];
	if (VolumeToTransducerMappingMatrix) {
		if (VolumeToTransducerMappingMatrix->getInformationEntity() == UnknownIE) VolumeToTransducerMappingMatrix->setInformationEntity(ie);
	}

	PatientFrameOfReferenceSource = (*list)[TagFromName(PatientFrameOfReferenceSource)];
	if (PatientFrameOfReferenceSource) {
		if (PatientFrameOfReferenceSource->getInformationEntity() == UnknownIE) PatientFrameOfReferenceSource->setInformationEntity(ie);
	}

	TableFrameOfReferenceUID = (*list)[TagFromName(TableFrameOfReferenceUID)];
	if (TableFrameOfReferenceUID) {
		if (TableFrameOfReferenceUID->getInformationEntity() == UnknownIE) TableFrameOfReferenceUID->setInformationEntity(ie);
	}

	VolumeToTableMappingMatrix = (*list)[TagFromName(VolumeToTableMappingMatrix)];
	if (VolumeToTableMappingMatrix) {
		if (VolumeToTableMappingMatrix->getInformationEntity() == UnknownIE) VolumeToTableMappingMatrix->setInformationEntity(ie);
	}

	SynchronizationFrameOfReferenceUID = (*list)[TagFromName(SynchronizationFrameOfReferenceUID)];
	if (SynchronizationFrameOfReferenceUID) {
		if (SynchronizationFrameOfReferenceUID->getInformationEntity() == UnknownIE) SynchronizationFrameOfReferenceUID->setInformationEntity(ie);
	}

	SynchronizationTrigger = (*list)[TagFromName(SynchronizationTrigger)];
	if (SynchronizationTrigger) {
		if (SynchronizationTrigger->getInformationEntity() == UnknownIE) SynchronizationTrigger->setInformationEntity(ie);
	}

	AcquisitionTimeSynchronized = (*list)[TagFromName(AcquisitionTimeSynchronized)];
	if (AcquisitionTimeSynchronized) {
		if (AcquisitionTimeSynchronized->getInformationEntity() == UnknownIE) AcquisitionTimeSynchronized->setInformationEntity(ie);
	}

}

Module_QTUSEnhancedUltrasoundVolumeProfileEquipment::Module_QTUSEnhancedUltrasoundVolumeProfileEquipment(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSEnhancedUltrasoundVolumeProfileEquipment";

	Manufacturer = (*list)[TagFromName(Manufacturer)];
	if (Manufacturer) {
		if (Manufacturer->getInformationEntity() == UnknownIE) Manufacturer->setInformationEntity(ie);
	}

	InstitutionName = (*list)[TagFromName(InstitutionName)];
	if (InstitutionName) {
		if (InstitutionName->getInformationEntity() == UnknownIE) InstitutionName->setInformationEntity(ie);
	}

	InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
	if (InstitutionAddress) {
		if (InstitutionAddress->getInformationEntity() == UnknownIE) InstitutionAddress->setInformationEntity(ie);
	}

	StationName = (*list)[TagFromName(StationName)];
	if (StationName) {
		if (StationName->getInformationEntity() == UnknownIE) StationName->setInformationEntity(ie);
	}

	InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
	if (InstitutionalDepartmentName) {
		if (InstitutionalDepartmentName->getInformationEntity() == UnknownIE) InstitutionalDepartmentName->setInformationEntity(ie);
	}

	ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
	if (ManufacturerModelName) {
		if (ManufacturerModelName->getInformationEntity() == UnknownIE) ManufacturerModelName->setInformationEntity(ie);
	}

	DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
	if (DeviceSerialNumber) {
		if (DeviceSerialNumber->getInformationEntity() == UnknownIE) DeviceSerialNumber->setInformationEntity(ie);
	}

	SoftwareVersions = (*list)[TagFromName(SoftwareVersions)];
	if (SoftwareVersions) {
		if (SoftwareVersions->getInformationEntity() == UnknownIE) SoftwareVersions->setInformationEntity(ie);
	}

}

Module_QTUSEnhancedUltrasoundVolumeProfileInstance::Module_QTUSEnhancedUltrasoundVolumeProfileInstance(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSEnhancedUltrasoundVolumeProfileInstance";

	InstanceNumber = (*list)[TagFromName(InstanceNumber)];
	if (InstanceNumber) {
		if (InstanceNumber->getInformationEntity() == UnknownIE) InstanceNumber->setInformationEntity(ie);
	}

	ContentDate = (*list)[TagFromName(ContentDate)];
	if (ContentDate) {
		if (ContentDate->getInformationEntity() == UnknownIE) ContentDate->setInformationEntity(ie);
	}

	ContentTime = (*list)[TagFromName(ContentTime)];
	if (ContentTime) {
		if (ContentTime->getInformationEntity() == UnknownIE) ContentTime->setInformationEntity(ie);
	}

	ImageType = (*list)[TagFromName(ImageType)];
	if (ImageType) {
		if (ImageType->getInformationEntity() == UnknownIE) ImageType->setInformationEntity(ie);
	}

	AcquisitionNumber = (*list)[TagFromName(AcquisitionNumber)];
	if (AcquisitionNumber) {
		if (AcquisitionNumber->getInformationEntity() == UnknownIE) AcquisitionNumber->setInformationEntity(ie);
	}

	AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
	if (AcquisitionDateTime) {
		if (AcquisitionDateTime->getInformationEntity() == UnknownIE) AcquisitionDateTime->setInformationEntity(ie);
	}

	BurnedInAnnotation = (*list)[TagFromName(BurnedInAnnotation)];
	if (BurnedInAnnotation) {
		if (BurnedInAnnotation->getInformationEntity() == UnknownIE) BurnedInAnnotation->setInformationEntity(ie);
	}

	RecognizableVisualFeatures = (*list)[TagFromName(RecognizableVisualFeatures)];
	if (RecognizableVisualFeatures) {
		if (RecognizableVisualFeatures->getInformationEntity() == UnknownIE) RecognizableVisualFeatures->setInformationEntity(ie);
	}

	LossyImageCompression = (*list)[TagFromName(LossyImageCompression)];
	if (LossyImageCompression) {
		if (LossyImageCompression->getInformationEntity() == UnknownIE) LossyImageCompression->setInformationEntity(ie);
	}

	PresentationLUTShape = (*list)[TagFromName(PresentationLUTShape)];
	if (PresentationLUTShape) {
		if (PresentationLUTShape->getInformationEntity() == UnknownIE) PresentationLUTShape->setInformationEntity(ie);
	}

	BitsAllocated = (*list)[TagFromName(BitsAllocated)];
	if (BitsAllocated) {
		if (BitsAllocated->getInformationEntity() == UnknownIE) BitsAllocated->setInformationEntity(ie);
	}

	BitsStored = (*list)[TagFromName(BitsStored)];
	if (BitsStored) {
		if (BitsStored->getInformationEntity() == UnknownIE) BitsStored->setInformationEntity(ie);
	}

	HighBit = (*list)[TagFromName(HighBit)];
	if (HighBit) {
		if (HighBit->getInformationEntity() == UnknownIE) HighBit->setInformationEntity(ie);
	}

	PixelRepresentation = (*list)[TagFromName(PixelRepresentation)];
	if (PixelRepresentation) {
		if (PixelRepresentation->getInformationEntity() == UnknownIE) PixelRepresentation->setInformationEntity(ie);
	}

	PositionMeasuringDeviceUsed = (*list)[TagFromName(PositionMeasuringDeviceUsed)];
	if (PositionMeasuringDeviceUsed) {
		if (PositionMeasuringDeviceUsed->getInformationEntity() == UnknownIE) PositionMeasuringDeviceUsed->setInformationEntity(ie);
	}

	ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
	if (ViewCodeSequence) {
		if (ViewCodeSequence->getInformationEntity() == UnknownIE) ViewCodeSequence->setInformationEntity(ie);
	}

	AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
	if (AnatomicRegionSequence) {
		if (AnatomicRegionSequence->getInformationEntity() == UnknownIE) AnatomicRegionSequence->setInformationEntity(ie);
	}

	TransducerScanPatternCodeSequence = (*list)[TagFromName(TransducerScanPatternCodeSequence)];
	if (TransducerScanPatternCodeSequence) {
		if (TransducerScanPatternCodeSequence->getInformationEntity() == UnknownIE) TransducerScanPatternCodeSequence->setInformationEntity(ie);
	}

	TransducerGeometryCodeSequence = (*list)[TagFromName(TransducerGeometryCodeSequence)];
	if (TransducerGeometryCodeSequence) {
		if (TransducerGeometryCodeSequence->getInformationEntity() == UnknownIE) TransducerGeometryCodeSequence->setInformationEntity(ie);
	}

	TransducerBeamSteeringCodeSequence = (*list)[TagFromName(TransducerBeamSteeringCodeSequence)];
	if (TransducerBeamSteeringCodeSequence) {
		if (TransducerBeamSteeringCodeSequence->getInformationEntity() == UnknownIE) TransducerBeamSteeringCodeSequence->setInformationEntity(ie);
	}

	TransducerApplicationCodeSequence = (*list)[TagFromName(TransducerApplicationCodeSequence)];
	if (TransducerApplicationCodeSequence) {
		if (TransducerApplicationCodeSequence->getInformationEntity() == UnknownIE) TransducerApplicationCodeSequence->setInformationEntity(ie);
	}

	DimensionOrganizationSequence = (*list)[TagFromName(DimensionOrganizationSequence)];
	if (DimensionOrganizationSequence) {
		if (DimensionOrganizationSequence->getInformationEntity() == UnknownIE) DimensionOrganizationSequence->setInformationEntity(ie);
	}

	DimensionOrganizationType = (*list)[TagFromName(DimensionOrganizationType)];
	if (DimensionOrganizationType) {
		if (DimensionOrganizationType->getInformationEntity() == UnknownIE) DimensionOrganizationType->setInformationEntity(ie);
	}

	DimensionIndexSequence = (*list)[TagFromName(DimensionIndexSequence)];
	if (DimensionIndexSequence) {
		if (DimensionIndexSequence->getInformationEntity() == UnknownIE) DimensionIndexSequence->setInformationEntity(ie);
	}

	SpecificCharacterSet = (*list)[TagFromName(SpecificCharacterSet)];
	if (SpecificCharacterSet) {
		if (SpecificCharacterSet->getInformationEntity() == UnknownIE) SpecificCharacterSet->setInformationEntity(ie);
	}

	InstanceCreationDate = (*list)[TagFromName(InstanceCreationDate)];
	if (InstanceCreationDate) {
		if (InstanceCreationDate->getInformationEntity() == UnknownIE) InstanceCreationDate->setInformationEntity(ie);
	}

	InstanceCreationTime = (*list)[TagFromName(InstanceCreationTime)];
	if (InstanceCreationTime) {
		if (InstanceCreationTime->getInformationEntity() == UnknownIE) InstanceCreationTime->setInformationEntity(ie);
	}

	InstanceCreatorUID = (*list)[TagFromName(InstanceCreatorUID)];
	if (InstanceCreatorUID) {
		if (InstanceCreatorUID->getInformationEntity() == UnknownIE) InstanceCreatorUID->setInformationEntity(ie);
	}

	TimezoneOffsetFromUTC = (*list)[TagFromName(TimezoneOffsetFromUTC)];
	if (TimezoneOffsetFromUTC) {
		if (TimezoneOffsetFromUTC->getInformationEntity() == UnknownIE) TimezoneOffsetFromUTC->setInformationEntity(ie);
	}

	SharedFunctionalGroupsSequence = (*list)[TagFromName(SharedFunctionalGroupsSequence)];
	if (SharedFunctionalGroupsSequence) {
		if (SharedFunctionalGroupsSequence->getInformationEntity() == UnknownIE) SharedFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_QTUSPixelMeasuresMacro(list,ie);
	new Macro_PlaneOrientationMacro(list,ie);
	new Macro_FrameVOILUTMacro(list,ie);
	new Macro_QTUSRealWorldValueMappingMacro(list,ie);
	new Macro_PlaneOrientationVolumeMacro(list,ie);
	new Macro_TemporalPositionMacro(list,ie);
	new Macro_QTUSTemporalPositionMacro(list,ie);
	new Macro_QTUSImageDataTypeMacro(list,ie);
	new Macro_QTUSUSImageDescriptionMacro(list,ie);
	PerFrameFunctionalGroupsSequence = (*list)[TagFromName(PerFrameFunctionalGroupsSequence)];
	if (PerFrameFunctionalGroupsSequence) {
		if (PerFrameFunctionalGroupsSequence->getInformationEntity() == UnknownIE) PerFrameFunctionalGroupsSequence->setInformationEntity(ie);
	}

	new Macro_QTUSFrameContentMacro(list,ie);
	new Macro_PlanePositionMacro(list,ie);
	new Macro_PlanePositionVolumeMacro(list,ie);
}

Macro_QTUSFrameContentMacro::Macro_QTUSFrameContentMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSFrameContentMacro";

	FrameContentSequence = (*list)[TagFromName(FrameContentSequence)];
	if (FrameContentSequence) {
		if (FrameContentSequence->getInformationEntity() == UnknownIE) FrameContentSequence->setInformationEntity(ie);
	}

}

Macro_QTUSPixelMeasuresMacro::Macro_QTUSPixelMeasuresMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSPixelMeasuresMacro";

	PixelMeasuresSequence = (*list)[TagFromName(PixelMeasuresSequence)];
	if (PixelMeasuresSequence) {
		if (PixelMeasuresSequence->getInformationEntity() == UnknownIE) PixelMeasuresSequence->setInformationEntity(ie);
	}

}

Macro_QTUSRealWorldValueMappingMacro::Macro_QTUSRealWorldValueMappingMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSRealWorldValueMappingMacro";

	RealWorldValueMappingSequence = (*list)[TagFromName(RealWorldValueMappingSequence)];
	if (RealWorldValueMappingSequence) {
		if (RealWorldValueMappingSequence->getInformationEntity() == UnknownIE) RealWorldValueMappingSequence->setInformationEntity(ie);
	}

	new Macro_QTUSRealWorldValueMappingItemMacro(list,ie);
}

Macro_QTUSRealWorldValueMappingItemMacro::Macro_QTUSRealWorldValueMappingItemMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSRealWorldValueMappingItemMacro";

	RealWorldValueFirstValueMapped = (*list)[TagFromName(RealWorldValueFirstValueMapped)];
	if (RealWorldValueFirstValueMapped) {
		if (RealWorldValueFirstValueMapped->getInformationEntity() == UnknownIE) RealWorldValueFirstValueMapped->setInformationEntity(ie);
	}

	RealWorldValueLastValueMapped = (*list)[TagFromName(RealWorldValueLastValueMapped)];
	if (RealWorldValueLastValueMapped) {
		if (RealWorldValueLastValueMapped->getInformationEntity() == UnknownIE) RealWorldValueLastValueMapped->setInformationEntity(ie);
	}

	RealWorldValueIntercept = (*list)[TagFromName(RealWorldValueIntercept)];
	if (RealWorldValueIntercept) {
		if (RealWorldValueIntercept->getInformationEntity() == UnknownIE) RealWorldValueIntercept->setInformationEntity(ie);
	}

	RealWorldValueSlope = (*list)[TagFromName(RealWorldValueSlope)];
	if (RealWorldValueSlope) {
		if (RealWorldValueSlope->getInformationEntity() == UnknownIE) RealWorldValueSlope->setInformationEntity(ie);
	}

	LUTExplanation = (*list)[TagFromName(LUTExplanation)];
	if (LUTExplanation) {
		if (LUTExplanation->getInformationEntity() == UnknownIE) LUTExplanation->setInformationEntity(ie);
	}

	LUTLabel = (*list)[TagFromName(LUTLabel)];
	if (LUTLabel) {
		if (LUTLabel->getInformationEntity() == UnknownIE) LUTLabel->setInformationEntity(ie);
	}

	MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
	if (MeasurementUnitsCodeSequence) {
		if (MeasurementUnitsCodeSequence->getInformationEntity() == UnknownIE) MeasurementUnitsCodeSequence->setInformationEntity(ie);
	}

}

Macro_QTUSImageDataTypeMacro::Macro_QTUSImageDataTypeMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSImageDataTypeMacro";

	ImageDataTypeSequence = (*list)[TagFromName(ImageDataTypeSequence)];
	if (ImageDataTypeSequence) {
		if (ImageDataTypeSequence->getInformationEntity() == UnknownIE) ImageDataTypeSequence->setInformationEntity(ie);
	}

}

Macro_QTUSTemporalPositionMacro::Macro_QTUSTemporalPositionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSTemporalPositionMacro";

	TemporalPositionSequence = (*list)[TagFromName(TemporalPositionSequence)];
	if (TemporalPositionSequence) {
		if (TemporalPositionSequence->getInformationEntity() == UnknownIE) TemporalPositionSequence->setInformationEntity(ie);
	}

}

Macro_QTUSUSImageDescriptionMacro::Macro_QTUSUSImageDescriptionMacro(AttributeList *list,InformationEntity ie)
{
	(void)list; // Quiets compiler in case module empty
	Assert(list);
	module = "QTUSUSImageDescriptionMacro";

	USImageDescriptionSequence = (*list)[TagFromName(USImageDescriptionSequence)];
	if (USImageDescriptionSequence) {
		if (USImageDescriptionSequence->getInformationEntity() == UnknownIE) USImageDescriptionSequence->setInformationEntity(ie);
	}

}


#endif /* __Header_moduleb__ */
