// Automatically generated from template - EDITS WILL BE LOST

// Generated by module.awk with options write modulew

#ifndef __Header_modulew__
#define __Header_modulew__

void
Macro_IconImageSequenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IconImageSequenceMacro>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PixelData) {
		stream << "\t\t";
		PixelData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelData> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (PixelAspectRatio) {
		stream << "\t\t";
		PixelAspectRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelAspectRatio> not present\n";

	if (SmallestImagePixelValue) {
		stream << "\t\t";
		SmallestImagePixelValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SmallestImagePixelValue> not present\n";

	if (LargestImagePixelValue) {
		stream << "\t\t";
		LargestImagePixelValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LargestImagePixelValue> not present\n";

	if (RedPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		RedPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableDescriptor> not present\n";

	if (GreenPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		GreenPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableDescriptor> not present\n";

	if (BluePaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		BluePaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableDescriptor> not present\n";

	if (RedPaletteColorLookupTableData) {
		stream << "\t\t";
		RedPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableData> not present\n";

	if (GreenPaletteColorLookupTableData) {
		stream << "\t\t";
		GreenPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableData> not present\n";

	if (BluePaletteColorLookupTableData) {
		stream << "\t\t";
		BluePaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableData> not present\n";

	if (ICCProfile) {
		stream << "\t\t";
		ICCProfile->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ICCProfile> not present\n";

	if (ColorSpace) {
		stream << "\t\t";
		ColorSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColorSpace> not present\n";

}

void
Macro_BasicCodeSequenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BasicCodeSequenceMacro>\n";

	if (CodeValue) {
		stream << "\t\t";
		CodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodeValue> not present\n";

	if (CodingSchemeDesignator) {
		stream << "\t\t";
		CodingSchemeDesignator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodingSchemeDesignator> not present\n";

	if (CodingSchemeVersion) {
		stream << "\t\t";
		CodingSchemeVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodingSchemeVersion> not present\n";

	if (CodeMeaning) {
		stream << "\t\t";
		CodeMeaning->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodeMeaning> not present\n";

	if (LongCodeValue) {
		stream << "\t\t";
		LongCodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongCodeValue> not present\n";

	if (URNCodeValue) {
		stream << "\t\t";
		URNCodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <URNCodeValue> not present\n";

}

void
Macro_EnhancedCodeSequenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <EnhancedCodeSequenceMacro>\n";

	if (ContextIdentifier) {
		stream << "\t\t";
		ContextIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContextIdentifier> not present\n";

	if (ContextUID) {
		stream << "\t\t";
		ContextUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContextUID> not present\n";

	if (MappingResource) {
		stream << "\t\t";
		MappingResource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MappingResource> not present\n";

	if (MappingResourceUID) {
		stream << "\t\t";
		MappingResourceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MappingResourceUID> not present\n";

	if (MappingResourceName) {
		stream << "\t\t";
		MappingResourceName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MappingResourceName> not present\n";

	if (ContextGroupVersion) {
		stream << "\t\t";
		ContextGroupVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContextGroupVersion> not present\n";

	if (ContextGroupExtensionFlag) {
		stream << "\t\t";
		ContextGroupExtensionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContextGroupExtensionFlag> not present\n";

	if (ContextGroupLocalVersion) {
		stream << "\t\t";
		ContextGroupLocalVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContextGroupLocalVersion> not present\n";

	if (ContextGroupExtensionCreatorUID) {
		stream << "\t\t";
		ContextGroupExtensionCreatorUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContextGroupExtensionCreatorUID> not present\n";

}

void
Macro_CodeSequenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CodeSequenceMacro>\n";

				stream << "\t";
	Macro_BasicCodeSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicCodeSequenceMacro>\n";

	if (EquivalentCodeSequence)
		stream << "\t\tSequence <EquivalentCodeSequence>\n";
	else
		stream << "\t\tSequence <EquivalentCodeSequence> not present\n";
	if (EquivalentCodeSequence && strcmp(EquivalentCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EquivalentCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_BasicCodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BasicCodeSequenceMacro>\n";

							stream << "\t\t";
	Macro_EnhancedCodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <EnhancedCodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_EnhancedCodeSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <EnhancedCodeSequenceMacro>\n";

}

void
Macro_BasicCodeSequenceMeaningOptionalMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BasicCodeSequenceMeaningOptionalMacro>\n";

	if (CodeValue) {
		stream << "\t\t";
		CodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodeValue> not present\n";

	if (CodingSchemeDesignator) {
		stream << "\t\t";
		CodingSchemeDesignator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodingSchemeDesignator> not present\n";

	if (CodingSchemeVersion) {
		stream << "\t\t";
		CodingSchemeVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodingSchemeVersion> not present\n";

	if (CodeMeaning) {
		stream << "\t\t";
		CodeMeaning->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CodeMeaning> not present\n";

	if (LongCodeValue) {
		stream << "\t\t";
		LongCodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongCodeValue> not present\n";

	if (URNCodeValue) {
		stream << "\t\t";
		URNCodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <URNCodeValue> not present\n";

}

void
Macro_CodeSequenceMeaningOptionalMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CodeSequenceMeaningOptionalMacro>\n";

				stream << "\t";
	Macro_BasicCodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicCodeSequenceMeaningOptionalMacro>\n";

	if (EquivalentCodeSequence)
		stream << "\t\tSequence <EquivalentCodeSequence>\n";
	else
		stream << "\t\tSequence <EquivalentCodeSequence> not present\n";
	if (EquivalentCodeSequence && strcmp(EquivalentCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EquivalentCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_BasicCodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BasicCodeSequenceMacro>\n";

							stream << "\t\t";
	Macro_EnhancedCodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <EnhancedCodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_EnhancedCodeSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <EnhancedCodeSequenceMacro>\n";

}

void
Macro_PersonIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PersonIdentificationMacro>\n";

	if (PersonIdentificationCodeSequence)
		stream << "\t\tSequence <PersonIdentificationCodeSequence>\n";
	else
		stream << "\t\tSequence <PersonIdentificationCodeSequence> not present\n";
	if (PersonIdentificationCodeSequence && strcmp(PersonIdentificationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PersonIdentificationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (PersonAddress) {
		stream << "\t\t";
		PersonAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PersonAddress> not present\n";

	if (PersonTelephoneNumbers) {
		stream << "\t\t";
		PersonTelephoneNumbers->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PersonTelephoneNumbers> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (InstitutionAddress) {
		stream << "\t\t";
		InstitutionAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionAddress> not present\n";

	if (InstitutionCodeSequence)
		stream << "\t\tSequence <InstitutionCodeSequence>\n";
	else
		stream << "\t\tSequence <InstitutionCodeSequence> not present\n";
	if (InstitutionCodeSequence && strcmp(InstitutionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InstitutionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (InstitutionalDepartmentName) {
		stream << "\t\t";
		InstitutionalDepartmentName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	if (InstitutionalDepartmentTypeCodeSequence)
		stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
	if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_ContentItemMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ContentItemMacro>\n";

	if (ValueType) {
		stream << "\t\t";
		ValueType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ValueType> not present\n";

	if (ObservationDateTime) {
		stream << "\t\t";
		ObservationDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ObservationDateTime> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (DateTime) {
		stream << "\t\t";
		DateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DateTime> not present\n";

	if (Date) {
		stream << "\t\t";
		Date->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Date> not present\n";

	if (Time) {
		stream << "\t\t";
		Time->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Time> not present\n";

	if (PersonName) {
		stream << "\t\t";
		PersonName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PersonName> not present\n";

	if (UID) {
		stream << "\t\t";
		UID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UID> not present\n";

	if (TextValue) {
		stream << "\t\t";
		TextValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TextValue> not present\n";

	if (ConceptCodeSequence)
		stream << "\t\tSequence <ConceptCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptCodeSequence> not present\n";
	if (ConceptCodeSequence && strcmp(ConceptCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (NumericValue) {
		stream << "\t\t";
		NumericValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumericValue> not present\n";

	if (FloatingPointValue) {
		stream << "\t\t";
		FloatingPointValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FloatingPointValue> not present\n";

	if (RationalNumeratorValue) {
		stream << "\t\t";
		RationalNumeratorValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RationalNumeratorValue> not present\n";

	if (RationalDenominatorValue) {
		stream << "\t\t";
		RationalDenominatorValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RationalDenominatorValue> not present\n";

	if (MeasurementUnitsCodeSequence)
		stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
	else
		stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
	if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

				Attribute *ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
				stream << "\t";
				if (ReferencedFrameNumber) {
					stream << "\t\t";
					ReferencedFrameNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameNumber> not present\n";

				Attribute *ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
				stream << "\t";
				if (ReferencedSegmentNumber) {
					stream << "\t\t";
					ReferencedSegmentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

			}
		}
	}
}

void
Macro_ContentItemWithModifiersMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ContentItemWithModifiersMacro>\n";

				stream << "\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

	if (ContentItemModifierSequence)
		stream << "\t\tSequence <ContentItemModifierSequence>\n";
	else
		stream << "\t\tSequence <ContentItemModifierSequence> not present\n";
	if (ContentItemModifierSequence && strcmp(ContentItemModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContentItemModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

			}
		}
	}
}

void
Macro_ImageSOPInstanceReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ImageSOPInstanceReferenceMacro>\n";

				stream << "\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	if (ReferencedFrameNumber) {
		stream << "\t\t";
		ReferencedFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFrameNumber> not present\n";

	if (ReferencedSegmentNumber) {
		stream << "\t\t";
		ReferencedSegmentNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

}

void
Macro_ReferencedInstancesAndAccessMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ReferencedInstancesAndAccessMacro>\n";

	if (TypeOfInstances) {
		stream << "\t\t";
		TypeOfInstances->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfInstances> not present\n";

	if (StudyInstanceUID) {
		stream << "\t\t";
		StudyInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyInstanceUID> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

				Attribute *HL7InstanceIdentifier = (*list)[TagFromName(HL7InstanceIdentifier)];
				stream << "\t";
				if (HL7InstanceIdentifier) {
					stream << "\t\t";
					HL7InstanceIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HL7InstanceIdentifier> not present\n";

				Attribute *ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
				stream << "\t";
				if (ReferencedFrameNumber) {
					stream << "\t\t";
					ReferencedFrameNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameNumber> not present\n";

				Attribute *ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
				stream << "\t";
				if (ReferencedSegmentNumber) {
					stream << "\t\t";
					ReferencedSegmentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

			}
		}
	}
	if (DICOMRetrievalSequence)
		stream << "\t\tSequence <DICOMRetrievalSequence>\n";
	else
		stream << "\t\tSequence <DICOMRetrievalSequence> not present\n";
	if (DICOMRetrievalSequence && strcmp(DICOMRetrievalSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DICOMRetrievalSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RetrieveAETitle = (*list)[TagFromName(RetrieveAETitle)];
				stream << "\t";
				if (RetrieveAETitle) {
					stream << "\t\t";
					RetrieveAETitle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RetrieveAETitle> not present\n";

			}
		}
	}
	if (DICOMMediaRetrievalSequence)
		stream << "\t\tSequence <DICOMMediaRetrievalSequence>\n";
	else
		stream << "\t\tSequence <DICOMMediaRetrievalSequence> not present\n";
	if (DICOMMediaRetrievalSequence && strcmp(DICOMMediaRetrievalSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DICOMMediaRetrievalSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StorageMediaFileSetID = (*list)[TagFromName(StorageMediaFileSetID)];
				stream << "\t";
				if (StorageMediaFileSetID) {
					stream << "\t\t";
					StorageMediaFileSetID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StorageMediaFileSetID> not present\n";

				Attribute *StorageMediaFileSetUID = (*list)[TagFromName(StorageMediaFileSetUID)];
				stream << "\t";
				if (StorageMediaFileSetUID) {
					stream << "\t\t";
					StorageMediaFileSetUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StorageMediaFileSetUID> not present\n";

			}
		}
	}
	if (WADORetrievalSequence)
		stream << "\t\tSequence <WADORetrievalSequence>\n";
	else
		stream << "\t\tSequence <WADORetrievalSequence> not present\n";
	if (WADORetrievalSequence && strcmp(WADORetrievalSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=WADORetrievalSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RetrieveURI = (*list)[TagFromName(RetrieveURI)];
				stream << "\t";
				if (RetrieveURI) {
					stream << "\t\t";
					RetrieveURI->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RetrieveURI> not present\n";

			}
		}
	}
	if (XDSRetrievalSequence)
		stream << "\t\tSequence <XDSRetrievalSequence>\n";
	else
		stream << "\t\tSequence <XDSRetrievalSequence> not present\n";
	if (XDSRetrievalSequence && strcmp(XDSRetrievalSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XDSRetrievalSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RepositoryUniqueID = (*list)[TagFromName(RepositoryUniqueID)];
				stream << "\t";
				if (RepositoryUniqueID) {
					stream << "\t\t";
					RepositoryUniqueID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RepositoryUniqueID> not present\n";

				Attribute *HomeCommunityID = (*list)[TagFromName(HomeCommunityID)];
				stream << "\t";
				if (HomeCommunityID) {
					stream << "\t\t";
					HomeCommunityID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HomeCommunityID> not present\n";

			}
		}
	}
	if (WADORSRetrievalSequence)
		stream << "\t\tSequence <WADORSRetrievalSequence>\n";
	else
		stream << "\t\tSequence <WADORSRetrievalSequence> not present\n";
	if (WADORSRetrievalSequence && strcmp(WADORSRetrievalSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=WADORSRetrievalSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RetrieveURL = (*list)[TagFromName(RetrieveURL)];
				stream << "\t";
				if (RetrieveURL) {
					stream << "\t\t";
					RetrieveURL->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RetrieveURL> not present\n";

			}
		}
	}
}

void
Macro_SeriesAndInstanceReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SeriesAndInstanceReferenceMacro>\n";

	if (ReferencedSeriesSequence)
		stream << "\t\tSequence <ReferencedSeriesSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
	if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
				stream << "\t";
				if (SeriesInstanceUID) {
					stream << "\t\t";
					SeriesInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
				stream << "\t";
				if (ReferencedInstanceSequence)
					stream << "\t\tSequence <ReferencedInstanceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
				if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_PrimaryAnatomicStructureMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PrimaryAnatomicStructureMacro>\n";

	if (PrimaryAnatomicStructureSequence)
		stream << "\t\tSequence <PrimaryAnatomicStructureSequence>\n";
	else
		stream << "\t\tSequence <PrimaryAnatomicStructureSequence> not present\n";
	if (PrimaryAnatomicStructureSequence && strcmp(PrimaryAnatomicStructureSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrimaryAnatomicStructureSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *PrimaryAnatomicStructureModifierSequence = (*list)[TagFromName(PrimaryAnatomicStructureModifierSequence)];
				stream << "\t";
				if (PrimaryAnatomicStructureModifierSequence)
					stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence>\n";
				else
					stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence> not present\n";
				if (PrimaryAnatomicStructureModifierSequence && strcmp(PrimaryAnatomicStructureModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PrimaryAnatomicStructureModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_GeneralAnatomyMandatoryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <GeneralAnatomyMandatoryMacro>\n";

	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
				stream << "\t";
				if (AnatomicRegionModifierSequence)
					stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
				if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
				stream << "\t";
	Macro_PrimaryAnatomicStructureMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrimaryAnatomicStructureMacro>\n";

	if (AnatomicRegionModifierSequence)
		stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
	if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
	if (PrimaryAnatomicStructureModifierSequence)
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence>\n";
	else
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence> not present\n";
	if (PrimaryAnatomicStructureModifierSequence && strcmp(PrimaryAnatomicStructureModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrimaryAnatomicStructureModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Macro_GeneralAnatomyRequiredMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <GeneralAnatomyRequiredMacro>\n";

	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
				stream << "\t";
				if (AnatomicRegionModifierSequence)
					stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
				if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
				stream << "\t";
	Macro_PrimaryAnatomicStructureMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrimaryAnatomicStructureMacro>\n";

	if (AnatomicRegionModifierSequence)
		stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
	if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
	if (PrimaryAnatomicStructureModifierSequence)
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence>\n";
	else
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence> not present\n";
	if (PrimaryAnatomicStructureModifierSequence && strcmp(PrimaryAnatomicStructureModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrimaryAnatomicStructureModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Macro_GeneralAnatomyOptionalMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <GeneralAnatomyOptionalMacro>\n";

	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
				stream << "\t";
				if (AnatomicRegionModifierSequence)
					stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
				if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
				stream << "\t";
	Macro_PrimaryAnatomicStructureMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrimaryAnatomicStructureMacro>\n";

	if (AnatomicRegionModifierSequence)
		stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
	if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
	if (PrimaryAnatomicStructureModifierSequence)
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence>\n";
	else
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence> not present\n";
	if (PrimaryAnatomicStructureModifierSequence && strcmp(PrimaryAnatomicStructureModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrimaryAnatomicStructureModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Macro_RequestAttributesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RequestAttributesMacro>\n";

	if (RequestedProcedureID) {
		stream << "\t\t";
		RequestedProcedureID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RequestedProcedureID> not present\n";

	if (AccessionNumber) {
		stream << "\t\t";
		AccessionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AccessionNumber> not present\n";

	if (IssuerOfAccessionNumberSequence)
		stream << "\t\tSequence <IssuerOfAccessionNumberSequence>\n";
	else
		stream << "\t\tSequence <IssuerOfAccessionNumberSequence> not present\n";
	if (IssuerOfAccessionNumberSequence && strcmp(IssuerOfAccessionNumberSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IssuerOfAccessionNumberSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

			}
		}
	}
	if (StudyInstanceUID) {
		stream << "\t\t";
		StudyInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyInstanceUID> not present\n";

	if (ReferencedStudySequence)
		stream << "\t\tSequence <ReferencedStudySequence>\n";
	else
		stream << "\t\tSequence <ReferencedStudySequence> not present\n";
	if (ReferencedStudySequence && strcmp(ReferencedStudySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedStudySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (RequestedProcedureDescription) {
		stream << "\t\t";
		RequestedProcedureDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RequestedProcedureDescription> not present\n";

	if (RequestedProcedureCodeSequence)
		stream << "\t\tSequence <RequestedProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <RequestedProcedureCodeSequence> not present\n";
	if (RequestedProcedureCodeSequence && strcmp(RequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestedProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReasonForTheRequestedProcedure) {
		stream << "\t\t";
		ReasonForTheRequestedProcedure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReasonForTheRequestedProcedure> not present\n";

	if (ReasonForRequestedProcedureCodeSequence)
		stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence> not present\n";
	if (ReasonForRequestedProcedureCodeSequence && strcmp(ReasonForRequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReasonForRequestedProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ScheduledProcedureStepID) {
		stream << "\t\t";
		ScheduledProcedureStepID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScheduledProcedureStepID> not present\n";

	if (ScheduledProcedureStepDescription) {
		stream << "\t\t";
		ScheduledProcedureStepDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScheduledProcedureStepDescription> not present\n";

	if (ScheduledProtocolCodeSequence)
		stream << "\t\tSequence <ScheduledProtocolCodeSequence>\n";
	else
		stream << "\t\tSequence <ScheduledProtocolCodeSequence> not present\n";
	if (ScheduledProtocolCodeSequence && strcmp(ScheduledProtocolCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ScheduledProtocolCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ProtocolContextSequence = (*list)[TagFromName(ProtocolContextSequence)];
				stream << "\t";
				if (ProtocolContextSequence)
					stream << "\t\tSequence <ProtocolContextSequence>\n";
				else
					stream << "\t\tSequence <ProtocolContextSequence> not present\n";
				if (ProtocolContextSequence && strcmp(ProtocolContextSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ProtocolContextSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

	Attribute *ContentItemModifierSequence = (*list)[TagFromName(ContentItemModifierSequence)];
							stream << "\t\t";
							if (ContentItemModifierSequence)
								stream << "\t\tSequence <ContentItemModifierSequence>\n";
							else
								stream << "\t\tSequence <ContentItemModifierSequence> not present\n";
							if (ContentItemModifierSequence && strcmp(ContentItemModifierSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ContentItemModifierSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Macro_BasicPixelSpacingCalibrationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BasicPixelSpacingCalibrationMacro>\n";

	if (PixelSpacing) {
		stream << "\t\t";
		PixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacing> not present\n";

	if (PixelSpacingCalibrationType) {
		stream << "\t\t";
		PixelSpacingCalibrationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacingCalibrationType> not present\n";

	if (PixelSpacingCalibrationDescription) {
		stream << "\t\t";
		PixelSpacingCalibrationDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacingCalibrationDescription> not present\n";

}

void
Macro_SOPInstanceReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SOPInstanceReferenceMacro>\n";

	if (ReferencedSOPClassUID) {
		stream << "\t\t";
		ReferencedSOPClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

	if (ReferencedSOPInstanceUID) {
		stream << "\t\t";
		ReferencedSOPInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

}

void
Macro_DisplayShutterMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DisplayShutterMacro>\n";

	if (ShutterShape) {
		stream << "\t\t";
		ShutterShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterShape> not present\n";

	if (ShutterLeftVerticalEdge) {
		stream << "\t\t";
		ShutterLeftVerticalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterLeftVerticalEdge> not present\n";

	if (ShutterRightVerticalEdge) {
		stream << "\t\t";
		ShutterRightVerticalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterRightVerticalEdge> not present\n";

	if (ShutterUpperHorizontalEdge) {
		stream << "\t\t";
		ShutterUpperHorizontalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterUpperHorizontalEdge> not present\n";

	if (ShutterLowerHorizontalEdge) {
		stream << "\t\t";
		ShutterLowerHorizontalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterLowerHorizontalEdge> not present\n";

	if (CenterOfCircularShutter) {
		stream << "\t\t";
		CenterOfCircularShutter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CenterOfCircularShutter> not present\n";

	if (RadiusOfCircularShutter) {
		stream << "\t\t";
		RadiusOfCircularShutter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiusOfCircularShutter> not present\n";

	if (VerticesOfThePolygonalShutter) {
		stream << "\t\t";
		VerticesOfThePolygonalShutter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VerticesOfThePolygonalShutter> not present\n";

	if (ShutterPresentationValue) {
		stream << "\t\t";
		ShutterPresentationValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterPresentationValue> not present\n";

	if (ShutterPresentationColorCIELabValue) {
		stream << "\t\t";
		ShutterPresentationColorCIELabValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterPresentationColorCIELabValue> not present\n";

}

void
Macro_ContentIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ContentIdentificationMacro>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentLabel) {
		stream << "\t\t";
		ContentLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentLabel> not present\n";

	if (ContentDescription) {
		stream << "\t\t";
		ContentDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDescription> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (AlternateContentDescriptionSequence)
		stream << "\t\tSequence <AlternateContentDescriptionSequence>\n";
	else
		stream << "\t\tSequence <AlternateContentDescriptionSequence> not present\n";
	if (AlternateContentDescriptionSequence && strcmp(AlternateContentDescriptionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AlternateContentDescriptionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ContentDescription = (*list)[TagFromName(ContentDescription)];
				stream << "\t";
				if (ContentDescription) {
					stream << "\t\t";
					ContentDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContentDescription> not present\n";

	Attribute *LanguageCodeSequence = (*list)[TagFromName(LanguageCodeSequence)];
				stream << "\t";
				if (LanguageCodeSequence)
					stream << "\t\tSequence <LanguageCodeSequence>\n";
				else
					stream << "\t\tSequence <LanguageCodeSequence> not present\n";
				if (LanguageCodeSequence && strcmp(LanguageCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=LanguageCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
				stream << "\t";
				if (ConceptNameCodeSequence)
					stream << "\t\tSequence <ConceptNameCodeSequence>\n";
				else
					stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
				if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ContentCreatorName) {
		stream << "\t\t";
		ContentCreatorName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentCreatorName> not present\n";

	if (ContentCreatorIdentificationCodeSequence)
		stream << "\t\tSequence <ContentCreatorIdentificationCodeSequence>\n";
	else
		stream << "\t\tSequence <ContentCreatorIdentificationCodeSequence> not present\n";
	if (ContentCreatorIdentificationCodeSequence && strcmp(ContentCreatorIdentificationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContentCreatorIdentificationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
}

void
Macro_HL7v2HierarchicDesignatorMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HL7v2HierarchicDesignatorMacro>\n";

	if (LocalNamespaceEntityID) {
		stream << "\t\t";
		LocalNamespaceEntityID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LocalNamespaceEntityID> not present\n";

	if (UniversalEntityID) {
		stream << "\t\t";
		UniversalEntityID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UniversalEntityID> not present\n";

	if (UniversalEntityIDType) {
		stream << "\t\t";
		UniversalEntityIDType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UniversalEntityIDType> not present\n";

}

void
Macro_IssuerOfPatientIDMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IssuerOfPatientIDMacro>\n";

	if (IssuerOfPatientID) {
		stream << "\t\t";
		IssuerOfPatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IssuerOfPatientID> not present\n";

	if (IssuerOfPatientIDQualifiersSequence)
		stream << "\t\tSequence <IssuerOfPatientIDQualifiersSequence>\n";
	else
		stream << "\t\tSequence <IssuerOfPatientIDQualifiersSequence> not present\n";
	if (IssuerOfPatientIDQualifiersSequence && strcmp(IssuerOfPatientIDQualifiersSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IssuerOfPatientIDQualifiersSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *UniversalEntityID = (*list)[TagFromName(UniversalEntityID)];
				stream << "\t";
				if (UniversalEntityID) {
					stream << "\t\t";
					UniversalEntityID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <UniversalEntityID> not present\n";

				Attribute *UniversalEntityIDType = (*list)[TagFromName(UniversalEntityIDType)];
				stream << "\t";
				if (UniversalEntityIDType) {
					stream << "\t\t";
					UniversalEntityIDType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <UniversalEntityIDType> not present\n";

				Attribute *IdentifierTypeCode = (*list)[TagFromName(IdentifierTypeCode)];
				stream << "\t";
				if (IdentifierTypeCode) {
					stream << "\t\t";
					IdentifierTypeCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IdentifierTypeCode> not present\n";

	Attribute *AssigningFacilitySequence = (*list)[TagFromName(AssigningFacilitySequence)];
				stream << "\t";
				if (AssigningFacilitySequence)
					stream << "\t\tSequence <AssigningFacilitySequence>\n";
				else
					stream << "\t\tSequence <AssigningFacilitySequence> not present\n";
				if (AssigningFacilitySequence && strcmp(AssigningFacilitySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AssigningFacilitySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
	Attribute *AssigningJurisdictionCodeSequence = (*list)[TagFromName(AssigningJurisdictionCodeSequence)];
				stream << "\t";
				if (AssigningJurisdictionCodeSequence)
					stream << "\t\tSequence <AssigningJurisdictionCodeSequence>\n";
				else
					stream << "\t\tSequence <AssigningJurisdictionCodeSequence> not present\n";
				if (AssigningJurisdictionCodeSequence && strcmp(AssigningJurisdictionCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AssigningJurisdictionCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *AssigningAgencyOrDepartmentCodeSequence = (*list)[TagFromName(AssigningAgencyOrDepartmentCodeSequence)];
				stream << "\t";
				if (AssigningAgencyOrDepartmentCodeSequence)
					stream << "\t\tSequence <AssigningAgencyOrDepartmentCodeSequence>\n";
				else
					stream << "\t\tSequence <AssigningAgencyOrDepartmentCodeSequence> not present\n";
				if (AssigningAgencyOrDepartmentCodeSequence && strcmp(AssigningAgencyOrDepartmentCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AssigningAgencyOrDepartmentCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_AlgorithmIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <AlgorithmIdentificationMacro>\n";

	if (AlgorithmFamilyCodeSequence)
		stream << "\t\tSequence <AlgorithmFamilyCodeSequence>\n";
	else
		stream << "\t\tSequence <AlgorithmFamilyCodeSequence> not present\n";
	if (AlgorithmFamilyCodeSequence && strcmp(AlgorithmFamilyCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AlgorithmFamilyCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (AlgorithmNameCodeSequence)
		stream << "\t\tSequence <AlgorithmNameCodeSequence>\n";
	else
		stream << "\t\tSequence <AlgorithmNameCodeSequence> not present\n";
	if (AlgorithmNameCodeSequence && strcmp(AlgorithmNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AlgorithmNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (AlgorithmName) {
		stream << "\t\t";
		AlgorithmName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AlgorithmName> not present\n";

	if (AlgorithmVersion) {
		stream << "\t\t";
		AlgorithmVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AlgorithmVersion> not present\n";

	if (AlgorithmParameters) {
		stream << "\t\t";
		AlgorithmParameters->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AlgorithmParameters> not present\n";

	if (AlgorithmSource) {
		stream << "\t\t";
		AlgorithmSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AlgorithmSource> not present\n";

}

void
Macro_SelectorAttributeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SelectorAttributeMacro>\n";

	if (SelectorAttribute) {
		stream << "\t\t";
		SelectorAttribute->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorAttribute> not present\n";

	if (SelectorValueNumber) {
		stream << "\t\t";
		SelectorValueNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorValueNumber> not present\n";

	if (SelectorSequencePointer) {
		stream << "\t\t";
		SelectorSequencePointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSequencePointer> not present\n";

	if (SelectorSequencePointerPrivateCreator) {
		stream << "\t\t";
		SelectorSequencePointerPrivateCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSequencePointerPrivateCreator> not present\n";

	if (SelectorSequencePointerItems) {
		stream << "\t\t";
		SelectorSequencePointerItems->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSequencePointerItems> not present\n";

	if (SelectorAttributePrivateCreator) {
		stream << "\t\t";
		SelectorAttributePrivateCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorAttributePrivateCreator> not present\n";

}

void
Macro_ExtendedSelectorAttributeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ExtendedSelectorAttributeMacro>\n";

	if (SelectorAttributeName) {
		stream << "\t\t";
		SelectorAttributeName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorAttributeName> not present\n";

	if (SelectorAttributeKeyword) {
		stream << "\t\t";
		SelectorAttributeKeyword->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorAttributeKeyword> not present\n";

	if (SelectorAttributeVR) {
		stream << "\t\t";
		SelectorAttributeVR->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorAttributeVR> not present\n";

				stream << "\t";
	Macro_SelectorAttributeMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <SelectorAttributeMacro>\n";

}

void
Macro_DataSetIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DataSetIdentificationMacro>\n";

	if (DataSetName) {
		stream << "\t\t";
		DataSetName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataSetName> not present\n";

	if (DataSetVersion) {
		stream << "\t\t";
		DataSetVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataSetVersion> not present\n";

	if (DataSetSource) {
		stream << "\t\t";
		DataSetSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataSetSource> not present\n";

	if (DataSetDescription) {
		stream << "\t\t";
		DataSetDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataSetDescription> not present\n";

}

void
Macro_GeneralContributingSourcesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <GeneralContributingSourcesMacro>\n";

	if (ContributingSOPInstancesReferenceSequence)
		stream << "\t\tSequence <ContributingSOPInstancesReferenceSequence>\n";
	else
		stream << "\t\tSequence <ContributingSOPInstancesReferenceSequence> not present\n";
	if (ContributingSOPInstancesReferenceSequence && strcmp(ContributingSOPInstancesReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContributingSOPInstancesReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

	Attribute *ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
				stream << "\t";
				if (ReferencedSeriesSequence)
					stream << "\t\tSequence <ReferencedSeriesSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
				if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
							stream << "\t\t";
							if (SeriesInstanceUID) {
								stream << "\t\t";
								SeriesInstanceUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SeriesInstanceUID> not present\n";

							Attribute *SeriesNumber = (*list)[TagFromName(SeriesNumber)];
							stream << "\t\t";
							if (SeriesNumber) {
								stream << "\t\t";
								SeriesNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SeriesNumber> not present\n";

	Attribute *ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
							stream << "\t\t";
							if (ReferencedInstanceSequence)
								stream << "\t\tSequence <ReferencedInstanceSequence>\n";
							else
								stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
							if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

										Attribute *InstanceNumber = (*list)[TagFromName(InstanceNumber)];
										stream << "\t\t\t";
										if (InstanceNumber) {
											stream << "\t\t";
											InstanceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <InstanceNumber> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (DeviceSerialNumber) {
		stream << "\t\t";
		DeviceSerialNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceSerialNumber> not present\n";

	if (SoftwareVersions) {
		stream << "\t\t";
		SoftwareVersions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftwareVersions> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (StationName) {
		stream << "\t\t";
		StationName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationName> not present\n";

	if (OperatorsName) {
		stream << "\t\t";
		OperatorsName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OperatorsName> not present\n";

	if (OperatorIdentificationSequence)
		stream << "\t\tSequence <OperatorIdentificationSequence>\n";
	else
		stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
	if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (ProtocolName) {
		stream << "\t\t";
		ProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProtocolName> not present\n";

	if (PerformedProtocolCodeSequence)
		stream << "\t\tSequence <PerformedProtocolCodeSequence>\n";
	else
		stream << "\t\tSequence <PerformedProtocolCodeSequence> not present\n";
	if (PerformedProtocolCodeSequence && strcmp(PerformedProtocolCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformedProtocolCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (AcquisitionProtocolName) {
		stream << "\t\t";
		AcquisitionProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionProtocolName> not present\n";

}

void
Macro_ContributingImageSourcesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ContributingImageSourcesMacro>\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

}

void
Macro_PatientOrientationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PatientOrientationMacro>\n";

	if (PatientOrientationCodeSequence)
		stream << "\t\tSequence <PatientOrientationCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientOrientationCodeSequence> not present\n";
	if (PatientOrientationCodeSequence && strcmp(PatientOrientationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientOrientationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *PatientOrientationModifierCodeSequence = (*list)[TagFromName(PatientOrientationModifierCodeSequence)];
				stream << "\t";
				if (PatientOrientationModifierCodeSequence)
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence> not present\n";
				if (PatientOrientationModifierCodeSequence && strcmp(PatientOrientationModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PatientOrientationModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PatientGantryRelationshipCodeSequence)
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence> not present\n";
	if (PatientGantryRelationshipCodeSequence && strcmp(PatientGantryRelationshipCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientGantryRelationshipCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_PerformedProcedureStepSummaryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PerformedProcedureStepSummaryMacro>\n";

	if (PerformedProcedureStepID) {
		stream << "\t\t";
		PerformedProcedureStepID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PerformedProcedureStepID> not present\n";

	if (PerformedProcedureStepStartDate) {
		stream << "\t\t";
		PerformedProcedureStepStartDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PerformedProcedureStepStartDate> not present\n";

	if (PerformedProcedureStepStartTime) {
		stream << "\t\t";
		PerformedProcedureStepStartTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PerformedProcedureStepStartTime> not present\n";

	if (PerformedProcedureStepDescription) {
		stream << "\t\t";
		PerformedProcedureStepDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PerformedProcedureStepDescription> not present\n";

	if (PerformedProtocolCodeSequence)
		stream << "\t\tSequence <PerformedProtocolCodeSequence>\n";
	else
		stream << "\t\tSequence <PerformedProtocolCodeSequence> not present\n";
	if (PerformedProtocolCodeSequence && strcmp(PerformedProtocolCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformedProtocolCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ProtocolContextSequence = (*list)[TagFromName(ProtocolContextSequence)];
				stream << "\t";
				if (ProtocolContextSequence)
					stream << "\t\tSequence <ProtocolContextSequence>\n";
				else
					stream << "\t\tSequence <ProtocolContextSequence> not present\n";
				if (ProtocolContextSequence && strcmp(ProtocolContextSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ProtocolContextSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

	Attribute *ContentItemModifierSequence = (*list)[TagFromName(ContentItemModifierSequence)];
							stream << "\t\t";
							if (ContentItemModifierSequence)
								stream << "\t\tSequence <ContentItemModifierSequence>\n";
							else
								stream << "\t\tSequence <ContentItemModifierSequence> not present\n";
							if (ContentItemModifierSequence && strcmp(ContentItemModifierSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ContentItemModifierSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (CommentsOnThePerformedProcedureStep) {
		stream << "\t\t";
		CommentsOnThePerformedProcedureStep->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CommentsOnThePerformedProcedureStep> not present\n";

}

void
Macro_ExposureIndexMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ExposureIndexMacro>\n";

	if (ExposureIndex) {
		stream << "\t\t";
		ExposureIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureIndex> not present\n";

	if (TargetExposureIndex) {
		stream << "\t\t";
		TargetExposureIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TargetExposureIndex> not present\n";

	if (DeviationIndex) {
		stream << "\t\t";
		DeviationIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviationIndex> not present\n";

}

void
Macro_MandatoryViewAndSliceProgressionDirectionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MandatoryViewAndSliceProgressionDirectionMacro>\n";

	if (ViewCodeSequence)
		stream << "\t\tSequence <ViewCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewCodeSequence> not present\n";
	if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
				stream << "\t";
				if (ViewModifierCodeSequence)
					stream << "\t\tSequence <ViewModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
				if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

						}
					}
				}
			}
		}
	}
	if (SliceProgressionDirection) {
		stream << "\t\t";
		SliceProgressionDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceProgressionDirection> not present\n";

}

void
Macro_OptionalViewAndSliceProgressionDirectionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

	if (ViewCodeSequence)
		stream << "\t\tSequence <ViewCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewCodeSequence> not present\n";
	if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
				stream << "\t";
				if (ViewModifierCodeSequence)
					stream << "\t\tSequence <ViewModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
				if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

						}
					}
				}
			}
		}
	}
	if (SliceProgressionDirection) {
		stream << "\t\t";
		SliceProgressionDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceProgressionDirection> not present\n";

}

void
Macro_RTEquipmentCorrelationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RTEquipmentCorrelationMacro>\n";

	if (PatientSupportAngle) {
		stream << "\t\t";
		PatientSupportAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSupportAngle> not present\n";

	if (TableTopPitchAngle) {
		stream << "\t\t";
		TableTopPitchAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopPitchAngle> not present\n";

	if (TableTopRollAngle) {
		stream << "\t\t";
		TableTopRollAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopRollAngle> not present\n";

	if (TableTopLongitudinalPosition) {
		stream << "\t\t";
		TableTopLongitudinalPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

	if (TableTopLateralPosition) {
		stream << "\t\t";
		TableTopLateralPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopLateralPosition> not present\n";

}

void
Macro_PatientGroupMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PatientGroupMacro>\n";

	if (SourcePatientGroupIdentificationSequence)
		stream << "\t\tSequence <SourcePatientGroupIdentificationSequence>\n";
	else
		stream << "\t\tSequence <SourcePatientGroupIdentificationSequence> not present\n";
	if (SourcePatientGroupIdentificationSequence && strcmp(SourcePatientGroupIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourcePatientGroupIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PatientID = (*list)[TagFromName(PatientID)];
				stream << "\t";
				if (PatientID) {
					stream << "\t\t";
					PatientID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientID> not present\n";

							stream << "\t\t";
	Macro_IssuerOfPatientIDMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IssuerOfPatientIDMacro>\n";

			}
		}
	}
	if (GroupOfPatientsIdentificationSequence)
		stream << "\t\tSequence <GroupOfPatientsIdentificationSequence>\n";
	else
		stream << "\t\tSequence <GroupOfPatientsIdentificationSequence> not present\n";
	if (GroupOfPatientsIdentificationSequence && strcmp(GroupOfPatientsIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=GroupOfPatientsIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PatientID = (*list)[TagFromName(PatientID)];
				stream << "\t";
				if (PatientID) {
					stream << "\t\t";
					PatientID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientID> not present\n";

							stream << "\t\t";
	Macro_IssuerOfPatientIDMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IssuerOfPatientIDMacro>\n";

				Attribute *SubjectRelativePositionInImage = (*list)[TagFromName(SubjectRelativePositionInImage)];
				stream << "\t";
				if (SubjectRelativePositionInImage) {
					stream << "\t\t";
					SubjectRelativePositionInImage->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SubjectRelativePositionInImage> not present\n";

				Attribute *PatientPosition = (*list)[TagFromName(PatientPosition)];
				stream << "\t";
				if (PatientPosition) {
					stream << "\t\t";
					PatientPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientPosition> not present\n";

			}
		}
	}
}

void
Macro_UDIMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <UDIMacro>\n";

	if (UniqueDeviceIdentifier) {
		stream << "\t\t";
		UniqueDeviceIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UniqueDeviceIdentifier> not present\n";

	if (DeviceDescription) {
		stream << "\t\t";
		DeviceDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceDescription> not present\n";

}

void
Module_Patient::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Patient>\n";

	if (PatientName) {
		stream << "\t\t";
		PatientName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientName> not present\n";

	if (PatientID) {
		stream << "\t\t";
		PatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientID> not present\n";

				stream << "\t";
	Macro_IssuerOfPatientIDMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <IssuerOfPatientIDMacro>\n";

	if (TypeOfPatientID) {
		stream << "\t\t";
		TypeOfPatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfPatientID> not present\n";

	if (PatientBirthDate) {
		stream << "\t\t";
		PatientBirthDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBirthDate> not present\n";

	if (PatientBirthDateInAlternativeCalendar) {
		stream << "\t\t";
		PatientBirthDateInAlternativeCalendar->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBirthDateInAlternativeCalendar> not present\n";

	if (PatientDeathDateInAlternativeCalendar) {
		stream << "\t\t";
		PatientDeathDateInAlternativeCalendar->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientDeathDateInAlternativeCalendar> not present\n";

	if (PatientAlternativeCalendar) {
		stream << "\t\t";
		PatientAlternativeCalendar->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientAlternativeCalendar> not present\n";

	if (PatientSex) {
		stream << "\t\t";
		PatientSex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSex> not present\n";

	if (ReferencedPatientPhotoSequence)
		stream << "\t\tSequence <ReferencedPatientPhotoSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPatientPhotoSequence> not present\n";
	if (ReferencedPatientPhotoSequence && strcmp(ReferencedPatientPhotoSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPatientPhotoSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ReferencedInstancesAndAccessMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedInstancesAndAccessMacro>\n";

			}
		}
	}
	if (QualityControlSubject) {
		stream << "\t\t";
		QualityControlSubject->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <QualityControlSubject> not present\n";

	if (ReferencedPatientSequence)
		stream << "\t\tSequence <ReferencedPatientSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPatientSequence> not present\n";
	if (ReferencedPatientSequence && strcmp(ReferencedPatientSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPatientSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (PatientBirthTime) {
		stream << "\t\t";
		PatientBirthTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBirthTime> not present\n";

	if (OtherPatientIDsSequence)
		stream << "\t\tSequence <OtherPatientIDsSequence>\n";
	else
		stream << "\t\tSequence <OtherPatientIDsSequence> not present\n";
	if (OtherPatientIDsSequence && strcmp(OtherPatientIDsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OtherPatientIDsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PatientID = (*list)[TagFromName(PatientID)];
				stream << "\t";
				if (PatientID) {
					stream << "\t\t";
					PatientID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientID> not present\n";

							stream << "\t\t";
	Macro_IssuerOfPatientIDMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IssuerOfPatientIDMacro>\n";

				Attribute *TypeOfPatientID = (*list)[TagFromName(TypeOfPatientID)];
				stream << "\t";
				if (TypeOfPatientID) {
					stream << "\t\t";
					TypeOfPatientID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TypeOfPatientID> not present\n";

			}
		}
	}
	if (OtherPatientNames) {
		stream << "\t\t";
		OtherPatientNames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OtherPatientNames> not present\n";

	if (EthnicGroup) {
		stream << "\t\t";
		EthnicGroup->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EthnicGroup> not present\n";

	if (PatientComments) {
		stream << "\t\t";
		PatientComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientComments> not present\n";

	if (PatientSpeciesDescription) {
		stream << "\t\t";
		PatientSpeciesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSpeciesDescription> not present\n";

	if (PatientSpeciesCodeSequence)
		stream << "\t\tSequence <PatientSpeciesCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientSpeciesCodeSequence> not present\n";
	if (PatientSpeciesCodeSequence && strcmp(PatientSpeciesCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientSpeciesCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (PatientBreedDescription) {
		stream << "\t\t";
		PatientBreedDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBreedDescription> not present\n";

	if (PatientBreedCodeSequence)
		stream << "\t\tSequence <PatientBreedCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientBreedCodeSequence> not present\n";
	if (PatientBreedCodeSequence && strcmp(PatientBreedCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientBreedCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (BreedRegistrationSequence)
		stream << "\t\tSequence <BreedRegistrationSequence>\n";
	else
		stream << "\t\tSequence <BreedRegistrationSequence> not present\n";
	if (BreedRegistrationSequence && strcmp(BreedRegistrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BreedRegistrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *BreedRegistrationNumber = (*list)[TagFromName(BreedRegistrationNumber)];
				stream << "\t";
				if (BreedRegistrationNumber) {
					stream << "\t\t";
					BreedRegistrationNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BreedRegistrationNumber> not present\n";

	Attribute *BreedRegistryCodeSequence = (*list)[TagFromName(BreedRegistryCodeSequence)];
				stream << "\t";
				if (BreedRegistryCodeSequence)
					stream << "\t\tSequence <BreedRegistryCodeSequence>\n";
				else
					stream << "\t\tSequence <BreedRegistryCodeSequence> not present\n";
				if (BreedRegistryCodeSequence && strcmp(BreedRegistryCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BreedRegistryCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (StrainDescription) {
		stream << "\t\t";
		StrainDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StrainDescription> not present\n";

	if (StrainNomenclature) {
		stream << "\t\t";
		StrainNomenclature->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StrainNomenclature> not present\n";

	if (StrainCodeSequence)
		stream << "\t\tSequence <StrainCodeSequence>\n";
	else
		stream << "\t\tSequence <StrainCodeSequence> not present\n";
	if (StrainCodeSequence && strcmp(StrainCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StrainCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (StrainAdditionalInformation) {
		stream << "\t\t";
		StrainAdditionalInformation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StrainAdditionalInformation> not present\n";

	if (StrainStockSequence)
		stream << "\t\tSequence <StrainStockSequence>\n";
	else
		stream << "\t\tSequence <StrainStockSequence> not present\n";
	if (StrainStockSequence && strcmp(StrainStockSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StrainStockSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StrainStockNumber = (*list)[TagFromName(StrainStockNumber)];
				stream << "\t";
				if (StrainStockNumber) {
					stream << "\t\t";
					StrainStockNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StrainStockNumber> not present\n";

				Attribute *StrainSource = (*list)[TagFromName(StrainSource)];
				stream << "\t";
				if (StrainSource) {
					stream << "\t\t";
					StrainSource->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StrainSource> not present\n";

	Attribute *StrainSourceRegistryCodeSequence = (*list)[TagFromName(StrainSourceRegistryCodeSequence)];
				stream << "\t";
				if (StrainSourceRegistryCodeSequence)
					stream << "\t\tSequence <StrainSourceRegistryCodeSequence>\n";
				else
					stream << "\t\tSequence <StrainSourceRegistryCodeSequence> not present\n";
				if (StrainSourceRegistryCodeSequence && strcmp(StrainSourceRegistryCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=StrainSourceRegistryCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (GeneticModificationsSequence)
		stream << "\t\tSequence <GeneticModificationsSequence>\n";
	else
		stream << "\t\tSequence <GeneticModificationsSequence> not present\n";
	if (GeneticModificationsSequence && strcmp(GeneticModificationsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=GeneticModificationsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *GeneticModificationsDescription = (*list)[TagFromName(GeneticModificationsDescription)];
				stream << "\t";
				if (GeneticModificationsDescription) {
					stream << "\t\t";
					GeneticModificationsDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GeneticModificationsDescription> not present\n";

				Attribute *GeneticModificationsNomenclature = (*list)[TagFromName(GeneticModificationsNomenclature)];
				stream << "\t";
				if (GeneticModificationsNomenclature) {
					stream << "\t\t";
					GeneticModificationsNomenclature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GeneticModificationsNomenclature> not present\n";

	Attribute *GeneticModificationsCodeSequence = (*list)[TagFromName(GeneticModificationsCodeSequence)];
				stream << "\t";
				if (GeneticModificationsCodeSequence)
					stream << "\t\tSequence <GeneticModificationsCodeSequence>\n";
				else
					stream << "\t\tSequence <GeneticModificationsCodeSequence> not present\n";
				if (GeneticModificationsCodeSequence && strcmp(GeneticModificationsCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=GeneticModificationsCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ResponsiblePerson) {
		stream << "\t\t";
		ResponsiblePerson->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ResponsiblePerson> not present\n";

	if (ResponsiblePersonRole) {
		stream << "\t\t";
		ResponsiblePersonRole->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ResponsiblePersonRole> not present\n";

	if (ResponsibleOrganization) {
		stream << "\t\t";
		ResponsibleOrganization->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ResponsibleOrganization> not present\n";

	if (PatientIdentityRemoved) {
		stream << "\t\t";
		PatientIdentityRemoved->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientIdentityRemoved> not present\n";

	if (DeidentificationMethod) {
		stream << "\t\t";
		DeidentificationMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeidentificationMethod> not present\n";

	if (DeidentificationMethodCodeSequence)
		stream << "\t\tSequence <DeidentificationMethodCodeSequence>\n";
	else
		stream << "\t\tSequence <DeidentificationMethodCodeSequence> not present\n";
	if (DeidentificationMethodCodeSequence && strcmp(DeidentificationMethodCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DeidentificationMethodCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_PatientGroupMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PatientGroupMacro>\n";

}

void
Module_ClinicalTrialSubject::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ClinicalTrialSubject>\n";

	if (ClinicalTrialSponsorName) {
		stream << "\t\t";
		ClinicalTrialSponsorName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSponsorName> not present\n";

	if (ClinicalTrialProtocolID) {
		stream << "\t\t";
		ClinicalTrialProtocolID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialProtocolID> not present\n";

	if (ClinicalTrialProtocolName) {
		stream << "\t\t";
		ClinicalTrialProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialProtocolName> not present\n";

	if (ClinicalTrialSiteID) {
		stream << "\t\t";
		ClinicalTrialSiteID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSiteID> not present\n";

	if (ClinicalTrialSiteName) {
		stream << "\t\t";
		ClinicalTrialSiteName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSiteName> not present\n";

	if (ClinicalTrialSubjectID) {
		stream << "\t\t";
		ClinicalTrialSubjectID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSubjectID> not present\n";

	if (ClinicalTrialSubjectReadingID) {
		stream << "\t\t";
		ClinicalTrialSubjectReadingID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSubjectReadingID> not present\n";

	if (ClinicalTrialProtocolEthicsCommitteeName) {
		stream << "\t\t";
		ClinicalTrialProtocolEthicsCommitteeName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialProtocolEthicsCommitteeName> not present\n";

	if (ClinicalTrialProtocolEthicsCommitteeApprovalNumber) {
		stream << "\t\t";
		ClinicalTrialProtocolEthicsCommitteeApprovalNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialProtocolEthicsCommitteeApprovalNumber> not present\n";

}

void
Module_GeneralStudy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GeneralStudy>\n";

	if (StudyInstanceUID) {
		stream << "\t\t";
		StudyInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyInstanceUID> not present\n";

	if (StudyDate) {
		stream << "\t\t";
		StudyDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyDate> not present\n";

	if (StudyTime) {
		stream << "\t\t";
		StudyTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyTime> not present\n";

	if (ReferringPhysicianName) {
		stream << "\t\t";
		ReferringPhysicianName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferringPhysicianName> not present\n";

	if (ReferringPhysicianIdentificationSequence)
		stream << "\t\tSequence <ReferringPhysicianIdentificationSequence>\n";
	else
		stream << "\t\tSequence <ReferringPhysicianIdentificationSequence> not present\n";
	if (ReferringPhysicianIdentificationSequence && strcmp(ReferringPhysicianIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferringPhysicianIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (ConsultingPhysicianName) {
		stream << "\t\t";
		ConsultingPhysicianName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConsultingPhysicianName> not present\n";

	if (ConsultingPhysicianIdentificationSequence)
		stream << "\t\tSequence <ConsultingPhysicianIdentificationSequence>\n";
	else
		stream << "\t\tSequence <ConsultingPhysicianIdentificationSequence> not present\n";
	if (ConsultingPhysicianIdentificationSequence && strcmp(ConsultingPhysicianIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConsultingPhysicianIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (StudyID) {
		stream << "\t\t";
		StudyID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyID> not present\n";

	if (AccessionNumber) {
		stream << "\t\t";
		AccessionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AccessionNumber> not present\n";

	if (IssuerOfAccessionNumberSequence)
		stream << "\t\tSequence <IssuerOfAccessionNumberSequence>\n";
	else
		stream << "\t\tSequence <IssuerOfAccessionNumberSequence> not present\n";
	if (IssuerOfAccessionNumberSequence && strcmp(IssuerOfAccessionNumberSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IssuerOfAccessionNumberSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

			}
		}
	}
	if (StudyDescription) {
		stream << "\t\t";
		StudyDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyDescription> not present\n";

	if (PhysiciansOfRecord) {
		stream << "\t\t";
		PhysiciansOfRecord->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhysiciansOfRecord> not present\n";

	if (PhysiciansOfRecordIdentificationSequence)
		stream << "\t\tSequence <PhysiciansOfRecordIdentificationSequence>\n";
	else
		stream << "\t\tSequence <PhysiciansOfRecordIdentificationSequence> not present\n";
	if (PhysiciansOfRecordIdentificationSequence && strcmp(PhysiciansOfRecordIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PhysiciansOfRecordIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (NameOfPhysiciansReadingStudy) {
		stream << "\t\t";
		NameOfPhysiciansReadingStudy->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NameOfPhysiciansReadingStudy> not present\n";

	if (PhysiciansReadingStudyIdentificationSequence)
		stream << "\t\tSequence <PhysiciansReadingStudyIdentificationSequence>\n";
	else
		stream << "\t\tSequence <PhysiciansReadingStudyIdentificationSequence> not present\n";
	if (PhysiciansReadingStudyIdentificationSequence && strcmp(PhysiciansReadingStudyIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PhysiciansReadingStudyIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (RequestingServiceCodeSequence)
		stream << "\t\tSequence <RequestingServiceCodeSequence>\n";
	else
		stream << "\t\tSequence <RequestingServiceCodeSequence> not present\n";
	if (RequestingServiceCodeSequence && strcmp(RequestingServiceCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestingServiceCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReferencedStudySequence)
		stream << "\t\tSequence <ReferencedStudySequence>\n";
	else
		stream << "\t\tSequence <ReferencedStudySequence> not present\n";
	if (ReferencedStudySequence && strcmp(ReferencedStudySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedStudySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ProcedureCodeSequence)
		stream << "\t\tSequence <ProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <ProcedureCodeSequence> not present\n";
	if (ProcedureCodeSequence && strcmp(ProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReasonForPerformedProcedureCodeSequence)
		stream << "\t\tSequence <ReasonForPerformedProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <ReasonForPerformedProcedureCodeSequence> not present\n";
	if (ReasonForPerformedProcedureCodeSequence && strcmp(ReasonForPerformedProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReasonForPerformedProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Module_PatientStudy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PatientStudy>\n";

	if (AdmittingDiagnosesDescription) {
		stream << "\t\t";
		AdmittingDiagnosesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AdmittingDiagnosesDescription> not present\n";

	if (AdmittingDiagnosesCodeSequence)
		stream << "\t\tSequence <AdmittingDiagnosesCodeSequence>\n";
	else
		stream << "\t\tSequence <AdmittingDiagnosesCodeSequence> not present\n";
	if (AdmittingDiagnosesCodeSequence && strcmp(AdmittingDiagnosesCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AdmittingDiagnosesCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (PatientAge) {
		stream << "\t\t";
		PatientAge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientAge> not present\n";

	if (PatientSize) {
		stream << "\t\t";
		PatientSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSize> not present\n";

	if (PatientWeight) {
		stream << "\t\t";
		PatientWeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientWeight> not present\n";

	if (PatientBodyMassIndex) {
		stream << "\t\t";
		PatientBodyMassIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBodyMassIndex> not present\n";

	if (MeasuredAPDimension) {
		stream << "\t\t";
		MeasuredAPDimension->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MeasuredAPDimension> not present\n";

	if (MeasuredLateralDimension) {
		stream << "\t\t";
		MeasuredLateralDimension->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MeasuredLateralDimension> not present\n";

	if (PatientSizeCodeSequence)
		stream << "\t\tSequence <PatientSizeCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientSizeCodeSequence> not present\n";
	if (PatientSizeCodeSequence && strcmp(PatientSizeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientSizeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (MedicalAlerts) {
		stream << "\t\t";
		MedicalAlerts->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MedicalAlerts> not present\n";

	if (Allergies) {
		stream << "\t\t";
		Allergies->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Allergies> not present\n";

	if (SmokingStatus) {
		stream << "\t\t";
		SmokingStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SmokingStatus> not present\n";

	if (PregnancyStatus) {
		stream << "\t\t";
		PregnancyStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PregnancyStatus> not present\n";

	if (LastMenstrualDate) {
		stream << "\t\t";
		LastMenstrualDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LastMenstrualDate> not present\n";

	if (PatientState) {
		stream << "\t\t";
		PatientState->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientState> not present\n";

	if (Occupation) {
		stream << "\t\t";
		Occupation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Occupation> not present\n";

	if (AdditionalPatientHistory) {
		stream << "\t\t";
		AdditionalPatientHistory->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AdditionalPatientHistory> not present\n";

	if (AdmissionID) {
		stream << "\t\t";
		AdmissionID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AdmissionID> not present\n";

	if (IssuerOfAdmissionID) {
		stream << "\t\t";
		IssuerOfAdmissionID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IssuerOfAdmissionID> not present\n";

	if (IssuerOfAdmissionIDSequence)
		stream << "\t\tSequence <IssuerOfAdmissionIDSequence>\n";
	else
		stream << "\t\tSequence <IssuerOfAdmissionIDSequence> not present\n";
	if (IssuerOfAdmissionIDSequence && strcmp(IssuerOfAdmissionIDSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IssuerOfAdmissionIDSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

			}
		}
	}
	if (ServiceEpisodeID) {
		stream << "\t\t";
		ServiceEpisodeID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ServiceEpisodeID> not present\n";

	if (IssuerOfServiceEpisodeIDSequence)
		stream << "\t\tSequence <IssuerOfServiceEpisodeIDSequence>\n";
	else
		stream << "\t\tSequence <IssuerOfServiceEpisodeIDSequence> not present\n";
	if (IssuerOfServiceEpisodeIDSequence && strcmp(IssuerOfServiceEpisodeIDSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IssuerOfServiceEpisodeIDSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

			}
		}
	}
	if (ServiceEpisodeDescription) {
		stream << "\t\t";
		ServiceEpisodeDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ServiceEpisodeDescription> not present\n";

	if (PatientSexNeutered) {
		stream << "\t\t";
		PatientSexNeutered->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSexNeutered> not present\n";

}

void
Module_ClinicalTrialStudy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ClinicalTrialStudy>\n";

	if (ClinicalTrialTimePointID) {
		stream << "\t\t";
		ClinicalTrialTimePointID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialTimePointID> not present\n";

	if (ClinicalTrialTimePointDescription) {
		stream << "\t\t";
		ClinicalTrialTimePointDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialTimePointDescription> not present\n";

	if (LongitudinalTemporalOffsetFromEvent) {
		stream << "\t\t";
		LongitudinalTemporalOffsetFromEvent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongitudinalTemporalOffsetFromEvent> not present\n";

	if (LongitudinalTemporalEventType) {
		stream << "\t\t";
		LongitudinalTemporalEventType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongitudinalTemporalEventType> not present\n";

	if (ConsentForClinicalTrialUseSequence)
		stream << "\t\tSequence <ConsentForClinicalTrialUseSequence>\n";
	else
		stream << "\t\tSequence <ConsentForClinicalTrialUseSequence> not present\n";
	if (ConsentForClinicalTrialUseSequence && strcmp(ConsentForClinicalTrialUseSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConsentForClinicalTrialUseSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DistributionType = (*list)[TagFromName(DistributionType)];
				stream << "\t";
				if (DistributionType) {
					stream << "\t\t";
					DistributionType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistributionType> not present\n";

				Attribute *ClinicalTrialProtocolID = (*list)[TagFromName(ClinicalTrialProtocolID)];
				stream << "\t";
				if (ClinicalTrialProtocolID) {
					stream << "\t\t";
					ClinicalTrialProtocolID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ClinicalTrialProtocolID> not present\n";

				Attribute *ConsentForDistributionFlag = (*list)[TagFromName(ConsentForDistributionFlag)];
				stream << "\t";
				if (ConsentForDistributionFlag) {
					stream << "\t\t";
					ConsentForDistributionFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ConsentForDistributionFlag> not present\n";

			}
		}
	}
}

void
Module_GeneralSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GeneralSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (Laterality) {
		stream << "\t\t";
		Laterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Laterality> not present\n";

	if (SeriesDate) {
		stream << "\t\t";
		SeriesDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDate> not present\n";

	if (SeriesTime) {
		stream << "\t\t";
		SeriesTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesTime> not present\n";

	if (PerformingPhysicianName) {
		stream << "\t\t";
		PerformingPhysicianName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PerformingPhysicianName> not present\n";

	if (PerformingPhysicianIdentificationSequence)
		stream << "\t\tSequence <PerformingPhysicianIdentificationSequence>\n";
	else
		stream << "\t\tSequence <PerformingPhysicianIdentificationSequence> not present\n";
	if (PerformingPhysicianIdentificationSequence && strcmp(PerformingPhysicianIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformingPhysicianIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (ProtocolName) {
		stream << "\t\t";
		ProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProtocolName> not present\n";

	if (ReferencedDefinedProtocolSequence)
		stream << "\t\tSequence <ReferencedDefinedProtocolSequence>\n";
	else
		stream << "\t\tSequence <ReferencedDefinedProtocolSequence> not present\n";
	if (ReferencedDefinedProtocolSequence && strcmp(ReferencedDefinedProtocolSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedDefinedProtocolSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedPerformedProtocolSequence)
		stream << "\t\tSequence <ReferencedPerformedProtocolSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProtocolSequence> not present\n";
	if (ReferencedPerformedProtocolSequence && strcmp(ReferencedPerformedProtocolSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProtocolSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (SeriesDescriptionCodeSequence)
		stream << "\t\tSequence <SeriesDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <SeriesDescriptionCodeSequence> not present\n";
	if (SeriesDescriptionCodeSequence && strcmp(SeriesDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SeriesDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (OperatorsName) {
		stream << "\t\t";
		OperatorsName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OperatorsName> not present\n";

	if (OperatorIdentificationSequence)
		stream << "\t\tSequence <OperatorIdentificationSequence>\n";
	else
		stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
	if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (RelatedSeriesSequence)
		stream << "\t\tSequence <RelatedSeriesSequence>\n";
	else
		stream << "\t\tSequence <RelatedSeriesSequence> not present\n";
	if (RelatedSeriesSequence && strcmp(RelatedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RelatedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

				Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
				stream << "\t";
				if (SeriesInstanceUID) {
					stream << "\t\t";
					SeriesInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (BodyPartExamined) {
		stream << "\t\t";
		BodyPartExamined->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartExamined> not present\n";

	if (PatientPosition) {
		stream << "\t\t";
		PatientPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientPosition> not present\n";

	if (SmallestPixelValueInSeries) {
		stream << "\t\t";
		SmallestPixelValueInSeries->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SmallestPixelValueInSeries> not present\n";

	if (LargestPixelValueInSeries) {
		stream << "\t\t";
		LargestPixelValueInSeries->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LargestPixelValueInSeries> not present\n";

	if (RequestAttributesSequence)
		stream << "\t\tSequence <RequestAttributesSequence>\n";
	else
		stream << "\t\tSequence <RequestAttributesSequence> not present\n";
	if (RequestAttributesSequence && strcmp(RequestAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RequestAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RequestAttributesMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_PerformedProcedureStepSummaryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PerformedProcedureStepSummaryMacro>\n";

	if (AnatomicalOrientationType) {
		stream << "\t\t";
		AnatomicalOrientationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AnatomicalOrientationType> not present\n";

}

void
Module_ClinicalTrialSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ClinicalTrialSeries>\n";

	if (ClinicalTrialCoordinatingCenterName) {
		stream << "\t\t";
		ClinicalTrialCoordinatingCenterName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialCoordinatingCenterName> not present\n";

	if (ClinicalTrialSeriesID) {
		stream << "\t\t";
		ClinicalTrialSeriesID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSeriesID> not present\n";

	if (ClinicalTrialSeriesDescription) {
		stream << "\t\t";
		ClinicalTrialSeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ClinicalTrialSeriesDescription> not present\n";

}

void
Module_EnhancedSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedSeries>\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_FrameOfReference::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <FrameOfReference>\n";

	if (FrameOfReferenceUID) {
		stream << "\t\t";
		FrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameOfReferenceUID> not present\n";

	if (PositionReferenceIndicator) {
		stream << "\t\t";
		PositionReferenceIndicator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionReferenceIndicator> not present\n";

}

void
Module_GeneralEquipment::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GeneralEquipment>\n";

	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (InstitutionAddress) {
		stream << "\t\t";
		InstitutionAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionAddress> not present\n";

	if (StationName) {
		stream << "\t\t";
		StationName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationName> not present\n";

	if (InstitutionalDepartmentName) {
		stream << "\t\t";
		InstitutionalDepartmentName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	if (InstitutionalDepartmentTypeCodeSequence)
		stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
	if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (ManufacturerDeviceClassUID) {
		stream << "\t\t";
		ManufacturerDeviceClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerDeviceClassUID> not present\n";

	if (DeviceSerialNumber) {
		stream << "\t\t";
		DeviceSerialNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceSerialNumber> not present\n";

	if (SoftwareVersions) {
		stream << "\t\t";
		SoftwareVersions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftwareVersions> not present\n";

	if (GantryID) {
		stream << "\t\t";
		GantryID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryID> not present\n";

	if (UDISequence)
		stream << "\t\tSequence <UDISequence>\n";
	else
		stream << "\t\tSequence <UDISequence> not present\n";
	if (UDISequence && strcmp(UDISequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=UDISequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_UDIMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UDIMacro>\n";

			}
		}
	}
	if (DeviceUID) {
		stream << "\t\t";
		DeviceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceUID> not present\n";

	if (SpatialResolution) {
		stream << "\t\t";
		SpatialResolution->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpatialResolution> not present\n";

	if (DateOfLastCalibration) {
		stream << "\t\t";
		DateOfLastCalibration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DateOfLastCalibration> not present\n";

	if (TimeOfLastCalibration) {
		stream << "\t\t";
		TimeOfLastCalibration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeOfLastCalibration> not present\n";

	if (PixelPaddingValue) {
		stream << "\t\t";
		PixelPaddingValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPaddingValue> not present\n";

}

void
Module_EnhancedGeneralEquipment::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedGeneralEquipment>\n";

	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (DeviceSerialNumber) {
		stream << "\t\t";
		DeviceSerialNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceSerialNumber> not present\n";

	if (SoftwareVersions) {
		stream << "\t\t";
		SoftwareVersions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftwareVersions> not present\n";

}

void
Module_GeneralReference::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GeneralReference>\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (DerivationDescription) {
		stream << "\t\t";
		DerivationDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DerivationDescription> not present\n";

	if (DerivationCodeSequence)
		stream << "\t\tSequence <DerivationCodeSequence>\n";
	else
		stream << "\t\tSequence <DerivationCodeSequence> not present\n";
	if (DerivationCodeSequence && strcmp(DerivationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DerivationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (SourceImageSequence)
		stream << "\t\tSequence <SourceImageSequence>\n";
	else
		stream << "\t\tSequence <SourceImageSequence> not present\n";
	if (SourceImageSequence && strcmp(SourceImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *SpatialLocationsPreserved = (*list)[TagFromName(SpatialLocationsPreserved)];
				stream << "\t";
				if (SpatialLocationsPreserved) {
					stream << "\t\t";
					SpatialLocationsPreserved->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpatialLocationsPreserved> not present\n";

				Attribute *PatientOrientation = (*list)[TagFromName(PatientOrientation)];
				stream << "\t";
				if (PatientOrientation) {
					stream << "\t\t";
					PatientOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientOrientation> not present\n";

			}
		}
	}
	if (SourceInstanceSequence)
		stream << "\t\tSequence <SourceInstanceSequence>\n";
	else
		stream << "\t\tSequence <SourceInstanceSequence> not present\n";
	if (SourceInstanceSequence && strcmp(SourceInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_GeneralImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GeneralImage>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (PatientOrientation) {
		stream << "\t\t";
		PatientOrientation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientOrientation> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (AcquisitionDate) {
		stream << "\t\t";
		AcquisitionDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDate> not present\n";

	if (AcquisitionTime) {
		stream << "\t\t";
		AcquisitionTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTime> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (ImagesInAcquisition) {
		stream << "\t\t";
		ImagesInAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagesInAcquisition> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (QualityControlImage) {
		stream << "\t\t";
		QualityControlImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <QualityControlImage> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (IrradiationEventUID) {
		stream << "\t\t";
		IrradiationEventUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IrradiationEventUID> not present\n";

	if (RealWorldValueMappingSequence)
		stream << "\t\tSequence <RealWorldValueMappingSequence>\n";
	else
		stream << "\t\tSequence <RealWorldValueMappingSequence> not present\n";
	if (RealWorldValueMappingSequence && strcmp(RealWorldValueMappingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RealWorldValueMappingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RealWorldValueMappingItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingItemMacro>\n";

			}
		}
	}
	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
				stream << "\t";
				if (AnatomicRegionModifierSequence)
					stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
				if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
				stream << "\t";
	Macro_PrimaryAnatomicStructureMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrimaryAnatomicStructureMacro>\n";

	if (AnatomicRegionModifierSequence)
		stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
	if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
	if (PrimaryAnatomicStructureModifierSequence)
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence>\n";
	else
		stream << "\t\tSequence <PrimaryAnatomicStructureModifierSequence> not present\n";
	if (PrimaryAnatomicStructureModifierSequence && strcmp(PrimaryAnatomicStructureModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrimaryAnatomicStructureModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Module_ImagePlane::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ImagePlane>\n";

	if (PixelSpacing) {
		stream << "\t\t";
		PixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacing> not present\n";

	if (ImageOrientationPatient) {
		stream << "\t\t";
		ImageOrientationPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageOrientationPatient> not present\n";

	if (ImagePositionPatient) {
		stream << "\t\t";
		ImagePositionPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagePositionPatient> not present\n";

	if (SliceThickness) {
		stream << "\t\t";
		SliceThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceThickness> not present\n";

	if (SliceLocation) {
		stream << "\t\t";
		SliceLocation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceLocation> not present\n";

}

void
Macro_ImagePixelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ImagePixelMacro>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PixelData) {
		stream << "\t\t";
		PixelData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelData> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (PixelAspectRatio) {
		stream << "\t\t";
		PixelAspectRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelAspectRatio> not present\n";

	if (SmallestImagePixelValue) {
		stream << "\t\t";
		SmallestImagePixelValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SmallestImagePixelValue> not present\n";

	if (LargestImagePixelValue) {
		stream << "\t\t";
		LargestImagePixelValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LargestImagePixelValue> not present\n";

	if (RedPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		RedPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableDescriptor> not present\n";

	if (GreenPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		GreenPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableDescriptor> not present\n";

	if (BluePaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		BluePaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableDescriptor> not present\n";

	if (RedPaletteColorLookupTableData) {
		stream << "\t\t";
		RedPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableData> not present\n";

	if (GreenPaletteColorLookupTableData) {
		stream << "\t\t";
		GreenPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableData> not present\n";

	if (BluePaletteColorLookupTableData) {
		stream << "\t\t";
		BluePaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableData> not present\n";

	if (ICCProfile) {
		stream << "\t\t";
		ICCProfile->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ICCProfile> not present\n";

	if (ColorSpace) {
		stream << "\t\t";
		ColorSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColorSpace> not present\n";

}

void
Module_FloatingPointImagePixel::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <FloatingPointImagePixel>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (FloatPixelData) {
		stream << "\t\t";
		FloatPixelData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FloatPixelData> not present\n";

	if (PixelAspectRatio) {
		stream << "\t\t";
		PixelAspectRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelAspectRatio> not present\n";

	if (FloatPixelPaddingValue) {
		stream << "\t\t";
		FloatPixelPaddingValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FloatPixelPaddingValue> not present\n";

	if (FloatPixelPaddingRangeLimit) {
		stream << "\t\t";
		FloatPixelPaddingRangeLimit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FloatPixelPaddingRangeLimit> not present\n";

}

void
Module_DoubleFloatingPointImagePixel::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DoubleFloatingPointImagePixel>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (DoubleFloatPixelData) {
		stream << "\t\t";
		DoubleFloatPixelData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoubleFloatPixelData> not present\n";

	if (PixelAspectRatio) {
		stream << "\t\t";
		PixelAspectRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelAspectRatio> not present\n";

	if (DoubleFloatPixelPaddingValue) {
		stream << "\t\t";
		DoubleFloatPixelPaddingValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoubleFloatPixelPaddingValue> not present\n";

	if (DoubleFloatPixelPaddingRangeLimit) {
		stream << "\t\t";
		DoubleFloatPixelPaddingRangeLimit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoubleFloatPixelPaddingRangeLimit> not present\n";

}

void
Module_ImagePixel::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ImagePixel>\n";

				stream << "\t";
	Macro_ImagePixelMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ImagePixelMacro>\n";

	if (PixelDataProviderURL) {
		stream << "\t\t";
		PixelDataProviderURL->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelDataProviderURL> not present\n";

	if (PixelPaddingRangeLimit) {
		stream << "\t\t";
		PixelPaddingRangeLimit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPaddingRangeLimit> not present\n";

}

void
Module_ContrastBolus::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ContrastBolus>\n";

	if (ContrastBolusAgent) {
		stream << "\t\t";
		ContrastBolusAgent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusAgent> not present\n";

	if (ContrastBolusAgentSequence)
		stream << "\t\tSequence <ContrastBolusAgentSequence>\n";
	else
		stream << "\t\tSequence <ContrastBolusAgentSequence> not present\n";
	if (ContrastBolusAgentSequence && strcmp(ContrastBolusAgentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContrastBolusAgentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ContrastBolusRoute) {
		stream << "\t\t";
		ContrastBolusRoute->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusRoute> not present\n";

	if (ContrastBolusAdministrationRouteSequence)
		stream << "\t\tSequence <ContrastBolusAdministrationRouteSequence>\n";
	else
		stream << "\t\tSequence <ContrastBolusAdministrationRouteSequence> not present\n";
	if (ContrastBolusAdministrationRouteSequence && strcmp(ContrastBolusAdministrationRouteSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContrastBolusAdministrationRouteSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AdditionalDrugSequence = (*list)[TagFromName(AdditionalDrugSequence)];
				stream << "\t";
				if (AdditionalDrugSequence)
					stream << "\t\tSequence <AdditionalDrugSequence>\n";
				else
					stream << "\t\tSequence <AdditionalDrugSequence> not present\n";
				if (AdditionalDrugSequence && strcmp(AdditionalDrugSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AdditionalDrugSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ContrastBolusVolume) {
		stream << "\t\t";
		ContrastBolusVolume->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusVolume> not present\n";

	if (ContrastBolusStartTime) {
		stream << "\t\t";
		ContrastBolusStartTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusStartTime> not present\n";

	if (ContrastBolusStopTime) {
		stream << "\t\t";
		ContrastBolusStopTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusStopTime> not present\n";

	if (ContrastBolusTotalDose) {
		stream << "\t\t";
		ContrastBolusTotalDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusTotalDose> not present\n";

	if (ContrastFlowRate) {
		stream << "\t\t";
		ContrastFlowRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastFlowRate> not present\n";

	if (ContrastFlowDuration) {
		stream << "\t\t";
		ContrastFlowDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastFlowDuration> not present\n";

	if (ContrastBolusIngredient) {
		stream << "\t\t";
		ContrastBolusIngredient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusIngredient> not present\n";

	if (ContrastBolusIngredientConcentration) {
		stream << "\t\t";
		ContrastBolusIngredientConcentration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusIngredientConcentration> not present\n";

}

void
Module_EnhancedContrastBolus::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedContrastBolus>\n";

	if (ContrastBolusAgentSequence)
		stream << "\t\tSequence <ContrastBolusAgentSequence>\n";
	else
		stream << "\t\tSequence <ContrastBolusAgentSequence> not present\n";
	if (ContrastBolusAgentSequence && strcmp(ContrastBolusAgentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContrastBolusAgentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

				Attribute *ContrastBolusAgentNumber = (*list)[TagFromName(ContrastBolusAgentNumber)];
				stream << "\t";
				if (ContrastBolusAgentNumber) {
					stream << "\t\t";
					ContrastBolusAgentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusAgentNumber> not present\n";

	Attribute *ContrastBolusAdministrationRouteSequence = (*list)[TagFromName(ContrastBolusAdministrationRouteSequence)];
				stream << "\t";
				if (ContrastBolusAdministrationRouteSequence)
					stream << "\t\tSequence <ContrastBolusAdministrationRouteSequence>\n";
				else
					stream << "\t\tSequence <ContrastBolusAdministrationRouteSequence> not present\n";
				if (ContrastBolusAdministrationRouteSequence && strcmp(ContrastBolusAdministrationRouteSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ContrastBolusAdministrationRouteSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ContrastBolusIngredientCodeSequence = (*list)[TagFromName(ContrastBolusIngredientCodeSequence)];
				stream << "\t";
				if (ContrastBolusIngredientCodeSequence)
					stream << "\t\tSequence <ContrastBolusIngredientCodeSequence>\n";
				else
					stream << "\t\tSequence <ContrastBolusIngredientCodeSequence> not present\n";
				if (ContrastBolusIngredientCodeSequence && strcmp(ContrastBolusIngredientCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ContrastBolusIngredientCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ContrastBolusVolume = (*list)[TagFromName(ContrastBolusVolume)];
				stream << "\t";
				if (ContrastBolusVolume) {
					stream << "\t\t";
					ContrastBolusVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusVolume> not present\n";

				Attribute *ContrastBolusIngredientConcentration = (*list)[TagFromName(ContrastBolusIngredientConcentration)];
				stream << "\t";
				if (ContrastBolusIngredientConcentration) {
					stream << "\t\t";
					ContrastBolusIngredientConcentration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusIngredientConcentration> not present\n";

				Attribute *ContrastBolusIngredientPercentByVolume = (*list)[TagFromName(ContrastBolusIngredientPercentByVolume)];
				stream << "\t";
				if (ContrastBolusIngredientPercentByVolume) {
					stream << "\t\t";
					ContrastBolusIngredientPercentByVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusIngredientPercentByVolume> not present\n";

				Attribute *ContrastBolusIngredientOpaque = (*list)[TagFromName(ContrastBolusIngredientOpaque)];
				stream << "\t";
				if (ContrastBolusIngredientOpaque) {
					stream << "\t\t";
					ContrastBolusIngredientOpaque->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusIngredientOpaque> not present\n";

	Attribute *ContrastAdministrationProfileSequence = (*list)[TagFromName(ContrastAdministrationProfileSequence)];
				stream << "\t";
				if (ContrastAdministrationProfileSequence)
					stream << "\t\tSequence <ContrastAdministrationProfileSequence>\n";
				else
					stream << "\t\tSequence <ContrastAdministrationProfileSequence> not present\n";
				if (ContrastAdministrationProfileSequence && strcmp(ContrastAdministrationProfileSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ContrastAdministrationProfileSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ContrastBolusVolume = (*list)[TagFromName(ContrastBolusVolume)];
							stream << "\t\t";
							if (ContrastBolusVolume) {
								stream << "\t\t";
								ContrastBolusVolume->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContrastBolusVolume> not present\n";

							Attribute *ContrastBolusStartTime = (*list)[TagFromName(ContrastBolusStartTime)];
							stream << "\t\t";
							if (ContrastBolusStartTime) {
								stream << "\t\t";
								ContrastBolusStartTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContrastBolusStartTime> not present\n";

							Attribute *ContrastBolusStopTime = (*list)[TagFromName(ContrastBolusStopTime)];
							stream << "\t\t";
							if (ContrastBolusStopTime) {
								stream << "\t\t";
								ContrastBolusStopTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContrastBolusStopTime> not present\n";

							Attribute *ContrastFlowRate = (*list)[TagFromName(ContrastFlowRate)];
							stream << "\t\t";
							if (ContrastFlowRate) {
								stream << "\t\t";
								ContrastFlowRate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContrastFlowRate> not present\n";

							Attribute *ContrastFlowDuration = (*list)[TagFromName(ContrastFlowDuration)];
							stream << "\t\t";
							if (ContrastFlowDuration) {
								stream << "\t\t";
								ContrastFlowDuration->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContrastFlowDuration> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_Cine::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Cine>\n";

	if (PreferredPlaybackSequencing) {
		stream << "\t\t";
		PreferredPlaybackSequencing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PreferredPlaybackSequencing> not present\n";

	if (FrameTime) {
		stream << "\t\t";
		FrameTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameTime> not present\n";

	if (FrameTimeVector) {
		stream << "\t\t";
		FrameTimeVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameTimeVector> not present\n";

	if (StartTrim) {
		stream << "\t\t";
		StartTrim->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartTrim> not present\n";

	if (StopTrim) {
		stream << "\t\t";
		StopTrim->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StopTrim> not present\n";

	if (RecommendedDisplayFrameRate) {
		stream << "\t\t";
		RecommendedDisplayFrameRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecommendedDisplayFrameRate> not present\n";

	if (CineRate) {
		stream << "\t\t";
		CineRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CineRate> not present\n";

	if (FrameDelay) {
		stream << "\t\t";
		FrameDelay->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameDelay> not present\n";

	if (ImageTriggerDelay) {
		stream << "\t\t";
		ImageTriggerDelay->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageTriggerDelay> not present\n";

	if (EffectiveDuration) {
		stream << "\t\t";
		EffectiveDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EffectiveDuration> not present\n";

	if (ActualFrameDuration) {
		stream << "\t\t";
		ActualFrameDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ActualFrameDuration> not present\n";

	if (MultiplexedAudioChannelsDescriptionCodeSequence)
		stream << "\t\tSequence <MultiplexedAudioChannelsDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <MultiplexedAudioChannelsDescriptionCodeSequence> not present\n";
	if (MultiplexedAudioChannelsDescriptionCodeSequence && strcmp(MultiplexedAudioChannelsDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultiplexedAudioChannelsDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ChannelIdentificationCode = (*list)[TagFromName(ChannelIdentificationCode)];
				stream << "\t";
				if (ChannelIdentificationCode) {
					stream << "\t\t";
					ChannelIdentificationCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ChannelIdentificationCode> not present\n";

				Attribute *ChannelMode = (*list)[TagFromName(ChannelMode)];
				stream << "\t";
				if (ChannelMode) {
					stream << "\t\t";
					ChannelMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ChannelMode> not present\n";

	Attribute *ChannelSourceSequence = (*list)[TagFromName(ChannelSourceSequence)];
				stream << "\t";
				if (ChannelSourceSequence)
					stream << "\t\tSequence <ChannelSourceSequence>\n";
				else
					stream << "\t\tSequence <ChannelSourceSequence> not present\n";
				if (ChannelSourceSequence && strcmp(ChannelSourceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ChannelSourceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_MultiFrame::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrame>\n";

	if (NumberOfFrames) {
		stream << "\t\t";
		NumberOfFrames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFrames> not present\n";

	if (FrameIncrementPointer) {
		stream << "\t\t";
		FrameIncrementPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameIncrementPointer> not present\n";

	if (StereoPairsPresent) {
		stream << "\t\t";
		StereoPairsPresent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StereoPairsPresent> not present\n";

}

void
Module_MultiFrameFunctionalGroupsCommon::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsCommon>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (NumberOfFrames) {
		stream << "\t\t";
		NumberOfFrames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFrames> not present\n";

	if (StereoPairsPresent) {
		stream << "\t\t";
		StereoPairsPresent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StereoPairsPresent> not present\n";

	if (ConcatenationFrameOffsetNumber) {
		stream << "\t\t";
		ConcatenationFrameOffsetNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConcatenationFrameOffsetNumber> not present\n";

	if (RepresentativeFrameNumber) {
		stream << "\t\t";
		RepresentativeFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RepresentativeFrameNumber> not present\n";

	if (ConcatenationUID) {
		stream << "\t\t";
		ConcatenationUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConcatenationUID> not present\n";

	if (SOPInstanceUIDOfConcatenationSource) {
		stream << "\t\t";
		SOPInstanceUIDOfConcatenationSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SOPInstanceUIDOfConcatenationSource> not present\n";

	if (InConcatenationNumber) {
		stream << "\t\t";
		InConcatenationNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InConcatenationNumber> not present\n";

	if (InConcatenationTotalNumber) {
		stream << "\t\t";
		InConcatenationTotalNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InConcatenationTotalNumber> not present\n";

}

void
Macro_PixelMeasuresMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PixelMeasuresMacro>\n";

	if (PixelMeasuresSequence)
		stream << "\t\tSequence <PixelMeasuresSequence>\n";
	else
		stream << "\t\tSequence <PixelMeasuresSequence> not present\n";
	if (PixelMeasuresSequence && strcmp(PixelMeasuresSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PixelMeasuresSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PixelSpacing = (*list)[TagFromName(PixelSpacing)];
				stream << "\t";
				if (PixelSpacing) {
					stream << "\t\t";
					PixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelSpacing> not present\n";

				Attribute *SliceThickness = (*list)[TagFromName(SliceThickness)];
				stream << "\t";
				if (SliceThickness) {
					stream << "\t\t";
					SliceThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SliceThickness> not present\n";

				Attribute *SpacingBetweenSlices = (*list)[TagFromName(SpacingBetweenSlices)];
				stream << "\t";
				if (SpacingBetweenSlices) {
					stream << "\t\t";
					SpacingBetweenSlices->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpacingBetweenSlices> not present\n";

			}
		}
	}
}

void
Macro_FrameContentMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FrameContentMacro>\n";

	if (FrameContentSequence)
		stream << "\t\tSequence <FrameContentSequence>\n";
	else
		stream << "\t\tSequence <FrameContentSequence> not present\n";
	if (FrameContentSequence && strcmp(FrameContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameAcquisitionNumber = (*list)[TagFromName(FrameAcquisitionNumber)];
				stream << "\t";
				if (FrameAcquisitionNumber) {
					stream << "\t\t";
					FrameAcquisitionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameAcquisitionNumber> not present\n";

				Attribute *FrameReferenceDateTime = (*list)[TagFromName(FrameReferenceDateTime)];
				stream << "\t";
				if (FrameReferenceDateTime) {
					stream << "\t\t";
					FrameReferenceDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameReferenceDateTime> not present\n";

				Attribute *FrameAcquisitionDateTime = (*list)[TagFromName(FrameAcquisitionDateTime)];
				stream << "\t";
				if (FrameAcquisitionDateTime) {
					stream << "\t\t";
					FrameAcquisitionDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameAcquisitionDateTime> not present\n";

				Attribute *FrameAcquisitionDuration = (*list)[TagFromName(FrameAcquisitionDuration)];
				stream << "\t";
				if (FrameAcquisitionDuration) {
					stream << "\t\t";
					FrameAcquisitionDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameAcquisitionDuration> not present\n";

				Attribute *CardiacCyclePosition = (*list)[TagFromName(CardiacCyclePosition)];
				stream << "\t";
				if (CardiacCyclePosition) {
					stream << "\t\t";
					CardiacCyclePosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CardiacCyclePosition> not present\n";

				Attribute *RespiratoryCyclePosition = (*list)[TagFromName(RespiratoryCyclePosition)];
				stream << "\t";
				if (RespiratoryCyclePosition) {
					stream << "\t\t";
					RespiratoryCyclePosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RespiratoryCyclePosition> not present\n";

				Attribute *DimensionIndexValues = (*list)[TagFromName(DimensionIndexValues)];
				stream << "\t";
				if (DimensionIndexValues) {
					stream << "\t\t";
					DimensionIndexValues->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionIndexValues> not present\n";

				Attribute *TemporalPositionIndex = (*list)[TagFromName(TemporalPositionIndex)];
				stream << "\t";
				if (TemporalPositionIndex) {
					stream << "\t\t";
					TemporalPositionIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemporalPositionIndex> not present\n";

				Attribute *StackID = (*list)[TagFromName(StackID)];
				stream << "\t";
				if (StackID) {
					stream << "\t\t";
					StackID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StackID> not present\n";

				Attribute *InStackPositionNumber = (*list)[TagFromName(InStackPositionNumber)];
				stream << "\t";
				if (InStackPositionNumber) {
					stream << "\t\t";
					InStackPositionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InStackPositionNumber> not present\n";

				Attribute *FrameComments = (*list)[TagFromName(FrameComments)];
				stream << "\t";
				if (FrameComments) {
					stream << "\t\t";
					FrameComments->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameComments> not present\n";

				Attribute *FrameLabel = (*list)[TagFromName(FrameLabel)];
				stream << "\t";
				if (FrameLabel) {
					stream << "\t\t";
					FrameLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameLabel> not present\n";

			}
		}
	}
}

void
Macro_PlanePositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PlanePositionMacro>\n";

	if (PlanePositionSequence)
		stream << "\t\tSequence <PlanePositionSequence>\n";
	else
		stream << "\t\tSequence <PlanePositionSequence> not present\n";
	if (PlanePositionSequence && strcmp(PlanePositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PlanePositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ImagePositionPatient = (*list)[TagFromName(ImagePositionPatient)];
				stream << "\t";
				if (ImagePositionPatient) {
					stream << "\t\t";
					ImagePositionPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagePositionPatient> not present\n";

			}
		}
	}
}

void
Macro_PlaneOrientationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PlaneOrientationMacro>\n";

	if (PlaneOrientationSequence)
		stream << "\t\tSequence <PlaneOrientationSequence>\n";
	else
		stream << "\t\tSequence <PlaneOrientationSequence> not present\n";
	if (PlaneOrientationSequence && strcmp(PlaneOrientationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PlaneOrientationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ImageOrientationPatient = (*list)[TagFromName(ImageOrientationPatient)];
				stream << "\t";
				if (ImageOrientationPatient) {
					stream << "\t\t";
					ImageOrientationPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageOrientationPatient> not present\n";

			}
		}
	}
}

void
Macro_ReferencedImageMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ReferencedImageMacro>\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_DerivationImageMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DerivationImageMacro>\n";

	if (DerivationImageSequence)
		stream << "\t\tSequence <DerivationImageSequence>\n";
	else
		stream << "\t\tSequence <DerivationImageSequence> not present\n";
	if (DerivationImageSequence && strcmp(DerivationImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DerivationImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DerivationDescription = (*list)[TagFromName(DerivationDescription)];
				stream << "\t";
				if (DerivationDescription) {
					stream << "\t\t";
					DerivationDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DerivationDescription> not present\n";

	Attribute *DerivationCodeSequence = (*list)[TagFromName(DerivationCodeSequence)];
				stream << "\t";
				if (DerivationCodeSequence)
					stream << "\t\tSequence <DerivationCodeSequence>\n";
				else
					stream << "\t\tSequence <DerivationCodeSequence> not present\n";
				if (DerivationCodeSequence && strcmp(DerivationCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DerivationCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *SourceImageSequence = (*list)[TagFromName(SourceImageSequence)];
				stream << "\t";
				if (SourceImageSequence)
					stream << "\t\tSequence <SourceImageSequence>\n";
				else
					stream << "\t\tSequence <SourceImageSequence> not present\n";
				if (SourceImageSequence && strcmp(SourceImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SourceImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
							stream << "\t\t";
							if (PurposeOfReferenceCodeSequence)
								stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
							else
								stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
							if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Macro_CardiacSynchronizationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CardiacSynchronizationMacro>\n";

	if (CardiacSynchronizationSequence)
		stream << "\t\tSequence <CardiacSynchronizationSequence>\n";
	else
		stream << "\t\tSequence <CardiacSynchronizationSequence> not present\n";
	if (CardiacSynchronizationSequence && strcmp(CardiacSynchronizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CardiacSynchronizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *NominalPercentageOfCardiacPhase = (*list)[TagFromName(NominalPercentageOfCardiacPhase)];
				stream << "\t";
				if (NominalPercentageOfCardiacPhase) {
					stream << "\t\t";
					NominalPercentageOfCardiacPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalPercentageOfCardiacPhase> not present\n";

				Attribute *NominalCardiacTriggerDelayTime = (*list)[TagFromName(NominalCardiacTriggerDelayTime)];
				stream << "\t";
				if (NominalCardiacTriggerDelayTime) {
					stream << "\t\t";
					NominalCardiacTriggerDelayTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalCardiacTriggerDelayTime> not present\n";

				Attribute *ActualCardiacTriggerDelayTime = (*list)[TagFromName(ActualCardiacTriggerDelayTime)];
				stream << "\t";
				if (ActualCardiacTriggerDelayTime) {
					stream << "\t\t";
					ActualCardiacTriggerDelayTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ActualCardiacTriggerDelayTime> not present\n";

				Attribute *IntervalsAcquired = (*list)[TagFromName(IntervalsAcquired)];
				stream << "\t";
				if (IntervalsAcquired) {
					stream << "\t\t";
					IntervalsAcquired->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IntervalsAcquired> not present\n";

				Attribute *IntervalsRejected = (*list)[TagFromName(IntervalsRejected)];
				stream << "\t";
				if (IntervalsRejected) {
					stream << "\t\t";
					IntervalsRejected->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IntervalsRejected> not present\n";

				Attribute *HeartRate = (*list)[TagFromName(HeartRate)];
				stream << "\t";
				if (HeartRate) {
					stream << "\t\t";
					HeartRate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HeartRate> not present\n";

				Attribute *RRIntervalTimeNominal = (*list)[TagFromName(RRIntervalTimeNominal)];
				stream << "\t";
				if (RRIntervalTimeNominal) {
					stream << "\t\t";
					RRIntervalTimeNominal->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RRIntervalTimeNominal> not present\n";

				Attribute *LowRRValue = (*list)[TagFromName(LowRRValue)];
				stream << "\t";
				if (LowRRValue) {
					stream << "\t\t";
					LowRRValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LowRRValue> not present\n";

				Attribute *HighRRValue = (*list)[TagFromName(HighRRValue)];
				stream << "\t";
				if (HighRRValue) {
					stream << "\t\t";
					HighRRValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HighRRValue> not present\n";

			}
		}
	}
}

void
Macro_FrameAnatomyMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FrameAnatomyMacro>\n";

	if (FrameAnatomySequence)
		stream << "\t\tSequence <FrameAnatomySequence>\n";
	else
		stream << "\t\tSequence <FrameAnatomySequence> not present\n";
	if (FrameAnatomySequence && strcmp(FrameAnatomySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameAnatomySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameLaterality = (*list)[TagFromName(FrameLaterality)];
				stream << "\t";
				if (FrameLaterality) {
					stream << "\t\t";
					FrameLaterality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameLaterality> not present\n";

							stream << "\t\t";
	Macro_GeneralAnatomyMandatoryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <GeneralAnatomyMandatoryMacro>\n";

			}
		}
	}
}

void
Macro_PixelValueTransformationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PixelValueTransformationMacro>\n";

	if (PixelValueTransformationSequence)
		stream << "\t\tSequence <PixelValueTransformationSequence>\n";
	else
		stream << "\t\tSequence <PixelValueTransformationSequence> not present\n";
	if (PixelValueTransformationSequence && strcmp(PixelValueTransformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PixelValueTransformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
				stream << "\t";
				if (RescaleIntercept) {
					stream << "\t\t";
					RescaleIntercept->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleIntercept> not present\n";

				Attribute *RescaleSlope = (*list)[TagFromName(RescaleSlope)];
				stream << "\t";
				if (RescaleSlope) {
					stream << "\t\t";
					RescaleSlope->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleSlope> not present\n";

				Attribute *RescaleType = (*list)[TagFromName(RescaleType)];
				stream << "\t";
				if (RescaleType) {
					stream << "\t\t";
					RescaleType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleType> not present\n";

			}
		}
	}
}

void
Macro_FrameVOILUTMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FrameVOILUTMacro>\n";

	if (FrameVOILUTSequence)
		stream << "\t\tSequence <FrameVOILUTSequence>\n";
	else
		stream << "\t\tSequence <FrameVOILUTSequence> not present\n";
	if (FrameVOILUTSequence && strcmp(FrameVOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameVOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *WindowCenter = (*list)[TagFromName(WindowCenter)];
				stream << "\t";
				if (WindowCenter) {
					stream << "\t\t";
					WindowCenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WindowCenter> not present\n";

				Attribute *WindowWidth = (*list)[TagFromName(WindowWidth)];
				stream << "\t";
				if (WindowWidth) {
					stream << "\t\t";
					WindowWidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WindowWidth> not present\n";

				Attribute *WindowCenterWidthExplanation = (*list)[TagFromName(WindowCenterWidthExplanation)];
				stream << "\t";
				if (WindowCenterWidthExplanation) {
					stream << "\t\t";
					WindowCenterWidthExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WindowCenterWidthExplanation> not present\n";

				Attribute *VOILUTFunction = (*list)[TagFromName(VOILUTFunction)];
				stream << "\t";
				if (VOILUTFunction) {
					stream << "\t\t";
					VOILUTFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VOILUTFunction> not present\n";

			}
		}
	}
}

void
Macro_RealWorldValueMappingMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RealWorldValueMappingMacro>\n";

	if (RealWorldValueMappingSequence)
		stream << "\t\tSequence <RealWorldValueMappingSequence>\n";
	else
		stream << "\t\tSequence <RealWorldValueMappingSequence> not present\n";
	if (RealWorldValueMappingSequence && strcmp(RealWorldValueMappingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RealWorldValueMappingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RealWorldValueMappingItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingItemMacro>\n";

			}
		}
	}
}

void
Macro_RealWorldValueMappingItemMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RealWorldValueMappingItemMacro>\n";

	if (RealWorldValueFirstValueMapped) {
		stream << "\t\t";
		RealWorldValueFirstValueMapped->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueFirstValueMapped> not present\n";

	if (RealWorldValueLastValueMapped) {
		stream << "\t\t";
		RealWorldValueLastValueMapped->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueLastValueMapped> not present\n";

	if (DoubleFloatRealWorldValueFirstValueMapped) {
		stream << "\t\t";
		DoubleFloatRealWorldValueFirstValueMapped->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoubleFloatRealWorldValueFirstValueMapped> not present\n";

	if (DoubleFloatRealWorldValueLastValueMapped) {
		stream << "\t\t";
		DoubleFloatRealWorldValueLastValueMapped->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoubleFloatRealWorldValueLastValueMapped> not present\n";

	if (RealWorldValueIntercept) {
		stream << "\t\t";
		RealWorldValueIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueIntercept> not present\n";

	if (RealWorldValueSlope) {
		stream << "\t\t";
		RealWorldValueSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueSlope> not present\n";

	if (RealWorldValueLUTData) {
		stream << "\t\t";
		RealWorldValueLUTData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueLUTData> not present\n";

	if (LUTExplanation) {
		stream << "\t\t";
		LUTExplanation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LUTExplanation> not present\n";

	if (LUTLabel) {
		stream << "\t\t";
		LUTLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LUTLabel> not present\n";

	if (MeasurementUnitsCodeSequence)
		stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
	else
		stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
	if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (QuantityDefinitionSequence)
		stream << "\t\tSequence <QuantityDefinitionSequence>\n";
	else
		stream << "\t\tSequence <QuantityDefinitionSequence> not present\n";
	if (QuantityDefinitionSequence && strcmp(QuantityDefinitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=QuantityDefinitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

			}
		}
	}
}

void
Macro_ContrastBolusUsageMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ContrastBolusUsageMacro>\n";

	if (ContrastBolusUsageSequence)
		stream << "\t\tSequence <ContrastBolusUsageSequence>\n";
	else
		stream << "\t\tSequence <ContrastBolusUsageSequence> not present\n";
	if (ContrastBolusUsageSequence && strcmp(ContrastBolusUsageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContrastBolusUsageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ContrastBolusAgentNumber = (*list)[TagFromName(ContrastBolusAgentNumber)];
				stream << "\t";
				if (ContrastBolusAgentNumber) {
					stream << "\t\t";
					ContrastBolusAgentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusAgentNumber> not present\n";

				Attribute *ContrastBolusAgentAdministered = (*list)[TagFromName(ContrastBolusAgentAdministered)];
				stream << "\t";
				if (ContrastBolusAgentAdministered) {
					stream << "\t\t";
					ContrastBolusAgentAdministered->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusAgentAdministered> not present\n";

				Attribute *ContrastBolusAgentDetected = (*list)[TagFromName(ContrastBolusAgentDetected)];
				stream << "\t";
				if (ContrastBolusAgentDetected) {
					stream << "\t\t";
					ContrastBolusAgentDetected->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusAgentDetected> not present\n";

				Attribute *ContrastBolusAgentPhase = (*list)[TagFromName(ContrastBolusAgentPhase)];
				stream << "\t";
				if (ContrastBolusAgentPhase) {
					stream << "\t\t";
					ContrastBolusAgentPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastBolusAgentPhase> not present\n";

			}
		}
	}
}

void
Macro_PixelIntensityRelationshipLUTMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PixelIntensityRelationshipLUTMacro>\n";

	if (PixelIntensityRelationshipLUTSequence)
		stream << "\t\tSequence <PixelIntensityRelationshipLUTSequence>\n";
	else
		stream << "\t\tSequence <PixelIntensityRelationshipLUTSequence> not present\n";
	if (PixelIntensityRelationshipLUTSequence && strcmp(PixelIntensityRelationshipLUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PixelIntensityRelationshipLUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LUTDescriptor = (*list)[TagFromName(LUTDescriptor)];
				stream << "\t";
				if (LUTDescriptor) {
					stream << "\t\t";
					LUTDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTDescriptor> not present\n";

				Attribute *LUTData = (*list)[TagFromName(LUTData)];
				stream << "\t";
				if (LUTData) {
					stream << "\t\t";
					LUTData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTData> not present\n";

				Attribute *LUTFunction = (*list)[TagFromName(LUTFunction)];
				stream << "\t";
				if (LUTFunction) {
					stream << "\t\t";
					LUTFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTFunction> not present\n";

			}
		}
	}
}

void
Macro_FramePixelShiftMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FramePixelShiftMacro>\n";

	if (FramePixelShiftSequence)
		stream << "\t\tSequence <FramePixelShiftSequence>\n";
	else
		stream << "\t\tSequence <FramePixelShiftSequence> not present\n";
	if (FramePixelShiftSequence && strcmp(FramePixelShiftSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FramePixelShiftSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SubtractionItemID = (*list)[TagFromName(SubtractionItemID)];
				stream << "\t";
				if (SubtractionItemID) {
					stream << "\t\t";
					SubtractionItemID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SubtractionItemID> not present\n";

				Attribute *MaskSubPixelShift = (*list)[TagFromName(MaskSubPixelShift)];
				stream << "\t";
				if (MaskSubPixelShift) {
					stream << "\t\t";
					MaskSubPixelShift->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskSubPixelShift> not present\n";

			}
		}
	}
}

void
Macro_PatientOrientationInFrameMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PatientOrientationInFrameMacro>\n";

	if (PatientOrientationInFrameSequence)
		stream << "\t\tSequence <PatientOrientationInFrameSequence>\n";
	else
		stream << "\t\tSequence <PatientOrientationInFrameSequence> not present\n";
	if (PatientOrientationInFrameSequence && strcmp(PatientOrientationInFrameSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientOrientationInFrameSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PatientOrientation = (*list)[TagFromName(PatientOrientation)];
				stream << "\t";
				if (PatientOrientation) {
					stream << "\t\t";
					PatientOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientOrientation> not present\n";

			}
		}
	}
}

void
Macro_FrameDisplayShutterMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FrameDisplayShutterMacro>\n";

	if (FrameDisplayShutterSequence)
		stream << "\t\tSequence <FrameDisplayShutterSequence>\n";
	else
		stream << "\t\tSequence <FrameDisplayShutterSequence> not present\n";
	if (FrameDisplayShutterSequence && strcmp(FrameDisplayShutterSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameDisplayShutterSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_DisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DisplayShutterMacro>\n";

			}
		}
	}
}

void
Macro_RespiratorySynchronizationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RespiratorySynchronizationMacro>\n";

	if (RespiratorySynchronizationSequence)
		stream << "\t\tSequence <RespiratorySynchronizationSequence>\n";
	else
		stream << "\t\tSequence <RespiratorySynchronizationSequence> not present\n";
	if (RespiratorySynchronizationSequence && strcmp(RespiratorySynchronizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RespiratorySynchronizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RespiratoryIntervalTime = (*list)[TagFromName(RespiratoryIntervalTime)];
				stream << "\t";
				if (RespiratoryIntervalTime) {
					stream << "\t\t";
					RespiratoryIntervalTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RespiratoryIntervalTime> not present\n";

				Attribute *NominalPercentageOfRespiratoryPhase = (*list)[TagFromName(NominalPercentageOfRespiratoryPhase)];
				stream << "\t";
				if (NominalPercentageOfRespiratoryPhase) {
					stream << "\t\t";
					NominalPercentageOfRespiratoryPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalPercentageOfRespiratoryPhase> not present\n";

				Attribute *NominalRespiratoryTriggerDelayTime = (*list)[TagFromName(NominalRespiratoryTriggerDelayTime)];
				stream << "\t";
				if (NominalRespiratoryTriggerDelayTime) {
					stream << "\t\t";
					NominalRespiratoryTriggerDelayTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalRespiratoryTriggerDelayTime> not present\n";

				Attribute *ActualRespiratoryTriggerDelayTime = (*list)[TagFromName(ActualRespiratoryTriggerDelayTime)];
				stream << "\t";
				if (ActualRespiratoryTriggerDelayTime) {
					stream << "\t\t";
					ActualRespiratoryTriggerDelayTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ActualRespiratoryTriggerDelayTime> not present\n";

				Attribute *StartingRespiratoryAmplitude = (*list)[TagFromName(StartingRespiratoryAmplitude)];
				stream << "\t";
				if (StartingRespiratoryAmplitude) {
					stream << "\t\t";
					StartingRespiratoryAmplitude->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StartingRespiratoryAmplitude> not present\n";

				Attribute *StartingRespiratoryPhase = (*list)[TagFromName(StartingRespiratoryPhase)];
				stream << "\t";
				if (StartingRespiratoryPhase) {
					stream << "\t\t";
					StartingRespiratoryPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StartingRespiratoryPhase> not present\n";

				Attribute *EndingRespiratoryAmplitude = (*list)[TagFromName(EndingRespiratoryAmplitude)];
				stream << "\t";
				if (EndingRespiratoryAmplitude) {
					stream << "\t\t";
					EndingRespiratoryAmplitude->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EndingRespiratoryAmplitude> not present\n";

				Attribute *EndingRespiratoryPhase = (*list)[TagFromName(EndingRespiratoryPhase)];
				stream << "\t";
				if (EndingRespiratoryPhase) {
					stream << "\t\t";
					EndingRespiratoryPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EndingRespiratoryPhase> not present\n";

			}
		}
	}
}

void
Macro_IrradiationEventIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IrradiationEventIdentificationMacro>\n";

	if (IrradiationEventIdentificationSequence)
		stream << "\t\tSequence <IrradiationEventIdentificationSequence>\n";
	else
		stream << "\t\tSequence <IrradiationEventIdentificationSequence> not present\n";
	if (IrradiationEventIdentificationSequence && strcmp(IrradiationEventIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IrradiationEventIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *IrradiationEventUID = (*list)[TagFromName(IrradiationEventUID)];
				stream << "\t";
				if (IrradiationEventUID) {
					stream << "\t\t";
					IrradiationEventUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IrradiationEventUID> not present\n";

			}
		}
	}
}

void
Macro_RadiopharmaceuticalUsageMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RadiopharmaceuticalUsageMacro>\n";

	if (RadiopharmaceuticalUsageSequence)
		stream << "\t\tSequence <RadiopharmaceuticalUsageSequence>\n";
	else
		stream << "\t\tSequence <RadiopharmaceuticalUsageSequence> not present\n";
	if (RadiopharmaceuticalUsageSequence && strcmp(RadiopharmaceuticalUsageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RadiopharmaceuticalUsageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RadiopharmaceuticalAgentNumber = (*list)[TagFromName(RadiopharmaceuticalAgentNumber)];
				stream << "\t";
				if (RadiopharmaceuticalAgentNumber) {
					stream << "\t\t";
					RadiopharmaceuticalAgentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalAgentNumber> not present\n";

			}
		}
	}
}

void
Macro_PatientPhysiologicalStateMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PatientPhysiologicalStateMacro>\n";

	if (PatientPhysiologicalStateSequence)
		stream << "\t\tSequence <PatientPhysiologicalStateSequence>\n";
	else
		stream << "\t\tSequence <PatientPhysiologicalStateSequence> not present\n";
	if (PatientPhysiologicalStateSequence && strcmp(PatientPhysiologicalStateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientPhysiologicalStateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *PatientPhysiologicalStateCodeSequence = (*list)[TagFromName(PatientPhysiologicalStateCodeSequence)];
				stream << "\t";
				if (PatientPhysiologicalStateCodeSequence)
					stream << "\t\tSequence <PatientPhysiologicalStateCodeSequence>\n";
				else
					stream << "\t\tSequence <PatientPhysiologicalStateCodeSequence> not present\n";
				if (PatientPhysiologicalStateCodeSequence && strcmp(PatientPhysiologicalStateCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PatientPhysiologicalStateCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_MultiFrameDimension::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameDimension>\n";

	if (DimensionOrganizationSequence)
		stream << "\t\tSequence <DimensionOrganizationSequence>\n";
	else
		stream << "\t\tSequence <DimensionOrganizationSequence> not present\n";
	if (DimensionOrganizationSequence && strcmp(DimensionOrganizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DimensionOrganizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DimensionOrganizationUID = (*list)[TagFromName(DimensionOrganizationUID)];
				stream << "\t";
				if (DimensionOrganizationUID) {
					stream << "\t\t";
					DimensionOrganizationUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionOrganizationUID> not present\n";

			}
		}
	}
	if (DimensionOrganizationType) {
		stream << "\t\t";
		DimensionOrganizationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DimensionOrganizationType> not present\n";

	if (DimensionIndexSequence)
		stream << "\t\tSequence <DimensionIndexSequence>\n";
	else
		stream << "\t\tSequence <DimensionIndexSequence> not present\n";
	if (DimensionIndexSequence && strcmp(DimensionIndexSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DimensionIndexSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DimensionIndexPointer = (*list)[TagFromName(DimensionIndexPointer)];
				stream << "\t";
				if (DimensionIndexPointer) {
					stream << "\t\t";
					DimensionIndexPointer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionIndexPointer> not present\n";

				Attribute *DimensionIndexPrivateCreator = (*list)[TagFromName(DimensionIndexPrivateCreator)];
				stream << "\t";
				if (DimensionIndexPrivateCreator) {
					stream << "\t\t";
					DimensionIndexPrivateCreator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionIndexPrivateCreator> not present\n";

				Attribute *FunctionalGroupPointer = (*list)[TagFromName(FunctionalGroupPointer)];
				stream << "\t";
				if (FunctionalGroupPointer) {
					stream << "\t\t";
					FunctionalGroupPointer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FunctionalGroupPointer> not present\n";

				Attribute *FunctionalGroupPrivateCreator = (*list)[TagFromName(FunctionalGroupPrivateCreator)];
				stream << "\t";
				if (FunctionalGroupPrivateCreator) {
					stream << "\t\t";
					FunctionalGroupPrivateCreator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FunctionalGroupPrivateCreator> not present\n";

				Attribute *DimensionOrganizationUID = (*list)[TagFromName(DimensionOrganizationUID)];
				stream << "\t";
				if (DimensionOrganizationUID) {
					stream << "\t\t";
					DimensionOrganizationUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionOrganizationUID> not present\n";

				Attribute *DimensionDescriptionLabel = (*list)[TagFromName(DimensionDescriptionLabel)];
				stream << "\t";
				if (DimensionDescriptionLabel) {
					stream << "\t\t";
					DimensionDescriptionLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionDescriptionLabel> not present\n";

			}
		}
	}
}

void
Module_CardiacSynchronization::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CardiacSynchronization>\n";

	if (CardiacSynchronizationTechnique) {
		stream << "\t\t";
		CardiacSynchronizationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacSynchronizationTechnique> not present\n";

	if (CardiacSignalSource) {
		stream << "\t\t";
		CardiacSignalSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacSignalSource> not present\n";

	if (CardiacRRIntervalSpecified) {
		stream << "\t\t";
		CardiacRRIntervalSpecified->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacRRIntervalSpecified> not present\n";

	if (CardiacBeatRejectionTechnique) {
		stream << "\t\t";
		CardiacBeatRejectionTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacBeatRejectionTechnique> not present\n";

	if (LowRRValue) {
		stream << "\t\t";
		LowRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LowRRValue> not present\n";

	if (HighRRValue) {
		stream << "\t\t";
		HighRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighRRValue> not present\n";

	if (IntervalsAcquired) {
		stream << "\t\t";
		IntervalsAcquired->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntervalsAcquired> not present\n";

	if (IntervalsRejected) {
		stream << "\t\t";
		IntervalsRejected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntervalsRejected> not present\n";

	if (SkipBeats) {
		stream << "\t\t";
		SkipBeats->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SkipBeats> not present\n";

	if (CardiacFramingType) {
		stream << "\t\t";
		CardiacFramingType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacFramingType> not present\n";

}

void
Module_RespiratorySynchronization::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RespiratorySynchronization>\n";

	if (RespiratoryMotionCompensationTechnique) {
		stream << "\t\t";
		RespiratoryMotionCompensationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RespiratoryMotionCompensationTechnique> not present\n";

	if (RespiratorySignalSource) {
		stream << "\t\t";
		RespiratorySignalSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RespiratorySignalSource> not present\n";

	if (RespiratoryTriggerDelayThreshold) {
		stream << "\t\t";
		RespiratoryTriggerDelayThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RespiratoryTriggerDelayThreshold> not present\n";

	if (RespiratoryTriggerType) {
		stream << "\t\t";
		RespiratoryTriggerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RespiratoryTriggerType> not present\n";

}

void
Module_BulkMotionSynchronization::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <BulkMotionSynchronization>\n";

	if (BulkMotionCompensationTechnique) {
		stream << "\t\t";
		BulkMotionCompensationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BulkMotionCompensationTechnique> not present\n";

	if (BulkMotionSignalSource) {
		stream << "\t\t";
		BulkMotionSignalSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BulkMotionSignalSource> not present\n";

}

void
Module_SupplementalPaletteColorLUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SupplementalPaletteColorLUT>\n";

	if (RedPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		RedPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableDescriptor> not present\n";

	if (GreenPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		GreenPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableDescriptor> not present\n";

	if (BluePaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		BluePaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableDescriptor> not present\n";

	if (RedPaletteColorLookupTableData) {
		stream << "\t\t";
		RedPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableData> not present\n";

	if (GreenPaletteColorLookupTableData) {
		stream << "\t\t";
		GreenPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableData> not present\n";

	if (BluePaletteColorLookupTableData) {
		stream << "\t\t";
		BluePaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableData> not present\n";

}

void
Macro_PaletteColorLookupTableMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PaletteColorLookupTableMacro>\n";

	if (RedPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		RedPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableDescriptor> not present\n";

	if (GreenPaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		GreenPaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableDescriptor> not present\n";

	if (BluePaletteColorLookupTableDescriptor) {
		stream << "\t\t";
		BluePaletteColorLookupTableDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableDescriptor> not present\n";

	if (PaletteColorLookupTableUID) {
		stream << "\t\t";
		PaletteColorLookupTableUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PaletteColorLookupTableUID> not present\n";

	if (RedPaletteColorLookupTableData) {
		stream << "\t\t";
		RedPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RedPaletteColorLookupTableData> not present\n";

	if (GreenPaletteColorLookupTableData) {
		stream << "\t\t";
		GreenPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GreenPaletteColorLookupTableData> not present\n";

	if (BluePaletteColorLookupTableData) {
		stream << "\t\t";
		BluePaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BluePaletteColorLookupTableData> not present\n";

	if (SegmentedRedPaletteColorLookupTableData) {
		stream << "\t\t";
		SegmentedRedPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentedRedPaletteColorLookupTableData> not present\n";

	if (SegmentedGreenPaletteColorLookupTableData) {
		stream << "\t\t";
		SegmentedGreenPaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentedGreenPaletteColorLookupTableData> not present\n";

	if (SegmentedBluePaletteColorLookupTableData) {
		stream << "\t\t";
		SegmentedBluePaletteColorLookupTableData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentedBluePaletteColorLookupTableData> not present\n";

}

void
Module_PaletteColorLookupTable::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PaletteColorLookupTable>\n";

				stream << "\t";
	Macro_PaletteColorLookupTableMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PaletteColorLookupTableMacro>\n";

}

void
Module_PatientOrientation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PatientOrientation>\n";

				stream << "\t";
	Macro_PatientOrientationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PatientOrientationMacro>\n";

}

void
Module_ImageEquipmentCoordinateRelationship::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ImageEquipmentCoordinateRelationship>\n";

	if (ImageToEquipmentMappingMatrix) {
		stream << "\t\t";
		ImageToEquipmentMappingMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageToEquipmentMappingMatrix> not present\n";

	if (EquipmentCoordinateSystemIdentification) {
		stream << "\t\t";
		EquipmentCoordinateSystemIdentification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EquipmentCoordinateSystemIdentification> not present\n";

}

void
Module_CRSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CRSeries>\n";

	if (BodyPartExamined) {
		stream << "\t\t";
		BodyPartExamined->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartExamined> not present\n";

	if (ViewPosition) {
		stream << "\t\t";
		ViewPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ViewPosition> not present\n";

	if (FilterType) {
		stream << "\t\t";
		FilterType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterType> not present\n";

	if (CollimatorGridName) {
		stream << "\t\t";
		CollimatorGridName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorGridName> not present\n";

	if (FocalSpots) {
		stream << "\t\t";
		FocalSpots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocalSpots> not present\n";

	if (PlateType) {
		stream << "\t\t";
		PlateType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlateType> not present\n";

	if (PhosphorType) {
		stream << "\t\t";
		PhosphorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhosphorType> not present\n";

}

void
Module_CRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CRImage>\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (PlateID) {
		stream << "\t\t";
		PlateID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlateID> not present\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (XRayTubeCurrent) {
		stream << "\t\t";
		XRayTubeCurrent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrent> not present\n";

	if (Exposure) {
		stream << "\t\t";
		Exposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Exposure> not present\n";

	if (ExposureInuAs) {
		stream << "\t\t";
		ExposureInuAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInuAs> not present\n";

	if (ImagerPixelSpacing) {
		stream << "\t\t";
		ImagerPixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagerPixelSpacing> not present\n";

				stream << "\t";
	Macro_BasicPixelSpacingCalibrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicPixelSpacingCalibrationMacro>\n";

	if (GeneratorPower) {
		stream << "\t\t";
		GeneratorPower->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GeneratorPower> not present\n";

	if (AcquisitionDeviceProcessingDescription) {
		stream << "\t\t";
		AcquisitionDeviceProcessingDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

	if (AcquisitionDeviceProcessingCode) {
		stream << "\t\t";
		AcquisitionDeviceProcessingCode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDeviceProcessingCode> not present\n";

	if (CassetteOrientation) {
		stream << "\t\t";
		CassetteOrientation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CassetteOrientation> not present\n";

	if (CassetteSize) {
		stream << "\t\t";
		CassetteSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CassetteSize> not present\n";

	if (ExposuresOnPlate) {
		stream << "\t\t";
		ExposuresOnPlate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposuresOnPlate> not present\n";

	if (RelativeXRayExposure) {
		stream << "\t\t";
		RelativeXRayExposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RelativeXRayExposure> not present\n";

	if (Sensitivity) {
		stream << "\t\t";
		Sensitivity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Sensitivity> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

				stream << "\t";
	Macro_ExposureIndexMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ExposureIndexMacro>\n";

}

void
Module_CTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CTImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (MultienergyCTAcquisition) {
		stream << "\t\t";
		MultienergyCTAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MultienergyCTAcquisition> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (RescaleType) {
		stream << "\t\t";
		RescaleType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleType> not present\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (ScanOptions) {
		stream << "\t\t";
		ScanOptions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanOptions> not present\n";

	if (DataCollectionDiameter) {
		stream << "\t\t";
		DataCollectionDiameter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataCollectionDiameter> not present\n";

	if (DataCollectionCenterPatient) {
		stream << "\t\t";
		DataCollectionCenterPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataCollectionCenterPatient> not present\n";

	if (ReconstructionDiameter) {
		stream << "\t\t";
		ReconstructionDiameter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReconstructionDiameter> not present\n";

	if (ReconstructionTargetCenterPatient) {
		stream << "\t\t";
		ReconstructionTargetCenterPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReconstructionTargetCenterPatient> not present\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (GantryDetectorTilt) {
		stream << "\t\t";
		GantryDetectorTilt->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryDetectorTilt> not present\n";

	if (TableHeight) {
		stream << "\t\t";
		TableHeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableHeight> not present\n";

	if (RotationDirection) {
		stream << "\t\t";
		RotationDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RotationDirection> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (XRayTubeCurrent) {
		stream << "\t\t";
		XRayTubeCurrent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrent> not present\n";

	if (Exposure) {
		stream << "\t\t";
		Exposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Exposure> not present\n";

	if (ExposureInuAs) {
		stream << "\t\t";
		ExposureInuAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInuAs> not present\n";

	if (FilterType) {
		stream << "\t\t";
		FilterType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterType> not present\n";

	if (GeneratorPower) {
		stream << "\t\t";
		GeneratorPower->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GeneratorPower> not present\n";

	if (FocalSpots) {
		stream << "\t\t";
		FocalSpots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocalSpots> not present\n";

	if (ConvolutionKernel) {
		stream << "\t\t";
		ConvolutionKernel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConvolutionKernel> not present\n";

	if (RevolutionTime) {
		stream << "\t\t";
		RevolutionTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RevolutionTime> not present\n";

	if (SingleCollimationWidth) {
		stream << "\t\t";
		SingleCollimationWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SingleCollimationWidth> not present\n";

	if (TotalCollimationWidth) {
		stream << "\t\t";
		TotalCollimationWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TotalCollimationWidth> not present\n";

	if (TableSpeed) {
		stream << "\t\t";
		TableSpeed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableSpeed> not present\n";

	if (TableFeedPerRotation) {
		stream << "\t\t";
		TableFeedPerRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableFeedPerRotation> not present\n";

	if (SpiralPitchFactor) {
		stream << "\t\t";
		SpiralPitchFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpiralPitchFactor> not present\n";

	if (ExposureModulationType) {
		stream << "\t\t";
		ExposureModulationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureModulationType> not present\n";

	if (EstimatedDoseSaving) {
		stream << "\t\t";
		EstimatedDoseSaving->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EstimatedDoseSaving> not present\n";

	if (CTDIvol) {
		stream << "\t\t";
		CTDIvol->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CTDIvol> not present\n";

	if (CTDIPhantomTypeCodeSequence)
		stream << "\t\tSequence <CTDIPhantomTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <CTDIPhantomTypeCodeSequence> not present\n";
	if (CTDIPhantomTypeCodeSequence && strcmp(CTDIPhantomTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTDIPhantomTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (WaterEquivalentDiameter) {
		stream << "\t\t";
		WaterEquivalentDiameter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WaterEquivalentDiameter> not present\n";

	if (WaterEquivalentDiameterCalculationMethodCodeSequence)
		stream << "\t\tSequence <WaterEquivalentDiameterCalculationMethodCodeSequence>\n";
	else
		stream << "\t\tSequence <WaterEquivalentDiameterCalculationMethodCodeSequence> not present\n";
	if (WaterEquivalentDiameterCalculationMethodCodeSequence && strcmp(WaterEquivalentDiameterCalculationMethodCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=WaterEquivalentDiameterCalculationMethodCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ImageAndFluoroscopyAreaDoseProduct) {
		stream << "\t\t";
		ImageAndFluoroscopyAreaDoseProduct->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageAndFluoroscopyAreaDoseProduct> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

	if (CalciumScoringMassFactorPatient) {
		stream << "\t\t";
		CalciumScoringMassFactorPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CalciumScoringMassFactorPatient> not present\n";

	if (CalciumScoringMassFactorDevice) {
		stream << "\t\t";
		CalciumScoringMassFactorDevice->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CalciumScoringMassFactorDevice> not present\n";

	if (EnergyWeightingFactor) {
		stream << "\t\t";
		EnergyWeightingFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EnergyWeightingFactor> not present\n";

	if (CTAdditionalXRaySourceSequence)
		stream << "\t\tSequence <CTAdditionalXRaySourceSequence>\n";
	else
		stream << "\t\tSequence <CTAdditionalXRaySourceSequence> not present\n";
	if (CTAdditionalXRaySourceSequence && strcmp(CTAdditionalXRaySourceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTAdditionalXRaySourceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *KVP = (*list)[TagFromName(KVP)];
				stream << "\t";
				if (KVP) {
					stream << "\t\t";
					KVP->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KVP> not present\n";

				Attribute *XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
				stream << "\t";
				if (XRayTubeCurrentInmA) {
					stream << "\t\t";
					XRayTubeCurrentInmA->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

				Attribute *DataCollectionDiameter = (*list)[TagFromName(DataCollectionDiameter)];
				stream << "\t";
				if (DataCollectionDiameter) {
					stream << "\t\t";
					DataCollectionDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataCollectionDiameter> not present\n";

				Attribute *FocalSpots = (*list)[TagFromName(FocalSpots)];
				stream << "\t";
				if (FocalSpots) {
					stream << "\t\t";
					FocalSpots->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FocalSpots> not present\n";

				Attribute *FilterType = (*list)[TagFromName(FilterType)];
				stream << "\t";
				if (FilterType) {
					stream << "\t\t";
					FilterType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterType> not present\n";

				Attribute *FilterMaterial = (*list)[TagFromName(FilterMaterial)];
				stream << "\t";
				if (FilterMaterial) {
					stream << "\t\t";
					FilterMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterMaterial> not present\n";

				Attribute *ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
				stream << "\t";
				if (ExposureInmAs) {
					stream << "\t\t";
					ExposureInmAs->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureInmAs> not present\n";

				Attribute *EnergyWeightingFactor = (*list)[TagFromName(EnergyWeightingFactor)];
				stream << "\t";
				if (EnergyWeightingFactor) {
					stream << "\t\t";
					EnergyWeightingFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWeightingFactor> not present\n";

			}
		}
	}
	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

				stream << "\t";
	Macro_RTEquipmentCorrelationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <RTEquipmentCorrelationMacro>\n";

}

void
Module_MRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MRImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (ScanningSequence) {
		stream << "\t\t";
		ScanningSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanningSequence> not present\n";

	if (SequenceVariant) {
		stream << "\t\t";
		SequenceVariant->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SequenceVariant> not present\n";

	if (ScanOptions) {
		stream << "\t\t";
		ScanOptions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanOptions> not present\n";

	if (MRAcquisitionType) {
		stream << "\t\t";
		MRAcquisitionType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MRAcquisitionType> not present\n";

	if (RepetitionTime) {
		stream << "\t\t";
		RepetitionTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RepetitionTime> not present\n";

	if (EchoTime) {
		stream << "\t\t";
		EchoTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoTime> not present\n";

	if (EchoTrainLength) {
		stream << "\t\t";
		EchoTrainLength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoTrainLength> not present\n";

	if (InversionTime) {
		stream << "\t\t";
		InversionTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InversionTime> not present\n";

	if (TriggerTime) {
		stream << "\t\t";
		TriggerTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerTime> not present\n";

	if (SequenceName) {
		stream << "\t\t";
		SequenceName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SequenceName> not present\n";

	if (AngioFlag) {
		stream << "\t\t";
		AngioFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AngioFlag> not present\n";

	if (NumberOfAverages) {
		stream << "\t\t";
		NumberOfAverages->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfAverages> not present\n";

	if (ImagingFrequency) {
		stream << "\t\t";
		ImagingFrequency->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagingFrequency> not present\n";

	if (ImagedNucleus) {
		stream << "\t\t";
		ImagedNucleus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagedNucleus> not present\n";

	if (EchoNumbers) {
		stream << "\t\t";
		EchoNumbers->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoNumbers> not present\n";

	if (MagneticFieldStrength) {
		stream << "\t\t";
		MagneticFieldStrength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MagneticFieldStrength> not present\n";

	if (SpacingBetweenSlices) {
		stream << "\t\t";
		SpacingBetweenSlices->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpacingBetweenSlices> not present\n";

	if (NumberOfPhaseEncodingSteps) {
		stream << "\t\t";
		NumberOfPhaseEncodingSteps->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfPhaseEncodingSteps> not present\n";

	if (PercentSampling) {
		stream << "\t\t";
		PercentSampling->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PercentSampling> not present\n";

	if (PercentPhaseFieldOfView) {
		stream << "\t\t";
		PercentPhaseFieldOfView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PercentPhaseFieldOfView> not present\n";

	if (PixelBandwidth) {
		stream << "\t\t";
		PixelBandwidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelBandwidth> not present\n";

	if (NominalInterval) {
		stream << "\t\t";
		NominalInterval->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NominalInterval> not present\n";

	if (BeatRejectionFlag) {
		stream << "\t\t";
		BeatRejectionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BeatRejectionFlag> not present\n";

	if (LowRRValue) {
		stream << "\t\t";
		LowRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LowRRValue> not present\n";

	if (HighRRValue) {
		stream << "\t\t";
		HighRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighRRValue> not present\n";

	if (IntervalsAcquired) {
		stream << "\t\t";
		IntervalsAcquired->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntervalsAcquired> not present\n";

	if (IntervalsRejected) {
		stream << "\t\t";
		IntervalsRejected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntervalsRejected> not present\n";

	if (PVCRejection) {
		stream << "\t\t";
		PVCRejection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PVCRejection> not present\n";

	if (SkipBeats) {
		stream << "\t\t";
		SkipBeats->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SkipBeats> not present\n";

	if (HeartRate) {
		stream << "\t\t";
		HeartRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HeartRate> not present\n";

	if (CardiacNumberOfImages) {
		stream << "\t\t";
		CardiacNumberOfImages->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacNumberOfImages> not present\n";

	if (TriggerWindow) {
		stream << "\t\t";
		TriggerWindow->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerWindow> not present\n";

	if (ReconstructionDiameter) {
		stream << "\t\t";
		ReconstructionDiameter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReconstructionDiameter> not present\n";

	if (ReceiveCoilName) {
		stream << "\t\t";
		ReceiveCoilName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReceiveCoilName> not present\n";

	if (TransmitCoilName) {
		stream << "\t\t";
		TransmitCoilName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransmitCoilName> not present\n";

	if (AcquisitionMatrix) {
		stream << "\t\t";
		AcquisitionMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionMatrix> not present\n";

	if (InPlanePhaseEncodingDirection) {
		stream << "\t\t";
		InPlanePhaseEncodingDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InPlanePhaseEncodingDirection> not present\n";

	if (FlipAngle) {
		stream << "\t\t";
		FlipAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FlipAngle> not present\n";

	if (SAR) {
		stream << "\t\t";
		SAR->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SAR> not present\n";

	if (VariableFlipAngleFlag) {
		stream << "\t\t";
		VariableFlipAngleFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VariableFlipAngleFlag> not present\n";

	if (dBdt) {
		stream << "\t\t";
		dBdt->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <dBdt> not present\n";

	if (TemporalPositionIdentifier) {
		stream << "\t\t";
		TemporalPositionIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TemporalPositionIdentifier> not present\n";

	if (NumberOfTemporalPositions) {
		stream << "\t\t";
		NumberOfTemporalPositions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfTemporalPositions> not present\n";

	if (TemporalResolution) {
		stream << "\t\t";
		TemporalResolution->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TemporalResolution> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

	if (B1rms) {
		stream << "\t\t";
		B1rms->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <B1rms> not present\n";

}

void
Module_NMPETPatientOrientation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMPETPatientOrientation>\n";

	if (PatientOrientationCodeSequence)
		stream << "\t\tSequence <PatientOrientationCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientOrientationCodeSequence> not present\n";
	if (PatientOrientationCodeSequence && strcmp(PatientOrientationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientOrientationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

	Attribute *PatientOrientationModifierCodeSequence = (*list)[TagFromName(PatientOrientationModifierCodeSequence)];
				stream << "\t";
				if (PatientOrientationModifierCodeSequence)
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence> not present\n";
				if (PatientOrientationModifierCodeSequence && strcmp(PatientOrientationModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PatientOrientationModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PatientGantryRelationshipCodeSequence)
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence> not present\n";
	if (PatientGantryRelationshipCodeSequence && strcmp(PatientGantryRelationshipCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientGantryRelationshipCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

			}
		}
	}
}

void
Module_NMImagePixel::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMImagePixel>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelSpacing) {
		stream << "\t\t";
		PixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacing> not present\n";

}

void
Module_NMMultiFrame::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMMultiFrame>\n";

	if (FrameIncrementPointer) {
		stream << "\t\t";
		FrameIncrementPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameIncrementPointer> not present\n";

	if (EnergyWindowVector) {
		stream << "\t\t";
		EnergyWindowVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EnergyWindowVector> not present\n";

	if (NumberOfEnergyWindows) {
		stream << "\t\t";
		NumberOfEnergyWindows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfEnergyWindows> not present\n";

	if (DetectorVector) {
		stream << "\t\t";
		DetectorVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorVector> not present\n";

	if (NumberOfDetectors) {
		stream << "\t\t";
		NumberOfDetectors->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfDetectors> not present\n";

	if (PhaseVector) {
		stream << "\t\t";
		PhaseVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhaseVector> not present\n";

	if (NumberOfPhases) {
		stream << "\t\t";
		NumberOfPhases->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfPhases> not present\n";

	if (RotationVector) {
		stream << "\t\t";
		RotationVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RotationVector> not present\n";

	if (NumberOfRotations) {
		stream << "\t\t";
		NumberOfRotations->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfRotations> not present\n";

	if (RRIntervalVector) {
		stream << "\t\t";
		RRIntervalVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RRIntervalVector> not present\n";

	if (NumberOfRRIntervals) {
		stream << "\t\t";
		NumberOfRRIntervals->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfRRIntervals> not present\n";

	if (TimeSlotVector) {
		stream << "\t\t";
		TimeSlotVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeSlotVector> not present\n";

	if (NumberOfTimeSlots) {
		stream << "\t\t";
		NumberOfTimeSlots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfTimeSlots> not present\n";

	if (SliceVector) {
		stream << "\t\t";
		SliceVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceVector> not present\n";

	if (NumberOfSlices) {
		stream << "\t\t";
		NumberOfSlices->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfSlices> not present\n";

	if (AngularViewVector) {
		stream << "\t\t";
		AngularViewVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AngularViewVector> not present\n";

	if (TimeSliceVector) {
		stream << "\t\t";
		TimeSliceVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeSliceVector> not present\n";

}

void
Module_NMImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (ImageID) {
		stream << "\t\t";
		ImageID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageID> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (CountsAccumulated) {
		stream << "\t\t";
		CountsAccumulated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CountsAccumulated> not present\n";

	if (AcquisitionTerminationCondition) {
		stream << "\t\t";
		AcquisitionTerminationCondition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTerminationCondition> not present\n";

	if (TableHeight) {
		stream << "\t\t";
		TableHeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableHeight> not present\n";

	if (TableTraverse) {
		stream << "\t\t";
		TableTraverse->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTraverse> not present\n";

	if (ActualFrameDuration) {
		stream << "\t\t";
		ActualFrameDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ActualFrameDuration> not present\n";

	if (CountRate) {
		stream << "\t\t";
		CountRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CountRate> not present\n";

	if (ProcessingFunction) {
		stream << "\t\t";
		ProcessingFunction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProcessingFunction> not present\n";

	if (CorrectedImage) {
		stream << "\t\t";
		CorrectedImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CorrectedImage> not present\n";

	if (WholeBodyTechnique) {
		stream << "\t\t";
		WholeBodyTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WholeBodyTechnique> not present\n";

	if (ScanVelocity) {
		stream << "\t\t";
		ScanVelocity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanVelocity> not present\n";

	if (ScanLength) {
		stream << "\t\t";
		ScanLength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanLength> not present\n";

	if (TriggerSourceOrType) {
		stream << "\t\t";
		TriggerSourceOrType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerSourceOrType> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

	if (RealWorldValueMappingSequence)
		stream << "\t\tSequence <RealWorldValueMappingSequence>\n";
	else
		stream << "\t\tSequence <RealWorldValueMappingSequence> not present\n";
	if (RealWorldValueMappingSequence && strcmp(RealWorldValueMappingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RealWorldValueMappingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RealWorldValueMappingItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingItemMacro>\n";

			}
		}
	}
}

void
Module_NMIsotope::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMIsotope>\n";

	if (EnergyWindowInformationSequence)
		stream << "\t\tSequence <EnergyWindowInformationSequence>\n";
	else
		stream << "\t\tSequence <EnergyWindowInformationSequence> not present\n";
	if (EnergyWindowInformationSequence && strcmp(EnergyWindowInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EnergyWindowInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *EnergyWindowName = (*list)[TagFromName(EnergyWindowName)];
				stream << "\t";
				if (EnergyWindowName) {
					stream << "\t\t";
					EnergyWindowName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWindowName> not present\n";

	Attribute *EnergyWindowRangeSequence = (*list)[TagFromName(EnergyWindowRangeSequence)];
				stream << "\t";
				if (EnergyWindowRangeSequence)
					stream << "\t\tSequence <EnergyWindowRangeSequence>\n";
				else
					stream << "\t\tSequence <EnergyWindowRangeSequence> not present\n";
				if (EnergyWindowRangeSequence && strcmp(EnergyWindowRangeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=EnergyWindowRangeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *EnergyWindowLowerLimit = (*list)[TagFromName(EnergyWindowLowerLimit)];
							stream << "\t\t";
							if (EnergyWindowLowerLimit) {
								stream << "\t\t";
								EnergyWindowLowerLimit->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EnergyWindowLowerLimit> not present\n";

							Attribute *EnergyWindowUpperLimit = (*list)[TagFromName(EnergyWindowUpperLimit)];
							stream << "\t\t";
							if (EnergyWindowUpperLimit) {
								stream << "\t\t";
								EnergyWindowUpperLimit->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EnergyWindowUpperLimit> not present\n";

						}
					}
				}
			}
		}
	}
	if (RadiopharmaceuticalInformationSequence)
		stream << "\t\tSequence <RadiopharmaceuticalInformationSequence>\n";
	else
		stream << "\t\tSequence <RadiopharmaceuticalInformationSequence> not present\n";
	if (RadiopharmaceuticalInformationSequence && strcmp(RadiopharmaceuticalInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RadiopharmaceuticalInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *RadionuclideCodeSequence = (*list)[TagFromName(RadionuclideCodeSequence)];
				stream << "\t";
				if (RadionuclideCodeSequence)
					stream << "\t\tSequence <RadionuclideCodeSequence>\n";
				else
					stream << "\t\tSequence <RadionuclideCodeSequence> not present\n";
				if (RadionuclideCodeSequence && strcmp(RadionuclideCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RadionuclideCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

						}
					}
				}
				Attribute *RadiopharmaceuticalRoute = (*list)[TagFromName(RadiopharmaceuticalRoute)];
				stream << "\t";
				if (RadiopharmaceuticalRoute) {
					stream << "\t\t";
					RadiopharmaceuticalRoute->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalRoute> not present\n";

	Attribute *AdministrationRouteCodeSequence = (*list)[TagFromName(AdministrationRouteCodeSequence)];
				stream << "\t";
				if (AdministrationRouteCodeSequence)
					stream << "\t\tSequence <AdministrationRouteCodeSequence>\n";
				else
					stream << "\t\tSequence <AdministrationRouteCodeSequence> not present\n";
				if (AdministrationRouteCodeSequence && strcmp(AdministrationRouteCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AdministrationRouteCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

						}
					}
				}
				Attribute *RadiopharmaceuticalVolume = (*list)[TagFromName(RadiopharmaceuticalVolume)];
				stream << "\t";
				if (RadiopharmaceuticalVolume) {
					stream << "\t\t";
					RadiopharmaceuticalVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalVolume> not present\n";

				Attribute *RadiopharmaceuticalStartTime = (*list)[TagFromName(RadiopharmaceuticalStartTime)];
				stream << "\t";
				if (RadiopharmaceuticalStartTime) {
					stream << "\t\t";
					RadiopharmaceuticalStartTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStartTime> not present\n";

				Attribute *RadiopharmaceuticalStopTime = (*list)[TagFromName(RadiopharmaceuticalStopTime)];
				stream << "\t";
				if (RadiopharmaceuticalStopTime) {
					stream << "\t\t";
					RadiopharmaceuticalStopTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStopTime> not present\n";

				Attribute *RadionuclideTotalDose = (*list)[TagFromName(RadionuclideTotalDose)];
				stream << "\t";
				if (RadionuclideTotalDose) {
					stream << "\t\t";
					RadionuclideTotalDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclideTotalDose> not present\n";

	Attribute *CalibrationDataSequence = (*list)[TagFromName(CalibrationDataSequence)];
				stream << "\t";
				if (CalibrationDataSequence)
					stream << "\t\tSequence <CalibrationDataSequence>\n";
				else
					stream << "\t\tSequence <CalibrationDataSequence> not present\n";
				if (CalibrationDataSequence && strcmp(CalibrationDataSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=CalibrationDataSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *EnergyWindowNumber = (*list)[TagFromName(EnergyWindowNumber)];
							stream << "\t\t";
							if (EnergyWindowNumber) {
								stream << "\t\t";
								EnergyWindowNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EnergyWindowNumber> not present\n";

							Attribute *SyringeCounts = (*list)[TagFromName(SyringeCounts)];
							stream << "\t\t";
							if (SyringeCounts) {
								stream << "\t\t";
								SyringeCounts->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SyringeCounts> not present\n";

							Attribute *ResidualSyringeCounts = (*list)[TagFromName(ResidualSyringeCounts)];
							stream << "\t\t";
							if (ResidualSyringeCounts) {
								stream << "\t\t";
								ResidualSyringeCounts->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ResidualSyringeCounts> not present\n";

						}
					}
				}
				Attribute *Radiopharmaceutical = (*list)[TagFromName(Radiopharmaceutical)];
				stream << "\t";
				if (Radiopharmaceutical) {
					stream << "\t\t";
					Radiopharmaceutical->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Radiopharmaceutical> not present\n";

	Attribute *RadiopharmaceuticalCodeSequence = (*list)[TagFromName(RadiopharmaceuticalCodeSequence)];
				stream << "\t";
				if (RadiopharmaceuticalCodeSequence)
					stream << "\t\tSequence <RadiopharmaceuticalCodeSequence>\n";
				else
					stream << "\t\tSequence <RadiopharmaceuticalCodeSequence> not present\n";
				if (RadiopharmaceuticalCodeSequence && strcmp(RadiopharmaceuticalCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RadiopharmaceuticalCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

						}
					}
				}
			}
		}
	}
	if (InterventionDrugInformationSequence)
		stream << "\t\tSequence <InterventionDrugInformationSequence>\n";
	else
		stream << "\t\tSequence <InterventionDrugInformationSequence> not present\n";
	if (InterventionDrugInformationSequence && strcmp(InterventionDrugInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InterventionDrugInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *InterventionDrugName = (*list)[TagFromName(InterventionDrugName)];
				stream << "\t";
				if (InterventionDrugName) {
					stream << "\t\t";
					InterventionDrugName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugName> not present\n";

	Attribute *InterventionDrugCodeSequence = (*list)[TagFromName(InterventionDrugCodeSequence)];
				stream << "\t";
				if (InterventionDrugCodeSequence)
					stream << "\t\tSequence <InterventionDrugCodeSequence>\n";
				else
					stream << "\t\tSequence <InterventionDrugCodeSequence> not present\n";
				if (InterventionDrugCodeSequence && strcmp(InterventionDrugCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InterventionDrugCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

						}
					}
				}
	Attribute *AdministrationRouteCodeSequence = (*list)[TagFromName(AdministrationRouteCodeSequence)];
				stream << "\t";
				if (AdministrationRouteCodeSequence)
					stream << "\t\tSequence <AdministrationRouteCodeSequence>\n";
				else
					stream << "\t\tSequence <AdministrationRouteCodeSequence> not present\n";
				if (AdministrationRouteCodeSequence && strcmp(AdministrationRouteCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AdministrationRouteCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

						}
					}
				}
				Attribute *InterventionDrugStartTime = (*list)[TagFromName(InterventionDrugStartTime)];
				stream << "\t";
				if (InterventionDrugStartTime) {
					stream << "\t\t";
					InterventionDrugStartTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugStartTime> not present\n";

				Attribute *InterventionDrugStopTime = (*list)[TagFromName(InterventionDrugStopTime)];
				stream << "\t";
				if (InterventionDrugStopTime) {
					stream << "\t\t";
					InterventionDrugStopTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugStopTime> not present\n";

				Attribute *InterventionDrugDose = (*list)[TagFromName(InterventionDrugDose)];
				stream << "\t";
				if (InterventionDrugDose) {
					stream << "\t\t";
					InterventionDrugDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugDose> not present\n";

			}
		}
	}
}

void
Module_NMDetector::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMDetector>\n";

	if (DetectorInformationSequence)
		stream << "\t\tSequence <DetectorInformationSequence>\n";
	else
		stream << "\t\tSequence <DetectorInformationSequence> not present\n";
	if (DetectorInformationSequence && strcmp(DetectorInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DetectorInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CollimatorGridName = (*list)[TagFromName(CollimatorGridName)];
				stream << "\t";
				if (CollimatorGridName) {
					stream << "\t\t";
					CollimatorGridName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorGridName> not present\n";

				Attribute *CollimatorType = (*list)[TagFromName(CollimatorType)];
				stream << "\t";
				if (CollimatorType) {
					stream << "\t\t";
					CollimatorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorType> not present\n";

				Attribute *FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
				stream << "\t";
				if (FieldOfViewShape) {
					stream << "\t\t";
					FieldOfViewShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewShape> not present\n";

				Attribute *FieldOfViewDimensions = (*list)[TagFromName(FieldOfViewDimensions)];
				stream << "\t";
				if (FieldOfViewDimensions) {
					stream << "\t\t";
					FieldOfViewDimensions->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewDimensions> not present\n";

				Attribute *FocalDistance = (*list)[TagFromName(FocalDistance)];
				stream << "\t";
				if (FocalDistance) {
					stream << "\t\t";
					FocalDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FocalDistance> not present\n";

				Attribute *XFocusCenter = (*list)[TagFromName(XFocusCenter)];
				stream << "\t";
				if (XFocusCenter) {
					stream << "\t\t";
					XFocusCenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XFocusCenter> not present\n";

				Attribute *YFocusCenter = (*list)[TagFromName(YFocusCenter)];
				stream << "\t";
				if (YFocusCenter) {
					stream << "\t\t";
					YFocusCenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <YFocusCenter> not present\n";

				Attribute *ZoomCenter = (*list)[TagFromName(ZoomCenter)];
				stream << "\t";
				if (ZoomCenter) {
					stream << "\t\t";
					ZoomCenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZoomCenter> not present\n";

				Attribute *ZoomFactor = (*list)[TagFromName(ZoomFactor)];
				stream << "\t";
				if (ZoomFactor) {
					stream << "\t\t";
					ZoomFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZoomFactor> not present\n";

				Attribute *CenterOfRotationOffset = (*list)[TagFromName(CenterOfRotationOffset)];
				stream << "\t";
				if (CenterOfRotationOffset) {
					stream << "\t\t";
					CenterOfRotationOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CenterOfRotationOffset> not present\n";

				Attribute *GantryDetectorTilt = (*list)[TagFromName(GantryDetectorTilt)];
				stream << "\t";
				if (GantryDetectorTilt) {
					stream << "\t\t";
					GantryDetectorTilt->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryDetectorTilt> not present\n";

				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

				Attribute *StartAngle = (*list)[TagFromName(StartAngle)];
				stream << "\t";
				if (StartAngle) {
					stream << "\t\t";
					StartAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StartAngle> not present\n";

				Attribute *RadialPosition = (*list)[TagFromName(RadialPosition)];
				stream << "\t";
				if (RadialPosition) {
					stream << "\t\t";
					RadialPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadialPosition> not present\n";

				Attribute *ImageOrientationPatient = (*list)[TagFromName(ImageOrientationPatient)];
				stream << "\t";
				if (ImageOrientationPatient) {
					stream << "\t\t";
					ImageOrientationPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageOrientationPatient> not present\n";

				Attribute *ImagePositionPatient = (*list)[TagFromName(ImagePositionPatient)];
				stream << "\t";
				if (ImagePositionPatient) {
					stream << "\t\t";
					ImagePositionPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagePositionPatient> not present\n";

	Attribute *ViewCodeSequence = (*list)[TagFromName(ViewCodeSequence)];
				stream << "\t";
				if (ViewCodeSequence)
					stream << "\t\tSequence <ViewCodeSequence>\n";
				else
					stream << "\t\tSequence <ViewCodeSequence> not present\n";
				if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ViewCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

	Attribute *ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
							stream << "\t\t";
							if (ViewModifierCodeSequence)
								stream << "\t\tSequence <ViewModifierCodeSequence>\n";
							else
								stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
							if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMeaningOptionalMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMeaningOptionalMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_NMTomoAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMTomoAcquisition>\n";

	if (RotationInformationSequence)
		stream << "\t\tSequence <RotationInformationSequence>\n";
	else
		stream << "\t\tSequence <RotationInformationSequence> not present\n";
	if (RotationInformationSequence && strcmp(RotationInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RotationInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StartAngle = (*list)[TagFromName(StartAngle)];
				stream << "\t";
				if (StartAngle) {
					stream << "\t\t";
					StartAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StartAngle> not present\n";

				Attribute *AngularStep = (*list)[TagFromName(AngularStep)];
				stream << "\t";
				if (AngularStep) {
					stream << "\t\t";
					AngularStep->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AngularStep> not present\n";

				Attribute *RotationDirection = (*list)[TagFromName(RotationDirection)];
				stream << "\t";
				if (RotationDirection) {
					stream << "\t\t";
					RotationDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RotationDirection> not present\n";

				Attribute *ScanArc = (*list)[TagFromName(ScanArc)];
				stream << "\t";
				if (ScanArc) {
					stream << "\t\t";
					ScanArc->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ScanArc> not present\n";

				Attribute *ActualFrameDuration = (*list)[TagFromName(ActualFrameDuration)];
				stream << "\t";
				if (ActualFrameDuration) {
					stream << "\t\t";
					ActualFrameDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ActualFrameDuration> not present\n";

				Attribute *RadialPosition = (*list)[TagFromName(RadialPosition)];
				stream << "\t";
				if (RadialPosition) {
					stream << "\t\t";
					RadialPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadialPosition> not present\n";

				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

				Attribute *NumberOfFramesInRotation = (*list)[TagFromName(NumberOfFramesInRotation)];
				stream << "\t";
				if (NumberOfFramesInRotation) {
					stream << "\t\t";
					NumberOfFramesInRotation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfFramesInRotation> not present\n";

				Attribute *TableTraverse = (*list)[TagFromName(TableTraverse)];
				stream << "\t";
				if (TableTraverse) {
					stream << "\t\t";
					TableTraverse->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTraverse> not present\n";

				Attribute *TableHeight = (*list)[TagFromName(TableHeight)];
				stream << "\t";
				if (TableHeight) {
					stream << "\t\t";
					TableHeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHeight> not present\n";

			}
		}
	}
	if (TypeOfDetectorMotion) {
		stream << "\t\t";
		TypeOfDetectorMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfDetectorMotion> not present\n";

}

void
Module_NMMultiGatedAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMMultiGatedAcquisition>\n";

	if (BeatRejectionFlag) {
		stream << "\t\t";
		BeatRejectionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BeatRejectionFlag> not present\n";

	if (PVCRejection) {
		stream << "\t\t";
		PVCRejection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PVCRejection> not present\n";

	if (SkipBeats) {
		stream << "\t\t";
		SkipBeats->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SkipBeats> not present\n";

	if (HeartRate) {
		stream << "\t\t";
		HeartRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HeartRate> not present\n";

	if (GatedInformationSequence)
		stream << "\t\tSequence <GatedInformationSequence>\n";
	else
		stream << "\t\tSequence <GatedInformationSequence> not present\n";
	if (GatedInformationSequence && strcmp(GatedInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=GatedInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TriggerTime = (*list)[TagFromName(TriggerTime)];
				stream << "\t";
				if (TriggerTime) {
					stream << "\t\t";
					TriggerTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TriggerTime> not present\n";

				Attribute *CardiacFramingType = (*list)[TagFromName(CardiacFramingType)];
				stream << "\t";
				if (CardiacFramingType) {
					stream << "\t\t";
					CardiacFramingType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CardiacFramingType> not present\n";

	Attribute *DataInformationSequence = (*list)[TagFromName(DataInformationSequence)];
				stream << "\t";
				if (DataInformationSequence)
					stream << "\t\tSequence <DataInformationSequence>\n";
				else
					stream << "\t\tSequence <DataInformationSequence> not present\n";
				if (DataInformationSequence && strcmp(DataInformationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DataInformationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FrameTime = (*list)[TagFromName(FrameTime)];
							stream << "\t\t";
							if (FrameTime) {
								stream << "\t\t";
								FrameTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameTime> not present\n";

							Attribute *NominalInterval = (*list)[TagFromName(NominalInterval)];
							stream << "\t\t";
							if (NominalInterval) {
								stream << "\t\t";
								NominalInterval->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NominalInterval> not present\n";

							Attribute *LowRRValue = (*list)[TagFromName(LowRRValue)];
							stream << "\t\t";
							if (LowRRValue) {
								stream << "\t\t";
								LowRRValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LowRRValue> not present\n";

							Attribute *HighRRValue = (*list)[TagFromName(HighRRValue)];
							stream << "\t\t";
							if (HighRRValue) {
								stream << "\t\t";
								HighRRValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <HighRRValue> not present\n";

							Attribute *IntervalsAcquired = (*list)[TagFromName(IntervalsAcquired)];
							stream << "\t\t";
							if (IntervalsAcquired) {
								stream << "\t\t";
								IntervalsAcquired->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IntervalsAcquired> not present\n";

							Attribute *IntervalsRejected = (*list)[TagFromName(IntervalsRejected)];
							stream << "\t\t";
							if (IntervalsRejected) {
								stream << "\t\t";
								IntervalsRejected->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IntervalsRejected> not present\n";

	Attribute *TimeSlotInformationSequence = (*list)[TagFromName(TimeSlotInformationSequence)];
							stream << "\t\t";
							if (TimeSlotInformationSequence)
								stream << "\t\tSequence <TimeSlotInformationSequence>\n";
							else
								stream << "\t\tSequence <TimeSlotInformationSequence> not present\n";
							if (TimeSlotInformationSequence && strcmp(TimeSlotInformationSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=TimeSlotInformationSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *TimeSlotTime = (*list)[TagFromName(TimeSlotTime)];
										stream << "\t\t\t";
										if (TimeSlotTime) {
											stream << "\t\t";
											TimeSlotTime->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <TimeSlotTime> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_NMPhase::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMPhase>\n";

	if (PhaseInformationSequence)
		stream << "\t\tSequence <PhaseInformationSequence>\n";
	else
		stream << "\t\tSequence <PhaseInformationSequence> not present\n";
	if (PhaseInformationSequence && strcmp(PhaseInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PhaseInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PhaseDelay = (*list)[TagFromName(PhaseDelay)];
				stream << "\t";
				if (PhaseDelay) {
					stream << "\t\t";
					PhaseDelay->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhaseDelay> not present\n";

				Attribute *ActualFrameDuration = (*list)[TagFromName(ActualFrameDuration)];
				stream << "\t";
				if (ActualFrameDuration) {
					stream << "\t\t";
					ActualFrameDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ActualFrameDuration> not present\n";

				Attribute *PauseBetweenFrames = (*list)[TagFromName(PauseBetweenFrames)];
				stream << "\t";
				if (PauseBetweenFrames) {
					stream << "\t\t";
					PauseBetweenFrames->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PauseBetweenFrames> not present\n";

				Attribute *NumberOfFramesInPhase = (*list)[TagFromName(NumberOfFramesInPhase)];
				stream << "\t";
				if (NumberOfFramesInPhase) {
					stream << "\t\t";
					NumberOfFramesInPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfFramesInPhase> not present\n";

				Attribute *TriggerVector = (*list)[TagFromName(TriggerVector)];
				stream << "\t";
				if (TriggerVector) {
					stream << "\t\t";
					TriggerVector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TriggerVector> not present\n";

				Attribute *NumberOfTriggersInPhase = (*list)[TagFromName(NumberOfTriggersInPhase)];
				stream << "\t";
				if (NumberOfTriggersInPhase) {
					stream << "\t\t";
					NumberOfTriggersInPhase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfTriggersInPhase> not present\n";

				Attribute *PhaseDescription = (*list)[TagFromName(PhaseDescription)];
				stream << "\t";
				if (PhaseDescription) {
					stream << "\t\t";
					PhaseDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhaseDescription> not present\n";

			}
		}
	}
}

void
Module_NMReconstruction::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <NMReconstruction>\n";

	if (SpacingBetweenSlices) {
		stream << "\t\t";
		SpacingBetweenSlices->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpacingBetweenSlices> not present\n";

	if (ReconstructionDiameter) {
		stream << "\t\t";
		ReconstructionDiameter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReconstructionDiameter> not present\n";

	if (ConvolutionKernel) {
		stream << "\t\t";
		ConvolutionKernel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConvolutionKernel> not present\n";

	if (SliceThickness) {
		stream << "\t\t";
		SliceThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceThickness> not present\n";

	if (SliceLocation) {
		stream << "\t\t";
		SliceLocation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceLocation> not present\n";

	if (SliceProgressionDirection) {
		stream << "\t\t";
		SliceProgressionDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceProgressionDirection> not present\n";

}

void
Module_USRegionCalibration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <USRegionCalibration>\n";

	if (SequenceOfUltrasoundRegions)
		stream << "\t\tSequence <SequenceOfUltrasoundRegions>\n";
	else
		stream << "\t\tSequence <SequenceOfUltrasoundRegions> not present\n";
	if (SequenceOfUltrasoundRegions && strcmp(SequenceOfUltrasoundRegions->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SequenceOfUltrasoundRegions->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RegionLocationMinX0 = (*list)[TagFromName(RegionLocationMinX0)];
				stream << "\t";
				if (RegionLocationMinX0) {
					stream << "\t\t";
					RegionLocationMinX0->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionLocationMinX0> not present\n";

				Attribute *RegionLocationMinY0 = (*list)[TagFromName(RegionLocationMinY0)];
				stream << "\t";
				if (RegionLocationMinY0) {
					stream << "\t\t";
					RegionLocationMinY0->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionLocationMinY0> not present\n";

				Attribute *RegionLocationMaxX1 = (*list)[TagFromName(RegionLocationMaxX1)];
				stream << "\t";
				if (RegionLocationMaxX1) {
					stream << "\t\t";
					RegionLocationMaxX1->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionLocationMaxX1> not present\n";

				Attribute *RegionLocationMaxY1 = (*list)[TagFromName(RegionLocationMaxY1)];
				stream << "\t";
				if (RegionLocationMaxY1) {
					stream << "\t\t";
					RegionLocationMaxY1->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionLocationMaxY1> not present\n";

				Attribute *PhysicalUnitsXDirection = (*list)[TagFromName(PhysicalUnitsXDirection)];
				stream << "\t";
				if (PhysicalUnitsXDirection) {
					stream << "\t\t";
					PhysicalUnitsXDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhysicalUnitsXDirection> not present\n";

				Attribute *PhysicalUnitsYDirection = (*list)[TagFromName(PhysicalUnitsYDirection)];
				stream << "\t";
				if (PhysicalUnitsYDirection) {
					stream << "\t\t";
					PhysicalUnitsYDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhysicalUnitsYDirection> not present\n";

				Attribute *PhysicalDeltaX = (*list)[TagFromName(PhysicalDeltaX)];
				stream << "\t";
				if (PhysicalDeltaX) {
					stream << "\t\t";
					PhysicalDeltaX->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhysicalDeltaX> not present\n";

				Attribute *PhysicalDeltaY = (*list)[TagFromName(PhysicalDeltaY)];
				stream << "\t";
				if (PhysicalDeltaY) {
					stream << "\t\t";
					PhysicalDeltaY->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhysicalDeltaY> not present\n";

				Attribute *ReferencePixelX0 = (*list)[TagFromName(ReferencePixelX0)];
				stream << "\t";
				if (ReferencePixelX0) {
					stream << "\t\t";
					ReferencePixelX0->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencePixelX0> not present\n";

				Attribute *ReferencePixelY0 = (*list)[TagFromName(ReferencePixelY0)];
				stream << "\t";
				if (ReferencePixelY0) {
					stream << "\t\t";
					ReferencePixelY0->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencePixelY0> not present\n";

				Attribute *ReferencePixelPhysicalValueX = (*list)[TagFromName(ReferencePixelPhysicalValueX)];
				stream << "\t";
				if (ReferencePixelPhysicalValueX) {
					stream << "\t\t";
					ReferencePixelPhysicalValueX->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencePixelPhysicalValueX> not present\n";

				Attribute *ReferencePixelPhysicalValueY = (*list)[TagFromName(ReferencePixelPhysicalValueY)];
				stream << "\t";
				if (ReferencePixelPhysicalValueY) {
					stream << "\t\t";
					ReferencePixelPhysicalValueY->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencePixelPhysicalValueY> not present\n";

				Attribute *RegionSpatialFormat = (*list)[TagFromName(RegionSpatialFormat)];
				stream << "\t";
				if (RegionSpatialFormat) {
					stream << "\t\t";
					RegionSpatialFormat->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionSpatialFormat> not present\n";

				Attribute *RegionDataType = (*list)[TagFromName(RegionDataType)];
				stream << "\t";
				if (RegionDataType) {
					stream << "\t\t";
					RegionDataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionDataType> not present\n";

				Attribute *RegionFlags = (*list)[TagFromName(RegionFlags)];
				stream << "\t";
				if (RegionFlags) {
					stream << "\t\t";
					RegionFlags->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RegionFlags> not present\n";

				Attribute *PixelComponentOrganization = (*list)[TagFromName(PixelComponentOrganization)];
				stream << "\t";
				if (PixelComponentOrganization) {
					stream << "\t\t";
					PixelComponentOrganization->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelComponentOrganization> not present\n";

				Attribute *PixelComponentMask = (*list)[TagFromName(PixelComponentMask)];
				stream << "\t";
				if (PixelComponentMask) {
					stream << "\t\t";
					PixelComponentMask->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelComponentMask> not present\n";

				Attribute *PixelComponentRangeStart = (*list)[TagFromName(PixelComponentRangeStart)];
				stream << "\t";
				if (PixelComponentRangeStart) {
					stream << "\t\t";
					PixelComponentRangeStart->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelComponentRangeStart> not present\n";

				Attribute *PixelComponentRangeStop = (*list)[TagFromName(PixelComponentRangeStop)];
				stream << "\t";
				if (PixelComponentRangeStop) {
					stream << "\t\t";
					PixelComponentRangeStop->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelComponentRangeStop> not present\n";

				Attribute *PixelComponentPhysicalUnits = (*list)[TagFromName(PixelComponentPhysicalUnits)];
				stream << "\t";
				if (PixelComponentPhysicalUnits) {
					stream << "\t\t";
					PixelComponentPhysicalUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelComponentPhysicalUnits> not present\n";

				Attribute *PixelComponentDataType = (*list)[TagFromName(PixelComponentDataType)];
				stream << "\t";
				if (PixelComponentDataType) {
					stream << "\t\t";
					PixelComponentDataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelComponentDataType> not present\n";

				Attribute *NumberOfTableBreakPoints = (*list)[TagFromName(NumberOfTableBreakPoints)];
				stream << "\t";
				if (NumberOfTableBreakPoints) {
					stream << "\t\t";
					NumberOfTableBreakPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfTableBreakPoints> not present\n";

				Attribute *TableOfXBreakPoints = (*list)[TagFromName(TableOfXBreakPoints)];
				stream << "\t";
				if (TableOfXBreakPoints) {
					stream << "\t\t";
					TableOfXBreakPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableOfXBreakPoints> not present\n";

				Attribute *TableOfYBreakPoints = (*list)[TagFromName(TableOfYBreakPoints)];
				stream << "\t";
				if (TableOfYBreakPoints) {
					stream << "\t\t";
					TableOfYBreakPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableOfYBreakPoints> not present\n";

				Attribute *NumberOfTableEntries = (*list)[TagFromName(NumberOfTableEntries)];
				stream << "\t";
				if (NumberOfTableEntries) {
					stream << "\t\t";
					NumberOfTableEntries->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfTableEntries> not present\n";

				Attribute *TableOfPixelValues = (*list)[TagFromName(TableOfPixelValues)];
				stream << "\t";
				if (TableOfPixelValues) {
					stream << "\t\t";
					TableOfPixelValues->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableOfPixelValues> not present\n";

				Attribute *TableOfParameterValues = (*list)[TagFromName(TableOfParameterValues)];
				stream << "\t";
				if (TableOfParameterValues) {
					stream << "\t\t";
					TableOfParameterValues->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableOfParameterValues> not present\n";

	Attribute *PixelValueMappingCodeSequence = (*list)[TagFromName(PixelValueMappingCodeSequence)];
				stream << "\t";
				if (PixelValueMappingCodeSequence)
					stream << "\t\tSequence <PixelValueMappingCodeSequence>\n";
				else
					stream << "\t\tSequence <PixelValueMappingCodeSequence> not present\n";
				if (PixelValueMappingCodeSequence && strcmp(PixelValueMappingCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PixelValueMappingCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *TransducerFrequency = (*list)[TagFromName(TransducerFrequency)];
				stream << "\t";
				if (TransducerFrequency) {
					stream << "\t\t";
					TransducerFrequency->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TransducerFrequency> not present\n";

				Attribute *PulseRepetitionFrequency = (*list)[TagFromName(PulseRepetitionFrequency)];
				stream << "\t";
				if (PulseRepetitionFrequency) {
					stream << "\t\t";
					PulseRepetitionFrequency->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PulseRepetitionFrequency> not present\n";

				Attribute *DopplerCorrectionAngle = (*list)[TagFromName(DopplerCorrectionAngle)];
				stream << "\t";
				if (DopplerCorrectionAngle) {
					stream << "\t\t";
					DopplerCorrectionAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DopplerCorrectionAngle> not present\n";

				Attribute *SteeringAngle = (*list)[TagFromName(SteeringAngle)];
				stream << "\t";
				if (SteeringAngle) {
					stream << "\t\t";
					SteeringAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SteeringAngle> not present\n";

				Attribute *DopplerSampleVolumeXPosition = (*list)[TagFromName(DopplerSampleVolumeXPosition)];
				stream << "\t";
				if (DopplerSampleVolumeXPosition) {
					stream << "\t\t";
					DopplerSampleVolumeXPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DopplerSampleVolumeXPosition> not present\n";

				Attribute *DopplerSampleVolumeYPosition = (*list)[TagFromName(DopplerSampleVolumeYPosition)];
				stream << "\t";
				if (DopplerSampleVolumeYPosition) {
					stream << "\t\t";
					DopplerSampleVolumeYPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DopplerSampleVolumeYPosition> not present\n";

				Attribute *TMLinePositionX0 = (*list)[TagFromName(TMLinePositionX0)];
				stream << "\t";
				if (TMLinePositionX0) {
					stream << "\t\t";
					TMLinePositionX0->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TMLinePositionX0> not present\n";

				Attribute *TMLinePositionY0 = (*list)[TagFromName(TMLinePositionY0)];
				stream << "\t";
				if (TMLinePositionY0) {
					stream << "\t\t";
					TMLinePositionY0->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TMLinePositionY0> not present\n";

				Attribute *TMLinePositionX1 = (*list)[TagFromName(TMLinePositionX1)];
				stream << "\t";
				if (TMLinePositionX1) {
					stream << "\t\t";
					TMLinePositionX1->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TMLinePositionX1> not present\n";

				Attribute *TMLinePositionY1 = (*list)[TagFromName(TMLinePositionY1)];
				stream << "\t";
				if (TMLinePositionY1) {
					stream << "\t\t";
					TMLinePositionY1->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TMLinePositionY1> not present\n";

			}
		}
	}
}

void
Module_USImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <USImage>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (FrameIncrementPointer) {
		stream << "\t\t";
		FrameIncrementPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameIncrementPointer> not present\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (NumberOfStages) {
		stream << "\t\t";
		NumberOfStages->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfStages> not present\n";

	if (NumberOfViewsInStage) {
		stream << "\t\t";
		NumberOfViewsInStage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfViewsInStage> not present\n";

	if (RWaveTimeVector) {
		stream << "\t\t";
		RWaveTimeVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RWaveTimeVector> not present\n";

	if (UltrasoundColorDataPresent) {
		stream << "\t\t";
		UltrasoundColorDataPresent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UltrasoundColorDataPresent> not present\n";

	if (StageName) {
		stream << "\t\t";
		StageName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StageName> not present\n";

	if (StageCodeSequence)
		stream << "\t\tSequence <StageCodeSequence>\n";
	else
		stream << "\t\tSequence <StageCodeSequence> not present\n";
	if (StageCodeSequence && strcmp(StageCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StageCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (StageNumber) {
		stream << "\t\t";
		StageNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StageNumber> not present\n";

	if (ViewName) {
		stream << "\t\t";
		ViewName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ViewName> not present\n";

	if (ViewNumber) {
		stream << "\t\t";
		ViewNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ViewNumber> not present\n";

	if (NumberOfEventTimers) {
		stream << "\t\t";
		NumberOfEventTimers->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfEventTimers> not present\n";

	if (EventElapsedTimes) {
		stream << "\t\t";
		EventElapsedTimes->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EventElapsedTimes> not present\n";

	if (EventTimerNames) {
		stream << "\t\t";
		EventTimerNames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EventTimerNames> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (TriggerTime) {
		stream << "\t\t";
		TriggerTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerTime> not present\n";

	if (NominalInterval) {
		stream << "\t\t";
		NominalInterval->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NominalInterval> not present\n";

	if (BeatRejectionFlag) {
		stream << "\t\t";
		BeatRejectionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BeatRejectionFlag> not present\n";

	if (LowRRValue) {
		stream << "\t\t";
		LowRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LowRRValue> not present\n";

	if (HighRRValue) {
		stream << "\t\t";
		HighRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighRRValue> not present\n";

	if (HeartRate) {
		stream << "\t\t";
		HeartRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HeartRate> not present\n";

	if (IVUSAcquisition) {
		stream << "\t\t";
		IVUSAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSAcquisition> not present\n";

	if (IVUSPullbackRate) {
		stream << "\t\t";
		IVUSPullbackRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackRate> not present\n";

	if (IVUSGatedRate) {
		stream << "\t\t";
		IVUSGatedRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSGatedRate> not present\n";

	if (IVUSPullbackStartFrameNumber) {
		stream << "\t\t";
		IVUSPullbackStartFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackStartFrameNumber> not present\n";

	if (IVUSPullbackStopFrameNumber) {
		stream << "\t\t";
		IVUSPullbackStopFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackStopFrameNumber> not present\n";

	if (LesionNumber) {
		stream << "\t\t";
		LesionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LesionNumber> not present\n";

	if (OutputPower) {
		stream << "\t\t";
		OutputPower->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OutputPower> not present\n";

	if (TransducerData) {
		stream << "\t\t";
		TransducerData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransducerData> not present\n";

	if (TransducerType) {
		stream << "\t\t";
		TransducerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransducerType> not present\n";

	if (FocusDepth) {
		stream << "\t\t";
		FocusDepth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocusDepth> not present\n";

	if (ProcessingFunction) {
		stream << "\t\t";
		ProcessingFunction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProcessingFunction> not present\n";

	if (MechanicalIndex) {
		stream << "\t\t";
		MechanicalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MechanicalIndex> not present\n";

	if (BoneThermalIndex) {
		stream << "\t\t";
		BoneThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BoneThermalIndex> not present\n";

	if (CranialThermalIndex) {
		stream << "\t\t";
		CranialThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CranialThermalIndex> not present\n";

	if (SoftTissueThermalIndex) {
		stream << "\t\t";
		SoftTissueThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftTissueThermalIndex> not present\n";

	if (SoftTissueFocusThermalIndex) {
		stream << "\t\t";
		SoftTissueFocusThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftTissueFocusThermalIndex> not present\n";

	if (SoftTissueSurfaceThermalIndex) {
		stream << "\t\t";
		SoftTissueSurfaceThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftTissueSurfaceThermalIndex> not present\n";

	if (DepthOfScanField) {
		stream << "\t\t";
		DepthOfScanField->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DepthOfScanField> not present\n";

	if (OverlaySubtype) {
		stream << "\t\t";
		OverlaySubtype->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlaySubtype> not present\n";

}

void
Module_SCEquipment::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SCEquipment>\n";

	if (ConversionType) {
		stream << "\t\t";
		ConversionType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConversionType> not present\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SecondaryCaptureDeviceID) {
		stream << "\t\t";
		SecondaryCaptureDeviceID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryCaptureDeviceID> not present\n";

	if (SecondaryCaptureDeviceManufacturer) {
		stream << "\t\t";
		SecondaryCaptureDeviceManufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryCaptureDeviceManufacturer> not present\n";

	if (SecondaryCaptureDeviceManufacturerModelName) {
		stream << "\t\t";
		SecondaryCaptureDeviceManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryCaptureDeviceManufacturerModelName> not present\n";

	if (SecondaryCaptureDeviceSoftwareVersions) {
		stream << "\t\t";
		SecondaryCaptureDeviceSoftwareVersions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryCaptureDeviceSoftwareVersions> not present\n";

	if (VideoImageFormatAcquired) {
		stream << "\t\t";
		VideoImageFormatAcquired->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VideoImageFormatAcquired> not present\n";

	if (DigitalImageFormatAcquired) {
		stream << "\t\t";
		DigitalImageFormatAcquired->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DigitalImageFormatAcquired> not present\n";

}

void
Module_SCImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SCImage>\n";

	if (DateOfSecondaryCapture) {
		stream << "\t\t";
		DateOfSecondaryCapture->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DateOfSecondaryCapture> not present\n";

	if (TimeOfSecondaryCapture) {
		stream << "\t\t";
		TimeOfSecondaryCapture->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeOfSecondaryCapture> not present\n";

	if (NominalScannedPixelSpacing) {
		stream << "\t\t";
		NominalScannedPixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NominalScannedPixelSpacing> not present\n";

				stream << "\t";
	Macro_BasicPixelSpacingCalibrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicPixelSpacingCalibrationMacro>\n";

				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

}

void
Module_SCMultiFrameImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SCMultiFrameImage>\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (Illumination) {
		stream << "\t\t";
		Illumination->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Illumination> not present\n";

	if (ReflectedAmbientLight) {
		stream << "\t\t";
		ReflectedAmbientLight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReflectedAmbientLight> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (RescaleType) {
		stream << "\t\t";
		RescaleType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleType> not present\n";

	if (FrameIncrementPointer) {
		stream << "\t\t";
		FrameIncrementPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameIncrementPointer> not present\n";

	if (NominalScannedPixelSpacing) {
		stream << "\t\t";
		NominalScannedPixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NominalScannedPixelSpacing> not present\n";

				stream << "\t";
	Macro_BasicPixelSpacingCalibrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicPixelSpacingCalibrationMacro>\n";

	if (DigitizingDeviceTransportDirection) {
		stream << "\t\t";
		DigitizingDeviceTransportDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DigitizingDeviceTransportDirection> not present\n";

	if (RotationOfScannedFilm) {
		stream << "\t\t";
		RotationOfScannedFilm->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RotationOfScannedFilm> not present\n";

}

void
Module_SCMultiFrameVector::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SCMultiFrameVector>\n";

	if (FrameTimeVector) {
		stream << "\t\t";
		FrameTimeVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameTimeVector> not present\n";

	if (PageNumberVector) {
		stream << "\t\t";
		PageNumberVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PageNumberVector> not present\n";

	if (FrameLabelVector) {
		stream << "\t\t";
		FrameLabelVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameLabelVector> not present\n";

	if (FramePrimaryAngleVector) {
		stream << "\t\t";
		FramePrimaryAngleVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FramePrimaryAngleVector> not present\n";

	if (FrameSecondaryAngleVector) {
		stream << "\t\t";
		FrameSecondaryAngleVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameSecondaryAngleVector> not present\n";

	if (SliceLocationVector) {
		stream << "\t\t";
		SliceLocationVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceLocationVector> not present\n";

	if (DisplayWindowLabelVector) {
		stream << "\t\t";
		DisplayWindowLabelVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DisplayWindowLabelVector> not present\n";

}

void
Module_MultiFrameFunctionalGroupsForMFSC::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForMFSC>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

			}
		}
	}
}

void
Module_OverlayIdentification::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OverlayIdentification>\n";

	if (OverlayNumber) {
		stream << "\t\t";
		OverlayNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayNumber> not present\n";

	if (OverlayDate) {
		stream << "\t\t";
		OverlayDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayDate> not present\n";

	if (OverlayTime) {
		stream << "\t\t";
		OverlayTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayTime> not present\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

			}
		}
	}
}

void
Module_OverlayPlane::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OverlayPlane>\n";

	if (OverlayRows) {
		stream << "\t\t";
		OverlayRows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayRows> not present\n";

	if (OverlayColumns) {
		stream << "\t\t";
		OverlayColumns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayColumns> not present\n";

	if (OverlayType) {
		stream << "\t\t";
		OverlayType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayType> not present\n";

	if (OverlayOrigin) {
		stream << "\t\t";
		OverlayOrigin->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayOrigin> not present\n";

	if (OverlayBitsAllocated) {
		stream << "\t\t";
		OverlayBitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayBitsAllocated> not present\n";

	if (OverlayBitPosition) {
		stream << "\t\t";
		OverlayBitPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayBitPosition> not present\n";

	if (OverlayData) {
		stream << "\t\t";
		OverlayData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayData> not present\n";

	if (OverlayDescription) {
		stream << "\t\t";
		OverlayDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayDescription> not present\n";

	if (OverlaySubtype) {
		stream << "\t\t";
		OverlaySubtype->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlaySubtype> not present\n";

	if (OverlayLabel) {
		stream << "\t\t";
		OverlayLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayLabel> not present\n";

	if (ROIArea) {
		stream << "\t\t";
		ROIArea->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ROIArea> not present\n";

	if (ROIMean) {
		stream << "\t\t";
		ROIMean->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ROIMean> not present\n";

	if (ROIStandardDeviation) {
		stream << "\t\t";
		ROIStandardDeviation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ROIStandardDeviation> not present\n";

}

void
Module_MultiFrameOverlay::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameOverlay>\n";

	if (NumberOfFramesInOverlay) {
		stream << "\t\t";
		NumberOfFramesInOverlay->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFramesInOverlay> not present\n";

	if (ImageFrameOrigin) {
		stream << "\t\t";
		ImageFrameOrigin->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageFrameOrigin> not present\n";

}

void
Module_CurveIdentification::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CurveIdentification>\n";

	if (CurveNumber) {
		stream << "\t\t";
		CurveNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveNumber> not present\n";

	if (CurveDate) {
		stream << "\t\t";
		CurveDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveDate> not present\n";

	if (CurveTime) {
		stream << "\t\t";
		CurveTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveTime> not present\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

			}
		}
	}
	if (ReferencedOverlaySequence)
		stream << "\t\tSequence <ReferencedOverlaySequence>\n";
	else
		stream << "\t\tSequence <ReferencedOverlaySequence> not present\n";
	if (ReferencedOverlaySequence && strcmp(ReferencedOverlaySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedOverlaySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

			}
		}
	}
	if (ReferencedCurveSequence)
		stream << "\t\tSequence <ReferencedCurveSequence>\n";
	else
		stream << "\t\tSequence <ReferencedCurveSequence> not present\n";
	if (ReferencedCurveSequence && strcmp(ReferencedCurveSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedCurveSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

			}
		}
	}
}

void
Module_Curve::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Curve>\n";

	if (CurveDimensions) {
		stream << "\t\t";
		CurveDimensions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveDimensions> not present\n";

	if (NumberOfPoints) {
		stream << "\t\t";
		NumberOfPoints->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfPoints> not present\n";

	if (TypeOfData) {
		stream << "\t\t";
		TypeOfData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfData> not present\n";

	if (DataValueRepresentation) {
		stream << "\t\t";
		DataValueRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataValueRepresentation> not present\n";

	if (CurveData) {
		stream << "\t\t";
		CurveData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveData> not present\n";

	if (CurveDescription) {
		stream << "\t\t";
		CurveDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveDescription> not present\n";

	if (AxisUnits) {
		stream << "\t\t";
		AxisUnits->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxisUnits> not present\n";

	if (AxisLabels) {
		stream << "\t\t";
		AxisLabels->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxisLabels> not present\n";

	if (MinimumCoordinateValue) {
		stream << "\t\t";
		MinimumCoordinateValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MinimumCoordinateValue> not present\n";

	if (MaximumCoordinateValue) {
		stream << "\t\t";
		MaximumCoordinateValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumCoordinateValue> not present\n";

	if (CurveRange) {
		stream << "\t\t";
		CurveRange->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveRange> not present\n";

	if (CurveDataDescriptor) {
		stream << "\t\t";
		CurveDataDescriptor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveDataDescriptor> not present\n";

	if (CoordinateStartValue) {
		stream << "\t\t";
		CoordinateStartValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CoordinateStartValue> not present\n";

	if (CoordinateStepValue) {
		stream << "\t\t";
		CoordinateStepValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CoordinateStepValue> not present\n";

	if (CurveLabel) {
		stream << "\t\t";
		CurveLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurveLabel> not present\n";

	if (ReferencedOverlaySequence)
		stream << "\t\tSequence <ReferencedOverlaySequence>\n";
	else
		stream << "\t\tSequence <ReferencedOverlaySequence> not present\n";
	if (ReferencedOverlaySequence && strcmp(ReferencedOverlaySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedOverlaySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

				Attribute *CurveReferencedOverlayGroup = (*list)[TagFromName(CurveReferencedOverlayGroup)];
				stream << "\t";
				if (CurveReferencedOverlayGroup) {
					stream << "\t\t";
					CurveReferencedOverlayGroup->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CurveReferencedOverlayGroup> not present\n";

			}
		}
	}
}

void
Module_Audio::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Audio>\n";

	if (AudioType) {
		stream << "\t\t";
		AudioType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AudioType> not present\n";

	if (AudioSampleFormat) {
		stream << "\t\t";
		AudioSampleFormat->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AudioSampleFormat> not present\n";

	if (NumberOfChannels) {
		stream << "\t\t";
		NumberOfChannels->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfChannels> not present\n";

	if (NumberOfSamples) {
		stream << "\t\t";
		NumberOfSamples->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfSamples> not present\n";

	if (SampleRate) {
		stream << "\t\t";
		SampleRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SampleRate> not present\n";

	if (TotalTime) {
		stream << "\t\t";
		TotalTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TotalTime> not present\n";

	if (AudioSampleData) {
		stream << "\t\t";
		AudioSampleData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AudioSampleData> not present\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

			}
		}
	}
	if (AudioComments) {
		stream << "\t\t";
		AudioComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AudioComments> not present\n";

}

void
Macro_ModalityLUTMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ModalityLUTMacro>\n";

	if (ModalityLUTSequence)
		stream << "\t\tSequence <ModalityLUTSequence>\n";
	else
		stream << "\t\tSequence <ModalityLUTSequence> not present\n";
	if (ModalityLUTSequence && strcmp(ModalityLUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ModalityLUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LUTDescriptor = (*list)[TagFromName(LUTDescriptor)];
				stream << "\t";
				if (LUTDescriptor) {
					stream << "\t\t";
					LUTDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTDescriptor> not present\n";

				Attribute *LUTExplanation = (*list)[TagFromName(LUTExplanation)];
				stream << "\t";
				if (LUTExplanation) {
					stream << "\t\t";
					LUTExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTExplanation> not present\n";

				Attribute *ModalityLUTType = (*list)[TagFromName(ModalityLUTType)];
				stream << "\t";
				if (ModalityLUTType) {
					stream << "\t\t";
					ModalityLUTType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ModalityLUTType> not present\n";

				Attribute *LUTData = (*list)[TagFromName(LUTData)];
				stream << "\t";
				if (LUTData) {
					stream << "\t\t";
					LUTData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTData> not present\n";

			}
		}
	}
	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (RescaleType) {
		stream << "\t\t";
		RescaleType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleType> not present\n";

}

void
Module_ModalityLUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ModalityLUT>\n";

				stream << "\t";
	Macro_ModalityLUTMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ModalityLUTMacro>\n";

}

void
Macro_VOILUTMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <VOILUTMacro>\n";

	if (VOILUTSequence)
		stream << "\t\tSequence <VOILUTSequence>\n";
	else
		stream << "\t\tSequence <VOILUTSequence> not present\n";
	if (VOILUTSequence && strcmp(VOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LUTDescriptor = (*list)[TagFromName(LUTDescriptor)];
				stream << "\t";
				if (LUTDescriptor) {
					stream << "\t\t";
					LUTDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTDescriptor> not present\n";

				Attribute *LUTExplanation = (*list)[TagFromName(LUTExplanation)];
				stream << "\t";
				if (LUTExplanation) {
					stream << "\t\t";
					LUTExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTExplanation> not present\n";

				Attribute *LUTData = (*list)[TagFromName(LUTData)];
				stream << "\t";
				if (LUTData) {
					stream << "\t\t";
					LUTData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTData> not present\n";

			}
		}
	}
	if (WindowCenter) {
		stream << "\t\t";
		WindowCenter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowCenter> not present\n";

	if (WindowWidth) {
		stream << "\t\t";
		WindowWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowWidth> not present\n";

	if (WindowCenterWidthExplanation) {
		stream << "\t\t";
		WindowCenterWidthExplanation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowCenterWidthExplanation> not present\n";

	if (VOILUTFunction) {
		stream << "\t\t";
		VOILUTFunction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VOILUTFunction> not present\n";

}

void
Module_VOILUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VOILUT>\n";

				stream << "\t";
	Macro_VOILUTMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <VOILUTMacro>\n";

}

void
Module_LUTIdentification::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <LUTIdentification>\n";

	if (LUTNumber) {
		stream << "\t\t";
		LUTNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LUTNumber> not present\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

			}
		}
	}
}

void
Macro_DigitalSignaturesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DigitalSignaturesMacro>\n";

	if (MACParametersSequence)
		stream << "\t\tSequence <MACParametersSequence>\n";
	else
		stream << "\t\tSequence <MACParametersSequence> not present\n";
	if (MACParametersSequence && strcmp(MACParametersSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MACParametersSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MACIDNumber = (*list)[TagFromName(MACIDNumber)];
				stream << "\t";
				if (MACIDNumber) {
					stream << "\t\t";
					MACIDNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MACIDNumber> not present\n";

				Attribute *MACCalculationTransferSyntaxUID = (*list)[TagFromName(MACCalculationTransferSyntaxUID)];
				stream << "\t";
				if (MACCalculationTransferSyntaxUID) {
					stream << "\t\t";
					MACCalculationTransferSyntaxUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MACCalculationTransferSyntaxUID> not present\n";

				Attribute *MACAlgorithm = (*list)[TagFromName(MACAlgorithm)];
				stream << "\t";
				if (MACAlgorithm) {
					stream << "\t\t";
					MACAlgorithm->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MACAlgorithm> not present\n";

				Attribute *DataElementsSigned = (*list)[TagFromName(DataElementsSigned)];
				stream << "\t";
				if (DataElementsSigned) {
					stream << "\t\t";
					DataElementsSigned->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataElementsSigned> not present\n";

			}
		}
	}
	if (DigitalSignaturesSequence)
		stream << "\t\tSequence <DigitalSignaturesSequence>\n";
	else
		stream << "\t\tSequence <DigitalSignaturesSequence> not present\n";
	if (DigitalSignaturesSequence && strcmp(DigitalSignaturesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DigitalSignaturesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MACIDNumber = (*list)[TagFromName(MACIDNumber)];
				stream << "\t";
				if (MACIDNumber) {
					stream << "\t\t";
					MACIDNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MACIDNumber> not present\n";

				Attribute *DigitalSignatureUID = (*list)[TagFromName(DigitalSignatureUID)];
				stream << "\t";
				if (DigitalSignatureUID) {
					stream << "\t\t";
					DigitalSignatureUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DigitalSignatureUID> not present\n";

				Attribute *DigitalSignatureDateTime = (*list)[TagFromName(DigitalSignatureDateTime)];
				stream << "\t";
				if (DigitalSignatureDateTime) {
					stream << "\t\t";
					DigitalSignatureDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DigitalSignatureDateTime> not present\n";

				Attribute *CertificateType = (*list)[TagFromName(CertificateType)];
				stream << "\t";
				if (CertificateType) {
					stream << "\t\t";
					CertificateType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CertificateType> not present\n";

				Attribute *CertificateOfSigner = (*list)[TagFromName(CertificateOfSigner)];
				stream << "\t";
				if (CertificateOfSigner) {
					stream << "\t\t";
					CertificateOfSigner->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CertificateOfSigner> not present\n";

				Attribute *Signature = (*list)[TagFromName(Signature)];
				stream << "\t";
				if (Signature) {
					stream << "\t\t";
					Signature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Signature> not present\n";

				Attribute *CertifiedTimestampType = (*list)[TagFromName(CertifiedTimestampType)];
				stream << "\t";
				if (CertifiedTimestampType) {
					stream << "\t\t";
					CertifiedTimestampType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CertifiedTimestampType> not present\n";

				Attribute *CertifiedTimestamp = (*list)[TagFromName(CertifiedTimestamp)];
				stream << "\t";
				if (CertifiedTimestamp) {
					stream << "\t\t";
					CertifiedTimestamp->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CertifiedTimestamp> not present\n";

	Attribute *DigitalSignaturePurposeCodeSequence = (*list)[TagFromName(DigitalSignaturePurposeCodeSequence)];
				stream << "\t";
				if (DigitalSignaturePurposeCodeSequence)
					stream << "\t\tSequence <DigitalSignaturePurposeCodeSequence>\n";
				else
					stream << "\t\tSequence <DigitalSignaturePurposeCodeSequence> not present\n";
				if (DigitalSignaturePurposeCodeSequence && strcmp(DigitalSignaturePurposeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DigitalSignaturePurposeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_SOPCommon::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SOPCommon>\n";

	if (SOPClassUID) {
		stream << "\t\t";
		SOPClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SOPClassUID> not present\n";

	if (SOPInstanceUID) {
		stream << "\t\t";
		SOPInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SOPInstanceUID> not present\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceCreationDate) {
		stream << "\t\t";
		InstanceCreationDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCreationDate> not present\n";

	if (InstanceCreationTime) {
		stream << "\t\t";
		InstanceCreationTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCreationTime> not present\n";

	if (InstanceCoercionDateTime) {
		stream << "\t\t";
		InstanceCoercionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCoercionDateTime> not present\n";

	if (InstanceCreatorUID) {
		stream << "\t\t";
		InstanceCreatorUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCreatorUID> not present\n";

	if (RelatedGeneralSOPClassUID) {
		stream << "\t\t";
		RelatedGeneralSOPClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RelatedGeneralSOPClassUID> not present\n";

	if (OriginalSpecializedSOPClassUID) {
		stream << "\t\t";
		OriginalSpecializedSOPClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OriginalSpecializedSOPClassUID> not present\n";

	if (CodingSchemeIdentificationSequence)
		stream << "\t\tSequence <CodingSchemeIdentificationSequence>\n";
	else
		stream << "\t\tSequence <CodingSchemeIdentificationSequence> not present\n";
	if (CodingSchemeIdentificationSequence && strcmp(CodingSchemeIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CodingSchemeIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodingSchemeRegistry = (*list)[TagFromName(CodingSchemeRegistry)];
				stream << "\t";
				if (CodingSchemeRegistry) {
					stream << "\t\t";
					CodingSchemeRegistry->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeRegistry> not present\n";

				Attribute *CodingSchemeUID = (*list)[TagFromName(CodingSchemeUID)];
				stream << "\t";
				if (CodingSchemeUID) {
					stream << "\t\t";
					CodingSchemeUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeUID> not present\n";

				Attribute *CodingSchemeExternalID = (*list)[TagFromName(CodingSchemeExternalID)];
				stream << "\t";
				if (CodingSchemeExternalID) {
					stream << "\t\t";
					CodingSchemeExternalID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeExternalID> not present\n";

				Attribute *CodingSchemeName = (*list)[TagFromName(CodingSchemeName)];
				stream << "\t";
				if (CodingSchemeName) {
					stream << "\t\t";
					CodingSchemeName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeName> not present\n";

				Attribute *CodingSchemeVersion = (*list)[TagFromName(CodingSchemeVersion)];
				stream << "\t";
				if (CodingSchemeVersion) {
					stream << "\t\t";
					CodingSchemeVersion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeVersion> not present\n";

				Attribute *CodingSchemeResponsibleOrganization = (*list)[TagFromName(CodingSchemeResponsibleOrganization)];
				stream << "\t";
				if (CodingSchemeResponsibleOrganization) {
					stream << "\t\t";
					CodingSchemeResponsibleOrganization->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeResponsibleOrganization> not present\n";

	Attribute *CodingSchemeResourcesSequence = (*list)[TagFromName(CodingSchemeResourcesSequence)];
				stream << "\t";
				if (CodingSchemeResourcesSequence)
					stream << "\t\tSequence <CodingSchemeResourcesSequence>\n";
				else
					stream << "\t\tSequence <CodingSchemeResourcesSequence> not present\n";
				if (CodingSchemeResourcesSequence && strcmp(CodingSchemeResourcesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=CodingSchemeResourcesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *CodingSchemeURLType = (*list)[TagFromName(CodingSchemeURLType)];
							stream << "\t\t";
							if (CodingSchemeURLType) {
								stream << "\t\t";
								CodingSchemeURLType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CodingSchemeURLType> not present\n";

							Attribute *CodingSchemeURL = (*list)[TagFromName(CodingSchemeURL)];
							stream << "\t\t";
							if (CodingSchemeURL) {
								stream << "\t\t";
								CodingSchemeURL->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CodingSchemeURL> not present\n";

						}
					}
				}
			}
		}
	}
	if (ContextGroupIdentificationSequence)
		stream << "\t\tSequence <ContextGroupIdentificationSequence>\n";
	else
		stream << "\t\tSequence <ContextGroupIdentificationSequence> not present\n";
	if (ContextGroupIdentificationSequence && strcmp(ContextGroupIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContextGroupIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ContextIdentifier = (*list)[TagFromName(ContextIdentifier)];
				stream << "\t";
				if (ContextIdentifier) {
					stream << "\t\t";
					ContextIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContextIdentifier> not present\n";

				Attribute *ContextUID = (*list)[TagFromName(ContextUID)];
				stream << "\t";
				if (ContextUID) {
					stream << "\t\t";
					ContextUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContextUID> not present\n";

				Attribute *MappingResource = (*list)[TagFromName(MappingResource)];
				stream << "\t";
				if (MappingResource) {
					stream << "\t\t";
					MappingResource->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MappingResource> not present\n";

				Attribute *ContextGroupVersion = (*list)[TagFromName(ContextGroupVersion)];
				stream << "\t";
				if (ContextGroupVersion) {
					stream << "\t\t";
					ContextGroupVersion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContextGroupVersion> not present\n";

			}
		}
	}
	if (MappingResourceIdentificationSequence)
		stream << "\t\tSequence <MappingResourceIdentificationSequence>\n";
	else
		stream << "\t\tSequence <MappingResourceIdentificationSequence> not present\n";
	if (MappingResourceIdentificationSequence && strcmp(MappingResourceIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MappingResourceIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MappingResource = (*list)[TagFromName(MappingResource)];
				stream << "\t";
				if (MappingResource) {
					stream << "\t\t";
					MappingResource->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MappingResource> not present\n";

				Attribute *MappingResourceUID = (*list)[TagFromName(MappingResourceUID)];
				stream << "\t";
				if (MappingResourceUID) {
					stream << "\t\t";
					MappingResourceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MappingResourceUID> not present\n";

				Attribute *MappingResourceName = (*list)[TagFromName(MappingResourceName)];
				stream << "\t";
				if (MappingResourceName) {
					stream << "\t\t";
					MappingResourceName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MappingResourceName> not present\n";

			}
		}
	}
	if (TimezoneOffsetFromUTC) {
		stream << "\t\t";
		TimezoneOffsetFromUTC->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimezoneOffsetFromUTC> not present\n";

	if (ContributingEquipmentSequence)
		stream << "\t\tSequence <ContributingEquipmentSequence>\n";
	else
		stream << "\t\tSequence <ContributingEquipmentSequence> not present\n";
	if (ContributingEquipmentSequence && strcmp(ContributingEquipmentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContributingEquipmentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *InstitutionName = (*list)[TagFromName(InstitutionName)];
				stream << "\t";
				if (InstitutionName) {
					stream << "\t\t";
					InstitutionName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionName> not present\n";

				Attribute *InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
				stream << "\t";
				if (InstitutionAddress) {
					stream << "\t\t";
					InstitutionAddress->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionAddress> not present\n";

				Attribute *StationName = (*list)[TagFromName(StationName)];
				stream << "\t";
				if (StationName) {
					stream << "\t\t";
					StationName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StationName> not present\n";

				Attribute *InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
				stream << "\t";
				if (InstitutionalDepartmentName) {
					stream << "\t\t";
					InstitutionalDepartmentName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	Attribute *InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
				stream << "\t";
				if (InstitutionalDepartmentTypeCodeSequence)
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
				if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *OperatorsName = (*list)[TagFromName(OperatorsName)];
				stream << "\t";
				if (OperatorsName) {
					stream << "\t\t";
					OperatorsName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OperatorsName> not present\n";

	Attribute *OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
				stream << "\t";
				if (OperatorIdentificationSequence)
					stream << "\t\tSequence <OperatorIdentificationSequence>\n";
				else
					stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
				if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

						}
					}
				}
				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
				stream << "\t";
				if (DeviceSerialNumber) {
					stream << "\t\t";
					DeviceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceSerialNumber> not present\n";

				Attribute *SoftwareVersions = (*list)[TagFromName(SoftwareVersions)];
				stream << "\t";
				if (SoftwareVersions) {
					stream << "\t\t";
					SoftwareVersions->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SoftwareVersions> not present\n";

				Attribute *SpatialResolution = (*list)[TagFromName(SpatialResolution)];
				stream << "\t";
				if (SpatialResolution) {
					stream << "\t\t";
					SpatialResolution->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpatialResolution> not present\n";

				Attribute *DateOfLastCalibration = (*list)[TagFromName(DateOfLastCalibration)];
				stream << "\t";
				if (DateOfLastCalibration) {
					stream << "\t\t";
					DateOfLastCalibration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DateOfLastCalibration> not present\n";

				Attribute *TimeOfLastCalibration = (*list)[TagFromName(TimeOfLastCalibration)];
				stream << "\t";
				if (TimeOfLastCalibration) {
					stream << "\t\t";
					TimeOfLastCalibration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TimeOfLastCalibration> not present\n";

				Attribute *ContributionDateTime = (*list)[TagFromName(ContributionDateTime)];
				stream << "\t";
				if (ContributionDateTime) {
					stream << "\t\t";
					ContributionDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContributionDateTime> not present\n";

				Attribute *ContributionDescription = (*list)[TagFromName(ContributionDescription)];
				stream << "\t";
				if (ContributionDescription) {
					stream << "\t\t";
					ContributionDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContributionDescription> not present\n";

			}
		}
	}
	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (SOPInstanceStatus) {
		stream << "\t\t";
		SOPInstanceStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SOPInstanceStatus> not present\n";

	if (SOPAuthorizationDateTime) {
		stream << "\t\t";
		SOPAuthorizationDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SOPAuthorizationDateTime> not present\n";

	if (SOPAuthorizationComment) {
		stream << "\t\t";
		SOPAuthorizationComment->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SOPAuthorizationComment> not present\n";

	if (AuthorizationEquipmentCertificationNumber) {
		stream << "\t\t";
		AuthorizationEquipmentCertificationNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AuthorizationEquipmentCertificationNumber> not present\n";

				stream << "\t";
	Macro_DigitalSignaturesMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DigitalSignaturesMacro>\n";

	if (EncryptedAttributesSequence)
		stream << "\t\tSequence <EncryptedAttributesSequence>\n";
	else
		stream << "\t\tSequence <EncryptedAttributesSequence> not present\n";
	if (EncryptedAttributesSequence && strcmp(EncryptedAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EncryptedAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *EncryptedContentTransferSyntaxUID = (*list)[TagFromName(EncryptedContentTransferSyntaxUID)];
				stream << "\t";
				if (EncryptedContentTransferSyntaxUID) {
					stream << "\t\t";
					EncryptedContentTransferSyntaxUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EncryptedContentTransferSyntaxUID> not present\n";

				Attribute *EncryptedContent = (*list)[TagFromName(EncryptedContent)];
				stream << "\t";
				if (EncryptedContent) {
					stream << "\t\t";
					EncryptedContent->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EncryptedContent> not present\n";

			}
		}
	}
	if (OriginalAttributesSequence)
		stream << "\t\tSequence <OriginalAttributesSequence>\n";
	else
		stream << "\t\tSequence <OriginalAttributesSequence> not present\n";
	if (OriginalAttributesSequence && strcmp(OriginalAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OriginalAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SourceOfPreviousValues = (*list)[TagFromName(SourceOfPreviousValues)];
				stream << "\t";
				if (SourceOfPreviousValues) {
					stream << "\t\t";
					SourceOfPreviousValues->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceOfPreviousValues> not present\n";

				Attribute *AttributeModificationDateTime = (*list)[TagFromName(AttributeModificationDateTime)];
				stream << "\t";
				if (AttributeModificationDateTime) {
					stream << "\t\t";
					AttributeModificationDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AttributeModificationDateTime> not present\n";

				Attribute *ModifyingSystem = (*list)[TagFromName(ModifyingSystem)];
				stream << "\t";
				if (ModifyingSystem) {
					stream << "\t\t";
					ModifyingSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ModifyingSystem> not present\n";

				Attribute *ReasonForTheAttributeModification = (*list)[TagFromName(ReasonForTheAttributeModification)];
				stream << "\t";
				if (ReasonForTheAttributeModification) {
					stream << "\t\t";
					ReasonForTheAttributeModification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReasonForTheAttributeModification> not present\n";

	Attribute *ModifiedAttributesSequence = (*list)[TagFromName(ModifiedAttributesSequence)];
				stream << "\t";
				if (ModifiedAttributesSequence)
					stream << "\t\tSequence <ModifiedAttributesSequence>\n";
				else
					stream << "\t\tSequence <ModifiedAttributesSequence> not present\n";
				if (ModifiedAttributesSequence && strcmp(ModifiedAttributesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ModifiedAttributesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
						}
					}
				}
	Attribute *NonconformingModifiedAttributesSequence = (*list)[TagFromName(NonconformingModifiedAttributesSequence)];
				stream << "\t";
				if (NonconformingModifiedAttributesSequence)
					stream << "\t\tSequence <NonconformingModifiedAttributesSequence>\n";
				else
					stream << "\t\tSequence <NonconformingModifiedAttributesSequence> not present\n";
				if (NonconformingModifiedAttributesSequence && strcmp(NonconformingModifiedAttributesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=NonconformingModifiedAttributesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SelectorAttributeMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SelectorAttributeMacro>\n";

							Attribute *NonconformingDataElementValue = (*list)[TagFromName(NonconformingDataElementValue)];
							stream << "\t\t";
							if (NonconformingDataElementValue) {
								stream << "\t\t";
								NonconformingDataElementValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NonconformingDataElementValue> not present\n";

						}
					}
				}
			}
		}
	}
	if (HL7StructuredDocumentReferenceSequence)
		stream << "\t\tSequence <HL7StructuredDocumentReferenceSequence>\n";
	else
		stream << "\t\tSequence <HL7StructuredDocumentReferenceSequence> not present\n";
	if (HL7StructuredDocumentReferenceSequence && strcmp(HL7StructuredDocumentReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HL7StructuredDocumentReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
				stream << "\t";
				if (ReferencedSOPClassUID) {
					stream << "\t\t";
					ReferencedSOPClassUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

				Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
				stream << "\t";
				if (ReferencedSOPInstanceUID) {
					stream << "\t\t";
					ReferencedSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

				Attribute *HL7InstanceIdentifier = (*list)[TagFromName(HL7InstanceIdentifier)];
				stream << "\t";
				if (HL7InstanceIdentifier) {
					stream << "\t\t";
					HL7InstanceIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HL7InstanceIdentifier> not present\n";

				Attribute *RetrieveURI = (*list)[TagFromName(RetrieveURI)];
				stream << "\t";
				if (RetrieveURI) {
					stream << "\t\t";
					RetrieveURI->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RetrieveURI> not present\n";

			}
		}
	}
	if (LongitudinalTemporalInformationModified) {
		stream << "\t\t";
		LongitudinalTemporalInformationModified->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongitudinalTemporalInformationModified> not present\n";

	if (QueryRetrieveView) {
		stream << "\t\t";
		QueryRetrieveView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <QueryRetrieveView> not present\n";

	if (ConversionSourceAttributesSequence)
		stream << "\t\tSequence <ConversionSourceAttributesSequence>\n";
	else
		stream << "\t\tSequence <ConversionSourceAttributesSequence> not present\n";
	if (ConversionSourceAttributesSequence && strcmp(ConversionSourceAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConversionSourceAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (PrivateDataElementCharacteristicsSequence)
		stream << "\t\tSequence <PrivateDataElementCharacteristicsSequence>\n";
	else
		stream << "\t\tSequence <PrivateDataElementCharacteristicsSequence> not present\n";
	if (PrivateDataElementCharacteristicsSequence && strcmp(PrivateDataElementCharacteristicsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrivateDataElementCharacteristicsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PrivateGroupReference = (*list)[TagFromName(PrivateGroupReference)];
				stream << "\t";
				if (PrivateGroupReference) {
					stream << "\t\t";
					PrivateGroupReference->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PrivateGroupReference> not present\n";

				Attribute *PrivateCreatorReference = (*list)[TagFromName(PrivateCreatorReference)];
				stream << "\t";
				if (PrivateCreatorReference) {
					stream << "\t\t";
					PrivateCreatorReference->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PrivateCreatorReference> not present\n";

	Attribute *PrivateDataElementDefinitionSequence = (*list)[TagFromName(PrivateDataElementDefinitionSequence)];
				stream << "\t";
				if (PrivateDataElementDefinitionSequence)
					stream << "\t\tSequence <PrivateDataElementDefinitionSequence>\n";
				else
					stream << "\t\tSequence <PrivateDataElementDefinitionSequence> not present\n";
				if (PrivateDataElementDefinitionSequence && strcmp(PrivateDataElementDefinitionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PrivateDataElementDefinitionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *PrivateDataElement = (*list)[TagFromName(PrivateDataElement)];
							stream << "\t\t";
							if (PrivateDataElement) {
								stream << "\t\t";
								PrivateDataElement->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElement> not present\n";

							Attribute *PrivateDataElementValueMultiplicity = (*list)[TagFromName(PrivateDataElementValueMultiplicity)];
							stream << "\t\t";
							if (PrivateDataElementValueMultiplicity) {
								stream << "\t\t";
								PrivateDataElementValueMultiplicity->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementValueMultiplicity> not present\n";

							Attribute *PrivateDataElementValueRepresentation = (*list)[TagFromName(PrivateDataElementValueRepresentation)];
							stream << "\t\t";
							if (PrivateDataElementValueRepresentation) {
								stream << "\t\t";
								PrivateDataElementValueRepresentation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementValueRepresentation> not present\n";

							Attribute *PrivateDataElementNumberOfItems = (*list)[TagFromName(PrivateDataElementNumberOfItems)];
							stream << "\t\t";
							if (PrivateDataElementNumberOfItems) {
								stream << "\t\t";
								PrivateDataElementNumberOfItems->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementNumberOfItems> not present\n";

							Attribute *PrivateDataElementKeyword = (*list)[TagFromName(PrivateDataElementKeyword)];
							stream << "\t\t";
							if (PrivateDataElementKeyword) {
								stream << "\t\t";
								PrivateDataElementKeyword->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementKeyword> not present\n";

							Attribute *PrivateDataElementName = (*list)[TagFromName(PrivateDataElementName)];
							stream << "\t\t";
							if (PrivateDataElementName) {
								stream << "\t\t";
								PrivateDataElementName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementName> not present\n";

							Attribute *PrivateDataElementDescription = (*list)[TagFromName(PrivateDataElementDescription)];
							stream << "\t\t";
							if (PrivateDataElementDescription) {
								stream << "\t\t";
								PrivateDataElementDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementDescription> not present\n";

							Attribute *PrivateDataElementEncoding = (*list)[TagFromName(PrivateDataElementEncoding)];
							stream << "\t\t";
							if (PrivateDataElementEncoding) {
								stream << "\t\t";
								PrivateDataElementEncoding->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PrivateDataElementEncoding> not present\n";

							Attribute *RetrieveURI = (*list)[TagFromName(RetrieveURI)];
							stream << "\t\t";
							if (RetrieveURI) {
								stream << "\t\t";
								RetrieveURI->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RetrieveURI> not present\n";

						}
					}
				}
				Attribute *BlockIdentifyingInformationStatus = (*list)[TagFromName(BlockIdentifyingInformationStatus)];
				stream << "\t";
				if (BlockIdentifyingInformationStatus) {
					stream << "\t\t";
					BlockIdentifyingInformationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlockIdentifyingInformationStatus> not present\n";

				Attribute *NonidentifyingPrivateElements = (*list)[TagFromName(NonidentifyingPrivateElements)];
				stream << "\t";
				if (NonidentifyingPrivateElements) {
					stream << "\t\t";
					NonidentifyingPrivateElements->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NonidentifyingPrivateElements> not present\n";

	Attribute *DeidentificationActionSequence = (*list)[TagFromName(DeidentificationActionSequence)];
				stream << "\t";
				if (DeidentificationActionSequence)
					stream << "\t\tSequence <DeidentificationActionSequence>\n";
				else
					stream << "\t\tSequence <DeidentificationActionSequence> not present\n";
				if (DeidentificationActionSequence && strcmp(DeidentificationActionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DeidentificationActionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *IdentifyingPrivateElements = (*list)[TagFromName(IdentifyingPrivateElements)];
							stream << "\t\t";
							if (IdentifyingPrivateElements) {
								stream << "\t\t";
								IdentifyingPrivateElements->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IdentifyingPrivateElements> not present\n";

							Attribute *DeidentificationAction = (*list)[TagFromName(DeidentificationAction)];
							stream << "\t\t";
							if (DeidentificationAction) {
								stream << "\t\t";
								DeidentificationAction->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeidentificationAction> not present\n";

						}
					}
				}
			}
		}
	}
	if (InstanceOriginStatus) {
		stream << "\t\t";
		InstanceOriginStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceOriginStatus> not present\n";

	if (BarcodeValue) {
		stream << "\t\t";
		BarcodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BarcodeValue> not present\n";

}

void
Module_FrameExtraction::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <FrameExtraction>\n";

	if (FrameExtractionSequence)
		stream << "\t\tSequence <FrameExtractionSequence>\n";
	else
		stream << "\t\tSequence <FrameExtractionSequence> not present\n";
	if (FrameExtractionSequence && strcmp(FrameExtractionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameExtractionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MultiFrameSourceSOPInstanceUID = (*list)[TagFromName(MultiFrameSourceSOPInstanceUID)];
				stream << "\t";
				if (MultiFrameSourceSOPInstanceUID) {
					stream << "\t\t";
					MultiFrameSourceSOPInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultiFrameSourceSOPInstanceUID> not present\n";

				Attribute *SimpleFrameList = (*list)[TagFromName(SimpleFrameList)];
				stream << "\t";
				if (SimpleFrameList) {
					stream << "\t\t";
					SimpleFrameList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SimpleFrameList> not present\n";

				Attribute *CalculatedFrameList = (*list)[TagFromName(CalculatedFrameList)];
				stream << "\t";
				if (CalculatedFrameList) {
					stream << "\t\t";
					CalculatedFrameList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalculatedFrameList> not present\n";

				Attribute *TimeRange = (*list)[TagFromName(TimeRange)];
				stream << "\t";
				if (TimeRange) {
					stream << "\t\t";
					TimeRange->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TimeRange> not present\n";

			}
		}
	}
}

void
Module_MultiframeSingleBitSCImagePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiframeSingleBitSCImagePseudo>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

}

void
Module_MultiframeGrayscaleByteSCImagePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiframeGrayscaleByteSCImagePseudo>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (RescaleType) {
		stream << "\t\t";
		RescaleType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleType> not present\n";

}

void
Module_MultiframeGrayscaleWordSCImagePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiframeGrayscaleWordSCImagePseudo>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

}

void
Module_MultiframeTrueColorSCImagePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiframeTrueColorSCImagePseudo>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

}

void
Module_CommonInstanceReference::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CommonInstanceReference>\n";

	if (ReferencedSeriesSequence)
		stream << "\t\tSequence <ReferencedSeriesSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
	if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
				stream << "\t";
				if (SeriesInstanceUID) {
					stream << "\t\t";
					SeriesInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
				stream << "\t";
				if (ReferencedInstanceSequence)
					stream << "\t\tSequence <ReferencedInstanceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
				if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (StudiesContainingOtherReferencedInstancesSequence)
		stream << "\t\tSequence <StudiesContainingOtherReferencedInstancesSequence>\n";
	else
		stream << "\t\tSequence <StudiesContainingOtherReferencedInstancesSequence> not present\n";
	if (StudiesContainingOtherReferencedInstancesSequence && strcmp(StudiesContainingOtherReferencedInstancesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StudiesContainingOtherReferencedInstancesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

							stream << "\t\t";
	Macro_SeriesAndInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SeriesAndInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_SegmentationSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SegmentationSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_SegmentationImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SegmentationImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (SegmentationType) {
		stream << "\t\t";
		SegmentationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentationType> not present\n";

	if (SegmentationFractionalType) {
		stream << "\t\t";
		SegmentationFractionalType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentationFractionalType> not present\n";

	if (MaximumFractionalValue) {
		stream << "\t\t";
		MaximumFractionalValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumFractionalValue> not present\n";

	if (SegmentsOverlap) {
		stream << "\t\t";
		SegmentsOverlap->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentsOverlap> not present\n";

	if (SegmentSequence)
		stream << "\t\tSequence <SegmentSequence>\n";
	else
		stream << "\t\tSequence <SegmentSequence> not present\n";
	if (SegmentSequence && strcmp(SegmentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SegmentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SegmentDescriptionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SegmentDescriptionMacro>\n";

				Attribute *SegmentAlgorithmName = (*list)[TagFromName(SegmentAlgorithmName)];
				stream << "\t";
				if (SegmentAlgorithmName) {
					stream << "\t\t";
					SegmentAlgorithmName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SegmentAlgorithmName> not present\n";

	Attribute *SegmentationAlgorithmIdentificationSequence = (*list)[TagFromName(SegmentationAlgorithmIdentificationSequence)];
				stream << "\t";
				if (SegmentationAlgorithmIdentificationSequence)
					stream << "\t\tSequence <SegmentationAlgorithmIdentificationSequence>\n";
				else
					stream << "\t\tSequence <SegmentationAlgorithmIdentificationSequence> not present\n";
				if (SegmentationAlgorithmIdentificationSequence && strcmp(SegmentationAlgorithmIdentificationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SegmentationAlgorithmIdentificationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

						}
					}
				}
				Attribute *RecommendedDisplayGrayscaleValue = (*list)[TagFromName(RecommendedDisplayGrayscaleValue)];
				stream << "\t";
				if (RecommendedDisplayGrayscaleValue) {
					stream << "\t\t";
					RecommendedDisplayGrayscaleValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayGrayscaleValue> not present\n";

				Attribute *RecommendedDisplayCIELabValue = (*list)[TagFromName(RecommendedDisplayCIELabValue)];
				stream << "\t";
				if (RecommendedDisplayCIELabValue) {
					stream << "\t\t";
					RecommendedDisplayCIELabValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayCIELabValue> not present\n";

			}
		}
	}
}

void
Macro_SegmentDescriptionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SegmentDescriptionMacro>\n";

	if (SegmentNumber) {
		stream << "\t\t";
		SegmentNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentNumber> not present\n";

	if (SegmentLabel) {
		stream << "\t\t";
		SegmentLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentLabel> not present\n";

	if (SegmentDescription) {
		stream << "\t\t";
		SegmentDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentDescription> not present\n";

	if (SegmentAlgorithmType) {
		stream << "\t\t";
		SegmentAlgorithmType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentAlgorithmType> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

	if (SegmentedPropertyCategoryCodeSequence)
		stream << "\t\tSequence <SegmentedPropertyCategoryCodeSequence>\n";
	else
		stream << "\t\tSequence <SegmentedPropertyCategoryCodeSequence> not present\n";
	if (SegmentedPropertyCategoryCodeSequence && strcmp(SegmentedPropertyCategoryCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SegmentedPropertyCategoryCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (SegmentedPropertyTypeCodeSequence)
		stream << "\t\tSequence <SegmentedPropertyTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <SegmentedPropertyTypeCodeSequence> not present\n";
	if (SegmentedPropertyTypeCodeSequence && strcmp(SegmentedPropertyTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SegmentedPropertyTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *SegmentedPropertyTypeModifierCodeSequence = (*list)[TagFromName(SegmentedPropertyTypeModifierCodeSequence)];
				stream << "\t";
				if (SegmentedPropertyTypeModifierCodeSequence)
					stream << "\t\tSequence <SegmentedPropertyTypeModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <SegmentedPropertyTypeModifierCodeSequence> not present\n";
				if (SegmentedPropertyTypeModifierCodeSequence && strcmp(SegmentedPropertyTypeModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SegmentedPropertyTypeModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (TrackingID) {
		stream << "\t\t";
		TrackingID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TrackingID> not present\n";

	if (TrackingUID) {
		stream << "\t\t";
		TrackingUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TrackingUID> not present\n";

	if (DefinitionSourceSequence)
		stream << "\t\tSequence <DefinitionSourceSequence>\n";
	else
		stream << "\t\tSequence <DefinitionSourceSequence> not present\n";
	if (DefinitionSourceSequence && strcmp(DefinitionSourceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DefinitionSourceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

				Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
				stream << "\t";
				if (ReferencedROINumber) {
					stream << "\t\t";
					ReferencedROINumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedROINumber> not present\n";

			}
		}
	}
}

void
Macro_SegmentationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SegmentationMacro>\n";

	if (SegmentIdentificationSequence)
		stream << "\t\tSequence <SegmentIdentificationSequence>\n";
	else
		stream << "\t\tSequence <SegmentIdentificationSequence> not present\n";
	if (SegmentIdentificationSequence && strcmp(SegmentIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SegmentIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
				stream << "\t";
				if (ReferencedSegmentNumber) {
					stream << "\t\t";
					ReferencedSegmentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

			}
		}
	}
}

void
Module_SurfaceSegmentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SurfaceSegmentation>\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (SegmentSequence)
		stream << "\t\tSequence <SegmentSequence>\n";
	else
		stream << "\t\tSequence <SegmentSequence> not present\n";
	if (SegmentSequence && strcmp(SegmentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SegmentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SegmentDescriptionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SegmentDescriptionMacro>\n";

				Attribute *SurfaceCount = (*list)[TagFromName(SurfaceCount)];
				stream << "\t";
				if (SurfaceCount) {
					stream << "\t\t";
					SurfaceCount->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SurfaceCount> not present\n";

	Attribute *ReferencedSurfaceSequence = (*list)[TagFromName(ReferencedSurfaceSequence)];
				stream << "\t";
				if (ReferencedSurfaceSequence)
					stream << "\t\tSequence <ReferencedSurfaceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSurfaceSequence> not present\n";
				if (ReferencedSurfaceSequence && strcmp(ReferencedSurfaceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSurfaceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedSurfaceNumber = (*list)[TagFromName(ReferencedSurfaceNumber)];
							stream << "\t\t";
							if (ReferencedSurfaceNumber) {
								stream << "\t\t";
								ReferencedSurfaceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSurfaceNumber> not present\n";

	Attribute *SegmentSurfaceGenerationAlgorithmIdentificationSequence = (*list)[TagFromName(SegmentSurfaceGenerationAlgorithmIdentificationSequence)];
							stream << "\t\t";
							if (SegmentSurfaceGenerationAlgorithmIdentificationSequence)
								stream << "\t\tSequence <SegmentSurfaceGenerationAlgorithmIdentificationSequence>\n";
							else
								stream << "\t\tSequence <SegmentSurfaceGenerationAlgorithmIdentificationSequence> not present\n";
							if (SegmentSurfaceGenerationAlgorithmIdentificationSequence && strcmp(SegmentSurfaceGenerationAlgorithmIdentificationSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=SegmentSurfaceGenerationAlgorithmIdentificationSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

									}
								}
							}
	Attribute *SegmentSurfaceSourceInstanceSequence = (*list)[TagFromName(SegmentSurfaceSourceInstanceSequence)];
							stream << "\t\t";
							if (SegmentSurfaceSourceInstanceSequence)
								stream << "\t\tSequence <SegmentSurfaceSourceInstanceSequence>\n";
							else
								stream << "\t\tSequence <SegmentSurfaceSourceInstanceSequence> not present\n";
							if (SegmentSurfaceSourceInstanceSequence && strcmp(SegmentSurfaceSourceInstanceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=SegmentSurfaceSourceInstanceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Macro_PointsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PointsMacro>\n";

	if (NumberOfSurfacePoints) {
		stream << "\t\t";
		NumberOfSurfacePoints->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfSurfacePoints> not present\n";

	if (PointCoordinatesData) {
		stream << "\t\t";
		PointCoordinatesData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PointCoordinatesData> not present\n";

	if (PointPositionAccuracy) {
		stream << "\t\t";
		PointPositionAccuracy->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PointPositionAccuracy> not present\n";

	if (MeanPointDistance) {
		stream << "\t\t";
		MeanPointDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MeanPointDistance> not present\n";

	if (MaximumPointDistance) {
		stream << "\t\t";
		MaximumPointDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumPointDistance> not present\n";

	if (PointsBoundingBoxCoordinates) {
		stream << "\t\t";
		PointsBoundingBoxCoordinates->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PointsBoundingBoxCoordinates> not present\n";

	if (AxisOfRotation) {
		stream << "\t\t";
		AxisOfRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxisOfRotation> not present\n";

	if (CenterOfRotation) {
		stream << "\t\t";
		CenterOfRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CenterOfRotation> not present\n";

}

void
Macro_VectorsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <VectorsMacro>\n";

	if (NumberOfVectors) {
		stream << "\t\t";
		NumberOfVectors->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfVectors> not present\n";

	if (VectorDimensionality) {
		stream << "\t\t";
		VectorDimensionality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VectorDimensionality> not present\n";

	if (VectorAccuracy) {
		stream << "\t\t";
		VectorAccuracy->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VectorAccuracy> not present\n";

	if (VectorCoordinateData) {
		stream << "\t\t";
		VectorCoordinateData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VectorCoordinateData> not present\n";

}

void
Macro_SurfaceMeshPrimitivesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SurfaceMeshPrimitivesMacro>\n";

	if (LongVertexPointIndexList) {
		stream << "\t\t";
		LongVertexPointIndexList->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongVertexPointIndexList> not present\n";

	if (LongEdgePointIndexList) {
		stream << "\t\t";
		LongEdgePointIndexList->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongEdgePointIndexList> not present\n";

	if (LongTrianglePointIndexList) {
		stream << "\t\t";
		LongTrianglePointIndexList->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LongTrianglePointIndexList> not present\n";

	if (TriangleStripSequence)
		stream << "\t\tSequence <TriangleStripSequence>\n";
	else
		stream << "\t\tSequence <TriangleStripSequence> not present\n";
	if (TriangleStripSequence && strcmp(TriangleStripSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TriangleStripSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LongPrimitivePointIndexList = (*list)[TagFromName(LongPrimitivePointIndexList)];
				stream << "\t";
				if (LongPrimitivePointIndexList) {
					stream << "\t\t";
					LongPrimitivePointIndexList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LongPrimitivePointIndexList> not present\n";

			}
		}
	}
	if (TriangleFanSequence)
		stream << "\t\tSequence <TriangleFanSequence>\n";
	else
		stream << "\t\tSequence <TriangleFanSequence> not present\n";
	if (TriangleFanSequence && strcmp(TriangleFanSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TriangleFanSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LongPrimitivePointIndexList = (*list)[TagFromName(LongPrimitivePointIndexList)];
				stream << "\t";
				if (LongPrimitivePointIndexList) {
					stream << "\t\t";
					LongPrimitivePointIndexList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LongPrimitivePointIndexList> not present\n";

			}
		}
	}
	if (LineSequence)
		stream << "\t\tSequence <LineSequence>\n";
	else
		stream << "\t\tSequence <LineSequence> not present\n";
	if (LineSequence && strcmp(LineSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LineSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LongPrimitivePointIndexList = (*list)[TagFromName(LongPrimitivePointIndexList)];
				stream << "\t";
				if (LongPrimitivePointIndexList) {
					stream << "\t\t";
					LongPrimitivePointIndexList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LongPrimitivePointIndexList> not present\n";

			}
		}
	}
	if (FacetSequence)
		stream << "\t\tSequence <FacetSequence>\n";
	else
		stream << "\t\tSequence <FacetSequence> not present\n";
	if (FacetSequence && strcmp(FacetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FacetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LongPrimitivePointIndexList = (*list)[TagFromName(LongPrimitivePointIndexList)];
				stream << "\t";
				if (LongPrimitivePointIndexList) {
					stream << "\t\t";
					LongPrimitivePointIndexList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LongPrimitivePointIndexList> not present\n";

			}
		}
	}
}

void
Module_SurfaceMesh::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SurfaceMesh>\n";

	if (NumberOfSurfaces) {
		stream << "\t\t";
		NumberOfSurfaces->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfSurfaces> not present\n";

	if (SurfaceSequence)
		stream << "\t\tSequence <SurfaceSequence>\n";
	else
		stream << "\t\tSequence <SurfaceSequence> not present\n";
	if (SurfaceSequence && strcmp(SurfaceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SurfaceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SurfaceNumber = (*list)[TagFromName(SurfaceNumber)];
				stream << "\t";
				if (SurfaceNumber) {
					stream << "\t\t";
					SurfaceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SurfaceNumber> not present\n";

				Attribute *SurfaceComments = (*list)[TagFromName(SurfaceComments)];
				stream << "\t";
				if (SurfaceComments) {
					stream << "\t\t";
					SurfaceComments->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SurfaceComments> not present\n";

	Attribute *SegmentedPropertyCategoryCodeSequence = (*list)[TagFromName(SegmentedPropertyCategoryCodeSequence)];
				stream << "\t";
				if (SegmentedPropertyCategoryCodeSequence)
					stream << "\t\tSequence <SegmentedPropertyCategoryCodeSequence>\n";
				else
					stream << "\t\tSequence <SegmentedPropertyCategoryCodeSequence> not present\n";
				if (SegmentedPropertyCategoryCodeSequence && strcmp(SegmentedPropertyCategoryCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SegmentedPropertyCategoryCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *SegmentedPropertyTypeCodeSequence = (*list)[TagFromName(SegmentedPropertyTypeCodeSequence)];
				stream << "\t";
				if (SegmentedPropertyTypeCodeSequence)
					stream << "\t\tSequence <SegmentedPropertyTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <SegmentedPropertyTypeCodeSequence> not present\n";
				if (SegmentedPropertyTypeCodeSequence && strcmp(SegmentedPropertyTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SegmentedPropertyTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *SurfaceProcessing = (*list)[TagFromName(SurfaceProcessing)];
				stream << "\t";
				if (SurfaceProcessing) {
					stream << "\t\t";
					SurfaceProcessing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SurfaceProcessing> not present\n";

				Attribute *SurfaceProcessingRatio = (*list)[TagFromName(SurfaceProcessingRatio)];
				stream << "\t";
				if (SurfaceProcessingRatio) {
					stream << "\t\t";
					SurfaceProcessingRatio->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SurfaceProcessingRatio> not present\n";

				Attribute *SurfaceProcessingDescription = (*list)[TagFromName(SurfaceProcessingDescription)];
				stream << "\t";
				if (SurfaceProcessingDescription) {
					stream << "\t\t";
					SurfaceProcessingDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SurfaceProcessingDescription> not present\n";

	Attribute *SurfaceProcessingAlgorithmIdentificationSequence = (*list)[TagFromName(SurfaceProcessingAlgorithmIdentificationSequence)];
				stream << "\t";
				if (SurfaceProcessingAlgorithmIdentificationSequence)
					stream << "\t\tSequence <SurfaceProcessingAlgorithmIdentificationSequence>\n";
				else
					stream << "\t\tSequence <SurfaceProcessingAlgorithmIdentificationSequence> not present\n";
				if (SurfaceProcessingAlgorithmIdentificationSequence && strcmp(SurfaceProcessingAlgorithmIdentificationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SurfaceProcessingAlgorithmIdentificationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

						}
					}
				}
				Attribute *RecommendedDisplayGrayscaleValue = (*list)[TagFromName(RecommendedDisplayGrayscaleValue)];
				stream << "\t";
				if (RecommendedDisplayGrayscaleValue) {
					stream << "\t\t";
					RecommendedDisplayGrayscaleValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayGrayscaleValue> not present\n";

				Attribute *RecommendedDisplayCIELabValue = (*list)[TagFromName(RecommendedDisplayCIELabValue)];
				stream << "\t";
				if (RecommendedDisplayCIELabValue) {
					stream << "\t\t";
					RecommendedDisplayCIELabValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayCIELabValue> not present\n";

				Attribute *RecommendedPresentationOpacity = (*list)[TagFromName(RecommendedPresentationOpacity)];
				stream << "\t";
				if (RecommendedPresentationOpacity) {
					stream << "\t\t";
					RecommendedPresentationOpacity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedPresentationOpacity> not present\n";

				Attribute *RecommendedPresentationType = (*list)[TagFromName(RecommendedPresentationType)];
				stream << "\t";
				if (RecommendedPresentationType) {
					stream << "\t\t";
					RecommendedPresentationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedPresentationType> not present\n";

				Attribute *RecommendedPointRadius = (*list)[TagFromName(RecommendedPointRadius)];
				stream << "\t";
				if (RecommendedPointRadius) {
					stream << "\t\t";
					RecommendedPointRadius->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedPointRadius> not present\n";

				Attribute *RecommendedLineThickness = (*list)[TagFromName(RecommendedLineThickness)];
				stream << "\t";
				if (RecommendedLineThickness) {
					stream << "\t\t";
					RecommendedLineThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedLineThickness> not present\n";

				Attribute *FiniteVolume = (*list)[TagFromName(FiniteVolume)];
				stream << "\t";
				if (FiniteVolume) {
					stream << "\t\t";
					FiniteVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FiniteVolume> not present\n";

				Attribute *Manifold = (*list)[TagFromName(Manifold)];
				stream << "\t";
				if (Manifold) {
					stream << "\t\t";
					Manifold->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manifold> not present\n";

	Attribute *SurfacePointsSequence = (*list)[TagFromName(SurfacePointsSequence)];
				stream << "\t";
				if (SurfacePointsSequence)
					stream << "\t\tSequence <SurfacePointsSequence>\n";
				else
					stream << "\t\tSequence <SurfacePointsSequence> not present\n";
				if (SurfacePointsSequence && strcmp(SurfacePointsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SurfacePointsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_PointsMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <PointsMacro>\n";

						}
					}
				}
	Attribute *SurfacePointsNormalsSequence = (*list)[TagFromName(SurfacePointsNormalsSequence)];
				stream << "\t";
				if (SurfacePointsNormalsSequence)
					stream << "\t\tSequence <SurfacePointsNormalsSequence>\n";
				else
					stream << "\t\tSequence <SurfacePointsNormalsSequence> not present\n";
				if (SurfacePointsNormalsSequence && strcmp(SurfacePointsNormalsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SurfacePointsNormalsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_VectorsMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <VectorsMacro>\n";

						}
					}
				}
	Attribute *SurfaceMeshPrimitivesSequence = (*list)[TagFromName(SurfaceMeshPrimitivesSequence)];
				stream << "\t";
				if (SurfaceMeshPrimitivesSequence)
					stream << "\t\tSequence <SurfaceMeshPrimitivesSequence>\n";
				else
					stream << "\t\tSequence <SurfaceMeshPrimitivesSequence> not present\n";
				if (SurfaceMeshPrimitivesSequence && strcmp(SurfaceMeshPrimitivesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SurfaceMeshPrimitivesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SurfaceMeshPrimitivesMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SurfaceMeshPrimitivesMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForSegmentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForSegmentation>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_SegmentationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SegmentationMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_SegmentationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SegmentationMacro>\n";

			}
		}
	}
}

void
Module_SpatialRegistrationSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SpatialRegistrationSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_SpatialRegistration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SpatialRegistration>\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (RegistrationSequence)
		stream << "\t\tSequence <RegistrationSequence>\n";
	else
		stream << "\t\tSequence <RegistrationSequence> not present\n";
	if (RegistrationSequence && strcmp(RegistrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RegistrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameOfReferenceUID = (*list)[TagFromName(FrameOfReferenceUID)];
				stream << "\t";
				if (FrameOfReferenceUID) {
					stream << "\t\t";
					FrameOfReferenceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameOfReferenceUID> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *MatrixRegistrationSequence = (*list)[TagFromName(MatrixRegistrationSequence)];
				stream << "\t";
				if (MatrixRegistrationSequence)
					stream << "\t\tSequence <MatrixRegistrationSequence>\n";
				else
					stream << "\t\tSequence <MatrixRegistrationSequence> not present\n";
				if (MatrixRegistrationSequence && strcmp(MatrixRegistrationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MatrixRegistrationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FrameOfReferenceTransformationComment = (*list)[TagFromName(FrameOfReferenceTransformationComment)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationComment) {
								stream << "\t\t";
								FrameOfReferenceTransformationComment->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationComment> not present\n";

	Attribute *RegistrationTypeCodeSequence = (*list)[TagFromName(RegistrationTypeCodeSequence)];
							stream << "\t\t";
							if (RegistrationTypeCodeSequence)
								stream << "\t\tSequence <RegistrationTypeCodeSequence>\n";
							else
								stream << "\t\tSequence <RegistrationTypeCodeSequence> not present\n";
							if (RegistrationTypeCodeSequence && strcmp(RegistrationTypeCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RegistrationTypeCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *MatrixSequence = (*list)[TagFromName(MatrixSequence)];
							stream << "\t\t";
							if (MatrixSequence)
								stream << "\t\tSequence <MatrixSequence>\n";
							else
								stream << "\t\tSequence <MatrixSequence> not present\n";
							if (MatrixSequence && strcmp(MatrixSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=MatrixSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *FrameOfReferenceTransformationMatrix = (*list)[TagFromName(FrameOfReferenceTransformationMatrix)];
										stream << "\t\t\t";
										if (FrameOfReferenceTransformationMatrix) {
											stream << "\t\t";
											FrameOfReferenceTransformationMatrix->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <FrameOfReferenceTransformationMatrix> not present\n";

										Attribute *FrameOfReferenceTransformationMatrixType = (*list)[TagFromName(FrameOfReferenceTransformationMatrixType)];
										stream << "\t\t\t";
										if (FrameOfReferenceTransformationMatrixType) {
											stream << "\t\t";
											FrameOfReferenceTransformationMatrixType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <FrameOfReferenceTransformationMatrixType> not present\n";

									}
								}
							}
						}
					}
				}
	Attribute *UsedFiducialsSequence = (*list)[TagFromName(UsedFiducialsSequence)];
				stream << "\t";
				if (UsedFiducialsSequence)
					stream << "\t\tSequence <UsedFiducialsSequence>\n";
				else
					stream << "\t\tSequence <UsedFiducialsSequence> not present\n";
				if (UsedFiducialsSequence && strcmp(UsedFiducialsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=UsedFiducialsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *FiducialUID = (*list)[TagFromName(FiducialUID)];
							stream << "\t\t";
							if (FiducialUID) {
								stream << "\t\t";
								FiducialUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FiducialUID> not present\n";

						}
					}
				}
	Attribute *UsedSegmentsSequence = (*list)[TagFromName(UsedSegmentsSequence)];
				stream << "\t";
				if (UsedSegmentsSequence)
					stream << "\t\tSequence <UsedSegmentsSequence>\n";
				else
					stream << "\t\tSequence <UsedSegmentsSequence> not present\n";
				if (UsedSegmentsSequence && strcmp(UsedSegmentsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=UsedSegmentsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
							stream << "\t\t";
							if (ReferencedSegmentNumber) {
								stream << "\t\t";
								ReferencedSegmentNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_DeformableSpatialRegistration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DeformableSpatialRegistration>\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (DeformableRegistrationSequence)
		stream << "\t\tSequence <DeformableRegistrationSequence>\n";
	else
		stream << "\t\tSequence <DeformableRegistrationSequence> not present\n";
	if (DeformableRegistrationSequence && strcmp(DeformableRegistrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DeformableRegistrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SourceFrameOfReferenceUID = (*list)[TagFromName(SourceFrameOfReferenceUID)];
				stream << "\t";
				if (SourceFrameOfReferenceUID) {
					stream << "\t\t";
					SourceFrameOfReferenceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceFrameOfReferenceUID> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *FrameOfReferenceTransformationComment = (*list)[TagFromName(FrameOfReferenceTransformationComment)];
				stream << "\t";
				if (FrameOfReferenceTransformationComment) {
					stream << "\t\t";
					FrameOfReferenceTransformationComment->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameOfReferenceTransformationComment> not present\n";

	Attribute *RegistrationTypeCodeSequence = (*list)[TagFromName(RegistrationTypeCodeSequence)];
				stream << "\t";
				if (RegistrationTypeCodeSequence)
					stream << "\t\tSequence <RegistrationTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <RegistrationTypeCodeSequence> not present\n";
				if (RegistrationTypeCodeSequence && strcmp(RegistrationTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RegistrationTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *PreDeformationMatrixRegistrationSequence = (*list)[TagFromName(PreDeformationMatrixRegistrationSequence)];
				stream << "\t";
				if (PreDeformationMatrixRegistrationSequence)
					stream << "\t\tSequence <PreDeformationMatrixRegistrationSequence>\n";
				else
					stream << "\t\tSequence <PreDeformationMatrixRegistrationSequence> not present\n";
				if (PreDeformationMatrixRegistrationSequence && strcmp(PreDeformationMatrixRegistrationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PreDeformationMatrixRegistrationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FrameOfReferenceTransformationMatrix = (*list)[TagFromName(FrameOfReferenceTransformationMatrix)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationMatrix) {
								stream << "\t\t";
								FrameOfReferenceTransformationMatrix->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationMatrix> not present\n";

							Attribute *FrameOfReferenceTransformationMatrixType = (*list)[TagFromName(FrameOfReferenceTransformationMatrixType)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationMatrixType) {
								stream << "\t\t";
								FrameOfReferenceTransformationMatrixType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationMatrixType> not present\n";

						}
					}
				}
	Attribute *PostDeformationMatrixRegistrationSequence = (*list)[TagFromName(PostDeformationMatrixRegistrationSequence)];
				stream << "\t";
				if (PostDeformationMatrixRegistrationSequence)
					stream << "\t\tSequence <PostDeformationMatrixRegistrationSequence>\n";
				else
					stream << "\t\tSequence <PostDeformationMatrixRegistrationSequence> not present\n";
				if (PostDeformationMatrixRegistrationSequence && strcmp(PostDeformationMatrixRegistrationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PostDeformationMatrixRegistrationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FrameOfReferenceTransformationMatrix = (*list)[TagFromName(FrameOfReferenceTransformationMatrix)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationMatrix) {
								stream << "\t\t";
								FrameOfReferenceTransformationMatrix->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationMatrix> not present\n";

							Attribute *FrameOfReferenceTransformationMatrixType = (*list)[TagFromName(FrameOfReferenceTransformationMatrixType)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationMatrixType) {
								stream << "\t\t";
								FrameOfReferenceTransformationMatrixType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationMatrixType> not present\n";

						}
					}
				}
	Attribute *DeformableRegistrationGridSequence = (*list)[TagFromName(DeformableRegistrationGridSequence)];
				stream << "\t";
				if (DeformableRegistrationGridSequence)
					stream << "\t\tSequence <DeformableRegistrationGridSequence>\n";
				else
					stream << "\t\tSequence <DeformableRegistrationGridSequence> not present\n";
				if (DeformableRegistrationGridSequence && strcmp(DeformableRegistrationGridSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DeformableRegistrationGridSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ImageOrientationPatient = (*list)[TagFromName(ImageOrientationPatient)];
							stream << "\t\t";
							if (ImageOrientationPatient) {
								stream << "\t\t";
								ImageOrientationPatient->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageOrientationPatient> not present\n";

							Attribute *ImagePositionPatient = (*list)[TagFromName(ImagePositionPatient)];
							stream << "\t\t";
							if (ImagePositionPatient) {
								stream << "\t\t";
								ImagePositionPatient->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImagePositionPatient> not present\n";

							Attribute *GridDimensions = (*list)[TagFromName(GridDimensions)];
							stream << "\t\t";
							if (GridDimensions) {
								stream << "\t\t";
								GridDimensions->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GridDimensions> not present\n";

							Attribute *GridResolution = (*list)[TagFromName(GridResolution)];
							stream << "\t\t";
							if (GridResolution) {
								stream << "\t\t";
								GridResolution->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GridResolution> not present\n";

							Attribute *VectorGridData = (*list)[TagFromName(VectorGridData)];
							stream << "\t\t";
							if (VectorGridData) {
								stream << "\t\t";
								VectorGridData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <VectorGridData> not present\n";

						}
					}
				}
	Attribute *UsedFiducialsSequence = (*list)[TagFromName(UsedFiducialsSequence)];
				stream << "\t";
				if (UsedFiducialsSequence)
					stream << "\t\tSequence <UsedFiducialsSequence>\n";
				else
					stream << "\t\tSequence <UsedFiducialsSequence> not present\n";
				if (UsedFiducialsSequence && strcmp(UsedFiducialsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=UsedFiducialsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *FiducialUID = (*list)[TagFromName(FiducialUID)];
							stream << "\t\t";
							if (FiducialUID) {
								stream << "\t\t";
								FiducialUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FiducialUID> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_SpatialFiducialsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SpatialFiducialsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_SpatialFiducials::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SpatialFiducials>\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (FiducialSetSequence)
		stream << "\t\tSequence <FiducialSetSequence>\n";
	else
		stream << "\t\tSequence <FiducialSetSequence> not present\n";
	if (FiducialSetSequence && strcmp(FiducialSetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FiducialSetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameOfReferenceUID = (*list)[TagFromName(FrameOfReferenceUID)];
				stream << "\t";
				if (FrameOfReferenceUID) {
					stream << "\t\t";
					FrameOfReferenceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameOfReferenceUID> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *FiducialSequence = (*list)[TagFromName(FiducialSequence)];
				stream << "\t";
				if (FiducialSequence)
					stream << "\t\tSequence <FiducialSequence>\n";
				else
					stream << "\t\tSequence <FiducialSequence> not present\n";
				if (FiducialSequence && strcmp(FiducialSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=FiducialSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FiducialIdentifier = (*list)[TagFromName(FiducialIdentifier)];
							stream << "\t\t";
							if (FiducialIdentifier) {
								stream << "\t\t";
								FiducialIdentifier->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FiducialIdentifier> not present\n";

	Attribute *FiducialsPropertyCategoryCodeSequence = (*list)[TagFromName(FiducialsPropertyCategoryCodeSequence)];
							stream << "\t\t";
							if (FiducialsPropertyCategoryCodeSequence)
								stream << "\t\tSequence <FiducialsPropertyCategoryCodeSequence>\n";
							else
								stream << "\t\tSequence <FiducialsPropertyCategoryCodeSequence> not present\n";
							if (FiducialsPropertyCategoryCodeSequence && strcmp(FiducialsPropertyCategoryCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=FiducialsPropertyCategoryCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *FiducialIdentifierCodeSequence = (*list)[TagFromName(FiducialIdentifierCodeSequence)];
							stream << "\t\t";
							if (FiducialIdentifierCodeSequence)
								stream << "\t\tSequence <FiducialIdentifierCodeSequence>\n";
							else
								stream << "\t\tSequence <FiducialIdentifierCodeSequence> not present\n";
							if (FiducialIdentifierCodeSequence && strcmp(FiducialIdentifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=FiducialIdentifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
							Attribute *FiducialUID = (*list)[TagFromName(FiducialUID)];
							stream << "\t\t";
							if (FiducialUID) {
								stream << "\t\t";
								FiducialUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FiducialUID> not present\n";

							Attribute *FiducialDescription = (*list)[TagFromName(FiducialDescription)];
							stream << "\t\t";
							if (FiducialDescription) {
								stream << "\t\t";
								FiducialDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FiducialDescription> not present\n";

							Attribute *ShapeType = (*list)[TagFromName(ShapeType)];
							stream << "\t\t";
							if (ShapeType) {
								stream << "\t\t";
								ShapeType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ShapeType> not present\n";

							Attribute *NumberOfContourPoints = (*list)[TagFromName(NumberOfContourPoints)];
							stream << "\t\t";
							if (NumberOfContourPoints) {
								stream << "\t\t";
								NumberOfContourPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfContourPoints> not present\n";

							Attribute *ContourData = (*list)[TagFromName(ContourData)];
							stream << "\t\t";
							if (ContourData) {
								stream << "\t\t";
								ContourData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourData> not present\n";

							Attribute *ContourUncertaintyRadius = (*list)[TagFromName(ContourUncertaintyRadius)];
							stream << "\t\t";
							if (ContourUncertaintyRadius) {
								stream << "\t\t";
								ContourUncertaintyRadius->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourUncertaintyRadius> not present\n";

	Attribute *GraphicCoordinatesDataSequence = (*list)[TagFromName(GraphicCoordinatesDataSequence)];
							stream << "\t\t";
							if (GraphicCoordinatesDataSequence)
								stream << "\t\tSequence <GraphicCoordinatesDataSequence>\n";
							else
								stream << "\t\tSequence <GraphicCoordinatesDataSequence> not present\n";
							if (GraphicCoordinatesDataSequence && strcmp(GraphicCoordinatesDataSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=GraphicCoordinatesDataSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *GraphicData = (*list)[TagFromName(GraphicData)];
										stream << "\t\t\t";
										if (GraphicData) {
											stream << "\t\t";
											GraphicData->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GraphicData> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
										stream << "\t\t\t";
										if (ReferencedImageSequence)
											stream << "\t\tSequence <ReferencedImageSequence>\n";
										else
											stream << "\t\tSequence <ReferencedImageSequence> not present\n";
										if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
																stream << "\t\t\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
																stream << "\t\t\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

												}
											}
										}
									}
								}
							}
	Attribute *DefinitionSourceSequence = (*list)[TagFromName(DefinitionSourceSequence)];
							stream << "\t\t";
							if (DefinitionSourceSequence)
								stream << "\t\tSequence <DefinitionSourceSequence>\n";
							else
								stream << "\t\tSequence <DefinitionSourceSequence> not present\n";
							if (DefinitionSourceSequence && strcmp(DefinitionSourceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=DefinitionSourceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

										Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
										stream << "\t\t\t";
										if (ReferencedROINumber) {
											stream << "\t\t";
											ReferencedROINumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedROINumber> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_EncapsulatedDocumentSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EncapsulatedDocumentSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ProtocolName) {
		stream << "\t\t";
		ProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProtocolName> not present\n";

	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (SeriesDescriptionCodeSequence)
		stream << "\t\tSequence <SeriesDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <SeriesDescriptionCodeSequence> not present\n";
	if (SeriesDescriptionCodeSequence && strcmp(SeriesDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SeriesDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (RequestAttributesSequence)
		stream << "\t\tSequence <RequestAttributesSequence>\n";
	else
		stream << "\t\tSequence <RequestAttributesSequence> not present\n";
	if (RequestAttributesSequence && strcmp(RequestAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RequestAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RequestAttributesMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_PerformedProcedureStepSummaryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PerformedProcedureStepSummaryMacro>\n";

}

void
Module_EncapsulatedDocument::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EncapsulatedDocument>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (SourceInstanceSequence)
		stream << "\t\tSequence <SourceInstanceSequence>\n";
	else
		stream << "\t\tSequence <SourceInstanceSequence> not present\n";
	if (SourceInstanceSequence && strcmp(SourceInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (DocumentTitle) {
		stream << "\t\t";
		DocumentTitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DocumentTitle> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (VerificationFlag) {
		stream << "\t\t";
		VerificationFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VerificationFlag> not present\n";

	if (HL7InstanceIdentifier) {
		stream << "\t\t";
		HL7InstanceIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HL7InstanceIdentifier> not present\n";

	if (PredecessorDocumentsSequence)
		stream << "\t\tSequence <PredecessorDocumentsSequence>\n";
	else
		stream << "\t\tSequence <PredecessorDocumentsSequence> not present\n";
	if (PredecessorDocumentsSequence && strcmp(PredecessorDocumentsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PredecessorDocumentsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (IdenticalDocumentsSequence)
		stream << "\t\tSequence <IdenticalDocumentsSequence>\n";
	else
		stream << "\t\tSequence <IdenticalDocumentsSequence> not present\n";
	if (IdenticalDocumentsSequence && strcmp(IdenticalDocumentsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IdenticalDocumentsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (MIMETypeOfEncapsulatedDocument) {
		stream << "\t\t";
		MIMETypeOfEncapsulatedDocument->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MIMETypeOfEncapsulatedDocument> not present\n";

	if (ListOfMIMETypes) {
		stream << "\t\t";
		ListOfMIMETypes->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ListOfMIMETypes> not present\n";

	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (EncapsulatedDocument) {
		stream << "\t\t";
		EncapsulatedDocument->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EncapsulatedDocument> not present\n";

	if (EncapsulatedDocumentLength) {
		stream << "\t\t";
		EncapsulatedDocumentLength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EncapsulatedDocumentLength> not present\n";

}

void
Module_EncapsulatedDocumentPDFPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EncapsulatedDocumentPDFPseudo>\n";

	if (MIMETypeOfEncapsulatedDocument) {
		stream << "\t\t";
		MIMETypeOfEncapsulatedDocument->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MIMETypeOfEncapsulatedDocument> not present\n";

}

void
Module_EncapsulatedDocumentCDAPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EncapsulatedDocumentCDAPseudo>\n";

	if (MIMETypeOfEncapsulatedDocument) {
		stream << "\t\t";
		MIMETypeOfEncapsulatedDocument->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MIMETypeOfEncapsulatedDocument> not present\n";

}

void
Module_EncapsulatedDocumentSTLPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EncapsulatedDocumentSTLPseudo>\n";

	if (MIMETypeOfEncapsulatedDocument) {
		stream << "\t\t";
		MIMETypeOfEncapsulatedDocument->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MIMETypeOfEncapsulatedDocument> not present\n";

}

void
Module_EncapsulatedDocumentSTLSeriesPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EncapsulatedDocumentSTLSeriesPseudo>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_CheckSingleFramePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CheckSingleFramePseudo>\n";

	if (NumberOfFrames) {
		stream << "\t\t";
		NumberOfFrames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFrames> not present\n";

}

void
Module_RealWorldValueMappingSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RealWorldValueMappingSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_RealWorldValueMapping::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RealWorldValueMapping>\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (ReferencedImageRealWorldValueMappingSequence)
		stream << "\t\tSequence <ReferencedImageRealWorldValueMappingSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageRealWorldValueMappingSequence> not present\n";
	if (ReferencedImageRealWorldValueMappingSequence && strcmp(ReferencedImageRealWorldValueMappingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageRealWorldValueMappingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_IntravascularOCTSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntravascularOCTSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (PresentationIntentType) {
		stream << "\t\t";
		PresentationIntentType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationIntentType> not present\n";

}

void
Module_IntravascularOCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntravascularOCTImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (PixelPresentation) {
		stream << "\t\t";
		PixelPresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPresentation> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (RecommendedDisplayFrameRate) {
		stream << "\t\t";
		RecommendedDisplayFrameRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecommendedDisplayFrameRate> not present\n";

	if (InterpolationType) {
		stream << "\t\t";
		InterpolationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InterpolationType> not present\n";

	if (ReferencedColorPaletteInstanceUID) {
		stream << "\t\t";
		ReferencedColorPaletteInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedColorPaletteInstanceUID> not present\n";

}

void
Module_IntravascularOCTAcquisitionParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntravascularOCTAcquisitionParameters>\n";

	if (OCTFocalDistance) {
		stream << "\t\t";
		OCTFocalDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OCTFocalDistance> not present\n";

	if (BeamSpotSize) {
		stream << "\t\t";
		BeamSpotSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BeamSpotSize> not present\n";

	if (EffectiveRefractiveIndex) {
		stream << "\t\t";
		EffectiveRefractiveIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EffectiveRefractiveIndex> not present\n";

	if (OCTAcquisitionDomain) {
		stream << "\t\t";
		OCTAcquisitionDomain->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OCTAcquisitionDomain> not present\n";

	if (OCTOpticalCenterWavelength) {
		stream << "\t\t";
		OCTOpticalCenterWavelength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OCTOpticalCenterWavelength> not present\n";

	if (AxialResolution) {
		stream << "\t\t";
		AxialResolution->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxialResolution> not present\n";

	if (RangingDepth) {
		stream << "\t\t";
		RangingDepth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RangingDepth> not present\n";

	if (ALineRate) {
		stream << "\t\t";
		ALineRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ALineRate> not present\n";

	if (ALinesPerFrame) {
		stream << "\t\t";
		ALinesPerFrame->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ALinesPerFrame> not present\n";

}

void
Module_IntravascularImageAcquisitionParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntravascularImageAcquisitionParameters>\n";

	if (IVUSAcquisition) {
		stream << "\t\t";
		IVUSAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSAcquisition> not present\n";

	if (IVUSPullbackRate) {
		stream << "\t\t";
		IVUSPullbackRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackRate> not present\n";

	if (IVUSPullbackStartFrameNumber) {
		stream << "\t\t";
		IVUSPullbackStartFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackStartFrameNumber> not present\n";

	if (IVUSPullbackStopFrameNumber) {
		stream << "\t\t";
		IVUSPullbackStopFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackStopFrameNumber> not present\n";

	if (CatheterDirectionOfRotation) {
		stream << "\t\t";
		CatheterDirectionOfRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CatheterDirectionOfRotation> not present\n";

	if (CatheterRotationalRate) {
		stream << "\t\t";
		CatheterRotationalRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CatheterRotationalRate> not present\n";

	if (ModeOfPercutaneousAccessSequence)
		stream << "\t\tSequence <ModeOfPercutaneousAccessSequence>\n";
	else
		stream << "\t\tSequence <ModeOfPercutaneousAccessSequence> not present\n";
	if (ModeOfPercutaneousAccessSequence && strcmp(ModeOfPercutaneousAccessSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ModeOfPercutaneousAccessSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Module_IntravascularOCTProcessingParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntravascularOCTProcessingParameters>\n";

	if (OCTZOffsetApplied) {
		stream << "\t\t";
		OCTZOffsetApplied->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OCTZOffsetApplied> not present\n";

	if (RefractiveIndexApplied) {
		stream << "\t\t";
		RefractiveIndexApplied->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RefractiveIndexApplied> not present\n";

	if (ALinePixelSpacing) {
		stream << "\t\t";
		ALinePixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ALinePixelSpacing> not present\n";

	if (PixelIntensityRelationship) {
		stream << "\t\t";
		PixelIntensityRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelIntensityRelationship> not present\n";

	if (FirstALineLocation) {
		stream << "\t\t";
		FirstALineLocation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FirstALineLocation> not present\n";

}

void
Macro_IntravascularOCTFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IntravascularOCTFrameTypeMacro>\n";

	if (IntravascularOCTFrameTypeSequence)
		stream << "\t\tSequence <IntravascularOCTFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <IntravascularOCTFrameTypeSequence> not present\n";
	if (IntravascularOCTFrameTypeSequence && strcmp(IntravascularOCTFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IntravascularOCTFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

			}
		}
	}
}

void
Macro_IntravascularFrameContentMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IntravascularFrameContentMacro>\n";

	if (IntravascularFrameContentSequence)
		stream << "\t\tSequence <IntravascularFrameContentSequence>\n";
	else
		stream << "\t\tSequence <IntravascularFrameContentSequence> not present\n";
	if (IntravascularFrameContentSequence && strcmp(IntravascularFrameContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IntravascularFrameContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *IntravascularLongitudinalDistance = (*list)[TagFromName(IntravascularLongitudinalDistance)];
				stream << "\t";
				if (IntravascularLongitudinalDistance) {
					stream << "\t\t";
					IntravascularLongitudinalDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IntravascularLongitudinalDistance> not present\n";

				Attribute *SeamLineLocation = (*list)[TagFromName(SeamLineLocation)];
				stream << "\t";
				if (SeamLineLocation) {
					stream << "\t\t";
					SeamLineLocation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeamLineLocation> not present\n";

			}
		}
	}
}

void
Macro_IntravascularOCTFrameContentMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IntravascularOCTFrameContentMacro>\n";

	if (IntravascularOCTFrameContentSequence)
		stream << "\t\tSequence <IntravascularOCTFrameContentSequence>\n";
	else
		stream << "\t\tSequence <IntravascularOCTFrameContentSequence> not present\n";
	if (IntravascularOCTFrameContentSequence && strcmp(IntravascularOCTFrameContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IntravascularOCTFrameContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OCTZOffsetCorrection = (*list)[TagFromName(OCTZOffsetCorrection)];
				stream << "\t";
				if (OCTZOffsetCorrection) {
					stream << "\t\t";
					OCTZOffsetCorrection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OCTZOffsetCorrection> not present\n";

				Attribute *SeamLineIndex = (*list)[TagFromName(SeamLineIndex)];
				stream << "\t";
				if (SeamLineIndex) {
					stream << "\t\t";
					SeamLineIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeamLineIndex> not present\n";

				Attribute *NumberOfPaddedALines = (*list)[TagFromName(NumberOfPaddedALines)];
				stream << "\t";
				if (NumberOfPaddedALines) {
					stream << "\t\t";
					NumberOfPaddedALines->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfPaddedALines> not present\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForIVOCTImageForPresentation>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_IntravascularOCTFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularOCTFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_IntravascularFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularFrameContentMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_IntravascularOCTFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularOCTFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_IntravascularFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularFrameContentMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForIVOCTImageForProcessing>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_IntravascularOCTFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularOCTFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_IntravascularFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularFrameContentMacro>\n";

							stream << "\t\t";
	Macro_IntravascularOCTFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularOCTFrameContentMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_IntravascularOCTFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularOCTFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_IntravascularFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularFrameContentMacro>\n";

							stream << "\t\t";
	Macro_IntravascularOCTFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntravascularOCTFrameContentMacro>\n";

			}
		}
	}
}

void
Module_ParametricMapSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ParametricMapSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_ParametricMapImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ParametricMapImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (PixelPresentation) {
		stream << "\t\t";
		PixelPresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPresentation> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (PaletteColorLookupTableUID) {
		stream << "\t\t";
		PaletteColorLookupTableUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PaletteColorLookupTableUID> not present\n";

	if (ICCProfile) {
		stream << "\t\t";
		ICCProfile->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ICCProfile> not present\n";

	if (ColorSpace) {
		stream << "\t\t";
		ColorSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColorSpace> not present\n";

}

void
Module_MultiFrameFunctionalGroupsForParametricMap::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForParametricMap>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_IdentityPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentityPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTWithLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTWithLUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_ParametricMapFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ParametricMapFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_StoredValueColorRangeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <StoredValueColorRangeMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_IdentityPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentityPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTWithLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTWithLUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_ParametricMapFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ParametricMapFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_StoredValueColorRangeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <StoredValueColorRangeMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

			}
		}
	}
}

void
Macro_ParametricMapFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ParametricMapFrameTypeMacro>\n";

	if (ParametricMapFrameTypeSequence)
		stream << "\t\tSequence <ParametricMapFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <ParametricMapFrameTypeSequence> not present\n";
	if (ParametricMapFrameTypeSequence && strcmp(ParametricMapFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ParametricMapFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

			}
		}
	}
}

void
Macro_StoredValueColorRangeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <StoredValueColorRangeMacro>\n";

	if (StoredValueColorRangeSequence)
		stream << "\t\tSequence <StoredValueColorRangeSequence>\n";
	else
		stream << "\t\tSequence <StoredValueColorRangeSequence> not present\n";
	if (StoredValueColorRangeSequence && strcmp(StoredValueColorRangeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StoredValueColorRangeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MinimumStoredValueMapped = (*list)[TagFromName(MinimumStoredValueMapped)];
				stream << "\t";
				if (MinimumStoredValueMapped) {
					stream << "\t\t";
					MinimumStoredValueMapped->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MinimumStoredValueMapped> not present\n";

				Attribute *MaximumStoredValueMapped = (*list)[TagFromName(MaximumStoredValueMapped)];
				stream << "\t";
				if (MaximumStoredValueMapped) {
					stream << "\t\t";
					MaximumStoredValueMapped->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaximumStoredValueMapped> not present\n";

			}
		}
	}
}

void
Module_Manufacturing3DModel::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Manufacturing3DModel>\n";

	if (MeasurementUnitsCodeSequence)
		stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
	else
		stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
	if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ModelModification) {
		stream << "\t\t";
		ModelModification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ModelModification> not present\n";

	if (ModelMirroring) {
		stream << "\t\t";
		ModelMirroring->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ModelMirroring> not present\n";

	if (ModelUsageCodeSequence)
		stream << "\t\tSequence <ModelUsageCodeSequence>\n";
	else
		stream << "\t\tSequence <ModelUsageCodeSequence> not present\n";
	if (ModelUsageCodeSequence && strcmp(ModelUsageCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ModelUsageCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ContentDescription) {
		stream << "\t\t";
		ContentDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDescription> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (DerivationAlgorithmSequence)
		stream << "\t\tSequence <DerivationAlgorithmSequence>\n";
	else
		stream << "\t\tSequence <DerivationAlgorithmSequence> not present\n";
	if (DerivationAlgorithmSequence && strcmp(DerivationAlgorithmSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DerivationAlgorithmSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

			}
		}
	}
}

void
Module_FileMetaInformation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <FileMetaInformation>\n";

	if (FileMetaInformationGroupLength) {
		stream << "\t\t";
		FileMetaInformationGroupLength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FileMetaInformationGroupLength> not present\n";

	if (FileMetaInformationVersion) {
		stream << "\t\t";
		FileMetaInformationVersion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FileMetaInformationVersion> not present\n";

	if (MediaStorageSOPClassUID) {
		stream << "\t\t";
		MediaStorageSOPClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MediaStorageSOPClassUID> not present\n";

	if (MediaStorageSOPInstanceUID) {
		stream << "\t\t";
		MediaStorageSOPInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MediaStorageSOPInstanceUID> not present\n";

	if (TransferSyntaxUID) {
		stream << "\t\t";
		TransferSyntaxUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransferSyntaxUID> not present\n";

	if (ImplementationClassUID) {
		stream << "\t\t";
		ImplementationClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImplementationClassUID> not present\n";

	if (ImplementationVersionName) {
		stream << "\t\t";
		ImplementationVersionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImplementationVersionName> not present\n";

	if (SourceApplicationEntityTitle) {
		stream << "\t\t";
		SourceApplicationEntityTitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SourceApplicationEntityTitle> not present\n";

	if (SendingApplicationEntityTitle) {
		stream << "\t\t";
		SendingApplicationEntityTitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SendingApplicationEntityTitle> not present\n";

	if (ReceivingApplicationEntityTitle) {
		stream << "\t\t";
		ReceivingApplicationEntityTitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReceivingApplicationEntityTitle> not present\n";

	if (SourcePresentationAddress) {
		stream << "\t\t";
		SourcePresentationAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SourcePresentationAddress> not present\n";

	if (SendingPresentationAddress) {
		stream << "\t\t";
		SendingPresentationAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SendingPresentationAddress> not present\n";

	if (ReceivingPresentationAddress) {
		stream << "\t\t";
		ReceivingPresentationAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReceivingPresentationAddress> not present\n";

	if (PrivateInformationCreatorUID) {
		stream << "\t\t";
		PrivateInformationCreatorUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrivateInformationCreatorUID> not present\n";

	if (PrivateInformation) {
		stream << "\t\t";
		PrivateInformation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrivateInformation> not present\n";

}

void
Module_FileSetIdentification::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <FileSetIdentification>\n";

	if (FileSetID) {
		stream << "\t\t";
		FileSetID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FileSetID> not present\n";

	if (FileSetDescriptorFileID) {
		stream << "\t\t";
		FileSetDescriptorFileID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FileSetDescriptorFileID> not present\n";

	if (SpecificCharacterSetOfFileSetDescriptorFile) {
		stream << "\t\t";
		SpecificCharacterSetOfFileSetDescriptorFile->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSetOfFileSetDescriptorFile> not present\n";

}

void
Module_DirectoryInformation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DirectoryInformation>\n";

	if (OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity) {
		stream << "\t\t";
		OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity> not present\n";

	if (OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity) {
		stream << "\t\t";
		OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity> not present\n";

	if (FileSetConsistencyFlag) {
		stream << "\t\t";
		FileSetConsistencyFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FileSetConsistencyFlag> not present\n";

	if (DirectoryRecordSequence)
		stream << "\t\tSequence <DirectoryRecordSequence>\n";
	else
		stream << "\t\tSequence <DirectoryRecordSequence> not present\n";
	if (DirectoryRecordSequence && strcmp(DirectoryRecordSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DirectoryRecordSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OffsetOfTheNextDirectoryRecord = (*list)[TagFromName(OffsetOfTheNextDirectoryRecord)];
				stream << "\t";
				if (OffsetOfTheNextDirectoryRecord) {
					stream << "\t\t";
					OffsetOfTheNextDirectoryRecord->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OffsetOfTheNextDirectoryRecord> not present\n";

				Attribute *RecordInUseFlag = (*list)[TagFromName(RecordInUseFlag)];
				stream << "\t";
				if (RecordInUseFlag) {
					stream << "\t\t";
					RecordInUseFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecordInUseFlag> not present\n";

				Attribute *OffsetOfReferencedLowerLevelDirectoryEntity = (*list)[TagFromName(OffsetOfReferencedLowerLevelDirectoryEntity)];
				stream << "\t";
				if (OffsetOfReferencedLowerLevelDirectoryEntity) {
					stream << "\t\t";
					OffsetOfReferencedLowerLevelDirectoryEntity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OffsetOfReferencedLowerLevelDirectoryEntity> not present\n";

				Attribute *DirectoryRecordType = (*list)[TagFromName(DirectoryRecordType)];
				stream << "\t";
				if (DirectoryRecordType) {
					stream << "\t\t";
					DirectoryRecordType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DirectoryRecordType> not present\n";

				Attribute *PrivateRecordUID = (*list)[TagFromName(PrivateRecordUID)];
				stream << "\t";
				if (PrivateRecordUID) {
					stream << "\t\t";
					PrivateRecordUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PrivateRecordUID> not present\n";

				Attribute *ReferencedFileID = (*list)[TagFromName(ReferencedFileID)];
				stream << "\t";
				if (ReferencedFileID) {
					stream << "\t\t";
					ReferencedFileID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFileID> not present\n";

				Attribute *ReferencedSOPClassUIDInFile = (*list)[TagFromName(ReferencedSOPClassUIDInFile)];
				stream << "\t";
				if (ReferencedSOPClassUIDInFile) {
					stream << "\t\t";
					ReferencedSOPClassUIDInFile->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUIDInFile> not present\n";

				Attribute *ReferencedSOPInstanceUIDInFile = (*list)[TagFromName(ReferencedSOPInstanceUIDInFile)];
				stream << "\t";
				if (ReferencedSOPInstanceUIDInFile) {
					stream << "\t\t";
					ReferencedSOPInstanceUIDInFile->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPInstanceUIDInFile> not present\n";

				Attribute *ReferencedTransferSyntaxUIDInFile = (*list)[TagFromName(ReferencedTransferSyntaxUIDInFile)];
				stream << "\t";
				if (ReferencedTransferSyntaxUIDInFile) {
					stream << "\t\t";
					ReferencedTransferSyntaxUIDInFile->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedTransferSyntaxUIDInFile> not present\n";

							stream << "\t\t";
	Macro_PatientDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientDirectoryRecord>\n";

							stream << "\t\t";
	Macro_StudyDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <StudyDirectoryRecord>\n";

							stream << "\t\t";
	Macro_SeriesDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SeriesDirectoryRecord>\n";

							stream << "\t\t";
	Macro_ImageDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RTDoseDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RTDoseDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RTStructureSetDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RTStructureSetDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RTPlanDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RTPlanDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RTTreatmentRecordDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RTTreatmentRecordDirectoryRecord>\n";

							stream << "\t\t";
	Macro_PresentationDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PresentationDirectoryRecord>\n";

							stream << "\t\t";
	Macro_WaveformDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <WaveformDirectoryRecord>\n";

							stream << "\t\t";
	Macro_SRDocumentDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SRDocumentDirectoryRecord>\n";

							stream << "\t\t";
	Macro_KeyObjectDocumentDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <KeyObjectDocumentDirectoryRecord>\n";

							stream << "\t\t";
	Macro_SpectroscopyDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SpectroscopyDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RawDataDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RawDataDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RegistrationDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RegistrationDirectoryRecord>\n";

							stream << "\t\t";
	Macro_FiducialDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FiducialDirectoryRecord>\n";

							stream << "\t\t";
	Macro_HangingProtocolDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HangingProtocolDirectoryRecord>\n";

							stream << "\t\t";
	Macro_EncapsulatedDocumentDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <EncapsulatedDocumentDirectoryRecord>\n";

							stream << "\t\t";
	Macro_HL7StructuredDocumentDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HL7StructuredDocumentDirectoryRecord>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingDirectoryRecord>\n";

							stream << "\t\t";
	Macro_StereometricRelationshipDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <StereometricRelationshipDirectoryRecord>\n";

							stream << "\t\t";
	Macro_SurfaceDirectoryRecord(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SurfaceDirectoryRecord>\n";

			}
		}
	}
}

void
Macro_PatientDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PatientDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (PatientName) {
		stream << "\t\t";
		PatientName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientName> not present\n";

	if (PatientID) {
		stream << "\t\t";
		PatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientID> not present\n";

}

void
Macro_StudyDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <StudyDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (StudyDate) {
		stream << "\t\t";
		StudyDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyDate> not present\n";

	if (StudyTime) {
		stream << "\t\t";
		StudyTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyTime> not present\n";

	if (StudyDescription) {
		stream << "\t\t";
		StudyDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyDescription> not present\n";

	if (StudyInstanceUID) {
		stream << "\t\t";
		StudyInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyInstanceUID> not present\n";

	if (StudyID) {
		stream << "\t\t";
		StudyID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyID> not present\n";

	if (AccessionNumber) {
		stream << "\t\t";
		AccessionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AccessionNumber> not present\n";

}

void
Macro_SeriesDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SeriesDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
}

void
Macro_ImageDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ImageDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
}

void
Macro_RTDoseDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RTDoseDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (DoseSummationType) {
		stream << "\t\t";
		DoseSummationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseSummationType> not present\n";

	if (DoseComment) {
		stream << "\t\t";
		DoseComment->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseComment> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
}

void
Macro_RTStructureSetDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RTStructureSetDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (StructureSetLabel) {
		stream << "\t\t";
		StructureSetLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetLabel> not present\n";

	if (StructureSetDate) {
		stream << "\t\t";
		StructureSetDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetDate> not present\n";

	if (StructureSetTime) {
		stream << "\t\t";
		StructureSetTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetTime> not present\n";

}

void
Macro_RTPlanDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RTPlanDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (RTPlanLabel) {
		stream << "\t\t";
		RTPlanLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanLabel> not present\n";

	if (RTPlanDate) {
		stream << "\t\t";
		RTPlanDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanDate> not present\n";

	if (RTPlanTime) {
		stream << "\t\t";
		RTPlanTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanTime> not present\n";

}

void
Macro_RTTreatmentRecordDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RTTreatmentRecordDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (TreatmentDate) {
		stream << "\t\t";
		TreatmentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentDate> not present\n";

	if (TreatmentTime) {
		stream << "\t\t";
		TreatmentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentTime> not present\n";

}

void
Macro_PresentationDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PresentationDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (PresentationCreationDate) {
		stream << "\t\t";
		PresentationCreationDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationCreationDate> not present\n";

	if (PresentationCreationTime) {
		stream << "\t\t";
		PresentationCreationTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationCreationTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (ReferencedSeriesSequence)
		stream << "\t\tSequence <ReferencedSeriesSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
	if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
				stream << "\t";
				if (SeriesInstanceUID) {
					stream << "\t\t";
					SeriesInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (BlendingSequence)
		stream << "\t\tSequence <BlendingSequence>\n";
	else
		stream << "\t\tSequence <BlendingSequence> not present\n";
	if (BlendingSequence && strcmp(BlendingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BlendingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

	Attribute *ReferencedSeriesSequence = (*list)[TagFromName(ReferencedSeriesSequence)];
				stream << "\t";
				if (ReferencedSeriesSequence)
					stream << "\t\tSequence <ReferencedSeriesSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
				if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
							stream << "\t\t";
							if (SeriesInstanceUID) {
								stream << "\t\t";
								SeriesInstanceUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
							stream << "\t\t";
							if (ReferencedImageSequence)
								stream << "\t\tSequence <ReferencedImageSequence>\n";
							else
								stream << "\t\tSequence <ReferencedImageSequence> not present\n";
							if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Macro_WaveformDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <WaveformDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

}

void
Macro_SRDocumentDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SRDocumentDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (CompletionFlag) {
		stream << "\t\t";
		CompletionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CompletionFlag> not present\n";

	if (VerificationFlag) {
		stream << "\t\t";
		VerificationFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VerificationFlag> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (VerificationDateTime) {
		stream << "\t\t";
		VerificationDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VerificationDateTime> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ContentSequence)
		stream << "\t\tSequence <ContentSequence>\n";
	else
		stream << "\t\tSequence <ContentSequence> not present\n";
	if (ContentSequence && strcmp(ContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RelationshipType = (*list)[TagFromName(RelationshipType)];
				stream << "\t";
				if (RelationshipType) {
					stream << "\t\t";
					RelationshipType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RelationshipType> not present\n";

							stream << "\t\t";
	Macro_DocumentContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DocumentContentMacro>\n";

			}
		}
	}
}

void
Macro_KeyObjectDocumentDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <KeyObjectDocumentDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ContentSequence)
		stream << "\t\tSequence <ContentSequence>\n";
	else
		stream << "\t\tSequence <ContentSequence> not present\n";
	if (ContentSequence && strcmp(ContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RelationshipType = (*list)[TagFromName(RelationshipType)];
				stream << "\t";
				if (RelationshipType) {
					stream << "\t\t";
					RelationshipType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RelationshipType> not present\n";

							stream << "\t\t";
	Macro_DocumentContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DocumentContentMacro>\n";

			}
		}
	}
}

void
Macro_SpectroscopyDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SpectroscopyDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ReferencedImageEvidenceSequence)
		stream << "\t\tSequence <ReferencedImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageEvidenceSequence> not present\n";
	if (ReferencedImageEvidenceSequence && strcmp(ReferencedImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (NumberOfFrames) {
		stream << "\t\t";
		NumberOfFrames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFrames> not present\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (DataPointRows) {
		stream << "\t\t";
		DataPointRows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataPointRows> not present\n";

	if (DataPointColumns) {
		stream << "\t\t";
		DataPointColumns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataPointColumns> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
}

void
Macro_RawDataDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RawDataDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
}

void
Macro_RegistrationDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RegistrationDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Macro_FiducialDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FiducialDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Macro_HangingProtocolDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HangingProtocolDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (HangingProtocolName) {
		stream << "\t\t";
		HangingProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolName> not present\n";

	if (HangingProtocolDescription) {
		stream << "\t\t";
		HangingProtocolDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolDescription> not present\n";

	if (HangingProtocolLevel) {
		stream << "\t\t";
		HangingProtocolLevel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolLevel> not present\n";

	if (HangingProtocolCreator) {
		stream << "\t\t";
		HangingProtocolCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolCreator> not present\n";

	if (HangingProtocolCreationDateTime) {
		stream << "\t\t";
		HangingProtocolCreationDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolCreationDateTime> not present\n";

	if (HangingProtocolDefinitionSequence)
		stream << "\t\tSequence <HangingProtocolDefinitionSequence>\n";
	else
		stream << "\t\tSequence <HangingProtocolDefinitionSequence> not present\n";
	if (HangingProtocolDefinitionSequence && strcmp(HangingProtocolDefinitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HangingProtocolDefinitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *Modality = (*list)[TagFromName(Modality)];
				stream << "\t";
				if (Modality) {
					stream << "\t\t";
					Modality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Modality> not present\n";

	Attribute *AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
				stream << "\t";
				if (AnatomicRegionSequence)
					stream << "\t\tSequence <AnatomicRegionSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
				if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *Laterality = (*list)[TagFromName(Laterality)];
				stream << "\t";
				if (Laterality) {
					stream << "\t\t";
					Laterality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Laterality> not present\n";

	Attribute *ProcedureCodeSequence = (*list)[TagFromName(ProcedureCodeSequence)];
				stream << "\t";
				if (ProcedureCodeSequence)
					stream << "\t\tSequence <ProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ProcedureCodeSequence> not present\n";
				if (ProcedureCodeSequence && strcmp(ProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReasonForRequestedProcedureCodeSequence = (*list)[TagFromName(ReasonForRequestedProcedureCodeSequence)];
				stream << "\t";
				if (ReasonForRequestedProcedureCodeSequence)
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence> not present\n";
				if (ReasonForRequestedProcedureCodeSequence && strcmp(ReasonForRequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReasonForRequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (NumberOfPriorsReferenced) {
		stream << "\t\t";
		NumberOfPriorsReferenced->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfPriorsReferenced> not present\n";

	if (HangingProtocolUserIdentificationCodeSequence)
		stream << "\t\tSequence <HangingProtocolUserIdentificationCodeSequence>\n";
	else
		stream << "\t\tSequence <HangingProtocolUserIdentificationCodeSequence> not present\n";
	if (HangingProtocolUserIdentificationCodeSequence && strcmp(HangingProtocolUserIdentificationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HangingProtocolUserIdentificationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_EncapsulatedDocumentDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <EncapsulatedDocumentDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (DocumentTitle) {
		stream << "\t\t";
		DocumentTitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DocumentTitle> not present\n";

	if (HL7InstanceIdentifier) {
		stream << "\t\t";
		HL7InstanceIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HL7InstanceIdentifier> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (MIMETypeOfEncapsulatedDocument) {
		stream << "\t\t";
		MIMETypeOfEncapsulatedDocument->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MIMETypeOfEncapsulatedDocument> not present\n";

}

void
Macro_HL7StructuredDocumentDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HL7StructuredDocumentDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (HL7InstanceIdentifier) {
		stream << "\t\t";
		HL7InstanceIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HL7InstanceIdentifier> not present\n";

	if (HL7DocumentEffectiveTime) {
		stream << "\t\t";
		HL7DocumentEffectiveTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HL7DocumentEffectiveTime> not present\n";

	if (HL7DocumentTypeCodeSequence)
		stream << "\t\tSequence <HL7DocumentTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <HL7DocumentTypeCodeSequence> not present\n";
	if (HL7DocumentTypeCodeSequence && strcmp(HL7DocumentTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HL7DocumentTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_RealWorldValueMappingDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <RealWorldValueMappingDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Macro_StereometricRelationshipDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <StereometricRelationshipDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Macro_SurfaceDirectoryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SurfaceDirectoryRecord>\n";

	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Module_DirectoryInformationDental::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DirectoryInformationDental>\n";

	if (DirectoryRecordSequence)
		stream << "\t\tSequence <DirectoryRecordSequence>\n";
	else
		stream << "\t\tSequence <DirectoryRecordSequence> not present\n";
	if (DirectoryRecordSequence && strcmp(DirectoryRecordSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DirectoryRecordSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedSOPClassUIDInFile = (*list)[TagFromName(ReferencedSOPClassUIDInFile)];
				stream << "\t";
				if (ReferencedSOPClassUIDInFile) {
					stream << "\t\t";
					ReferencedSOPClassUIDInFile->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSOPClassUIDInFile> not present\n";

				Attribute *ReferencedTransferSyntaxUIDInFile = (*list)[TagFromName(ReferencedTransferSyntaxUIDInFile)];
				stream << "\t";
				if (ReferencedTransferSyntaxUIDInFile) {
					stream << "\t\t";
					ReferencedTransferSyntaxUIDInFile->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedTransferSyntaxUIDInFile> not present\n";

			}
		}
	}
}

void
Module_PETSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PETSeries>\n";

	if (SeriesDate) {
		stream << "\t\t";
		SeriesDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDate> not present\n";

	if (SeriesTime) {
		stream << "\t\t";
		SeriesTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesTime> not present\n";

	if (Units) {
		stream << "\t\t";
		Units->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Units> not present\n";

	if (SUVType) {
		stream << "\t\t";
		SUVType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SUVType> not present\n";

	if (CountsSource) {
		stream << "\t\t";
		CountsSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CountsSource> not present\n";

	if (SeriesType) {
		stream << "\t\t";
		SeriesType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesType> not present\n";

	if (ReprojectionMethod) {
		stream << "\t\t";
		ReprojectionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReprojectionMethod> not present\n";

	if (NumberOfRRIntervals) {
		stream << "\t\t";
		NumberOfRRIntervals->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfRRIntervals> not present\n";

	if (NumberOfTimeSlots) {
		stream << "\t\t";
		NumberOfTimeSlots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfTimeSlots> not present\n";

	if (NumberOfTimeSlices) {
		stream << "\t\t";
		NumberOfTimeSlices->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfTimeSlices> not present\n";

	if (NumberOfSlices) {
		stream << "\t\t";
		NumberOfSlices->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfSlices> not present\n";

	if (CorrectedImage) {
		stream << "\t\t";
		CorrectedImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CorrectedImage> not present\n";

	if (RandomsCorrectionMethod) {
		stream << "\t\t";
		RandomsCorrectionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RandomsCorrectionMethod> not present\n";

	if (AttenuationCorrectionMethod) {
		stream << "\t\t";
		AttenuationCorrectionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AttenuationCorrectionMethod> not present\n";

	if (ScatterCorrectionMethod) {
		stream << "\t\t";
		ScatterCorrectionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScatterCorrectionMethod> not present\n";

	if (DecayCorrection) {
		stream << "\t\t";
		DecayCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecayCorrection> not present\n";

	if (ReconstructionDiameter) {
		stream << "\t\t";
		ReconstructionDiameter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReconstructionDiameter> not present\n";

	if (ConvolutionKernel) {
		stream << "\t\t";
		ConvolutionKernel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConvolutionKernel> not present\n";

	if (ReconstructionMethod) {
		stream << "\t\t";
		ReconstructionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReconstructionMethod> not present\n";

	if (DetectorLinesOfResponseUsed) {
		stream << "\t\t";
		DetectorLinesOfResponseUsed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorLinesOfResponseUsed> not present\n";

	if (AcquisitionStartCondition) {
		stream << "\t\t";
		AcquisitionStartCondition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionStartCondition> not present\n";

	if (AcquisitionStartConditionData) {
		stream << "\t\t";
		AcquisitionStartConditionData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionStartConditionData> not present\n";

	if (AcquisitionTerminationCondition) {
		stream << "\t\t";
		AcquisitionTerminationCondition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTerminationCondition> not present\n";

	if (AcquisitionTerminationConditionData) {
		stream << "\t\t";
		AcquisitionTerminationConditionData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTerminationConditionData> not present\n";

	if (FieldOfViewShape) {
		stream << "\t\t";
		FieldOfViewShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewShape> not present\n";

	if (FieldOfViewDimensions) {
		stream << "\t\t";
		FieldOfViewDimensions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewDimensions> not present\n";

	if (GantryDetectorTilt) {
		stream << "\t\t";
		GantryDetectorTilt->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryDetectorTilt> not present\n";

	if (GantryDetectorSlew) {
		stream << "\t\t";
		GantryDetectorSlew->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryDetectorSlew> not present\n";

	if (TypeOfDetectorMotion) {
		stream << "\t\t";
		TypeOfDetectorMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfDetectorMotion> not present\n";

	if (CollimatorType) {
		stream << "\t\t";
		CollimatorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorType> not present\n";

	if (CollimatorGridName) {
		stream << "\t\t";
		CollimatorGridName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorGridName> not present\n";

	if (AxialAcceptance) {
		stream << "\t\t";
		AxialAcceptance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxialAcceptance> not present\n";

	if (AxialMash) {
		stream << "\t\t";
		AxialMash->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxialMash> not present\n";

	if (TransverseMash) {
		stream << "\t\t";
		TransverseMash->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransverseMash> not present\n";

	if (DetectorElementSize) {
		stream << "\t\t";
		DetectorElementSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorElementSize> not present\n";

	if (CoincidenceWindowWidth) {
		stream << "\t\t";
		CoincidenceWindowWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CoincidenceWindowWidth> not present\n";

	if (EnergyWindowRangeSequence)
		stream << "\t\tSequence <EnergyWindowRangeSequence>\n";
	else
		stream << "\t\tSequence <EnergyWindowRangeSequence> not present\n";
	if (EnergyWindowRangeSequence && strcmp(EnergyWindowRangeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EnergyWindowRangeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *EnergyWindowLowerLimit = (*list)[TagFromName(EnergyWindowLowerLimit)];
				stream << "\t";
				if (EnergyWindowLowerLimit) {
					stream << "\t\t";
					EnergyWindowLowerLimit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWindowLowerLimit> not present\n";

				Attribute *EnergyWindowUpperLimit = (*list)[TagFromName(EnergyWindowUpperLimit)];
				stream << "\t";
				if (EnergyWindowUpperLimit) {
					stream << "\t\t";
					EnergyWindowUpperLimit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWindowUpperLimit> not present\n";

			}
		}
	}
	if (SecondaryCountsType) {
		stream << "\t\t";
		SecondaryCountsType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryCountsType> not present\n";

}

void
Module_PETIsotope::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PETIsotope>\n";

	if (RadiopharmaceuticalInformationSequence)
		stream << "\t\tSequence <RadiopharmaceuticalInformationSequence>\n";
	else
		stream << "\t\tSequence <RadiopharmaceuticalInformationSequence> not present\n";
	if (RadiopharmaceuticalInformationSequence && strcmp(RadiopharmaceuticalInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RadiopharmaceuticalInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *RadionuclideCodeSequence = (*list)[TagFromName(RadionuclideCodeSequence)];
				stream << "\t";
				if (RadionuclideCodeSequence)
					stream << "\t\tSequence <RadionuclideCodeSequence>\n";
				else
					stream << "\t\tSequence <RadionuclideCodeSequence> not present\n";
				if (RadionuclideCodeSequence && strcmp(RadionuclideCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RadionuclideCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *RadiopharmaceuticalRoute = (*list)[TagFromName(RadiopharmaceuticalRoute)];
				stream << "\t";
				if (RadiopharmaceuticalRoute) {
					stream << "\t\t";
					RadiopharmaceuticalRoute->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalRoute> not present\n";

	Attribute *AdministrationRouteCodeSequence = (*list)[TagFromName(AdministrationRouteCodeSequence)];
				stream << "\t";
				if (AdministrationRouteCodeSequence)
					stream << "\t\tSequence <AdministrationRouteCodeSequence>\n";
				else
					stream << "\t\tSequence <AdministrationRouteCodeSequence> not present\n";
				if (AdministrationRouteCodeSequence && strcmp(AdministrationRouteCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AdministrationRouteCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *RadiopharmaceuticalVolume = (*list)[TagFromName(RadiopharmaceuticalVolume)];
				stream << "\t";
				if (RadiopharmaceuticalVolume) {
					stream << "\t\t";
					RadiopharmaceuticalVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalVolume> not present\n";

				Attribute *RadiopharmaceuticalStartTime = (*list)[TagFromName(RadiopharmaceuticalStartTime)];
				stream << "\t";
				if (RadiopharmaceuticalStartTime) {
					stream << "\t\t";
					RadiopharmaceuticalStartTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStartTime> not present\n";

				Attribute *RadiopharmaceuticalStartDateTime = (*list)[TagFromName(RadiopharmaceuticalStartDateTime)];
				stream << "\t";
				if (RadiopharmaceuticalStartDateTime) {
					stream << "\t\t";
					RadiopharmaceuticalStartDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStartDateTime> not present\n";

				Attribute *RadiopharmaceuticalStopTime = (*list)[TagFromName(RadiopharmaceuticalStopTime)];
				stream << "\t";
				if (RadiopharmaceuticalStopTime) {
					stream << "\t\t";
					RadiopharmaceuticalStopTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStopTime> not present\n";

				Attribute *RadiopharmaceuticalStopDateTime = (*list)[TagFromName(RadiopharmaceuticalStopDateTime)];
				stream << "\t";
				if (RadiopharmaceuticalStopDateTime) {
					stream << "\t\t";
					RadiopharmaceuticalStopDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStopDateTime> not present\n";

				Attribute *RadionuclideTotalDose = (*list)[TagFromName(RadionuclideTotalDose)];
				stream << "\t";
				if (RadionuclideTotalDose) {
					stream << "\t\t";
					RadionuclideTotalDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclideTotalDose> not present\n";

				Attribute *RadionuclideHalfLife = (*list)[TagFromName(RadionuclideHalfLife)];
				stream << "\t";
				if (RadionuclideHalfLife) {
					stream << "\t\t";
					RadionuclideHalfLife->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclideHalfLife> not present\n";

				Attribute *RadionuclidePositronFraction = (*list)[TagFromName(RadionuclidePositronFraction)];
				stream << "\t";
				if (RadionuclidePositronFraction) {
					stream << "\t\t";
					RadionuclidePositronFraction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclidePositronFraction> not present\n";

				Attribute *RadiopharmaceuticalSpecificActivity = (*list)[TagFromName(RadiopharmaceuticalSpecificActivity)];
				stream << "\t";
				if (RadiopharmaceuticalSpecificActivity) {
					stream << "\t\t";
					RadiopharmaceuticalSpecificActivity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalSpecificActivity> not present\n";

				Attribute *Radiopharmaceutical = (*list)[TagFromName(Radiopharmaceutical)];
				stream << "\t";
				if (Radiopharmaceutical) {
					stream << "\t\t";
					Radiopharmaceutical->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Radiopharmaceutical> not present\n";

	Attribute *RadiopharmaceuticalCodeSequence = (*list)[TagFromName(RadiopharmaceuticalCodeSequence)];
				stream << "\t";
				if (RadiopharmaceuticalCodeSequence)
					stream << "\t\tSequence <RadiopharmaceuticalCodeSequence>\n";
				else
					stream << "\t\tSequence <RadiopharmaceuticalCodeSequence> not present\n";
				if (RadiopharmaceuticalCodeSequence && strcmp(RadiopharmaceuticalCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RadiopharmaceuticalCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (InterventionDrugInformationSequence)
		stream << "\t\tSequence <InterventionDrugInformationSequence>\n";
	else
		stream << "\t\tSequence <InterventionDrugInformationSequence> not present\n";
	if (InterventionDrugInformationSequence && strcmp(InterventionDrugInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InterventionDrugInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *InterventionDrugName = (*list)[TagFromName(InterventionDrugName)];
				stream << "\t";
				if (InterventionDrugName) {
					stream << "\t\t";
					InterventionDrugName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugName> not present\n";

	Attribute *InterventionDrugCodeSequence = (*list)[TagFromName(InterventionDrugCodeSequence)];
				stream << "\t";
				if (InterventionDrugCodeSequence)
					stream << "\t\tSequence <InterventionDrugCodeSequence>\n";
				else
					stream << "\t\tSequence <InterventionDrugCodeSequence> not present\n";
				if (InterventionDrugCodeSequence && strcmp(InterventionDrugCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InterventionDrugCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *InterventionDrugStartTime = (*list)[TagFromName(InterventionDrugStartTime)];
				stream << "\t";
				if (InterventionDrugStartTime) {
					stream << "\t\t";
					InterventionDrugStartTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugStartTime> not present\n";

				Attribute *InterventionDrugStopTime = (*list)[TagFromName(InterventionDrugStopTime)];
				stream << "\t";
				if (InterventionDrugStopTime) {
					stream << "\t\t";
					InterventionDrugStopTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugStopTime> not present\n";

				Attribute *InterventionDrugDose = (*list)[TagFromName(InterventionDrugDose)];
				stream << "\t";
				if (InterventionDrugDose) {
					stream << "\t\t";
					InterventionDrugDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugDose> not present\n";

			}
		}
	}
}

void
Module_PETMultigatedAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PETMultigatedAcquisition>\n";

	if (BeatRejectionFlag) {
		stream << "\t\t";
		BeatRejectionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BeatRejectionFlag> not present\n";

	if (TriggerSourceOrType) {
		stream << "\t\t";
		TriggerSourceOrType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerSourceOrType> not present\n";

	if (PVCRejection) {
		stream << "\t\t";
		PVCRejection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PVCRejection> not present\n";

	if (SkipBeats) {
		stream << "\t\t";
		SkipBeats->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SkipBeats> not present\n";

	if (HeartRate) {
		stream << "\t\t";
		HeartRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HeartRate> not present\n";

	if (CardiacFramingType) {
		stream << "\t\t";
		CardiacFramingType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CardiacFramingType> not present\n";

}

void
Module_PETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PETImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (FrameReferenceTime) {
		stream << "\t\t";
		FrameReferenceTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameReferenceTime> not present\n";

	if (TriggerTime) {
		stream << "\t\t";
		TriggerTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerTime> not present\n";

	if (FrameTime) {
		stream << "\t\t";
		FrameTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameTime> not present\n";

	if (LowRRValue) {
		stream << "\t\t";
		LowRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LowRRValue> not present\n";

	if (HighRRValue) {
		stream << "\t\t";
		HighRRValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighRRValue> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (ImageIndex) {
		stream << "\t\t";
		ImageIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageIndex> not present\n";

	if (AcquisitionDate) {
		stream << "\t\t";
		AcquisitionDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDate> not present\n";

	if (AcquisitionTime) {
		stream << "\t\t";
		AcquisitionTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTime> not present\n";

	if (ActualFrameDuration) {
		stream << "\t\t";
		ActualFrameDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ActualFrameDuration> not present\n";

	if (NominalInterval) {
		stream << "\t\t";
		NominalInterval->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NominalInterval> not present\n";

	if (IntervalsAcquired) {
		stream << "\t\t";
		IntervalsAcquired->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntervalsAcquired> not present\n";

	if (IntervalsRejected) {
		stream << "\t\t";
		IntervalsRejected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntervalsRejected> not present\n";

	if (PrimaryPromptsCountsAccumulated) {
		stream << "\t\t";
		PrimaryPromptsCountsAccumulated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryPromptsCountsAccumulated> not present\n";

	if (SecondaryCountsAccumulated) {
		stream << "\t\t";
		SecondaryCountsAccumulated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryCountsAccumulated> not present\n";

	if (SliceSensitivityFactor) {
		stream << "\t\t";
		SliceSensitivityFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SliceSensitivityFactor> not present\n";

	if (DecayFactor) {
		stream << "\t\t";
		DecayFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecayFactor> not present\n";

	if (DoseCalibrationFactor) {
		stream << "\t\t";
		DoseCalibrationFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseCalibrationFactor> not present\n";

	if (ScatterFractionFactor) {
		stream << "\t\t";
		ScatterFractionFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScatterFractionFactor> not present\n";

	if (DeadTimeFactor) {
		stream << "\t\t";
		DeadTimeFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeadTimeFactor> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

}

void
Module_MultiFrameFunctionalGroupsForEnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedPETImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_RadiopharmaceuticalUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RadiopharmaceuticalUsageMacro>\n";

							stream << "\t\t";
	Macro_PatientPhysiologicalStateMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientPhysiologicalStateMacro>\n";

							stream << "\t\t";
	Macro_PETFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_PETFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_PETDetectorMotionDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETDetectorMotionDetailsMacro>\n";

							stream << "\t\t";
	Macro_PETPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETPositionMacro>\n";

							stream << "\t\t";
	Macro_PETFrameCorrectionFactorsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameCorrectionFactorsMacro>\n";

							stream << "\t\t";
	Macro_PETReconstructionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETReconstructionMacro>\n";

							stream << "\t\t";
	Macro_PETTableDynamicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETTableDynamicsMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_RadiopharmaceuticalUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RadiopharmaceuticalUsageMacro>\n";

							stream << "\t\t";
	Macro_PatientPhysiologicalStateMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientPhysiologicalStateMacro>\n";

							stream << "\t\t";
	Macro_PETFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_PETFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_PETDetectorMotionDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETDetectorMotionDetailsMacro>\n";

							stream << "\t\t";
	Macro_PETPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETPositionMacro>\n";

							stream << "\t\t";
	Macro_PETFrameCorrectionFactorsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameCorrectionFactorsMacro>\n";

							stream << "\t\t";
	Macro_PETReconstructionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETReconstructionMacro>\n";

							stream << "\t\t";
	Macro_PETTableDynamicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETTableDynamicsMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_PETFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_PETFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_PETFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_PETFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PETFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
}

void
Macro_PETFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETFrameTypeMacro>\n";

	if (PETFrameTypeSequence)
		stream << "\t\tSequence <PETFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <PETFrameTypeSequence> not present\n";
	if (PETFrameTypeSequence && strcmp(PETFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

							stream << "\t\t";
	Macro_CommonCTMRImageDescriptionFrameLevelMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionFrameLevelMacro>\n";

			}
		}
	}
}

void
Macro_PETFrameAcquisitionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETFrameAcquisitionMacro>\n";

	if (PETFrameAcquisitionSequence)
		stream << "\t\tSequence <PETFrameAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <PETFrameAcquisitionSequence> not present\n";
	if (PETFrameAcquisitionSequence && strcmp(PETFrameAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETFrameAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TableHeight = (*list)[TagFromName(TableHeight)];
				stream << "\t";
				if (TableHeight) {
					stream << "\t\t";
					TableHeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHeight> not present\n";

				Attribute *GantryDetectorTilt = (*list)[TagFromName(GantryDetectorTilt)];
				stream << "\t";
				if (GantryDetectorTilt) {
					stream << "\t\t";
					GantryDetectorTilt->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryDetectorTilt> not present\n";

				Attribute *GantryDetectorSlew = (*list)[TagFromName(GantryDetectorSlew)];
				stream << "\t";
				if (GantryDetectorSlew) {
					stream << "\t\t";
					GantryDetectorSlew->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryDetectorSlew> not present\n";

				Attribute *DataCollectionDiameter = (*list)[TagFromName(DataCollectionDiameter)];
				stream << "\t";
				if (DataCollectionDiameter) {
					stream << "\t\t";
					DataCollectionDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataCollectionDiameter> not present\n";

			}
		}
	}
}

void
Macro_PETDetectorMotionDetailsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETDetectorMotionDetailsMacro>\n";

	if (PETDetectorMotionDetailsSequence)
		stream << "\t\tSequence <PETDetectorMotionDetailsSequence>\n";
	else
		stream << "\t\tSequence <PETDetectorMotionDetailsSequence> not present\n";
	if (PETDetectorMotionDetailsSequence && strcmp(PETDetectorMotionDetailsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETDetectorMotionDetailsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RotationDirection = (*list)[TagFromName(RotationDirection)];
				stream << "\t";
				if (RotationDirection) {
					stream << "\t\t";
					RotationDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RotationDirection> not present\n";

				Attribute *RevolutionTime = (*list)[TagFromName(RevolutionTime)];
				stream << "\t";
				if (RevolutionTime) {
					stream << "\t\t";
					RevolutionTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RevolutionTime> not present\n";

			}
		}
	}
}

void
Macro_PETPositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETPositionMacro>\n";

	if (PETPositionSequence)
		stream << "\t\tSequence <PETPositionSequence>\n";
	else
		stream << "\t\tSequence <PETPositionSequence> not present\n";
	if (PETPositionSequence && strcmp(PETPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TablePosition = (*list)[TagFromName(TablePosition)];
				stream << "\t";
				if (TablePosition) {
					stream << "\t\t";
					TablePosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TablePosition> not present\n";

				Attribute *DataCollectionCenterPatient = (*list)[TagFromName(DataCollectionCenterPatient)];
				stream << "\t";
				if (DataCollectionCenterPatient) {
					stream << "\t\t";
					DataCollectionCenterPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataCollectionCenterPatient> not present\n";

				Attribute *ReconstructionTargetCenterPatient = (*list)[TagFromName(ReconstructionTargetCenterPatient)];
				stream << "\t";
				if (ReconstructionTargetCenterPatient) {
					stream << "\t\t";
					ReconstructionTargetCenterPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionTargetCenterPatient> not present\n";

			}
		}
	}
}

void
Macro_PETFrameCorrectionFactorsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETFrameCorrectionFactorsMacro>\n";

	if (PETFrameCorrectionFactorsSequence)
		stream << "\t\tSequence <PETFrameCorrectionFactorsSequence>\n";
	else
		stream << "\t\tSequence <PETFrameCorrectionFactorsSequence> not present\n";
	if (PETFrameCorrectionFactorsSequence && strcmp(PETFrameCorrectionFactorsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETFrameCorrectionFactorsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PrimaryPromptsCountsAccumulated = (*list)[TagFromName(PrimaryPromptsCountsAccumulated)];
				stream << "\t";
				if (PrimaryPromptsCountsAccumulated) {
					stream << "\t\t";
					PrimaryPromptsCountsAccumulated->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PrimaryPromptsCountsAccumulated> not present\n";

				Attribute *SliceSensitivityFactor = (*list)[TagFromName(SliceSensitivityFactor)];
				stream << "\t";
				if (SliceSensitivityFactor) {
					stream << "\t\t";
					SliceSensitivityFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SliceSensitivityFactor> not present\n";

				Attribute *DecayFactor = (*list)[TagFromName(DecayFactor)];
				stream << "\t";
				if (DecayFactor) {
					stream << "\t\t";
					DecayFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DecayFactor> not present\n";

				Attribute *ScatterFractionFactor = (*list)[TagFromName(ScatterFractionFactor)];
				stream << "\t";
				if (ScatterFractionFactor) {
					stream << "\t\t";
					ScatterFractionFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ScatterFractionFactor> not present\n";

				Attribute *DeadTimeFactor = (*list)[TagFromName(DeadTimeFactor)];
				stream << "\t";
				if (DeadTimeFactor) {
					stream << "\t\t";
					DeadTimeFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeadTimeFactor> not present\n";

			}
		}
	}
}

void
Macro_PETReconstructionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETReconstructionMacro>\n";

	if (PETReconstructionSequence)
		stream << "\t\tSequence <PETReconstructionSequence>\n";
	else
		stream << "\t\tSequence <PETReconstructionSequence> not present\n";
	if (PETReconstructionSequence && strcmp(PETReconstructionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETReconstructionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReconstructionType = (*list)[TagFromName(ReconstructionType)];
				stream << "\t";
				if (ReconstructionType) {
					stream << "\t\t";
					ReconstructionType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionType> not present\n";

				Attribute *ReconstructionAlgorithm = (*list)[TagFromName(ReconstructionAlgorithm)];
				stream << "\t";
				if (ReconstructionAlgorithm) {
					stream << "\t\t";
					ReconstructionAlgorithm->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionAlgorithm> not present\n";

				Attribute *IterativeReconstructionMethod = (*list)[TagFromName(IterativeReconstructionMethod)];
				stream << "\t";
				if (IterativeReconstructionMethod) {
					stream << "\t\t";
					IterativeReconstructionMethod->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IterativeReconstructionMethod> not present\n";

				Attribute *NumberOfIterations = (*list)[TagFromName(NumberOfIterations)];
				stream << "\t";
				if (NumberOfIterations) {
					stream << "\t\t";
					NumberOfIterations->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfIterations> not present\n";

				Attribute *NumberOfSubsets = (*list)[TagFromName(NumberOfSubsets)];
				stream << "\t";
				if (NumberOfSubsets) {
					stream << "\t\t";
					NumberOfSubsets->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfSubsets> not present\n";

				Attribute *ReconstructionDiameter = (*list)[TagFromName(ReconstructionDiameter)];
				stream << "\t";
				if (ReconstructionDiameter) {
					stream << "\t\t";
					ReconstructionDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionDiameter> not present\n";

				Attribute *ReconstructionFieldOfView = (*list)[TagFromName(ReconstructionFieldOfView)];
				stream << "\t";
				if (ReconstructionFieldOfView) {
					stream << "\t\t";
					ReconstructionFieldOfView->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionFieldOfView> not present\n";

			}
		}
	}
}

void
Macro_PETTableDynamicsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PETTableDynamicsMacro>\n";

	if (PETTableDynamicsSequence)
		stream << "\t\tSequence <PETTableDynamicsSequence>\n";
	else
		stream << "\t\tSequence <PETTableDynamicsSequence> not present\n";
	if (PETTableDynamicsSequence && strcmp(PETTableDynamicsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PETTableDynamicsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TableSpeed = (*list)[TagFromName(TableSpeed)];
				stream << "\t";
				if (TableSpeed) {
					stream << "\t\t";
					TableSpeed->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableSpeed> not present\n";

			}
		}
	}
}

void
Module_EnhancedPETSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedPETSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (RelatedSeriesSequence)
		stream << "\t\tSequence <RelatedSeriesSequence>\n";
	else
		stream << "\t\tSequence <RelatedSeriesSequence> not present\n";
	if (RelatedSeriesSequence && strcmp(RelatedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RelatedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

				Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
				stream << "\t";
				if (SeriesInstanceUID) {
					stream << "\t\t";
					SeriesInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_EnhancedPETIsotope::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedPETIsotope>\n";

	if (RadiopharmaceuticalInformationSequence)
		stream << "\t\tSequence <RadiopharmaceuticalInformationSequence>\n";
	else
		stream << "\t\tSequence <RadiopharmaceuticalInformationSequence> not present\n";
	if (RadiopharmaceuticalInformationSequence && strcmp(RadiopharmaceuticalInformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RadiopharmaceuticalInformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RadiopharmaceuticalAgentNumber = (*list)[TagFromName(RadiopharmaceuticalAgentNumber)];
				stream << "\t";
				if (RadiopharmaceuticalAgentNumber) {
					stream << "\t\t";
					RadiopharmaceuticalAgentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalAgentNumber> not present\n";

	Attribute *RadionuclideCodeSequence = (*list)[TagFromName(RadionuclideCodeSequence)];
				stream << "\t";
				if (RadionuclideCodeSequence)
					stream << "\t\tSequence <RadionuclideCodeSequence>\n";
				else
					stream << "\t\tSequence <RadionuclideCodeSequence> not present\n";
				if (RadionuclideCodeSequence && strcmp(RadionuclideCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RadionuclideCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *AdministrationRouteCodeSequence = (*list)[TagFromName(AdministrationRouteCodeSequence)];
				stream << "\t";
				if (AdministrationRouteCodeSequence)
					stream << "\t\tSequence <AdministrationRouteCodeSequence>\n";
				else
					stream << "\t\tSequence <AdministrationRouteCodeSequence> not present\n";
				if (AdministrationRouteCodeSequence && strcmp(AdministrationRouteCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AdministrationRouteCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *RadiopharmaceuticalVolume = (*list)[TagFromName(RadiopharmaceuticalVolume)];
				stream << "\t";
				if (RadiopharmaceuticalVolume) {
					stream << "\t\t";
					RadiopharmaceuticalVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalVolume> not present\n";

				Attribute *RadiopharmaceuticalStartDateTime = (*list)[TagFromName(RadiopharmaceuticalStartDateTime)];
				stream << "\t";
				if (RadiopharmaceuticalStartDateTime) {
					stream << "\t\t";
					RadiopharmaceuticalStartDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStartDateTime> not present\n";

				Attribute *RadiopharmaceuticalStopDateTime = (*list)[TagFromName(RadiopharmaceuticalStopDateTime)];
				stream << "\t";
				if (RadiopharmaceuticalStopDateTime) {
					stream << "\t\t";
					RadiopharmaceuticalStopDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalStopDateTime> not present\n";

				Attribute *RadionuclideTotalDose = (*list)[TagFromName(RadionuclideTotalDose)];
				stream << "\t";
				if (RadionuclideTotalDose) {
					stream << "\t\t";
					RadionuclideTotalDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclideTotalDose> not present\n";

				Attribute *RadionuclideHalfLife = (*list)[TagFromName(RadionuclideHalfLife)];
				stream << "\t";
				if (RadionuclideHalfLife) {
					stream << "\t\t";
					RadionuclideHalfLife->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclideHalfLife> not present\n";

				Attribute *RadionuclidePositronFraction = (*list)[TagFromName(RadionuclidePositronFraction)];
				stream << "\t";
				if (RadionuclidePositronFraction) {
					stream << "\t\t";
					RadionuclidePositronFraction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadionuclidePositronFraction> not present\n";

				Attribute *RadiopharmaceuticalSpecificActivity = (*list)[TagFromName(RadiopharmaceuticalSpecificActivity)];
				stream << "\t";
				if (RadiopharmaceuticalSpecificActivity) {
					stream << "\t\t";
					RadiopharmaceuticalSpecificActivity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiopharmaceuticalSpecificActivity> not present\n";

	Attribute *RadiopharmaceuticalCodeSequence = (*list)[TagFromName(RadiopharmaceuticalCodeSequence)];
				stream << "\t";
				if (RadiopharmaceuticalCodeSequence)
					stream << "\t\tSequence <RadiopharmaceuticalCodeSequence>\n";
				else
					stream << "\t\tSequence <RadiopharmaceuticalCodeSequence> not present\n";
				if (RadiopharmaceuticalCodeSequence && strcmp(RadiopharmaceuticalCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RadiopharmaceuticalCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_EnhancedPETAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedPETAcquisition>\n";

	if (AcquisitionStartCondition) {
		stream << "\t\t";
		AcquisitionStartCondition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionStartCondition> not present\n";

	if (StartDensityThreshold) {
		stream << "\t\t";
		StartDensityThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartDensityThreshold> not present\n";

	if (StartRelativeDensityDifferenceThreshold) {
		stream << "\t\t";
		StartRelativeDensityDifferenceThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartRelativeDensityDifferenceThreshold> not present\n";

	if (StartCardiacTriggerCountThreshold) {
		stream << "\t\t";
		StartCardiacTriggerCountThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartCardiacTriggerCountThreshold> not present\n";

	if (StartRespiratoryTriggerCountThreshold) {
		stream << "\t\t";
		StartRespiratoryTriggerCountThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartRespiratoryTriggerCountThreshold> not present\n";

	if (AcquisitionTerminationCondition) {
		stream << "\t\t";
		AcquisitionTerminationCondition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTerminationCondition> not present\n";

	if (TerminationCountsThreshold) {
		stream << "\t\t";
		TerminationCountsThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TerminationCountsThreshold> not present\n";

	if (TerminationDensityThreshold) {
		stream << "\t\t";
		TerminationDensityThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TerminationDensityThreshold> not present\n";

	if (TerminationRelativeDensityThreshold) {
		stream << "\t\t";
		TerminationRelativeDensityThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TerminationRelativeDensityThreshold> not present\n";

	if (TerminationTimeThreshold) {
		stream << "\t\t";
		TerminationTimeThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TerminationTimeThreshold> not present\n";

	if (TerminationCardiacTriggerCountThreshold) {
		stream << "\t\t";
		TerminationCardiacTriggerCountThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TerminationCardiacTriggerCountThreshold> not present\n";

	if (TerminationRespiratoryTriggerCountThreshold) {
		stream << "\t\t";
		TerminationRespiratoryTriggerCountThreshold->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TerminationRespiratoryTriggerCountThreshold> not present\n";

	if (TypeOfDetectorMotion) {
		stream << "\t\t";
		TypeOfDetectorMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfDetectorMotion> not present\n";

	if (DetectorGeometry) {
		stream << "\t\t";
		DetectorGeometry->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorGeometry> not present\n";

	if (TransverseDetectorSeparation) {
		stream << "\t\t";
		TransverseDetectorSeparation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransverseDetectorSeparation> not present\n";

	if (AxialDetectorDimension) {
		stream << "\t\t";
		AxialDetectorDimension->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxialDetectorDimension> not present\n";

	if (CollimatorType) {
		stream << "\t\t";
		CollimatorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorType> not present\n";

	if (CoincidenceWindowWidth) {
		stream << "\t\t";
		CoincidenceWindowWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CoincidenceWindowWidth> not present\n";

	if (EnergyWindowRangeSequence)
		stream << "\t\tSequence <EnergyWindowRangeSequence>\n";
	else
		stream << "\t\tSequence <EnergyWindowRangeSequence> not present\n";
	if (EnergyWindowRangeSequence && strcmp(EnergyWindowRangeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EnergyWindowRangeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *EnergyWindowLowerLimit = (*list)[TagFromName(EnergyWindowLowerLimit)];
				stream << "\t";
				if (EnergyWindowLowerLimit) {
					stream << "\t\t";
					EnergyWindowLowerLimit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWindowLowerLimit> not present\n";

				Attribute *EnergyWindowUpperLimit = (*list)[TagFromName(EnergyWindowUpperLimit)];
				stream << "\t";
				if (EnergyWindowUpperLimit) {
					stream << "\t\t";
					EnergyWindowUpperLimit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWindowUpperLimit> not present\n";

			}
		}
	}
	if (TableMotion) {
		stream << "\t\t";
		TableMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableMotion> not present\n";

	if (TimeOfFlightInformationUsed) {
		stream << "\t\t";
		TimeOfFlightInformationUsed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeOfFlightInformationUsed> not present\n";

				stream << "\t";
	Macro_MandatoryViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MandatoryViewAndSliceProgressionDirectionMacro>\n";

	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

}

void
Module_EnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedPETImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

				stream << "\t";
	Macro_CommonCTMRImageDescriptionImageLevelMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionImageLevelMacro>\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (ReferencedRawDataSequence)
		stream << "\t\tSequence <ReferencedRawDataSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRawDataSequence> not present\n";
	if (ReferencedRawDataSequence && strcmp(ReferencedRawDataSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRawDataSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedWaveformSequence)
		stream << "\t\tSequence <ReferencedWaveformSequence>\n";
	else
		stream << "\t\tSequence <ReferencedWaveformSequence> not present\n";
	if (ReferencedWaveformSequence && strcmp(ReferencedWaveformSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedWaveformSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedImageEvidenceSequence)
		stream << "\t\tSequence <ReferencedImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageEvidenceSequence> not present\n";
	if (ReferencedImageEvidenceSequence && strcmp(ReferencedImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SourceImageEvidenceSequence)
		stream << "\t\tSequence <SourceImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <SourceImageEvidenceSequence> not present\n";
	if (SourceImageEvidenceSequence && strcmp(SourceImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
}

void
Module_EnhancedPETCorrections::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedPETCorrections>\n";

	if (CountsSource) {
		stream << "\t\t";
		CountsSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CountsSource> not present\n";

	if (DecayCorrected) {
		stream << "\t\t";
		DecayCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecayCorrected> not present\n";

	if (AttenuationCorrected) {
		stream << "\t\t";
		AttenuationCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AttenuationCorrected> not present\n";

	if (ScatterCorrected) {
		stream << "\t\t";
		ScatterCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScatterCorrected> not present\n";

	if (DeadTimeCorrected) {
		stream << "\t\t";
		DeadTimeCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeadTimeCorrected> not present\n";

	if (GantryMotionCorrected) {
		stream << "\t\t";
		GantryMotionCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryMotionCorrected> not present\n";

	if (PatientMotionCorrected) {
		stream << "\t\t";
		PatientMotionCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientMotionCorrected> not present\n";

	if (CountLossNormalizationCorrected) {
		stream << "\t\t";
		CountLossNormalizationCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CountLossNormalizationCorrected> not present\n";

	if (RandomsCorrected) {
		stream << "\t\t";
		RandomsCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RandomsCorrected> not present\n";

	if (NonUniformRadialSamplingCorrected) {
		stream << "\t\t";
		NonUniformRadialSamplingCorrected->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NonUniformRadialSamplingCorrected> not present\n";

	if (SensitivityCalibrated) {
		stream << "\t\t";
		SensitivityCalibrated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SensitivityCalibrated> not present\n";

	if (DetectorNormalizationCorrection) {
		stream << "\t\t";
		DetectorNormalizationCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorNormalizationCorrection> not present\n";

	if (RandomsCorrectionMethod) {
		stream << "\t\t";
		RandomsCorrectionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RandomsCorrectionMethod> not present\n";

	if (AttenuationCorrectionSource) {
		stream << "\t\t";
		AttenuationCorrectionSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AttenuationCorrectionSource> not present\n";

	if (AttenuationCorrectionTemporalRelationship) {
		stream << "\t\t";
		AttenuationCorrectionTemporalRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AttenuationCorrectionTemporalRelationship> not present\n";

	if (ScatterCorrectionMethod) {
		stream << "\t\t";
		ScatterCorrectionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScatterCorrectionMethod> not present\n";

	if (DecayCorrectionDateTime) {
		stream << "\t\t";
		DecayCorrectionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecayCorrectionDateTime> not present\n";

}

void
Macro_BeamLimitingDevicePositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BeamLimitingDevicePositionMacro>\n";

	if (BeamLimitingDevicePositionSequence)
		stream << "\t\tSequence <BeamLimitingDevicePositionSequence>\n";
	else
		stream << "\t\tSequence <BeamLimitingDevicePositionSequence> not present\n";
	if (BeamLimitingDevicePositionSequence && strcmp(BeamLimitingDevicePositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BeamLimitingDevicePositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
				stream << "\t";
				if (RTBeamLimitingDeviceType) {
					stream << "\t\t";
					RTBeamLimitingDeviceType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

				Attribute *LeafJawPositions = (*list)[TagFromName(LeafJawPositions)];
				stream << "\t";
				if (LeafJawPositions) {
					stream << "\t\t";
					LeafJawPositions->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LeafJawPositions> not present\n";

			}
		}
	}
}

void
Macro_PatientSupportIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PatientSupportIdentificationMacro>\n";

	if (PatientSupportType) {
		stream << "\t\t";
		PatientSupportType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSupportType> not present\n";

	if (PatientSupportID) {
		stream << "\t\t";
		PatientSupportID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSupportID> not present\n";

	if (PatientSupportAccessoryCode) {
		stream << "\t\t";
		PatientSupportAccessoryCode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSupportAccessoryCode> not present\n";

}

void
Module_RTSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (SeriesDate) {
		stream << "\t\t";
		SeriesDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDate> not present\n";

	if (SeriesTime) {
		stream << "\t\t";
		SeriesTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesTime> not present\n";

	if (SeriesDescriptionCodeSequence)
		stream << "\t\tSequence <SeriesDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <SeriesDescriptionCodeSequence> not present\n";
	if (SeriesDescriptionCodeSequence && strcmp(SeriesDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SeriesDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (OperatorsName) {
		stream << "\t\t";
		OperatorsName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OperatorsName> not present\n";

	if (OperatorIdentificationSequence)
		stream << "\t\tSequence <OperatorIdentificationSequence>\n";
	else
		stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
	if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

			}
		}
	}
	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (RequestAttributesSequence)
		stream << "\t\tSequence <RequestAttributesSequence>\n";
	else
		stream << "\t\tSequence <RequestAttributesSequence> not present\n";
	if (RequestAttributesSequence && strcmp(RequestAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RequestAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RequestAttributesMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_PerformedProcedureStepSummaryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PerformedProcedureStepSummaryMacro>\n";

}

void
Module_RTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTImage>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PixelIntensityRelationship) {
		stream << "\t\t";
		PixelIntensityRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelIntensityRelationship> not present\n";

	if (PixelIntensityRelationshipSign) {
		stream << "\t\t";
		PixelIntensityRelationshipSign->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelIntensityRelationshipSign> not present\n";

	if (RTImageLabel) {
		stream << "\t\t";
		RTImageLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImageLabel> not present\n";

	if (RTImageName) {
		stream << "\t\t";
		RTImageName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImageName> not present\n";

	if (RTImageDescription) {
		stream << "\t\t";
		RTImageDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImageDescription> not present\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (ConversionType) {
		stream << "\t\t";
		ConversionType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConversionType> not present\n";

	if (ReportedValuesOrigin) {
		stream << "\t\t";
		ReportedValuesOrigin->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReportedValuesOrigin> not present\n";

	if (RTImagePlane) {
		stream << "\t\t";
		RTImagePlane->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImagePlane> not present\n";

	if (XRayImageReceptorAngle) {
		stream << "\t\t";
		XRayImageReceptorAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayImageReceptorAngle> not present\n";

	if (RTImageOrientation) {
		stream << "\t\t";
		RTImageOrientation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImageOrientation> not present\n";

	if (ImagePlanePixelSpacing) {
		stream << "\t\t";
		ImagePlanePixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagePlanePixelSpacing> not present\n";

	if (RTImagePosition) {
		stream << "\t\t";
		RTImagePosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImagePosition> not present\n";

	if (RadiationMachineName) {
		stream << "\t\t";
		RadiationMachineName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationMachineName> not present\n";

	if (PrimaryDosimeterUnit) {
		stream << "\t\t";
		PrimaryDosimeterUnit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryDosimeterUnit> not present\n";

	if (RadiationMachineSAD) {
		stream << "\t\t";
		RadiationMachineSAD->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationMachineSAD> not present\n";

	if (RadiationMachineSSD) {
		stream << "\t\t";
		RadiationMachineSSD->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationMachineSSD> not present\n";

	if (RTImageSID) {
		stream << "\t\t";
		RTImageSID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTImageSID> not present\n";

	if (SourceToReferenceObjectDistance) {
		stream << "\t\t";
		SourceToReferenceObjectDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SourceToReferenceObjectDistance> not present\n";

	if (ReferencedRTPlanSequence)
		stream << "\t\tSequence <ReferencedRTPlanSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRTPlanSequence> not present\n";
	if (ReferencedRTPlanSequence && strcmp(ReferencedRTPlanSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRTPlanSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedBeamNumber) {
		stream << "\t\t";
		ReferencedBeamNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedBeamNumber> not present\n";

	if (ReferencedFractionGroupNumber) {
		stream << "\t\t";
		ReferencedFractionGroupNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFractionGroupNumber> not present\n";

	if (FractionNumber) {
		stream << "\t\t";
		FractionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FractionNumber> not present\n";

	if (StartCumulativeMetersetWeight) {
		stream << "\t\t";
		StartCumulativeMetersetWeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartCumulativeMetersetWeight> not present\n";

	if (EndCumulativeMetersetWeight) {
		stream << "\t\t";
		EndCumulativeMetersetWeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EndCumulativeMetersetWeight> not present\n";

	if (ExposureSequence)
		stream << "\t\tSequence <ExposureSequence>\n";
	else
		stream << "\t\tSequence <ExposureSequence> not present\n";
	if (ExposureSequence && strcmp(ExposureSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ExposureSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
				stream << "\t";
				if (ReferencedFrameNumber) {
					stream << "\t\t";
					ReferencedFrameNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameNumber> not present\n";

				Attribute *KVP = (*list)[TagFromName(KVP)];
				stream << "\t";
				if (KVP) {
					stream << "\t\t";
					KVP->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KVP> not present\n";

	Attribute *PrimaryFluenceModeSequence = (*list)[TagFromName(PrimaryFluenceModeSequence)];
				stream << "\t";
				if (PrimaryFluenceModeSequence)
					stream << "\t\tSequence <PrimaryFluenceModeSequence>\n";
				else
					stream << "\t\tSequence <PrimaryFluenceModeSequence> not present\n";
				if (PrimaryFluenceModeSequence && strcmp(PrimaryFluenceModeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PrimaryFluenceModeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FluenceMode = (*list)[TagFromName(FluenceMode)];
							stream << "\t\t";
							if (FluenceMode) {
								stream << "\t\t";
								FluenceMode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FluenceMode> not present\n";

							Attribute *FluenceModeID = (*list)[TagFromName(FluenceModeID)];
							stream << "\t\t";
							if (FluenceModeID) {
								stream << "\t\t";
								FluenceModeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FluenceModeID> not present\n";

						}
					}
				}
				Attribute *XRayTubeCurrent = (*list)[TagFromName(XRayTubeCurrent)];
				stream << "\t";
				if (XRayTubeCurrent) {
					stream << "\t\t";
					XRayTubeCurrent->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayTubeCurrent> not present\n";

				Attribute *XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
				stream << "\t";
				if (XRayTubeCurrentInmA) {
					stream << "\t\t";
					XRayTubeCurrentInmA->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

				Attribute *ExposureTime = (*list)[TagFromName(ExposureTime)];
				stream << "\t";
				if (ExposureTime) {
					stream << "\t\t";
					ExposureTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureTime> not present\n";

				Attribute *ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
				stream << "\t";
				if (ExposureTimeInms) {
					stream << "\t\t";
					ExposureTimeInms->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureTimeInms> not present\n";

				Attribute *MetersetExposure = (*list)[TagFromName(MetersetExposure)];
				stream << "\t";
				if (MetersetExposure) {
					stream << "\t\t";
					MetersetExposure->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MetersetExposure> not present\n";

				Attribute *DiaphragmPosition = (*list)[TagFromName(DiaphragmPosition)];
				stream << "\t";
				if (DiaphragmPosition) {
					stream << "\t\t";
					DiaphragmPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DiaphragmPosition> not present\n";

	Attribute *BeamLimitingDeviceSequence = (*list)[TagFromName(BeamLimitingDeviceSequence)];
				stream << "\t";
				if (BeamLimitingDeviceSequence)
					stream << "\t\tSequence <BeamLimitingDeviceSequence>\n";
				else
					stream << "\t\tSequence <BeamLimitingDeviceSequence> not present\n";
				if (BeamLimitingDeviceSequence && strcmp(BeamLimitingDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BeamLimitingDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *SourceToBeamLimitingDeviceDistance = (*list)[TagFromName(SourceToBeamLimitingDeviceDistance)];
							stream << "\t\t";
							if (SourceToBeamLimitingDeviceDistance) {
								stream << "\t\t";
								SourceToBeamLimitingDeviceDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToBeamLimitingDeviceDistance> not present\n";

							Attribute *NumberOfLeafJawPairs = (*list)[TagFromName(NumberOfLeafJawPairs)];
							stream << "\t\t";
							if (NumberOfLeafJawPairs) {
								stream << "\t\t";
								NumberOfLeafJawPairs->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfLeafJawPairs> not present\n";

							Attribute *LeafPositionBoundaries = (*list)[TagFromName(LeafPositionBoundaries)];
							stream << "\t\t";
							if (LeafPositionBoundaries) {
								stream << "\t\t";
								LeafPositionBoundaries->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LeafPositionBoundaries> not present\n";

							Attribute *LeafJawPositions = (*list)[TagFromName(LeafJawPositions)];
							stream << "\t\t";
							if (LeafJawPositions) {
								stream << "\t\t";
								LeafJawPositions->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LeafJawPositions> not present\n";

						}
					}
				}
	Attribute *ApplicatorSequence = (*list)[TagFromName(ApplicatorSequence)];
				stream << "\t";
				if (ApplicatorSequence)
					stream << "\t\tSequence <ApplicatorSequence>\n";
				else
					stream << "\t\tSequence <ApplicatorSequence> not present\n";
				if (ApplicatorSequence && strcmp(ApplicatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ApplicatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ApplicatorID = (*list)[TagFromName(ApplicatorID)];
							stream << "\t\t";
							if (ApplicatorID) {
								stream << "\t\t";
								ApplicatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorID> not present\n";

							Attribute *ApplicatorType = (*list)[TagFromName(ApplicatorType)];
							stream << "\t\t";
							if (ApplicatorType) {
								stream << "\t\t";
								ApplicatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorType> not present\n";

							Attribute *ApplicatorDescription = (*list)[TagFromName(ApplicatorDescription)];
							stream << "\t\t";
							if (ApplicatorDescription) {
								stream << "\t\t";
								ApplicatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorDescription> not present\n";

						}
					}
				}
	Attribute *GeneralAccessorySequence = (*list)[TagFromName(GeneralAccessorySequence)];
				stream << "\t";
				if (GeneralAccessorySequence)
					stream << "\t\tSequence <GeneralAccessorySequence>\n";
				else
					stream << "\t\tSequence <GeneralAccessorySequence> not present\n";
				if (GeneralAccessorySequence && strcmp(GeneralAccessorySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=GeneralAccessorySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *GeneralAccessoryNumber = (*list)[TagFromName(GeneralAccessoryNumber)];
							stream << "\t\t";
							if (GeneralAccessoryNumber) {
								stream << "\t\t";
								GeneralAccessoryNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralAccessoryNumber> not present\n";

							Attribute *GeneralAccessoryID = (*list)[TagFromName(GeneralAccessoryID)];
							stream << "\t\t";
							if (GeneralAccessoryID) {
								stream << "\t\t";
								GeneralAccessoryID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralAccessoryID> not present\n";

							Attribute *GeneralAccessoryDescription = (*list)[TagFromName(GeneralAccessoryDescription)];
							stream << "\t\t";
							if (GeneralAccessoryDescription) {
								stream << "\t\t";
								GeneralAccessoryDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralAccessoryDescription> not present\n";

							Attribute *GeneralAccessoryType = (*list)[TagFromName(GeneralAccessoryType)];
							stream << "\t\t";
							if (GeneralAccessoryType) {
								stream << "\t\t";
								GeneralAccessoryType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralAccessoryType> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *SourceToGeneralAccessoryDistance = (*list)[TagFromName(SourceToGeneralAccessoryDistance)];
							stream << "\t\t";
							if (SourceToGeneralAccessoryDistance) {
								stream << "\t\t";
								SourceToGeneralAccessoryDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToGeneralAccessoryDistance> not present\n";

						}
					}
				}
				Attribute *NumberOfBlocks = (*list)[TagFromName(NumberOfBlocks)];
				stream << "\t";
				if (NumberOfBlocks) {
					stream << "\t\t";
					NumberOfBlocks->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBlocks> not present\n";

	Attribute *BlockSequence = (*list)[TagFromName(BlockSequence)];
				stream << "\t";
				if (BlockSequence)
					stream << "\t\tSequence <BlockSequence>\n";
				else
					stream << "\t\tSequence <BlockSequence> not present\n";
				if (BlockSequence && strcmp(BlockSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BlockSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BlockTrayID = (*list)[TagFromName(BlockTrayID)];
							stream << "\t\t";
							if (BlockTrayID) {
								stream << "\t\t";
								BlockTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockTrayID> not present\n";

							Attribute *TrayAccessoryCode = (*list)[TagFromName(TrayAccessoryCode)];
							stream << "\t\t";
							if (TrayAccessoryCode) {
								stream << "\t\t";
								TrayAccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrayAccessoryCode> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *SourceToBlockTrayDistance = (*list)[TagFromName(SourceToBlockTrayDistance)];
							stream << "\t\t";
							if (SourceToBlockTrayDistance) {
								stream << "\t\t";
								SourceToBlockTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToBlockTrayDistance> not present\n";

							Attribute *BlockType = (*list)[TagFromName(BlockType)];
							stream << "\t\t";
							if (BlockType) {
								stream << "\t\t";
								BlockType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockType> not present\n";

							Attribute *BlockDivergence = (*list)[TagFromName(BlockDivergence)];
							stream << "\t\t";
							if (BlockDivergence) {
								stream << "\t\t";
								BlockDivergence->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockDivergence> not present\n";

							Attribute *BlockMountingPosition = (*list)[TagFromName(BlockMountingPosition)];
							stream << "\t\t";
							if (BlockMountingPosition) {
								stream << "\t\t";
								BlockMountingPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockMountingPosition> not present\n";

							Attribute *BlockNumber = (*list)[TagFromName(BlockNumber)];
							stream << "\t\t";
							if (BlockNumber) {
								stream << "\t\t";
								BlockNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockNumber> not present\n";

							Attribute *BlockName = (*list)[TagFromName(BlockName)];
							stream << "\t\t";
							if (BlockName) {
								stream << "\t\t";
								BlockName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockName> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *BlockThickness = (*list)[TagFromName(BlockThickness)];
							stream << "\t\t";
							if (BlockThickness) {
								stream << "\t\t";
								BlockThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockThickness> not present\n";

							Attribute *BlockNumberOfPoints = (*list)[TagFromName(BlockNumberOfPoints)];
							stream << "\t\t";
							if (BlockNumberOfPoints) {
								stream << "\t\t";
								BlockNumberOfPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockNumberOfPoints> not present\n";

							Attribute *BlockData = (*list)[TagFromName(BlockData)];
							stream << "\t\t";
							if (BlockData) {
								stream << "\t\t";
								BlockData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockData> not present\n";

						}
					}
				}
			}
		}
	}
	if (FluenceMapSequence)
		stream << "\t\tSequence <FluenceMapSequence>\n";
	else
		stream << "\t\tSequence <FluenceMapSequence> not present\n";
	if (FluenceMapSequence && strcmp(FluenceMapSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FluenceMapSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FluenceDataSource = (*list)[TagFromName(FluenceDataSource)];
				stream << "\t";
				if (FluenceDataSource) {
					stream << "\t\t";
					FluenceDataSource->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FluenceDataSource> not present\n";

				Attribute *FluenceDataScale = (*list)[TagFromName(FluenceDataScale)];
				stream << "\t";
				if (FluenceDataScale) {
					stream << "\t\t";
					FluenceDataScale->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FluenceDataScale> not present\n";

			}
		}
	}
	if (GantryAngle) {
		stream << "\t\t";
		GantryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryAngle> not present\n";

	if (GantryPitchAngle) {
		stream << "\t\t";
		GantryPitchAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryPitchAngle> not present\n";

	if (BeamLimitingDeviceAngle) {
		stream << "\t\t";
		BeamLimitingDeviceAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BeamLimitingDeviceAngle> not present\n";

	if (PatientSupportAngle) {
		stream << "\t\t";
		PatientSupportAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSupportAngle> not present\n";

	if (TableTopEccentricAxisDistance) {
		stream << "\t\t";
		TableTopEccentricAxisDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopEccentricAxisDistance> not present\n";

	if (TableTopEccentricAngle) {
		stream << "\t\t";
		TableTopEccentricAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopEccentricAngle> not present\n";

	if (TableTopPitchAngle) {
		stream << "\t\t";
		TableTopPitchAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopPitchAngle> not present\n";

	if (TableTopRollAngle) {
		stream << "\t\t";
		TableTopRollAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopRollAngle> not present\n";

	if (TableTopVerticalPosition) {
		stream << "\t\t";
		TableTopVerticalPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopVerticalPosition> not present\n";

	if (TableTopLongitudinalPosition) {
		stream << "\t\t";
		TableTopLongitudinalPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

	if (TableTopLateralPosition) {
		stream << "\t\t";
		TableTopLateralPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableTopLateralPosition> not present\n";

	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

	if (PatientPosition) {
		stream << "\t\t";
		PatientPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientPosition> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (ExposureTimeInms) {
		stream << "\t\t";
		ExposureTimeInms->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInms> not present\n";

	if (MetersetExposure) {
		stream << "\t\t";
		MetersetExposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MetersetExposure> not present\n";

}

void
Module_RTDose::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTDose>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (DoseUnits) {
		stream << "\t\t";
		DoseUnits->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseUnits> not present\n";

	if (DoseType) {
		stream << "\t\t";
		DoseType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseType> not present\n";

	if (SpatialTransformOfDose) {
		stream << "\t\t";
		SpatialTransformOfDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpatialTransformOfDose> not present\n";

	if (ReferencedSpatialRegistrationSequence)
		stream << "\t\tSequence <ReferencedSpatialRegistrationSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSpatialRegistrationSequence> not present\n";
	if (ReferencedSpatialRegistrationSequence && strcmp(ReferencedSpatialRegistrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSpatialRegistrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (DoseComment) {
		stream << "\t\t";
		DoseComment->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseComment> not present\n";

	if (NormalizationPoint) {
		stream << "\t\t";
		NormalizationPoint->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NormalizationPoint> not present\n";

	if (DoseSummationType) {
		stream << "\t\t";
		DoseSummationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseSummationType> not present\n";

	if (ReferencedRTPlanSequence)
		stream << "\t\tSequence <ReferencedRTPlanSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRTPlanSequence> not present\n";
	if (ReferencedRTPlanSequence && strcmp(ReferencedRTPlanSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRTPlanSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *ReferencedFractionGroupSequence = (*list)[TagFromName(ReferencedFractionGroupSequence)];
				stream << "\t";
				if (ReferencedFractionGroupSequence)
					stream << "\t\tSequence <ReferencedFractionGroupSequence>\n";
				else
					stream << "\t\tSequence <ReferencedFractionGroupSequence> not present\n";
				if (ReferencedFractionGroupSequence && strcmp(ReferencedFractionGroupSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedFractionGroupSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedFractionGroupNumber = (*list)[TagFromName(ReferencedFractionGroupNumber)];
							stream << "\t\t";
							if (ReferencedFractionGroupNumber) {
								stream << "\t\t";
								ReferencedFractionGroupNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedFractionGroupNumber> not present\n";

	Attribute *ReferencedBeamSequence = (*list)[TagFromName(ReferencedBeamSequence)];
							stream << "\t\t";
							if (ReferencedBeamSequence)
								stream << "\t\tSequence <ReferencedBeamSequence>\n";
							else
								stream << "\t\tSequence <ReferencedBeamSequence> not present\n";
							if (ReferencedBeamSequence && strcmp(ReferencedBeamSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedBeamSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedBeamNumber = (*list)[TagFromName(ReferencedBeamNumber)];
										stream << "\t\t\t";
										if (ReferencedBeamNumber) {
											stream << "\t\t";
											ReferencedBeamNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedBeamNumber> not present\n";

	Attribute *ReferencedControlPointSequence = (*list)[TagFromName(ReferencedControlPointSequence)];
										stream << "\t\t\t";
										if (ReferencedControlPointSequence)
											stream << "\t\tSequence <ReferencedControlPointSequence>\n";
										else
											stream << "\t\tSequence <ReferencedControlPointSequence> not present\n";
										if (ReferencedControlPointSequence && strcmp(ReferencedControlPointSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=ReferencedControlPointSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
													Attribute *ReferencedStartControlPointIndex = (*list)[TagFromName(ReferencedStartControlPointIndex)];
													stream << "\t\t\t\t";
													if (ReferencedStartControlPointIndex) {
														stream << "\t\t";
														ReferencedStartControlPointIndex->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <ReferencedStartControlPointIndex> not present\n";

													Attribute *ReferencedStopControlPointIndex = (*list)[TagFromName(ReferencedStopControlPointIndex)];
													stream << "\t\t\t\t";
													if (ReferencedStopControlPointIndex) {
														stream << "\t\t";
														ReferencedStopControlPointIndex->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <ReferencedStopControlPointIndex> not present\n";

												}
											}
										}
									}
								}
							}
	Attribute *ReferencedBrachyApplicationSetupSequence = (*list)[TagFromName(ReferencedBrachyApplicationSetupSequence)];
							stream << "\t\t";
							if (ReferencedBrachyApplicationSetupSequence)
								stream << "\t\tSequence <ReferencedBrachyApplicationSetupSequence>\n";
							else
								stream << "\t\tSequence <ReferencedBrachyApplicationSetupSequence> not present\n";
							if (ReferencedBrachyApplicationSetupSequence && strcmp(ReferencedBrachyApplicationSetupSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedBrachyApplicationSetupSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedBrachyApplicationSetupNumber = (*list)[TagFromName(ReferencedBrachyApplicationSetupNumber)];
										stream << "\t\t\t";
										if (ReferencedBrachyApplicationSetupNumber) {
											stream << "\t\t";
											ReferencedBrachyApplicationSetupNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedBrachyApplicationSetupNumber> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (GridFrameOffsetVector) {
		stream << "\t\t";
		GridFrameOffsetVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridFrameOffsetVector> not present\n";

	if (DoseGridScaling) {
		stream << "\t\t";
		DoseGridScaling->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DoseGridScaling> not present\n";

	if (TissueHeterogeneityCorrection) {
		stream << "\t\t";
		TissueHeterogeneityCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TissueHeterogeneityCorrection> not present\n";

}

void
Module_RTDVH::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTDVH>\n";

	if (ReferencedStructureSetSequence)
		stream << "\t\tSequence <ReferencedStructureSetSequence>\n";
	else
		stream << "\t\tSequence <ReferencedStructureSetSequence> not present\n";
	if (ReferencedStructureSetSequence && strcmp(ReferencedStructureSetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedStructureSetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (DVHNormalizationPoint) {
		stream << "\t\t";
		DVHNormalizationPoint->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DVHNormalizationPoint> not present\n";

	if (DVHNormalizationDoseValue) {
		stream << "\t\t";
		DVHNormalizationDoseValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DVHNormalizationDoseValue> not present\n";

	if (DVHSequence)
		stream << "\t\tSequence <DVHSequence>\n";
	else
		stream << "\t\tSequence <DVHSequence> not present\n";
	if (DVHSequence && strcmp(DVHSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DVHSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *DVHReferencedROISequence = (*list)[TagFromName(DVHReferencedROISequence)];
				stream << "\t";
				if (DVHReferencedROISequence)
					stream << "\t\tSequence <DVHReferencedROISequence>\n";
				else
					stream << "\t\tSequence <DVHReferencedROISequence> not present\n";
				if (DVHReferencedROISequence && strcmp(DVHReferencedROISequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DVHReferencedROISequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *DVHROIContributionType = (*list)[TagFromName(DVHROIContributionType)];
							stream << "\t\t";
							if (DVHROIContributionType) {
								stream << "\t\t";
								DVHROIContributionType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DVHROIContributionType> not present\n";

						}
					}
				}
				Attribute *DVHType = (*list)[TagFromName(DVHType)];
				stream << "\t";
				if (DVHType) {
					stream << "\t\t";
					DVHType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHType> not present\n";

				Attribute *DoseUnits = (*list)[TagFromName(DoseUnits)];
				stream << "\t";
				if (DoseUnits) {
					stream << "\t\t";
					DoseUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseUnits> not present\n";

				Attribute *DoseType = (*list)[TagFromName(DoseType)];
				stream << "\t";
				if (DoseType) {
					stream << "\t\t";
					DoseType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseType> not present\n";

				Attribute *DVHDoseScaling = (*list)[TagFromName(DVHDoseScaling)];
				stream << "\t";
				if (DVHDoseScaling) {
					stream << "\t\t";
					DVHDoseScaling->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHDoseScaling> not present\n";

				Attribute *DVHVolumeUnits = (*list)[TagFromName(DVHVolumeUnits)];
				stream << "\t";
				if (DVHVolumeUnits) {
					stream << "\t\t";
					DVHVolumeUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHVolumeUnits> not present\n";

				Attribute *DVHNumberOfBins = (*list)[TagFromName(DVHNumberOfBins)];
				stream << "\t";
				if (DVHNumberOfBins) {
					stream << "\t\t";
					DVHNumberOfBins->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHNumberOfBins> not present\n";

				Attribute *DVHData = (*list)[TagFromName(DVHData)];
				stream << "\t";
				if (DVHData) {
					stream << "\t\t";
					DVHData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHData> not present\n";

				Attribute *DVHMinimumDose = (*list)[TagFromName(DVHMinimumDose)];
				stream << "\t";
				if (DVHMinimumDose) {
					stream << "\t\t";
					DVHMinimumDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHMinimumDose> not present\n";

				Attribute *DVHMaximumDose = (*list)[TagFromName(DVHMaximumDose)];
				stream << "\t";
				if (DVHMaximumDose) {
					stream << "\t\t";
					DVHMaximumDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHMaximumDose> not present\n";

				Attribute *DVHMeanDose = (*list)[TagFromName(DVHMeanDose)];
				stream << "\t";
				if (DVHMeanDose) {
					stream << "\t\t";
					DVHMeanDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DVHMeanDose> not present\n";

			}
		}
	}
}

void
Module_StructureSet::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <StructureSet>\n";

	if (StructureSetLabel) {
		stream << "\t\t";
		StructureSetLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetLabel> not present\n";

	if (StructureSetName) {
		stream << "\t\t";
		StructureSetName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetName> not present\n";

	if (StructureSetDescription) {
		stream << "\t\t";
		StructureSetDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetDescription> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (StructureSetDate) {
		stream << "\t\t";
		StructureSetDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetDate> not present\n";

	if (StructureSetTime) {
		stream << "\t\t";
		StructureSetTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructureSetTime> not present\n";

	if (ReferencedFrameOfReferenceSequence)
		stream << "\t\tSequence <ReferencedFrameOfReferenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedFrameOfReferenceSequence> not present\n";
	if (ReferencedFrameOfReferenceSequence && strcmp(ReferencedFrameOfReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedFrameOfReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameOfReferenceUID = (*list)[TagFromName(FrameOfReferenceUID)];
				stream << "\t";
				if (FrameOfReferenceUID) {
					stream << "\t\t";
					FrameOfReferenceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameOfReferenceUID> not present\n";

	Attribute *FrameOfReferenceRelationshipSequence = (*list)[TagFromName(FrameOfReferenceRelationshipSequence)];
				stream << "\t";
				if (FrameOfReferenceRelationshipSequence)
					stream << "\t\tSequence <FrameOfReferenceRelationshipSequence>\n";
				else
					stream << "\t\tSequence <FrameOfReferenceRelationshipSequence> not present\n";
				if (FrameOfReferenceRelationshipSequence && strcmp(FrameOfReferenceRelationshipSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=FrameOfReferenceRelationshipSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RelatedFrameOfReferenceUID = (*list)[TagFromName(RelatedFrameOfReferenceUID)];
							stream << "\t\t";
							if (RelatedFrameOfReferenceUID) {
								stream << "\t\t";
								RelatedFrameOfReferenceUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RelatedFrameOfReferenceUID> not present\n";

							Attribute *FrameOfReferenceTransformationType = (*list)[TagFromName(FrameOfReferenceTransformationType)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationType) {
								stream << "\t\t";
								FrameOfReferenceTransformationType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationType> not present\n";

							Attribute *FrameOfReferenceTransformationMatrix = (*list)[TagFromName(FrameOfReferenceTransformationMatrix)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationMatrix) {
								stream << "\t\t";
								FrameOfReferenceTransformationMatrix->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationMatrix> not present\n";

							Attribute *FrameOfReferenceTransformationComment = (*list)[TagFromName(FrameOfReferenceTransformationComment)];
							stream << "\t\t";
							if (FrameOfReferenceTransformationComment) {
								stream << "\t\t";
								FrameOfReferenceTransformationComment->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FrameOfReferenceTransformationComment> not present\n";

						}
					}
				}
	Attribute *RTReferencedStudySequence = (*list)[TagFromName(RTReferencedStudySequence)];
				stream << "\t";
				if (RTReferencedStudySequence)
					stream << "\t\tSequence <RTReferencedStudySequence>\n";
				else
					stream << "\t\tSequence <RTReferencedStudySequence> not present\n";
				if (RTReferencedStudySequence && strcmp(RTReferencedStudySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RTReferencedStudySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *RTReferencedSeriesSequence = (*list)[TagFromName(RTReferencedSeriesSequence)];
							stream << "\t\t";
							if (RTReferencedSeriesSequence)
								stream << "\t\tSequence <RTReferencedSeriesSequence>\n";
							else
								stream << "\t\tSequence <RTReferencedSeriesSequence> not present\n";
							if (RTReferencedSeriesSequence && strcmp(RTReferencedSeriesSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RTReferencedSeriesSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
										stream << "\t\t\t";
										if (SeriesInstanceUID) {
											stream << "\t\t";
											SeriesInstanceUID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *ContourImageSequence = (*list)[TagFromName(ContourImageSequence)];
										stream << "\t\t\t";
										if (ContourImageSequence)
											stream << "\t\tSequence <ContourImageSequence>\n";
										else
											stream << "\t\tSequence <ContourImageSequence> not present\n";
										if (ContourImageSequence && strcmp(ContourImageSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=ContourImageSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
																stream << "\t\t\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
																stream << "\t\t\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (StructureSetROISequence)
		stream << "\t\tSequence <StructureSetROISequence>\n";
	else
		stream << "\t\tSequence <StructureSetROISequence> not present\n";
	if (StructureSetROISequence && strcmp(StructureSetROISequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StructureSetROISequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ROINumber = (*list)[TagFromName(ROINumber)];
				stream << "\t";
				if (ROINumber) {
					stream << "\t\t";
					ROINumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROINumber> not present\n";

				Attribute *ReferencedFrameOfReferenceUID = (*list)[TagFromName(ReferencedFrameOfReferenceUID)];
				stream << "\t";
				if (ReferencedFrameOfReferenceUID) {
					stream << "\t\t";
					ReferencedFrameOfReferenceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameOfReferenceUID> not present\n";

				Attribute *ROIName = (*list)[TagFromName(ROIName)];
				stream << "\t";
				if (ROIName) {
					stream << "\t\t";
					ROIName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIName> not present\n";

				Attribute *ROIDescription = (*list)[TagFromName(ROIDescription)];
				stream << "\t";
				if (ROIDescription) {
					stream << "\t\t";
					ROIDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIDescription> not present\n";

				Attribute *ROIVolume = (*list)[TagFromName(ROIVolume)];
				stream << "\t";
				if (ROIVolume) {
					stream << "\t\t";
					ROIVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIVolume> not present\n";

				Attribute *ROIGenerationAlgorithm = (*list)[TagFromName(ROIGenerationAlgorithm)];
				stream << "\t";
				if (ROIGenerationAlgorithm) {
					stream << "\t\t";
					ROIGenerationAlgorithm->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIGenerationAlgorithm> not present\n";

				Attribute *ROIGenerationDescription = (*list)[TagFromName(ROIGenerationDescription)];
				stream << "\t";
				if (ROIGenerationDescription) {
					stream << "\t\t";
					ROIGenerationDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIGenerationDescription> not present\n";

	Attribute *ROIDerivationAlgorithmIdentificationSequence = (*list)[TagFromName(ROIDerivationAlgorithmIdentificationSequence)];
				stream << "\t";
				if (ROIDerivationAlgorithmIdentificationSequence)
					stream << "\t\tSequence <ROIDerivationAlgorithmIdentificationSequence>\n";
				else
					stream << "\t\tSequence <ROIDerivationAlgorithmIdentificationSequence> not present\n";
				if (ROIDerivationAlgorithmIdentificationSequence && strcmp(ROIDerivationAlgorithmIdentificationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ROIDerivationAlgorithmIdentificationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

						}
					}
				}
	Attribute *DerivationCodeSequence = (*list)[TagFromName(DerivationCodeSequence)];
				stream << "\t";
				if (DerivationCodeSequence)
					stream << "\t\tSequence <DerivationCodeSequence>\n";
				else
					stream << "\t\tSequence <DerivationCodeSequence> not present\n";
				if (DerivationCodeSequence && strcmp(DerivationCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DerivationCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *DefinitionSourceSequence = (*list)[TagFromName(DefinitionSourceSequence)];
				stream << "\t";
				if (DefinitionSourceSequence)
					stream << "\t\tSequence <DefinitionSourceSequence>\n";
				else
					stream << "\t\tSequence <DefinitionSourceSequence> not present\n";
				if (DefinitionSourceSequence && strcmp(DefinitionSourceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DefinitionSourceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
							stream << "\t\t";
							if (ReferencedSegmentNumber) {
								stream << "\t\t";
								ReferencedSegmentNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

							Attribute *ReferencedFiducialUID = (*list)[TagFromName(ReferencedFiducialUID)];
							stream << "\t\t";
							if (ReferencedFiducialUID) {
								stream << "\t\t";
								ReferencedFiducialUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedFiducialUID> not present\n";

						}
					}
				}
			}
		}
	}
	if (PredecessorStructureSetSequence)
		stream << "\t\tSequence <PredecessorStructureSetSequence>\n";
	else
		stream << "\t\tSequence <PredecessorStructureSetSequence> not present\n";
	if (PredecessorStructureSetSequence && strcmp(PredecessorStructureSetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PredecessorStructureSetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_ROIContour::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ROIContour>\n";

	if (ROIContourSequence)
		stream << "\t\tSequence <ROIContourSequence>\n";
	else
		stream << "\t\tSequence <ROIContourSequence> not present\n";
	if (ROIContourSequence && strcmp(ROIContourSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ROIContourSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
				stream << "\t";
				if (ReferencedROINumber) {
					stream << "\t\t";
					ReferencedROINumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedROINumber> not present\n";

				Attribute *ROIDisplayColor = (*list)[TagFromName(ROIDisplayColor)];
				stream << "\t";
				if (ROIDisplayColor) {
					stream << "\t\t";
					ROIDisplayColor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIDisplayColor> not present\n";

	Attribute *ContourSequence = (*list)[TagFromName(ContourSequence)];
				stream << "\t";
				if (ContourSequence)
					stream << "\t\tSequence <ContourSequence>\n";
				else
					stream << "\t\tSequence <ContourSequence> not present\n";
				if (ContourSequence && strcmp(ContourSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ContourSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ContourNumber = (*list)[TagFromName(ContourNumber)];
							stream << "\t\t";
							if (ContourNumber) {
								stream << "\t\t";
								ContourNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourNumber> not present\n";

							Attribute *AttachedContours = (*list)[TagFromName(AttachedContours)];
							stream << "\t\t";
							if (AttachedContours) {
								stream << "\t\t";
								AttachedContours->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AttachedContours> not present\n";

	Attribute *ContourImageSequence = (*list)[TagFromName(ContourImageSequence)];
							stream << "\t\t";
							if (ContourImageSequence)
								stream << "\t\tSequence <ContourImageSequence>\n";
							else
								stream << "\t\tSequence <ContourImageSequence> not present\n";
							if (ContourImageSequence && strcmp(ContourImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ContourImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
							Attribute *ContourGeometricType = (*list)[TagFromName(ContourGeometricType)];
							stream << "\t\t";
							if (ContourGeometricType) {
								stream << "\t\t";
								ContourGeometricType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourGeometricType> not present\n";

							Attribute *ContourSlabThickness = (*list)[TagFromName(ContourSlabThickness)];
							stream << "\t\t";
							if (ContourSlabThickness) {
								stream << "\t\t";
								ContourSlabThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourSlabThickness> not present\n";

							Attribute *ContourOffsetVector = (*list)[TagFromName(ContourOffsetVector)];
							stream << "\t\t";
							if (ContourOffsetVector) {
								stream << "\t\t";
								ContourOffsetVector->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourOffsetVector> not present\n";

							Attribute *NumberOfContourPoints = (*list)[TagFromName(NumberOfContourPoints)];
							stream << "\t\t";
							if (NumberOfContourPoints) {
								stream << "\t\t";
								NumberOfContourPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfContourPoints> not present\n";

							Attribute *ContourData = (*list)[TagFromName(ContourData)];
							stream << "\t\t";
							if (ContourData) {
								stream << "\t\t";
								ContourData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ContourData> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_RTDoseROI::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTDoseROI>\n";

	if (RTDoseROISequence)
		stream << "\t\tSequence <RTDoseROISequence>\n";
	else
		stream << "\t\tSequence <RTDoseROISequence> not present\n";
	if (RTDoseROISequence && strcmp(RTDoseROISequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RTDoseROISequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
				stream << "\t";
				if (ReferencedROINumber) {
					stream << "\t\t";
					ReferencedROINumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedROINumber> not present\n";

				Attribute *DoseUnits = (*list)[TagFromName(DoseUnits)];
				stream << "\t";
				if (DoseUnits) {
					stream << "\t\t";
					DoseUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseUnits> not present\n";

				Attribute *DoseValue = (*list)[TagFromName(DoseValue)];
				stream << "\t";
				if (DoseValue) {
					stream << "\t\t";
					DoseValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseValue> not present\n";

			}
		}
	}
}

void
Module_RTROIObservations::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTROIObservations>\n";

	if (RTROIObservationsSequence)
		stream << "\t\tSequence <RTROIObservationsSequence>\n";
	else
		stream << "\t\tSequence <RTROIObservationsSequence> not present\n";
	if (RTROIObservationsSequence && strcmp(RTROIObservationsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RTROIObservationsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ObservationNumber = (*list)[TagFromName(ObservationNumber)];
				stream << "\t";
				if (ObservationNumber) {
					stream << "\t\t";
					ObservationNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ObservationNumber> not present\n";

				Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
				stream << "\t";
				if (ReferencedROINumber) {
					stream << "\t\t";
					ReferencedROINumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedROINumber> not present\n";

				Attribute *ROIObservationLabel = (*list)[TagFromName(ROIObservationLabel)];
				stream << "\t";
				if (ROIObservationLabel) {
					stream << "\t\t";
					ROIObservationLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIObservationLabel> not present\n";

				Attribute *ROIObservationDescription = (*list)[TagFromName(ROIObservationDescription)];
				stream << "\t";
				if (ROIObservationDescription) {
					stream << "\t\t";
					ROIObservationDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIObservationDescription> not present\n";

	Attribute *RTRelatedROISequence = (*list)[TagFromName(RTRelatedROISequence)];
				stream << "\t";
				if (RTRelatedROISequence)
					stream << "\t\tSequence <RTRelatedROISequence>\n";
				else
					stream << "\t\tSequence <RTRelatedROISequence> not present\n";
				if (RTRelatedROISequence && strcmp(RTRelatedROISequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RTRelatedROISequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *RTROIRelationship = (*list)[TagFromName(RTROIRelationship)];
							stream << "\t\t";
							if (RTROIRelationship) {
								stream << "\t\t";
								RTROIRelationship->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTROIRelationship> not present\n";

						}
					}
				}
	Attribute *RTROIIdentificationCodeSequence = (*list)[TagFromName(RTROIIdentificationCodeSequence)];
				stream << "\t";
				if (RTROIIdentificationCodeSequence)
					stream << "\t\tSequence <RTROIIdentificationCodeSequence>\n";
				else
					stream << "\t\tSequence <RTROIIdentificationCodeSequence> not present\n";
				if (RTROIIdentificationCodeSequence && strcmp(RTROIIdentificationCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RTROIIdentificationCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *SegmentedPropertyTypeModifierCodeSequence = (*list)[TagFromName(SegmentedPropertyTypeModifierCodeSequence)];
							stream << "\t\t";
							if (SegmentedPropertyTypeModifierCodeSequence)
								stream << "\t\tSequence <SegmentedPropertyTypeModifierCodeSequence>\n";
							else
								stream << "\t\tSequence <SegmentedPropertyTypeModifierCodeSequence> not present\n";
							if (SegmentedPropertyTypeModifierCodeSequence && strcmp(SegmentedPropertyTypeModifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=SegmentedPropertyTypeModifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
						}
					}
				}
	Attribute *RelatedRTROIObservationsSequence = (*list)[TagFromName(RelatedRTROIObservationsSequence)];
				stream << "\t";
				if (RelatedRTROIObservationsSequence)
					stream << "\t\tSequence <RelatedRTROIObservationsSequence>\n";
				else
					stream << "\t\tSequence <RelatedRTROIObservationsSequence> not present\n";
				if (RelatedRTROIObservationsSequence && strcmp(RelatedRTROIObservationsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RelatedRTROIObservationsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ObservationNumber = (*list)[TagFromName(ObservationNumber)];
							stream << "\t\t";
							if (ObservationNumber) {
								stream << "\t\t";
								ObservationNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ObservationNumber> not present\n";

						}
					}
				}
				Attribute *RTROIInterpretedType = (*list)[TagFromName(RTROIInterpretedType)];
				stream << "\t";
				if (RTROIInterpretedType) {
					stream << "\t\t";
					RTROIInterpretedType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RTROIInterpretedType> not present\n";

				Attribute *ROIInterpreter = (*list)[TagFromName(ROIInterpreter)];
				stream << "\t";
				if (ROIInterpreter) {
					stream << "\t\t";
					ROIInterpreter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ROIInterpreter> not present\n";

				Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
				stream << "\t";
				if (MaterialID) {
					stream << "\t\t";
					MaterialID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaterialID> not present\n";

	Attribute *ROIPhysicalPropertiesSequence = (*list)[TagFromName(ROIPhysicalPropertiesSequence)];
				stream << "\t";
				if (ROIPhysicalPropertiesSequence)
					stream << "\t\tSequence <ROIPhysicalPropertiesSequence>\n";
				else
					stream << "\t\tSequence <ROIPhysicalPropertiesSequence> not present\n";
				if (ROIPhysicalPropertiesSequence && strcmp(ROIPhysicalPropertiesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ROIPhysicalPropertiesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ROIPhysicalProperty = (*list)[TagFromName(ROIPhysicalProperty)];
							stream << "\t\t";
							if (ROIPhysicalProperty) {
								stream << "\t\t";
								ROIPhysicalProperty->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ROIPhysicalProperty> not present\n";

	Attribute *ROIElementalCompositionSequence = (*list)[TagFromName(ROIElementalCompositionSequence)];
							stream << "\t\t";
							if (ROIElementalCompositionSequence)
								stream << "\t\tSequence <ROIElementalCompositionSequence>\n";
							else
								stream << "\t\tSequence <ROIElementalCompositionSequence> not present\n";
							if (ROIElementalCompositionSequence && strcmp(ROIElementalCompositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ROIElementalCompositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ROIElementalCompositionAtomicNumber = (*list)[TagFromName(ROIElementalCompositionAtomicNumber)];
										stream << "\t\t\t";
										if (ROIElementalCompositionAtomicNumber) {
											stream << "\t\t";
											ROIElementalCompositionAtomicNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ROIElementalCompositionAtomicNumber> not present\n";

										Attribute *ROIElementalCompositionAtomicMassFraction = (*list)[TagFromName(ROIElementalCompositionAtomicMassFraction)];
										stream << "\t\t\t";
										if (ROIElementalCompositionAtomicMassFraction) {
											stream << "\t\t";
											ROIElementalCompositionAtomicMassFraction->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ROIElementalCompositionAtomicMassFraction> not present\n";

									}
								}
							}
							Attribute *ROIPhysicalPropertyValue = (*list)[TagFromName(ROIPhysicalPropertyValue)];
							stream << "\t\t";
							if (ROIPhysicalPropertyValue) {
								stream << "\t\t";
								ROIPhysicalPropertyValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ROIPhysicalPropertyValue> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_RTGeneralPlan::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTGeneralPlan>\n";

	if (RTPlanLabel) {
		stream << "\t\t";
		RTPlanLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanLabel> not present\n";

	if (RTPlanName) {
		stream << "\t\t";
		RTPlanName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanName> not present\n";

	if (RTPlanDescription) {
		stream << "\t\t";
		RTPlanDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanDescription> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (RTPlanDate) {
		stream << "\t\t";
		RTPlanDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanDate> not present\n";

	if (RTPlanTime) {
		stream << "\t\t";
		RTPlanTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanTime> not present\n";

	if (TreatmentProtocols) {
		stream << "\t\t";
		TreatmentProtocols->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentProtocols> not present\n";

	if (PlanIntent) {
		stream << "\t\t";
		PlanIntent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanIntent> not present\n";

	if (TreatmentSites) {
		stream << "\t\t";
		TreatmentSites->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentSites> not present\n";

	if (RTPlanGeometry) {
		stream << "\t\t";
		RTPlanGeometry->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RTPlanGeometry> not present\n";

	if (ReferencedStructureSetSequence)
		stream << "\t\tSequence <ReferencedStructureSetSequence>\n";
	else
		stream << "\t\tSequence <ReferencedStructureSetSequence> not present\n";
	if (ReferencedStructureSetSequence && strcmp(ReferencedStructureSetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedStructureSetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedDoseSequence)
		stream << "\t\tSequence <ReferencedDoseSequence>\n";
	else
		stream << "\t\tSequence <ReferencedDoseSequence> not present\n";
	if (ReferencedDoseSequence && strcmp(ReferencedDoseSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedDoseSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedRTPlanSequence)
		stream << "\t\tSequence <ReferencedRTPlanSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRTPlanSequence> not present\n";
	if (ReferencedRTPlanSequence && strcmp(ReferencedRTPlanSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRTPlanSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

				Attribute *RTPlanRelationship = (*list)[TagFromName(RTPlanRelationship)];
				stream << "\t";
				if (RTPlanRelationship) {
					stream << "\t\t";
					RTPlanRelationship->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RTPlanRelationship> not present\n";

			}
		}
	}
	if (FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix) {
		stream << "\t\t";
		FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix> not present\n";

}

void
Module_RTPrescription::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTPrescription>\n";

	if (PrescriptionDescription) {
		stream << "\t\t";
		PrescriptionDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrescriptionDescription> not present\n";

	if (DoseReferenceSequence)
		stream << "\t\tSequence <DoseReferenceSequence>\n";
	else
		stream << "\t\tSequence <DoseReferenceSequence> not present\n";
	if (DoseReferenceSequence && strcmp(DoseReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DoseReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DoseReferenceNumber = (*list)[TagFromName(DoseReferenceNumber)];
				stream << "\t";
				if (DoseReferenceNumber) {
					stream << "\t\t";
					DoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceNumber> not present\n";

				Attribute *DoseReferenceUID = (*list)[TagFromName(DoseReferenceUID)];
				stream << "\t";
				if (DoseReferenceUID) {
					stream << "\t\t";
					DoseReferenceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceUID> not present\n";

				Attribute *DoseReferenceStructureType = (*list)[TagFromName(DoseReferenceStructureType)];
				stream << "\t";
				if (DoseReferenceStructureType) {
					stream << "\t\t";
					DoseReferenceStructureType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceStructureType> not present\n";

				Attribute *DoseReferenceDescription = (*list)[TagFromName(DoseReferenceDescription)];
				stream << "\t";
				if (DoseReferenceDescription) {
					stream << "\t\t";
					DoseReferenceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceDescription> not present\n";

				Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
				stream << "\t";
				if (ReferencedROINumber) {
					stream << "\t\t";
					ReferencedROINumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedROINumber> not present\n";

				Attribute *DoseReferencePointCoordinates = (*list)[TagFromName(DoseReferencePointCoordinates)];
				stream << "\t";
				if (DoseReferencePointCoordinates) {
					stream << "\t\t";
					DoseReferencePointCoordinates->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferencePointCoordinates> not present\n";

				Attribute *NominalPriorDose = (*list)[TagFromName(NominalPriorDose)];
				stream << "\t";
				if (NominalPriorDose) {
					stream << "\t\t";
					NominalPriorDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalPriorDose> not present\n";

				Attribute *DoseReferenceType = (*list)[TagFromName(DoseReferenceType)];
				stream << "\t";
				if (DoseReferenceType) {
					stream << "\t\t";
					DoseReferenceType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceType> not present\n";

				Attribute *ConstraintWeight = (*list)[TagFromName(ConstraintWeight)];
				stream << "\t";
				if (ConstraintWeight) {
					stream << "\t\t";
					ConstraintWeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ConstraintWeight> not present\n";

				Attribute *DeliveryWarningDose = (*list)[TagFromName(DeliveryWarningDose)];
				stream << "\t";
				if (DeliveryWarningDose) {
					stream << "\t\t";
					DeliveryWarningDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveryWarningDose> not present\n";

				Attribute *DeliveryMaximumDose = (*list)[TagFromName(DeliveryMaximumDose)];
				stream << "\t";
				if (DeliveryMaximumDose) {
					stream << "\t\t";
					DeliveryMaximumDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveryMaximumDose> not present\n";

				Attribute *TargetMinimumDose = (*list)[TagFromName(TargetMinimumDose)];
				stream << "\t";
				if (TargetMinimumDose) {
					stream << "\t\t";
					TargetMinimumDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TargetMinimumDose> not present\n";

				Attribute *TargetPrescriptionDose = (*list)[TagFromName(TargetPrescriptionDose)];
				stream << "\t";
				if (TargetPrescriptionDose) {
					stream << "\t\t";
					TargetPrescriptionDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TargetPrescriptionDose> not present\n";

				Attribute *TargetMaximumDose = (*list)[TagFromName(TargetMaximumDose)];
				stream << "\t";
				if (TargetMaximumDose) {
					stream << "\t\t";
					TargetMaximumDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TargetMaximumDose> not present\n";

				Attribute *TargetUnderdoseVolumeFraction = (*list)[TagFromName(TargetUnderdoseVolumeFraction)];
				stream << "\t";
				if (TargetUnderdoseVolumeFraction) {
					stream << "\t\t";
					TargetUnderdoseVolumeFraction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TargetUnderdoseVolumeFraction> not present\n";

				Attribute *OrganAtRiskFullVolumeDose = (*list)[TagFromName(OrganAtRiskFullVolumeDose)];
				stream << "\t";
				if (OrganAtRiskFullVolumeDose) {
					stream << "\t\t";
					OrganAtRiskFullVolumeDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganAtRiskFullVolumeDose> not present\n";

				Attribute *OrganAtRiskLimitDose = (*list)[TagFromName(OrganAtRiskLimitDose)];
				stream << "\t";
				if (OrganAtRiskLimitDose) {
					stream << "\t\t";
					OrganAtRiskLimitDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganAtRiskLimitDose> not present\n";

				Attribute *OrganAtRiskMaximumDose = (*list)[TagFromName(OrganAtRiskMaximumDose)];
				stream << "\t";
				if (OrganAtRiskMaximumDose) {
					stream << "\t\t";
					OrganAtRiskMaximumDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganAtRiskMaximumDose> not present\n";

				Attribute *OrganAtRiskOverdoseVolumeFraction = (*list)[TagFromName(OrganAtRiskOverdoseVolumeFraction)];
				stream << "\t";
				if (OrganAtRiskOverdoseVolumeFraction) {
					stream << "\t\t";
					OrganAtRiskOverdoseVolumeFraction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganAtRiskOverdoseVolumeFraction> not present\n";

			}
		}
	}
}

void
Module_RTToleranceTables::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTToleranceTables>\n";

	if (ToleranceTableSequence)
		stream << "\t\tSequence <ToleranceTableSequence>\n";
	else
		stream << "\t\tSequence <ToleranceTableSequence> not present\n";
	if (ToleranceTableSequence && strcmp(ToleranceTableSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ToleranceTableSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ToleranceTableNumber = (*list)[TagFromName(ToleranceTableNumber)];
				stream << "\t";
				if (ToleranceTableNumber) {
					stream << "\t\t";
					ToleranceTableNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ToleranceTableNumber> not present\n";

				Attribute *ToleranceTableLabel = (*list)[TagFromName(ToleranceTableLabel)];
				stream << "\t";
				if (ToleranceTableLabel) {
					stream << "\t\t";
					ToleranceTableLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ToleranceTableLabel> not present\n";

				Attribute *GantryAngleTolerance = (*list)[TagFromName(GantryAngleTolerance)];
				stream << "\t";
				if (GantryAngleTolerance) {
					stream << "\t\t";
					GantryAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryAngleTolerance> not present\n";

				Attribute *GantryPitchAngleTolerance = (*list)[TagFromName(GantryPitchAngleTolerance)];
				stream << "\t";
				if (GantryPitchAngleTolerance) {
					stream << "\t\t";
					GantryPitchAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryPitchAngleTolerance> not present\n";

				Attribute *BeamLimitingDeviceAngleTolerance = (*list)[TagFromName(BeamLimitingDeviceAngleTolerance)];
				stream << "\t";
				if (BeamLimitingDeviceAngleTolerance) {
					stream << "\t\t";
					BeamLimitingDeviceAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamLimitingDeviceAngleTolerance> not present\n";

	Attribute *BeamLimitingDeviceToleranceSequence = (*list)[TagFromName(BeamLimitingDeviceToleranceSequence)];
				stream << "\t";
				if (BeamLimitingDeviceToleranceSequence)
					stream << "\t\tSequence <BeamLimitingDeviceToleranceSequence>\n";
				else
					stream << "\t\tSequence <BeamLimitingDeviceToleranceSequence> not present\n";
				if (BeamLimitingDeviceToleranceSequence && strcmp(BeamLimitingDeviceToleranceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BeamLimitingDeviceToleranceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *BeamLimitingDevicePositionTolerance = (*list)[TagFromName(BeamLimitingDevicePositionTolerance)];
							stream << "\t\t";
							if (BeamLimitingDevicePositionTolerance) {
								stream << "\t\t";
								BeamLimitingDevicePositionTolerance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDevicePositionTolerance> not present\n";

						}
					}
				}
				Attribute *PatientSupportAngleTolerance = (*list)[TagFromName(PatientSupportAngleTolerance)];
				stream << "\t";
				if (PatientSupportAngleTolerance) {
					stream << "\t\t";
					PatientSupportAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientSupportAngleTolerance> not present\n";

				Attribute *TableTopEccentricAngleTolerance = (*list)[TagFromName(TableTopEccentricAngleTolerance)];
				stream << "\t";
				if (TableTopEccentricAngleTolerance) {
					stream << "\t\t";
					TableTopEccentricAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopEccentricAngleTolerance> not present\n";

				Attribute *TableTopPitchAngleTolerance = (*list)[TagFromName(TableTopPitchAngleTolerance)];
				stream << "\t";
				if (TableTopPitchAngleTolerance) {
					stream << "\t\t";
					TableTopPitchAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopPitchAngleTolerance> not present\n";

				Attribute *TableTopRollAngleTolerance = (*list)[TagFromName(TableTopRollAngleTolerance)];
				stream << "\t";
				if (TableTopRollAngleTolerance) {
					stream << "\t\t";
					TableTopRollAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopRollAngleTolerance> not present\n";

				Attribute *TableTopVerticalPositionTolerance = (*list)[TagFromName(TableTopVerticalPositionTolerance)];
				stream << "\t";
				if (TableTopVerticalPositionTolerance) {
					stream << "\t\t";
					TableTopVerticalPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopVerticalPositionTolerance> not present\n";

				Attribute *TableTopLongitudinalPositionTolerance = (*list)[TagFromName(TableTopLongitudinalPositionTolerance)];
				stream << "\t";
				if (TableTopLongitudinalPositionTolerance) {
					stream << "\t\t";
					TableTopLongitudinalPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLongitudinalPositionTolerance> not present\n";

				Attribute *TableTopLateralPositionTolerance = (*list)[TagFromName(TableTopLateralPositionTolerance)];
				stream << "\t";
				if (TableTopLateralPositionTolerance) {
					stream << "\t\t";
					TableTopLateralPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLateralPositionTolerance> not present\n";

			}
		}
	}
}

void
Module_RTPatientSetup::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTPatientSetup>\n";

	if (PatientSetupSequence)
		stream << "\t\tSequence <PatientSetupSequence>\n";
	else
		stream << "\t\tSequence <PatientSetupSequence> not present\n";
	if (PatientSetupSequence && strcmp(PatientSetupSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientSetupSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PatientSetupNumber = (*list)[TagFromName(PatientSetupNumber)];
				stream << "\t";
				if (PatientSetupNumber) {
					stream << "\t\t";
					PatientSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientSetupNumber> not present\n";

				Attribute *PatientSetupLabel = (*list)[TagFromName(PatientSetupLabel)];
				stream << "\t";
				if (PatientSetupLabel) {
					stream << "\t\t";
					PatientSetupLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientSetupLabel> not present\n";

				Attribute *PatientPosition = (*list)[TagFromName(PatientPosition)];
				stream << "\t";
				if (PatientPosition) {
					stream << "\t\t";
					PatientPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientPosition> not present\n";

				Attribute *PatientAdditionalPosition = (*list)[TagFromName(PatientAdditionalPosition)];
				stream << "\t";
				if (PatientAdditionalPosition) {
					stream << "\t\t";
					PatientAdditionalPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientAdditionalPosition> not present\n";

	Attribute *ReferencedSetupImageSequence = (*list)[TagFromName(ReferencedSetupImageSequence)];
				stream << "\t";
				if (ReferencedSetupImageSequence)
					stream << "\t\tSequence <ReferencedSetupImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSetupImageSequence> not present\n";
				if (ReferencedSetupImageSequence && strcmp(ReferencedSetupImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSetupImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SetupImageComment = (*list)[TagFromName(SetupImageComment)];
							stream << "\t\t";
							if (SetupImageComment) {
								stream << "\t\t";
								SetupImageComment->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SetupImageComment> not present\n";

										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *FixationDeviceSequence = (*list)[TagFromName(FixationDeviceSequence)];
				stream << "\t";
				if (FixationDeviceSequence)
					stream << "\t\tSequence <FixationDeviceSequence>\n";
				else
					stream << "\t\tSequence <FixationDeviceSequence> not present\n";
				if (FixationDeviceSequence && strcmp(FixationDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=FixationDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FixationDeviceType = (*list)[TagFromName(FixationDeviceType)];
							stream << "\t\t";
							if (FixationDeviceType) {
								stream << "\t\t";
								FixationDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FixationDeviceType> not present\n";

							Attribute *FixationDeviceLabel = (*list)[TagFromName(FixationDeviceLabel)];
							stream << "\t\t";
							if (FixationDeviceLabel) {
								stream << "\t\t";
								FixationDeviceLabel->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FixationDeviceLabel> not present\n";

							Attribute *FixationDeviceDescription = (*list)[TagFromName(FixationDeviceDescription)];
							stream << "\t\t";
							if (FixationDeviceDescription) {
								stream << "\t\t";
								FixationDeviceDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FixationDeviceDescription> not present\n";

							Attribute *FixationDevicePosition = (*list)[TagFromName(FixationDevicePosition)];
							stream << "\t\t";
							if (FixationDevicePosition) {
								stream << "\t\t";
								FixationDevicePosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FixationDevicePosition> not present\n";

							Attribute *FixationDevicePitchAngle = (*list)[TagFromName(FixationDevicePitchAngle)];
							stream << "\t\t";
							if (FixationDevicePitchAngle) {
								stream << "\t\t";
								FixationDevicePitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FixationDevicePitchAngle> not present\n";

							Attribute *FixationDeviceRollAngle = (*list)[TagFromName(FixationDeviceRollAngle)];
							stream << "\t\t";
							if (FixationDeviceRollAngle) {
								stream << "\t\t";
								FixationDeviceRollAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FixationDeviceRollAngle> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
	Attribute *ShieldingDeviceSequence = (*list)[TagFromName(ShieldingDeviceSequence)];
				stream << "\t";
				if (ShieldingDeviceSequence)
					stream << "\t\tSequence <ShieldingDeviceSequence>\n";
				else
					stream << "\t\tSequence <ShieldingDeviceSequence> not present\n";
				if (ShieldingDeviceSequence && strcmp(ShieldingDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ShieldingDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ShieldingDeviceType = (*list)[TagFromName(ShieldingDeviceType)];
							stream << "\t\t";
							if (ShieldingDeviceType) {
								stream << "\t\t";
								ShieldingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ShieldingDeviceType> not present\n";

							Attribute *ShieldingDeviceLabel = (*list)[TagFromName(ShieldingDeviceLabel)];
							stream << "\t\t";
							if (ShieldingDeviceLabel) {
								stream << "\t\t";
								ShieldingDeviceLabel->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ShieldingDeviceLabel> not present\n";

							Attribute *ShieldingDeviceDescription = (*list)[TagFromName(ShieldingDeviceDescription)];
							stream << "\t\t";
							if (ShieldingDeviceDescription) {
								stream << "\t\t";
								ShieldingDeviceDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ShieldingDeviceDescription> not present\n";

							Attribute *ShieldingDevicePosition = (*list)[TagFromName(ShieldingDevicePosition)];
							stream << "\t\t";
							if (ShieldingDevicePosition) {
								stream << "\t\t";
								ShieldingDevicePosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ShieldingDevicePosition> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *SetupTechnique = (*list)[TagFromName(SetupTechnique)];
				stream << "\t";
				if (SetupTechnique) {
					stream << "\t\t";
					SetupTechnique->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SetupTechnique> not present\n";

				Attribute *SetupTechniqueDescription = (*list)[TagFromName(SetupTechniqueDescription)];
				stream << "\t";
				if (SetupTechniqueDescription) {
					stream << "\t\t";
					SetupTechniqueDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SetupTechniqueDescription> not present\n";

	Attribute *SetupDeviceSequence = (*list)[TagFromName(SetupDeviceSequence)];
				stream << "\t";
				if (SetupDeviceSequence)
					stream << "\t\tSequence <SetupDeviceSequence>\n";
				else
					stream << "\t\tSequence <SetupDeviceSequence> not present\n";
				if (SetupDeviceSequence && strcmp(SetupDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SetupDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SetupDeviceType = (*list)[TagFromName(SetupDeviceType)];
							stream << "\t\t";
							if (SetupDeviceType) {
								stream << "\t\t";
								SetupDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SetupDeviceType> not present\n";

							Attribute *SetupDeviceLabel = (*list)[TagFromName(SetupDeviceLabel)];
							stream << "\t\t";
							if (SetupDeviceLabel) {
								stream << "\t\t";
								SetupDeviceLabel->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SetupDeviceLabel> not present\n";

							Attribute *SetupDeviceDescription = (*list)[TagFromName(SetupDeviceDescription)];
							stream << "\t\t";
							if (SetupDeviceDescription) {
								stream << "\t\t";
								SetupDeviceDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SetupDeviceDescription> not present\n";

							Attribute *SetupDeviceParameter = (*list)[TagFromName(SetupDeviceParameter)];
							stream << "\t\t";
							if (SetupDeviceParameter) {
								stream << "\t\t";
								SetupDeviceParameter->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SetupDeviceParameter> not present\n";

							Attribute *SetupReferenceDescription = (*list)[TagFromName(SetupReferenceDescription)];
							stream << "\t\t";
							if (SetupReferenceDescription) {
								stream << "\t\t";
								SetupReferenceDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SetupReferenceDescription> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *TableTopVerticalSetupDisplacement = (*list)[TagFromName(TableTopVerticalSetupDisplacement)];
				stream << "\t";
				if (TableTopVerticalSetupDisplacement) {
					stream << "\t\t";
					TableTopVerticalSetupDisplacement->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopVerticalSetupDisplacement> not present\n";

				Attribute *TableTopLongitudinalSetupDisplacement = (*list)[TagFromName(TableTopLongitudinalSetupDisplacement)];
				stream << "\t";
				if (TableTopLongitudinalSetupDisplacement) {
					stream << "\t\t";
					TableTopLongitudinalSetupDisplacement->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLongitudinalSetupDisplacement> not present\n";

				Attribute *TableTopLateralSetupDisplacement = (*list)[TagFromName(TableTopLateralSetupDisplacement)];
				stream << "\t";
				if (TableTopLateralSetupDisplacement) {
					stream << "\t\t";
					TableTopLateralSetupDisplacement->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLateralSetupDisplacement> not present\n";

	Attribute *MotionSynchronizationSequence = (*list)[TagFromName(MotionSynchronizationSequence)];
				stream << "\t";
				if (MotionSynchronizationSequence)
					stream << "\t\tSequence <MotionSynchronizationSequence>\n";
				else
					stream << "\t\tSequence <MotionSynchronizationSequence> not present\n";
				if (MotionSynchronizationSequence && strcmp(MotionSynchronizationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MotionSynchronizationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RespiratoryMotionCompensationTechnique = (*list)[TagFromName(RespiratoryMotionCompensationTechnique)];
							stream << "\t\t";
							if (RespiratoryMotionCompensationTechnique) {
								stream << "\t\t";
								RespiratoryMotionCompensationTechnique->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RespiratoryMotionCompensationTechnique> not present\n";

							Attribute *RespiratorySignalSource = (*list)[TagFromName(RespiratorySignalSource)];
							stream << "\t\t";
							if (RespiratorySignalSource) {
								stream << "\t\t";
								RespiratorySignalSource->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RespiratorySignalSource> not present\n";

							Attribute *RespiratoryMotionCompensationTechniqueDescription = (*list)[TagFromName(RespiratoryMotionCompensationTechniqueDescription)];
							stream << "\t\t";
							if (RespiratoryMotionCompensationTechniqueDescription) {
								stream << "\t\t";
								RespiratoryMotionCompensationTechniqueDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RespiratoryMotionCompensationTechniqueDescription> not present\n";

							Attribute *RespiratorySignalSourceID = (*list)[TagFromName(RespiratorySignalSourceID)];
							stream << "\t\t";
							if (RespiratorySignalSourceID) {
								stream << "\t\t";
								RespiratorySignalSourceID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RespiratorySignalSourceID> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_RTFractionScheme::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTFractionScheme>\n";

	if (FractionGroupSequence)
		stream << "\t\tSequence <FractionGroupSequence>\n";
	else
		stream << "\t\tSequence <FractionGroupSequence> not present\n";
	if (FractionGroupSequence && strcmp(FractionGroupSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FractionGroupSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FractionGroupNumber = (*list)[TagFromName(FractionGroupNumber)];
				stream << "\t";
				if (FractionGroupNumber) {
					stream << "\t\t";
					FractionGroupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FractionGroupNumber> not present\n";

				Attribute *FractionGroupDescription = (*list)[TagFromName(FractionGroupDescription)];
				stream << "\t";
				if (FractionGroupDescription) {
					stream << "\t\t";
					FractionGroupDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FractionGroupDescription> not present\n";

	Attribute *ReferencedDoseSequence = (*list)[TagFromName(ReferencedDoseSequence)];
				stream << "\t";
				if (ReferencedDoseSequence)
					stream << "\t\tSequence <ReferencedDoseSequence>\n";
				else
					stream << "\t\tSequence <ReferencedDoseSequence> not present\n";
				if (ReferencedDoseSequence && strcmp(ReferencedDoseSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedDoseSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedDoseReferenceSequence = (*list)[TagFromName(ReferencedDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedDoseReferenceSequence> not present\n";
				if (ReferencedDoseReferenceSequence && strcmp(ReferencedDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ConstraintWeight = (*list)[TagFromName(ConstraintWeight)];
							stream << "\t\t";
							if (ConstraintWeight) {
								stream << "\t\t";
								ConstraintWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ConstraintWeight> not present\n";

							Attribute *DeliveryWarningDose = (*list)[TagFromName(DeliveryWarningDose)];
							stream << "\t\t";
							if (DeliveryWarningDose) {
								stream << "\t\t";
								DeliveryWarningDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveryWarningDose> not present\n";

							Attribute *DeliveryMaximumDose = (*list)[TagFromName(DeliveryMaximumDose)];
							stream << "\t\t";
							if (DeliveryMaximumDose) {
								stream << "\t\t";
								DeliveryMaximumDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveryMaximumDose> not present\n";

							Attribute *TargetMinimumDose = (*list)[TagFromName(TargetMinimumDose)];
							stream << "\t\t";
							if (TargetMinimumDose) {
								stream << "\t\t";
								TargetMinimumDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TargetMinimumDose> not present\n";

							Attribute *TargetPrescriptionDose = (*list)[TagFromName(TargetPrescriptionDose)];
							stream << "\t\t";
							if (TargetPrescriptionDose) {
								stream << "\t\t";
								TargetPrescriptionDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TargetPrescriptionDose> not present\n";

							Attribute *TargetMaximumDose = (*list)[TagFromName(TargetMaximumDose)];
							stream << "\t\t";
							if (TargetMaximumDose) {
								stream << "\t\t";
								TargetMaximumDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TargetMaximumDose> not present\n";

							Attribute *TargetUnderdoseVolumeFraction = (*list)[TagFromName(TargetUnderdoseVolumeFraction)];
							stream << "\t\t";
							if (TargetUnderdoseVolumeFraction) {
								stream << "\t\t";
								TargetUnderdoseVolumeFraction->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TargetUnderdoseVolumeFraction> not present\n";

							Attribute *OrganAtRiskFullVolumeDose = (*list)[TagFromName(OrganAtRiskFullVolumeDose)];
							stream << "\t\t";
							if (OrganAtRiskFullVolumeDose) {
								stream << "\t\t";
								OrganAtRiskFullVolumeDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OrganAtRiskFullVolumeDose> not present\n";

							Attribute *OrganAtRiskLimitDose = (*list)[TagFromName(OrganAtRiskLimitDose)];
							stream << "\t\t";
							if (OrganAtRiskLimitDose) {
								stream << "\t\t";
								OrganAtRiskLimitDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OrganAtRiskLimitDose> not present\n";

							Attribute *OrganAtRiskMaximumDose = (*list)[TagFromName(OrganAtRiskMaximumDose)];
							stream << "\t\t";
							if (OrganAtRiskMaximumDose) {
								stream << "\t\t";
								OrganAtRiskMaximumDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OrganAtRiskMaximumDose> not present\n";

							Attribute *OrganAtRiskOverdoseVolumeFraction = (*list)[TagFromName(OrganAtRiskOverdoseVolumeFraction)];
							stream << "\t\t";
							if (OrganAtRiskOverdoseVolumeFraction) {
								stream << "\t\t";
								OrganAtRiskOverdoseVolumeFraction->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OrganAtRiskOverdoseVolumeFraction> not present\n";

						}
					}
				}
				Attribute *NumberOfFractionsPlanned = (*list)[TagFromName(NumberOfFractionsPlanned)];
				stream << "\t";
				if (NumberOfFractionsPlanned) {
					stream << "\t\t";
					NumberOfFractionsPlanned->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfFractionsPlanned> not present\n";

				Attribute *NumberOfFractionPatternDigitsPerDay = (*list)[TagFromName(NumberOfFractionPatternDigitsPerDay)];
				stream << "\t";
				if (NumberOfFractionPatternDigitsPerDay) {
					stream << "\t\t";
					NumberOfFractionPatternDigitsPerDay->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfFractionPatternDigitsPerDay> not present\n";

				Attribute *RepeatFractionCycleLength = (*list)[TagFromName(RepeatFractionCycleLength)];
				stream << "\t";
				if (RepeatFractionCycleLength) {
					stream << "\t\t";
					RepeatFractionCycleLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RepeatFractionCycleLength> not present\n";

				Attribute *FractionPattern = (*list)[TagFromName(FractionPattern)];
				stream << "\t";
				if (FractionPattern) {
					stream << "\t\t";
					FractionPattern->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FractionPattern> not present\n";

				Attribute *BeamDoseMeaning = (*list)[TagFromName(BeamDoseMeaning)];
				stream << "\t";
				if (BeamDoseMeaning) {
					stream << "\t\t";
					BeamDoseMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamDoseMeaning> not present\n";

				Attribute *NumberOfBeams = (*list)[TagFromName(NumberOfBeams)];
				stream << "\t";
				if (NumberOfBeams) {
					stream << "\t\t";
					NumberOfBeams->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBeams> not present\n";

	Attribute *ReferencedBeamSequence = (*list)[TagFromName(ReferencedBeamSequence)];
				stream << "\t";
				if (ReferencedBeamSequence)
					stream << "\t\tSequence <ReferencedBeamSequence>\n";
				else
					stream << "\t\tSequence <ReferencedBeamSequence> not present\n";
				if (ReferencedBeamSequence && strcmp(ReferencedBeamSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedBeamSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedBeamNumber = (*list)[TagFromName(ReferencedBeamNumber)];
							stream << "\t\t";
							if (ReferencedBeamNumber) {
								stream << "\t\t";
								ReferencedBeamNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedBeamNumber> not present\n";

							Attribute *BeamDoseSpecificationPoint = (*list)[TagFromName(BeamDoseSpecificationPoint)];
							stream << "\t\t";
							if (BeamDoseSpecificationPoint) {
								stream << "\t\t";
								BeamDoseSpecificationPoint->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamDoseSpecificationPoint> not present\n";

							Attribute *ReferencedDoseReferenceUID = (*list)[TagFromName(ReferencedDoseReferenceUID)];
							stream << "\t\t";
							if (ReferencedDoseReferenceUID) {
								stream << "\t\t";
								ReferencedDoseReferenceUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceUID> not present\n";

							Attribute *BeamDose = (*list)[TagFromName(BeamDose)];
							stream << "\t\t";
							if (BeamDose) {
								stream << "\t\t";
								BeamDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamDose> not present\n";

							Attribute *BeamDoseType = (*list)[TagFromName(BeamDoseType)];
							stream << "\t\t";
							if (BeamDoseType) {
								stream << "\t\t";
								BeamDoseType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamDoseType> not present\n";

							Attribute *AlternateBeamDose = (*list)[TagFromName(AlternateBeamDose)];
							stream << "\t\t";
							if (AlternateBeamDose) {
								stream << "\t\t";
								AlternateBeamDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AlternateBeamDose> not present\n";

							Attribute *AlternateBeamDoseType = (*list)[TagFromName(AlternateBeamDoseType)];
							stream << "\t\t";
							if (AlternateBeamDoseType) {
								stream << "\t\t";
								AlternateBeamDoseType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AlternateBeamDoseType> not present\n";

	Attribute *BeamDoseVerificationControlPointSequence = (*list)[TagFromName(BeamDoseVerificationControlPointSequence)];
							stream << "\t\t";
							if (BeamDoseVerificationControlPointSequence)
								stream << "\t\tSequence <BeamDoseVerificationControlPointSequence>\n";
							else
								stream << "\t\tSequence <BeamDoseVerificationControlPointSequence> not present\n";
							if (BeamDoseVerificationControlPointSequence && strcmp(BeamDoseVerificationControlPointSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=BeamDoseVerificationControlPointSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *CumulativeMetersetWeight = (*list)[TagFromName(CumulativeMetersetWeight)];
										stream << "\t\t\t";
										if (CumulativeMetersetWeight) {
											stream << "\t\t";
											CumulativeMetersetWeight->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CumulativeMetersetWeight> not present\n";

										Attribute *ReferencedControlPointIndex = (*list)[TagFromName(ReferencedControlPointIndex)];
										stream << "\t\t\t";
										if (ReferencedControlPointIndex) {
											stream << "\t\t";
											ReferencedControlPointIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedControlPointIndex> not present\n";

										Attribute *AverageBeamDosePointDepth = (*list)[TagFromName(AverageBeamDosePointDepth)];
										stream << "\t\t\t";
										if (AverageBeamDosePointDepth) {
											stream << "\t\t";
											AverageBeamDosePointDepth->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AverageBeamDosePointDepth> not present\n";

										Attribute *AverageBeamDosePointEquivalentDepth = (*list)[TagFromName(AverageBeamDosePointEquivalentDepth)];
										stream << "\t\t\t";
										if (AverageBeamDosePointEquivalentDepth) {
											stream << "\t\t";
											AverageBeamDosePointEquivalentDepth->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AverageBeamDosePointEquivalentDepth> not present\n";

										Attribute *AverageBeamDosePointSSD = (*list)[TagFromName(AverageBeamDosePointSSD)];
										stream << "\t\t\t";
										if (AverageBeamDosePointSSD) {
											stream << "\t\t";
											AverageBeamDosePointSSD->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AverageBeamDosePointSSD> not present\n";

									}
								}
							}
							Attribute *BeamMeterset = (*list)[TagFromName(BeamMeterset)];
							stream << "\t\t";
							if (BeamMeterset) {
								stream << "\t\t";
								BeamMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamMeterset> not present\n";

						}
					}
				}
				Attribute *NumberOfBrachyApplicationSetups = (*list)[TagFromName(NumberOfBrachyApplicationSetups)];
				stream << "\t";
				if (NumberOfBrachyApplicationSetups) {
					stream << "\t\t";
					NumberOfBrachyApplicationSetups->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBrachyApplicationSetups> not present\n";

	Attribute *ReferencedBrachyApplicationSetupSequence = (*list)[TagFromName(ReferencedBrachyApplicationSetupSequence)];
				stream << "\t";
				if (ReferencedBrachyApplicationSetupSequence)
					stream << "\t\tSequence <ReferencedBrachyApplicationSetupSequence>\n";
				else
					stream << "\t\tSequence <ReferencedBrachyApplicationSetupSequence> not present\n";
				if (ReferencedBrachyApplicationSetupSequence && strcmp(ReferencedBrachyApplicationSetupSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedBrachyApplicationSetupSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedBrachyApplicationSetupNumber = (*list)[TagFromName(ReferencedBrachyApplicationSetupNumber)];
							stream << "\t\t";
							if (ReferencedBrachyApplicationSetupNumber) {
								stream << "\t\t";
								ReferencedBrachyApplicationSetupNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedBrachyApplicationSetupNumber> not present\n";

							Attribute *BrachyApplicationSetupDoseSpecificationPoint = (*list)[TagFromName(BrachyApplicationSetupDoseSpecificationPoint)];
							stream << "\t\t";
							if (BrachyApplicationSetupDoseSpecificationPoint) {
								stream << "\t\t";
								BrachyApplicationSetupDoseSpecificationPoint->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyApplicationSetupDoseSpecificationPoint> not present\n";

							Attribute *BrachyApplicationSetupDose = (*list)[TagFromName(BrachyApplicationSetupDose)];
							stream << "\t\t";
							if (BrachyApplicationSetupDose) {
								stream << "\t\t";
								BrachyApplicationSetupDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyApplicationSetupDose> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_RTBeams::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTBeams>\n";

	if (BeamSequence)
		stream << "\t\tSequence <BeamSequence>\n";
	else
		stream << "\t\tSequence <BeamSequence> not present\n";
	if (BeamSequence && strcmp(BeamSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BeamSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *BeamNumber = (*list)[TagFromName(BeamNumber)];
				stream << "\t";
				if (BeamNumber) {
					stream << "\t\t";
					BeamNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamNumber> not present\n";

				Attribute *BeamName = (*list)[TagFromName(BeamName)];
				stream << "\t";
				if (BeamName) {
					stream << "\t\t";
					BeamName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamName> not present\n";

				Attribute *BeamDescription = (*list)[TagFromName(BeamDescription)];
				stream << "\t";
				if (BeamDescription) {
					stream << "\t\t";
					BeamDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamDescription> not present\n";

				Attribute *BeamType = (*list)[TagFromName(BeamType)];
				stream << "\t";
				if (BeamType) {
					stream << "\t\t";
					BeamType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamType> not present\n";

				Attribute *RadiationType = (*list)[TagFromName(RadiationType)];
				stream << "\t";
				if (RadiationType) {
					stream << "\t\t";
					RadiationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationType> not present\n";

	Attribute *PrimaryFluenceModeSequence = (*list)[TagFromName(PrimaryFluenceModeSequence)];
				stream << "\t";
				if (PrimaryFluenceModeSequence)
					stream << "\t\tSequence <PrimaryFluenceModeSequence>\n";
				else
					stream << "\t\tSequence <PrimaryFluenceModeSequence> not present\n";
				if (PrimaryFluenceModeSequence && strcmp(PrimaryFluenceModeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PrimaryFluenceModeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FluenceMode = (*list)[TagFromName(FluenceMode)];
							stream << "\t\t";
							if (FluenceMode) {
								stream << "\t\t";
								FluenceMode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FluenceMode> not present\n";

							Attribute *FluenceModeID = (*list)[TagFromName(FluenceModeID)];
							stream << "\t\t";
							if (FluenceModeID) {
								stream << "\t\t";
								FluenceModeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FluenceModeID> not present\n";

						}
					}
				}
				Attribute *HighDoseTechniqueType = (*list)[TagFromName(HighDoseTechniqueType)];
				stream << "\t";
				if (HighDoseTechniqueType) {
					stream << "\t\t";
					HighDoseTechniqueType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HighDoseTechniqueType> not present\n";

				Attribute *TreatmentMachineName = (*list)[TagFromName(TreatmentMachineName)];
				stream << "\t";
				if (TreatmentMachineName) {
					stream << "\t\t";
					TreatmentMachineName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentMachineName> not present\n";

				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *InstitutionName = (*list)[TagFromName(InstitutionName)];
				stream << "\t";
				if (InstitutionName) {
					stream << "\t\t";
					InstitutionName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionName> not present\n";

				Attribute *InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
				stream << "\t";
				if (InstitutionAddress) {
					stream << "\t\t";
					InstitutionAddress->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionAddress> not present\n";

				Attribute *InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
				stream << "\t";
				if (InstitutionalDepartmentName) {
					stream << "\t\t";
					InstitutionalDepartmentName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	Attribute *InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
				stream << "\t";
				if (InstitutionalDepartmentTypeCodeSequence)
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
				if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
				stream << "\t";
				if (DeviceSerialNumber) {
					stream << "\t\t";
					DeviceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceSerialNumber> not present\n";

				Attribute *PrimaryDosimeterUnit = (*list)[TagFromName(PrimaryDosimeterUnit)];
				stream << "\t";
				if (PrimaryDosimeterUnit) {
					stream << "\t\t";
					PrimaryDosimeterUnit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PrimaryDosimeterUnit> not present\n";

				Attribute *ReferencedToleranceTableNumber = (*list)[TagFromName(ReferencedToleranceTableNumber)];
				stream << "\t";
				if (ReferencedToleranceTableNumber) {
					stream << "\t\t";
					ReferencedToleranceTableNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedToleranceTableNumber> not present\n";

				Attribute *SourceAxisDistance = (*list)[TagFromName(SourceAxisDistance)];
				stream << "\t";
				if (SourceAxisDistance) {
					stream << "\t\t";
					SourceAxisDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceAxisDistance> not present\n";

	Attribute *BeamLimitingDeviceSequence = (*list)[TagFromName(BeamLimitingDeviceSequence)];
				stream << "\t";
				if (BeamLimitingDeviceSequence)
					stream << "\t\tSequence <BeamLimitingDeviceSequence>\n";
				else
					stream << "\t\tSequence <BeamLimitingDeviceSequence> not present\n";
				if (BeamLimitingDeviceSequence && strcmp(BeamLimitingDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BeamLimitingDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *SourceToBeamLimitingDeviceDistance = (*list)[TagFromName(SourceToBeamLimitingDeviceDistance)];
							stream << "\t\t";
							if (SourceToBeamLimitingDeviceDistance) {
								stream << "\t\t";
								SourceToBeamLimitingDeviceDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToBeamLimitingDeviceDistance> not present\n";

							Attribute *NumberOfLeafJawPairs = (*list)[TagFromName(NumberOfLeafJawPairs)];
							stream << "\t\t";
							if (NumberOfLeafJawPairs) {
								stream << "\t\t";
								NumberOfLeafJawPairs->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfLeafJawPairs> not present\n";

							Attribute *LeafPositionBoundaries = (*list)[TagFromName(LeafPositionBoundaries)];
							stream << "\t\t";
							if (LeafPositionBoundaries) {
								stream << "\t\t";
								LeafPositionBoundaries->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LeafPositionBoundaries> not present\n";

						}
					}
				}
				Attribute *ReferencedPatientSetupNumber = (*list)[TagFromName(ReferencedPatientSetupNumber)];
				stream << "\t";
				if (ReferencedPatientSetupNumber) {
					stream << "\t\t";
					ReferencedPatientSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPatientSetupNumber> not present\n";

	Attribute *ReferencedReferenceImageSequence = (*list)[TagFromName(ReferencedReferenceImageSequence)];
				stream << "\t";
				if (ReferencedReferenceImageSequence)
					stream << "\t\tSequence <ReferencedReferenceImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedReferenceImageSequence> not present\n";
				if (ReferencedReferenceImageSequence && strcmp(ReferencedReferenceImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedReferenceImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *ReferenceImageNumber = (*list)[TagFromName(ReferenceImageNumber)];
							stream << "\t\t";
							if (ReferenceImageNumber) {
								stream << "\t\t";
								ReferenceImageNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferenceImageNumber> not present\n";

							Attribute *StartCumulativeMetersetWeight = (*list)[TagFromName(StartCumulativeMetersetWeight)];
							stream << "\t\t";
							if (StartCumulativeMetersetWeight) {
								stream << "\t\t";
								StartCumulativeMetersetWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <StartCumulativeMetersetWeight> not present\n";

							Attribute *EndCumulativeMetersetWeight = (*list)[TagFromName(EndCumulativeMetersetWeight)];
							stream << "\t\t";
							if (EndCumulativeMetersetWeight) {
								stream << "\t\t";
								EndCumulativeMetersetWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EndCumulativeMetersetWeight> not present\n";

						}
					}
				}
	Attribute *PlannedVerificationImageSequence = (*list)[TagFromName(PlannedVerificationImageSequence)];
				stream << "\t";
				if (PlannedVerificationImageSequence)
					stream << "\t\tSequence <PlannedVerificationImageSequence>\n";
				else
					stream << "\t\tSequence <PlannedVerificationImageSequence> not present\n";
				if (PlannedVerificationImageSequence && strcmp(PlannedVerificationImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PlannedVerificationImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *StartCumulativeMetersetWeight = (*list)[TagFromName(StartCumulativeMetersetWeight)];
							stream << "\t\t";
							if (StartCumulativeMetersetWeight) {
								stream << "\t\t";
								StartCumulativeMetersetWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <StartCumulativeMetersetWeight> not present\n";

							Attribute *MetersetExposure = (*list)[TagFromName(MetersetExposure)];
							stream << "\t\t";
							if (MetersetExposure) {
								stream << "\t\t";
								MetersetExposure->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MetersetExposure> not present\n";

							Attribute *EndCumulativeMetersetWeight = (*list)[TagFromName(EndCumulativeMetersetWeight)];
							stream << "\t\t";
							if (EndCumulativeMetersetWeight) {
								stream << "\t\t";
								EndCumulativeMetersetWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EndCumulativeMetersetWeight> not present\n";

							Attribute *RTImagePlane = (*list)[TagFromName(RTImagePlane)];
							stream << "\t\t";
							if (RTImagePlane) {
								stream << "\t\t";
								RTImagePlane->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTImagePlane> not present\n";

							Attribute *XRayImageReceptorAngle = (*list)[TagFromName(XRayImageReceptorAngle)];
							stream << "\t\t";
							if (XRayImageReceptorAngle) {
								stream << "\t\t";
								XRayImageReceptorAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <XRayImageReceptorAngle> not present\n";

							Attribute *RTImageOrientation = (*list)[TagFromName(RTImageOrientation)];
							stream << "\t\t";
							if (RTImageOrientation) {
								stream << "\t\t";
								RTImageOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTImageOrientation> not present\n";

							Attribute *RTImagePosition = (*list)[TagFromName(RTImagePosition)];
							stream << "\t\t";
							if (RTImagePosition) {
								stream << "\t\t";
								RTImagePosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTImagePosition> not present\n";

							Attribute *RTImageSID = (*list)[TagFromName(RTImageSID)];
							stream << "\t\t";
							if (RTImageSID) {
								stream << "\t\t";
								RTImageSID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTImageSID> not present\n";

							Attribute *ImagingDeviceSpecificAcquisitionParameters = (*list)[TagFromName(ImagingDeviceSpecificAcquisitionParameters)];
							stream << "\t\t";
							if (ImagingDeviceSpecificAcquisitionParameters) {
								stream << "\t\t";
								ImagingDeviceSpecificAcquisitionParameters->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImagingDeviceSpecificAcquisitionParameters> not present\n";

							Attribute *ReferencedReferenceImageNumber = (*list)[TagFromName(ReferencedReferenceImageNumber)];
							stream << "\t\t";
							if (ReferencedReferenceImageNumber) {
								stream << "\t\t";
								ReferencedReferenceImageNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedReferenceImageNumber> not present\n";

						}
					}
				}
				Attribute *TreatmentDeliveryType = (*list)[TagFromName(TreatmentDeliveryType)];
				stream << "\t";
				if (TreatmentDeliveryType) {
					stream << "\t\t";
					TreatmentDeliveryType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentDeliveryType> not present\n";

	Attribute *ReferencedDoseSequence = (*list)[TagFromName(ReferencedDoseSequence)];
				stream << "\t";
				if (ReferencedDoseSequence)
					stream << "\t\tSequence <ReferencedDoseSequence>\n";
				else
					stream << "\t\tSequence <ReferencedDoseSequence> not present\n";
				if (ReferencedDoseSequence && strcmp(ReferencedDoseSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedDoseSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *NumberOfWedges = (*list)[TagFromName(NumberOfWedges)];
				stream << "\t";
				if (NumberOfWedges) {
					stream << "\t\t";
					NumberOfWedges->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfWedges> not present\n";

	Attribute *WedgeSequence = (*list)[TagFromName(WedgeSequence)];
				stream << "\t";
				if (WedgeSequence)
					stream << "\t\tSequence <WedgeSequence>\n";
				else
					stream << "\t\tSequence <WedgeSequence> not present\n";
				if (WedgeSequence && strcmp(WedgeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=WedgeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *WedgeNumber = (*list)[TagFromName(WedgeNumber)];
							stream << "\t\t";
							if (WedgeNumber) {
								stream << "\t\t";
								WedgeNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeNumber> not present\n";

							Attribute *WedgeType = (*list)[TagFromName(WedgeType)];
							stream << "\t\t";
							if (WedgeType) {
								stream << "\t\t";
								WedgeType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeType> not present\n";

							Attribute *WedgeID = (*list)[TagFromName(WedgeID)];
							stream << "\t\t";
							if (WedgeID) {
								stream << "\t\t";
								WedgeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *WedgeAngle = (*list)[TagFromName(WedgeAngle)];
							stream << "\t\t";
							if (WedgeAngle) {
								stream << "\t\t";
								WedgeAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeAngle> not present\n";

							Attribute *WedgeFactor = (*list)[TagFromName(WedgeFactor)];
							stream << "\t\t";
							if (WedgeFactor) {
								stream << "\t\t";
								WedgeFactor->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeFactor> not present\n";

							Attribute *WedgeOrientation = (*list)[TagFromName(WedgeOrientation)];
							stream << "\t\t";
							if (WedgeOrientation) {
								stream << "\t\t";
								WedgeOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeOrientation> not present\n";

							Attribute *SourceToWedgeTrayDistance = (*list)[TagFromName(SourceToWedgeTrayDistance)];
							stream << "\t\t";
							if (SourceToWedgeTrayDistance) {
								stream << "\t\t";
								SourceToWedgeTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToWedgeTrayDistance> not present\n";

						}
					}
				}
				Attribute *NumberOfCompensators = (*list)[TagFromName(NumberOfCompensators)];
				stream << "\t";
				if (NumberOfCompensators) {
					stream << "\t\t";
					NumberOfCompensators->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfCompensators> not present\n";

				Attribute *TotalCompensatorTrayFactor = (*list)[TagFromName(TotalCompensatorTrayFactor)];
				stream << "\t";
				if (TotalCompensatorTrayFactor) {
					stream << "\t\t";
					TotalCompensatorTrayFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalCompensatorTrayFactor> not present\n";

	Attribute *CompensatorSequence = (*list)[TagFromName(CompensatorSequence)];
				stream << "\t";
				if (CompensatorSequence)
					stream << "\t\tSequence <CompensatorSequence>\n";
				else
					stream << "\t\tSequence <CompensatorSequence> not present\n";
				if (CompensatorSequence && strcmp(CompensatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=CompensatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *CompensatorDescription = (*list)[TagFromName(CompensatorDescription)];
							stream << "\t\t";
							if (CompensatorDescription) {
								stream << "\t\t";
								CompensatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorDescription> not present\n";

							Attribute *CompensatorNumber = (*list)[TagFromName(CompensatorNumber)];
							stream << "\t\t";
							if (CompensatorNumber) {
								stream << "\t\t";
								CompensatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorNumber> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *CompensatorID = (*list)[TagFromName(CompensatorID)];
							stream << "\t\t";
							if (CompensatorID) {
								stream << "\t\t";
								CompensatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *CompensatorTrayID = (*list)[TagFromName(CompensatorTrayID)];
							stream << "\t\t";
							if (CompensatorTrayID) {
								stream << "\t\t";
								CompensatorTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorTrayID> not present\n";

							Attribute *TrayAccessoryCode = (*list)[TagFromName(TrayAccessoryCode)];
							stream << "\t\t";
							if (TrayAccessoryCode) {
								stream << "\t\t";
								TrayAccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrayAccessoryCode> not present\n";

							Attribute *SourceToCompensatorTrayDistance = (*list)[TagFromName(SourceToCompensatorTrayDistance)];
							stream << "\t\t";
							if (SourceToCompensatorTrayDistance) {
								stream << "\t\t";
								SourceToCompensatorTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToCompensatorTrayDistance> not present\n";

							Attribute *CompensatorDivergence = (*list)[TagFromName(CompensatorDivergence)];
							stream << "\t\t";
							if (CompensatorDivergence) {
								stream << "\t\t";
								CompensatorDivergence->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorDivergence> not present\n";

							Attribute *CompensatorMountingPosition = (*list)[TagFromName(CompensatorMountingPosition)];
							stream << "\t\t";
							if (CompensatorMountingPosition) {
								stream << "\t\t";
								CompensatorMountingPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorMountingPosition> not present\n";

							Attribute *CompensatorRows = (*list)[TagFromName(CompensatorRows)];
							stream << "\t\t";
							if (CompensatorRows) {
								stream << "\t\t";
								CompensatorRows->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorRows> not present\n";

							Attribute *CompensatorColumns = (*list)[TagFromName(CompensatorColumns)];
							stream << "\t\t";
							if (CompensatorColumns) {
								stream << "\t\t";
								CompensatorColumns->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorColumns> not present\n";

							Attribute *CompensatorPixelSpacing = (*list)[TagFromName(CompensatorPixelSpacing)];
							stream << "\t\t";
							if (CompensatorPixelSpacing) {
								stream << "\t\t";
								CompensatorPixelSpacing->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorPixelSpacing> not present\n";

							Attribute *CompensatorPosition = (*list)[TagFromName(CompensatorPosition)];
							stream << "\t\t";
							if (CompensatorPosition) {
								stream << "\t\t";
								CompensatorPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorPosition> not present\n";

							Attribute *CompensatorTransmissionData = (*list)[TagFromName(CompensatorTransmissionData)];
							stream << "\t\t";
							if (CompensatorTransmissionData) {
								stream << "\t\t";
								CompensatorTransmissionData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorTransmissionData> not present\n";

							Attribute *CompensatorThicknessData = (*list)[TagFromName(CompensatorThicknessData)];
							stream << "\t\t";
							if (CompensatorThicknessData) {
								stream << "\t\t";
								CompensatorThicknessData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorThicknessData> not present\n";

							Attribute *SourceToCompensatorDistance = (*list)[TagFromName(SourceToCompensatorDistance)];
							stream << "\t\t";
							if (SourceToCompensatorDistance) {
								stream << "\t\t";
								SourceToCompensatorDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToCompensatorDistance> not present\n";

						}
					}
				}
				Attribute *NumberOfBoli = (*list)[TagFromName(NumberOfBoli)];
				stream << "\t";
				if (NumberOfBoli) {
					stream << "\t\t";
					NumberOfBoli->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBoli> not present\n";

	Attribute *ReferencedBolusSequence = (*list)[TagFromName(ReferencedBolusSequence)];
				stream << "\t";
				if (ReferencedBolusSequence)
					stream << "\t\tSequence <ReferencedBolusSequence>\n";
				else
					stream << "\t\tSequence <ReferencedBolusSequence> not present\n";
				if (ReferencedBolusSequence && strcmp(ReferencedBolusSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedBolusSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *BolusID = (*list)[TagFromName(BolusID)];
							stream << "\t\t";
							if (BolusID) {
								stream << "\t\t";
								BolusID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BolusID> not present\n";

							Attribute *BolusDescription = (*list)[TagFromName(BolusDescription)];
							stream << "\t\t";
							if (BolusDescription) {
								stream << "\t\t";
								BolusDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BolusDescription> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfBlocks = (*list)[TagFromName(NumberOfBlocks)];
				stream << "\t";
				if (NumberOfBlocks) {
					stream << "\t\t";
					NumberOfBlocks->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBlocks> not present\n";

				Attribute *TotalBlockTrayFactor = (*list)[TagFromName(TotalBlockTrayFactor)];
				stream << "\t";
				if (TotalBlockTrayFactor) {
					stream << "\t\t";
					TotalBlockTrayFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalBlockTrayFactor> not present\n";

	Attribute *BlockSequence = (*list)[TagFromName(BlockSequence)];
				stream << "\t";
				if (BlockSequence)
					stream << "\t\tSequence <BlockSequence>\n";
				else
					stream << "\t\tSequence <BlockSequence> not present\n";
				if (BlockSequence && strcmp(BlockSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BlockSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BlockTrayID = (*list)[TagFromName(BlockTrayID)];
							stream << "\t\t";
							if (BlockTrayID) {
								stream << "\t\t";
								BlockTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockTrayID> not present\n";

							Attribute *TrayAccessoryCode = (*list)[TagFromName(TrayAccessoryCode)];
							stream << "\t\t";
							if (TrayAccessoryCode) {
								stream << "\t\t";
								TrayAccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrayAccessoryCode> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *SourceToBlockTrayDistance = (*list)[TagFromName(SourceToBlockTrayDistance)];
							stream << "\t\t";
							if (SourceToBlockTrayDistance) {
								stream << "\t\t";
								SourceToBlockTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToBlockTrayDistance> not present\n";

							Attribute *BlockType = (*list)[TagFromName(BlockType)];
							stream << "\t\t";
							if (BlockType) {
								stream << "\t\t";
								BlockType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockType> not present\n";

							Attribute *BlockDivergence = (*list)[TagFromName(BlockDivergence)];
							stream << "\t\t";
							if (BlockDivergence) {
								stream << "\t\t";
								BlockDivergence->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockDivergence> not present\n";

							Attribute *BlockMountingPosition = (*list)[TagFromName(BlockMountingPosition)];
							stream << "\t\t";
							if (BlockMountingPosition) {
								stream << "\t\t";
								BlockMountingPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockMountingPosition> not present\n";

							Attribute *BlockNumber = (*list)[TagFromName(BlockNumber)];
							stream << "\t\t";
							if (BlockNumber) {
								stream << "\t\t";
								BlockNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockNumber> not present\n";

							Attribute *BlockName = (*list)[TagFromName(BlockName)];
							stream << "\t\t";
							if (BlockName) {
								stream << "\t\t";
								BlockName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockName> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *BlockThickness = (*list)[TagFromName(BlockThickness)];
							stream << "\t\t";
							if (BlockThickness) {
								stream << "\t\t";
								BlockThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockThickness> not present\n";

							Attribute *BlockTransmission = (*list)[TagFromName(BlockTransmission)];
							stream << "\t\t";
							if (BlockTransmission) {
								stream << "\t\t";
								BlockTransmission->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockTransmission> not present\n";

							Attribute *BlockNumberOfPoints = (*list)[TagFromName(BlockNumberOfPoints)];
							stream << "\t\t";
							if (BlockNumberOfPoints) {
								stream << "\t\t";
								BlockNumberOfPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockNumberOfPoints> not present\n";

							Attribute *BlockData = (*list)[TagFromName(BlockData)];
							stream << "\t\t";
							if (BlockData) {
								stream << "\t\t";
								BlockData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockData> not present\n";

						}
					}
				}
	Attribute *ApplicatorSequence = (*list)[TagFromName(ApplicatorSequence)];
				stream << "\t";
				if (ApplicatorSequence)
					stream << "\t\tSequence <ApplicatorSequence>\n";
				else
					stream << "\t\tSequence <ApplicatorSequence> not present\n";
				if (ApplicatorSequence && strcmp(ApplicatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ApplicatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ApplicatorID = (*list)[TagFromName(ApplicatorID)];
							stream << "\t\t";
							if (ApplicatorID) {
								stream << "\t\t";
								ApplicatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *ApplicatorType = (*list)[TagFromName(ApplicatorType)];
							stream << "\t\t";
							if (ApplicatorType) {
								stream << "\t\t";
								ApplicatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorType> not present\n";

							Attribute *ApplicatorDescription = (*list)[TagFromName(ApplicatorDescription)];
							stream << "\t\t";
							if (ApplicatorDescription) {
								stream << "\t\t";
								ApplicatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorDescription> not present\n";

	Attribute *GeneralAccessorySequence = (*list)[TagFromName(GeneralAccessorySequence)];
							stream << "\t\t";
							if (GeneralAccessorySequence)
								stream << "\t\tSequence <GeneralAccessorySequence>\n";
							else
								stream << "\t\tSequence <GeneralAccessorySequence> not present\n";
							if (GeneralAccessorySequence && strcmp(GeneralAccessorySequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=GeneralAccessorySequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *GeneralAccessoryNumber = (*list)[TagFromName(GeneralAccessoryNumber)];
										stream << "\t\t\t";
										if (GeneralAccessoryNumber) {
											stream << "\t\t";
											GeneralAccessoryNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryNumber> not present\n";

										Attribute *GeneralAccessoryID = (*list)[TagFromName(GeneralAccessoryID)];
										stream << "\t\t\t";
										if (GeneralAccessoryID) {
											stream << "\t\t";
											GeneralAccessoryID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryID> not present\n";

										Attribute *GeneralAccessoryDescription = (*list)[TagFromName(GeneralAccessoryDescription)];
										stream << "\t\t\t";
										if (GeneralAccessoryDescription) {
											stream << "\t\t";
											GeneralAccessoryDescription->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryDescription> not present\n";

										Attribute *GeneralAccessoryType = (*list)[TagFromName(GeneralAccessoryType)];
										stream << "\t\t\t";
										if (GeneralAccessoryType) {
											stream << "\t\t";
											GeneralAccessoryType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryType> not present\n";

										Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
										stream << "\t\t\t";
										if (AccessoryCode) {
											stream << "\t\t";
											AccessoryCode->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AccessoryCode> not present\n";

										Attribute *SourceToGeneralAccessoryDistance = (*list)[TagFromName(SourceToGeneralAccessoryDistance)];
										stream << "\t\t\t";
										if (SourceToGeneralAccessoryDistance) {
											stream << "\t\t";
											SourceToGeneralAccessoryDistance->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceToGeneralAccessoryDistance> not present\n";

									}
								}
							}
						}
					}
				}
				Attribute *FinalCumulativeMetersetWeight = (*list)[TagFromName(FinalCumulativeMetersetWeight)];
				stream << "\t";
				if (FinalCumulativeMetersetWeight) {
					stream << "\t\t";
					FinalCumulativeMetersetWeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FinalCumulativeMetersetWeight> not present\n";

				Attribute *NumberOfControlPoints = (*list)[TagFromName(NumberOfControlPoints)];
				stream << "\t";
				if (NumberOfControlPoints) {
					stream << "\t\t";
					NumberOfControlPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfControlPoints> not present\n";

	Attribute *ControlPointSequence = (*list)[TagFromName(ControlPointSequence)];
				stream << "\t";
				if (ControlPointSequence)
					stream << "\t\tSequence <ControlPointSequence>\n";
				else
					stream << "\t\tSequence <ControlPointSequence> not present\n";
				if (ControlPointSequence && strcmp(ControlPointSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ControlPointSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ControlPointIndex = (*list)[TagFromName(ControlPointIndex)];
							stream << "\t\t";
							if (ControlPointIndex) {
								stream << "\t\t";
								ControlPointIndex->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ControlPointIndex> not present\n";

							Attribute *CumulativeMetersetWeight = (*list)[TagFromName(CumulativeMetersetWeight)];
							stream << "\t\t";
							if (CumulativeMetersetWeight) {
								stream << "\t\t";
								CumulativeMetersetWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CumulativeMetersetWeight> not present\n";

	Attribute *ReferencedDoseReferenceSequence = (*list)[TagFromName(ReferencedDoseReferenceSequence)];
							stream << "\t\t";
							if (ReferencedDoseReferenceSequence)
								stream << "\t\tSequence <ReferencedDoseReferenceSequence>\n";
							else
								stream << "\t\tSequence <ReferencedDoseReferenceSequence> not present\n";
							if (ReferencedDoseReferenceSequence && strcmp(ReferencedDoseReferenceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedDoseReferenceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
										stream << "\t\t\t";
										if (ReferencedDoseReferenceNumber) {
											stream << "\t\t";
											ReferencedDoseReferenceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

										Attribute *CumulativeDoseReferenceCoefficient = (*list)[TagFromName(CumulativeDoseReferenceCoefficient)];
										stream << "\t\t\t";
										if (CumulativeDoseReferenceCoefficient) {
											stream << "\t\t";
											CumulativeDoseReferenceCoefficient->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CumulativeDoseReferenceCoefficient> not present\n";

									}
								}
							}
	Attribute *ReferencedDoseSequence = (*list)[TagFromName(ReferencedDoseSequence)];
							stream << "\t\t";
							if (ReferencedDoseSequence)
								stream << "\t\tSequence <ReferencedDoseSequence>\n";
							else
								stream << "\t\tSequence <ReferencedDoseSequence> not present\n";
							if (ReferencedDoseSequence && strcmp(ReferencedDoseSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedDoseSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

									}
								}
							}
							Attribute *NominalBeamEnergy = (*list)[TagFromName(NominalBeamEnergy)];
							stream << "\t\t";
							if (NominalBeamEnergy) {
								stream << "\t\t";
								NominalBeamEnergy->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NominalBeamEnergy> not present\n";

							Attribute *DoseRateSet = (*list)[TagFromName(DoseRateSet)];
							stream << "\t\t";
							if (DoseRateSet) {
								stream << "\t\t";
								DoseRateSet->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DoseRateSet> not present\n";

	Attribute *WedgePositionSequence = (*list)[TagFromName(WedgePositionSequence)];
							stream << "\t\t";
							if (WedgePositionSequence)
								stream << "\t\tSequence <WedgePositionSequence>\n";
							else
								stream << "\t\tSequence <WedgePositionSequence> not present\n";
							if (WedgePositionSequence && strcmp(WedgePositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=WedgePositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedWedgeNumber = (*list)[TagFromName(ReferencedWedgeNumber)];
										stream << "\t\t\t";
										if (ReferencedWedgeNumber) {
											stream << "\t\t";
											ReferencedWedgeNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedWedgeNumber> not present\n";

										Attribute *WedgePosition = (*list)[TagFromName(WedgePosition)];
										stream << "\t\t\t";
										if (WedgePosition) {
											stream << "\t\t";
											WedgePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <WedgePosition> not present\n";

									}
								}
							}
	Attribute *BeamLimitingDevicePositionSequence = (*list)[TagFromName(BeamLimitingDevicePositionSequence)];
							stream << "\t\t";
							if (BeamLimitingDevicePositionSequence)
								stream << "\t\tSequence <BeamLimitingDevicePositionSequence>\n";
							else
								stream << "\t\tSequence <BeamLimitingDevicePositionSequence> not present\n";
							if (BeamLimitingDevicePositionSequence && strcmp(BeamLimitingDevicePositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=BeamLimitingDevicePositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
										stream << "\t\t\t";
										if (RTBeamLimitingDeviceType) {
											stream << "\t\t";
											RTBeamLimitingDeviceType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

										Attribute *LeafJawPositions = (*list)[TagFromName(LeafJawPositions)];
										stream << "\t\t\t";
										if (LeafJawPositions) {
											stream << "\t\t";
											LeafJawPositions->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <LeafJawPositions> not present\n";

									}
								}
							}
							Attribute *GantryAngle = (*list)[TagFromName(GantryAngle)];
							stream << "\t\t";
							if (GantryAngle) {
								stream << "\t\t";
								GantryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryAngle> not present\n";

							Attribute *GantryRotationDirection = (*list)[TagFromName(GantryRotationDirection)];
							stream << "\t\t";
							if (GantryRotationDirection) {
								stream << "\t\t";
								GantryRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryRotationDirection> not present\n";

							Attribute *GantryPitchAngle = (*list)[TagFromName(GantryPitchAngle)];
							stream << "\t\t";
							if (GantryPitchAngle) {
								stream << "\t\t";
								GantryPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchAngle> not present\n";

							Attribute *GantryPitchRotationDirection = (*list)[TagFromName(GantryPitchRotationDirection)];
							stream << "\t\t";
							if (GantryPitchRotationDirection) {
								stream << "\t\t";
								GantryPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchRotationDirection> not present\n";

							Attribute *BeamLimitingDeviceAngle = (*list)[TagFromName(BeamLimitingDeviceAngle)];
							stream << "\t\t";
							if (BeamLimitingDeviceAngle) {
								stream << "\t\t";
								BeamLimitingDeviceAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceAngle> not present\n";

							Attribute *BeamLimitingDeviceRotationDirection = (*list)[TagFromName(BeamLimitingDeviceRotationDirection)];
							stream << "\t\t";
							if (BeamLimitingDeviceRotationDirection) {
								stream << "\t\t";
								BeamLimitingDeviceRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceRotationDirection> not present\n";

							Attribute *PatientSupportAngle = (*list)[TagFromName(PatientSupportAngle)];
							stream << "\t\t";
							if (PatientSupportAngle) {
								stream << "\t\t";
								PatientSupportAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportAngle> not present\n";

							Attribute *PatientSupportRotationDirection = (*list)[TagFromName(PatientSupportRotationDirection)];
							stream << "\t\t";
							if (PatientSupportRotationDirection) {
								stream << "\t\t";
								PatientSupportRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportRotationDirection> not present\n";

							Attribute *TableTopEccentricAxisDistance = (*list)[TagFromName(TableTopEccentricAxisDistance)];
							stream << "\t\t";
							if (TableTopEccentricAxisDistance) {
								stream << "\t\t";
								TableTopEccentricAxisDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopEccentricAxisDistance> not present\n";

							Attribute *TableTopEccentricAngle = (*list)[TagFromName(TableTopEccentricAngle)];
							stream << "\t\t";
							if (TableTopEccentricAngle) {
								stream << "\t\t";
								TableTopEccentricAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopEccentricAngle> not present\n";

							Attribute *TableTopEccentricRotationDirection = (*list)[TagFromName(TableTopEccentricRotationDirection)];
							stream << "\t\t";
							if (TableTopEccentricRotationDirection) {
								stream << "\t\t";
								TableTopEccentricRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopEccentricRotationDirection> not present\n";

							Attribute *TableTopPitchAngle = (*list)[TagFromName(TableTopPitchAngle)];
							stream << "\t\t";
							if (TableTopPitchAngle) {
								stream << "\t\t";
								TableTopPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchAngle> not present\n";

							Attribute *TableTopPitchRotationDirection = (*list)[TagFromName(TableTopPitchRotationDirection)];
							stream << "\t\t";
							if (TableTopPitchRotationDirection) {
								stream << "\t\t";
								TableTopPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchRotationDirection> not present\n";

							Attribute *TableTopRollAngle = (*list)[TagFromName(TableTopRollAngle)];
							stream << "\t\t";
							if (TableTopRollAngle) {
								stream << "\t\t";
								TableTopRollAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollAngle> not present\n";

							Attribute *TableTopRollRotationDirection = (*list)[TagFromName(TableTopRollRotationDirection)];
							stream << "\t\t";
							if (TableTopRollRotationDirection) {
								stream << "\t\t";
								TableTopRollRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollRotationDirection> not present\n";

							Attribute *TableTopVerticalPosition = (*list)[TagFromName(TableTopVerticalPosition)];
							stream << "\t\t";
							if (TableTopVerticalPosition) {
								stream << "\t\t";
								TableTopVerticalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopVerticalPosition> not present\n";

							Attribute *TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
							stream << "\t\t";
							if (TableTopLongitudinalPosition) {
								stream << "\t\t";
								TableTopLongitudinalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

							Attribute *TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
							stream << "\t\t";
							if (TableTopLateralPosition) {
								stream << "\t\t";
								TableTopLateralPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLateralPosition> not present\n";

							Attribute *IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
							stream << "\t\t";
							if (IsocenterPosition) {
								stream << "\t\t";
								IsocenterPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterPosition> not present\n";

							Attribute *SurfaceEntryPoint = (*list)[TagFromName(SurfaceEntryPoint)];
							stream << "\t\t";
							if (SurfaceEntryPoint) {
								stream << "\t\t";
								SurfaceEntryPoint->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SurfaceEntryPoint> not present\n";

							Attribute *SourceToSurfaceDistance = (*list)[TagFromName(SourceToSurfaceDistance)];
							stream << "\t\t";
							if (SourceToSurfaceDistance) {
								stream << "\t\t";
								SourceToSurfaceDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceToSurfaceDistance> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_RTBrachyApplicationSetups::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTBrachyApplicationSetups>\n";

	if (BrachyTreatmentTechnique) {
		stream << "\t\t";
		BrachyTreatmentTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BrachyTreatmentTechnique> not present\n";

	if (BrachyTreatmentType) {
		stream << "\t\t";
		BrachyTreatmentType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BrachyTreatmentType> not present\n";

	if (TreatmentMachineSequence)
		stream << "\t\tSequence <TreatmentMachineSequence>\n";
	else
		stream << "\t\tSequence <TreatmentMachineSequence> not present\n";
	if (TreatmentMachineSequence && strcmp(TreatmentMachineSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentMachineSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TreatmentMachineName = (*list)[TagFromName(TreatmentMachineName)];
				stream << "\t";
				if (TreatmentMachineName) {
					stream << "\t\t";
					TreatmentMachineName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentMachineName> not present\n";

				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *InstitutionName = (*list)[TagFromName(InstitutionName)];
				stream << "\t";
				if (InstitutionName) {
					stream << "\t\t";
					InstitutionName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionName> not present\n";

				Attribute *InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
				stream << "\t";
				if (InstitutionAddress) {
					stream << "\t\t";
					InstitutionAddress->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionAddress> not present\n";

				Attribute *InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
				stream << "\t";
				if (InstitutionalDepartmentName) {
					stream << "\t\t";
					InstitutionalDepartmentName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	Attribute *InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
				stream << "\t";
				if (InstitutionalDepartmentTypeCodeSequence)
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
				if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
				stream << "\t";
				if (DeviceSerialNumber) {
					stream << "\t\t";
					DeviceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceSerialNumber> not present\n";

			}
		}
	}
	if (SourceSequence)
		stream << "\t\tSequence <SourceSequence>\n";
	else
		stream << "\t\tSequence <SourceSequence> not present\n";
	if (SourceSequence && strcmp(SourceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SourceNumber = (*list)[TagFromName(SourceNumber)];
				stream << "\t";
				if (SourceNumber) {
					stream << "\t\t";
					SourceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceNumber> not present\n";

				Attribute *SourceSerialNumber = (*list)[TagFromName(SourceSerialNumber)];
				stream << "\t";
				if (SourceSerialNumber) {
					stream << "\t\t";
					SourceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceSerialNumber> not present\n";

				Attribute *SourceModelID = (*list)[TagFromName(SourceModelID)];
				stream << "\t";
				if (SourceModelID) {
					stream << "\t\t";
					SourceModelID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceModelID> not present\n";

				Attribute *SourceDescription = (*list)[TagFromName(SourceDescription)];
				stream << "\t";
				if (SourceDescription) {
					stream << "\t\t";
					SourceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceDescription> not present\n";

				Attribute *SourceType = (*list)[TagFromName(SourceType)];
				stream << "\t";
				if (SourceType) {
					stream << "\t\t";
					SourceType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceType> not present\n";

				Attribute *SourceManufacturer = (*list)[TagFromName(SourceManufacturer)];
				stream << "\t";
				if (SourceManufacturer) {
					stream << "\t\t";
					SourceManufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceManufacturer> not present\n";

				Attribute *ActiveSourceDiameter = (*list)[TagFromName(ActiveSourceDiameter)];
				stream << "\t";
				if (ActiveSourceDiameter) {
					stream << "\t\t";
					ActiveSourceDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ActiveSourceDiameter> not present\n";

				Attribute *ActiveSourceLength = (*list)[TagFromName(ActiveSourceLength)];
				stream << "\t";
				if (ActiveSourceLength) {
					stream << "\t\t";
					ActiveSourceLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ActiveSourceLength> not present\n";

				Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
				stream << "\t";
				if (MaterialID) {
					stream << "\t\t";
					MaterialID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaterialID> not present\n";

				Attribute *SourceEncapsulationNominalThickness = (*list)[TagFromName(SourceEncapsulationNominalThickness)];
				stream << "\t";
				if (SourceEncapsulationNominalThickness) {
					stream << "\t\t";
					SourceEncapsulationNominalThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceEncapsulationNominalThickness> not present\n";

				Attribute *SourceEncapsulationNominalTransmission = (*list)[TagFromName(SourceEncapsulationNominalTransmission)];
				stream << "\t";
				if (SourceEncapsulationNominalTransmission) {
					stream << "\t\t";
					SourceEncapsulationNominalTransmission->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceEncapsulationNominalTransmission> not present\n";

				Attribute *SourceIsotopeName = (*list)[TagFromName(SourceIsotopeName)];
				stream << "\t";
				if (SourceIsotopeName) {
					stream << "\t\t";
					SourceIsotopeName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceIsotopeName> not present\n";

				Attribute *SourceIsotopeHalfLife = (*list)[TagFromName(SourceIsotopeHalfLife)];
				stream << "\t";
				if (SourceIsotopeHalfLife) {
					stream << "\t\t";
					SourceIsotopeHalfLife->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceIsotopeHalfLife> not present\n";

				Attribute *SourceStrengthUnits = (*list)[TagFromName(SourceStrengthUnits)];
				stream << "\t";
				if (SourceStrengthUnits) {
					stream << "\t\t";
					SourceStrengthUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrengthUnits> not present\n";

				Attribute *ReferenceAirKermaRate = (*list)[TagFromName(ReferenceAirKermaRate)];
				stream << "\t";
				if (ReferenceAirKermaRate) {
					stream << "\t\t";
					ReferenceAirKermaRate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferenceAirKermaRate> not present\n";

				Attribute *SourceStrength = (*list)[TagFromName(SourceStrength)];
				stream << "\t";
				if (SourceStrength) {
					stream << "\t\t";
					SourceStrength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrength> not present\n";

				Attribute *SourceStrengthReferenceDate = (*list)[TagFromName(SourceStrengthReferenceDate)];
				stream << "\t";
				if (SourceStrengthReferenceDate) {
					stream << "\t\t";
					SourceStrengthReferenceDate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrengthReferenceDate> not present\n";

				Attribute *SourceStrengthReferenceTime = (*list)[TagFromName(SourceStrengthReferenceTime)];
				stream << "\t";
				if (SourceStrengthReferenceTime) {
					stream << "\t\t";
					SourceStrengthReferenceTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrengthReferenceTime> not present\n";

			}
		}
	}
	if (ApplicationSetupSequence)
		stream << "\t\tSequence <ApplicationSetupSequence>\n";
	else
		stream << "\t\tSequence <ApplicationSetupSequence> not present\n";
	if (ApplicationSetupSequence && strcmp(ApplicationSetupSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ApplicationSetupSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ApplicationSetupType = (*list)[TagFromName(ApplicationSetupType)];
				stream << "\t";
				if (ApplicationSetupType) {
					stream << "\t\t";
					ApplicationSetupType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupType> not present\n";

				Attribute *ApplicationSetupNumber = (*list)[TagFromName(ApplicationSetupNumber)];
				stream << "\t";
				if (ApplicationSetupNumber) {
					stream << "\t\t";
					ApplicationSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupNumber> not present\n";

				Attribute *ApplicationSetupName = (*list)[TagFromName(ApplicationSetupName)];
				stream << "\t";
				if (ApplicationSetupName) {
					stream << "\t\t";
					ApplicationSetupName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupName> not present\n";

				Attribute *ApplicationSetupManufacturer = (*list)[TagFromName(ApplicationSetupManufacturer)];
				stream << "\t";
				if (ApplicationSetupManufacturer) {
					stream << "\t\t";
					ApplicationSetupManufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupManufacturer> not present\n";

				Attribute *TemplateNumber = (*list)[TagFromName(TemplateNumber)];
				stream << "\t";
				if (TemplateNumber) {
					stream << "\t\t";
					TemplateNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateNumber> not present\n";

				Attribute *TemplateType = (*list)[TagFromName(TemplateType)];
				stream << "\t";
				if (TemplateType) {
					stream << "\t\t";
					TemplateType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateType> not present\n";

				Attribute *TemplateName = (*list)[TagFromName(TemplateName)];
				stream << "\t";
				if (TemplateName) {
					stream << "\t\t";
					TemplateName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateName> not present\n";

	Attribute *ReferencedReferenceImageSequence = (*list)[TagFromName(ReferencedReferenceImageSequence)];
				stream << "\t";
				if (ReferencedReferenceImageSequence)
					stream << "\t\tSequence <ReferencedReferenceImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedReferenceImageSequence> not present\n";
				if (ReferencedReferenceImageSequence && strcmp(ReferencedReferenceImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedReferenceImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *TotalReferenceAirKerma = (*list)[TagFromName(TotalReferenceAirKerma)];
				stream << "\t";
				if (TotalReferenceAirKerma) {
					stream << "\t\t";
					TotalReferenceAirKerma->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalReferenceAirKerma> not present\n";

	Attribute *BrachyAccessoryDeviceSequence = (*list)[TagFromName(BrachyAccessoryDeviceSequence)];
				stream << "\t";
				if (BrachyAccessoryDeviceSequence)
					stream << "\t\tSequence <BrachyAccessoryDeviceSequence>\n";
				else
					stream << "\t\tSequence <BrachyAccessoryDeviceSequence> not present\n";
				if (BrachyAccessoryDeviceSequence && strcmp(BrachyAccessoryDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BrachyAccessoryDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BrachyAccessoryDeviceNumber = (*list)[TagFromName(BrachyAccessoryDeviceNumber)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceNumber) {
								stream << "\t\t";
								BrachyAccessoryDeviceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceNumber> not present\n";

							Attribute *BrachyAccessoryDeviceID = (*list)[TagFromName(BrachyAccessoryDeviceID)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceID) {
								stream << "\t\t";
								BrachyAccessoryDeviceID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceID> not present\n";

							Attribute *BrachyAccessoryDeviceType = (*list)[TagFromName(BrachyAccessoryDeviceType)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceType) {
								stream << "\t\t";
								BrachyAccessoryDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceType> not present\n";

							Attribute *BrachyAccessoryDeviceName = (*list)[TagFromName(BrachyAccessoryDeviceName)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceName) {
								stream << "\t\t";
								BrachyAccessoryDeviceName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceName> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *BrachyAccessoryDeviceNominalThickness = (*list)[TagFromName(BrachyAccessoryDeviceNominalThickness)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceNominalThickness) {
								stream << "\t\t";
								BrachyAccessoryDeviceNominalThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceNominalThickness> not present\n";

							Attribute *BrachyAccessoryDeviceNominalTransmission = (*list)[TagFromName(BrachyAccessoryDeviceNominalTransmission)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceNominalTransmission) {
								stream << "\t\t";
								BrachyAccessoryDeviceNominalTransmission->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceNominalTransmission> not present\n";

							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

						}
					}
				}
	Attribute *ChannelSequence = (*list)[TagFromName(ChannelSequence)];
				stream << "\t";
				if (ChannelSequence)
					stream << "\t\tSequence <ChannelSequence>\n";
				else
					stream << "\t\tSequence <ChannelSequence> not present\n";
				if (ChannelSequence && strcmp(ChannelSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ChannelSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ChannelNumber = (*list)[TagFromName(ChannelNumber)];
							stream << "\t\t";
							if (ChannelNumber) {
								stream << "\t\t";
								ChannelNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelNumber> not present\n";

							Attribute *ChannelLength = (*list)[TagFromName(ChannelLength)];
							stream << "\t\t";
							if (ChannelLength) {
								stream << "\t\t";
								ChannelLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelLength> not present\n";

							Attribute *ChannelTotalTime = (*list)[TagFromName(ChannelTotalTime)];
							stream << "\t\t";
							if (ChannelTotalTime) {
								stream << "\t\t";
								ChannelTotalTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelTotalTime> not present\n";

							Attribute *SourceMovementType = (*list)[TagFromName(SourceMovementType)];
							stream << "\t\t";
							if (SourceMovementType) {
								stream << "\t\t";
								SourceMovementType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceMovementType> not present\n";

							Attribute *NumberOfPulses = (*list)[TagFromName(NumberOfPulses)];
							stream << "\t\t";
							if (NumberOfPulses) {
								stream << "\t\t";
								NumberOfPulses->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfPulses> not present\n";

							Attribute *PulseRepetitionInterval = (*list)[TagFromName(PulseRepetitionInterval)];
							stream << "\t\t";
							if (PulseRepetitionInterval) {
								stream << "\t\t";
								PulseRepetitionInterval->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PulseRepetitionInterval> not present\n";

							Attribute *SourceApplicatorNumber = (*list)[TagFromName(SourceApplicatorNumber)];
							stream << "\t\t";
							if (SourceApplicatorNumber) {
								stream << "\t\t";
								SourceApplicatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorNumber> not present\n";

							Attribute *SourceApplicatorID = (*list)[TagFromName(SourceApplicatorID)];
							stream << "\t\t";
							if (SourceApplicatorID) {
								stream << "\t\t";
								SourceApplicatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorID> not present\n";

							Attribute *SourceApplicatorType = (*list)[TagFromName(SourceApplicatorType)];
							stream << "\t\t";
							if (SourceApplicatorType) {
								stream << "\t\t";
								SourceApplicatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorType> not present\n";

							Attribute *SourceApplicatorName = (*list)[TagFromName(SourceApplicatorName)];
							stream << "\t\t";
							if (SourceApplicatorName) {
								stream << "\t\t";
								SourceApplicatorName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorName> not present\n";

							Attribute *SourceApplicatorLength = (*list)[TagFromName(SourceApplicatorLength)];
							stream << "\t\t";
							if (SourceApplicatorLength) {
								stream << "\t\t";
								SourceApplicatorLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorLength> not present\n";

							Attribute *SourceApplicatorManufacturer = (*list)[TagFromName(SourceApplicatorManufacturer)];
							stream << "\t\t";
							if (SourceApplicatorManufacturer) {
								stream << "\t\t";
								SourceApplicatorManufacturer->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorManufacturer> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *SourceApplicatorWallNominalThickness = (*list)[TagFromName(SourceApplicatorWallNominalThickness)];
							stream << "\t\t";
							if (SourceApplicatorWallNominalThickness) {
								stream << "\t\t";
								SourceApplicatorWallNominalThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorWallNominalThickness> not present\n";

							Attribute *SourceApplicatorWallNominalTransmission = (*list)[TagFromName(SourceApplicatorWallNominalTransmission)];
							stream << "\t\t";
							if (SourceApplicatorWallNominalTransmission) {
								stream << "\t\t";
								SourceApplicatorWallNominalTransmission->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorWallNominalTransmission> not present\n";

							Attribute *SourceApplicatorStepSize = (*list)[TagFromName(SourceApplicatorStepSize)];
							stream << "\t\t";
							if (SourceApplicatorStepSize) {
								stream << "\t\t";
								SourceApplicatorStepSize->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceApplicatorStepSize> not present\n";

							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *TransferTubeNumber = (*list)[TagFromName(TransferTubeNumber)];
							stream << "\t\t";
							if (TransferTubeNumber) {
								stream << "\t\t";
								TransferTubeNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TransferTubeNumber> not present\n";

							Attribute *TransferTubeLength = (*list)[TagFromName(TransferTubeLength)];
							stream << "\t\t";
							if (TransferTubeLength) {
								stream << "\t\t";
								TransferTubeLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TransferTubeLength> not present\n";

	Attribute *ChannelShieldSequence = (*list)[TagFromName(ChannelShieldSequence)];
							stream << "\t\t";
							if (ChannelShieldSequence)
								stream << "\t\tSequence <ChannelShieldSequence>\n";
							else
								stream << "\t\tSequence <ChannelShieldSequence> not present\n";
							if (ChannelShieldSequence && strcmp(ChannelShieldSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ChannelShieldSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ChannelShieldNumber = (*list)[TagFromName(ChannelShieldNumber)];
										stream << "\t\t\t";
										if (ChannelShieldNumber) {
											stream << "\t\t";
											ChannelShieldNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldNumber> not present\n";

										Attribute *ChannelShieldID = (*list)[TagFromName(ChannelShieldID)];
										stream << "\t\t\t";
										if (ChannelShieldID) {
											stream << "\t\t";
											ChannelShieldID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldID> not present\n";

										Attribute *ChannelShieldName = (*list)[TagFromName(ChannelShieldName)];
										stream << "\t\t\t";
										if (ChannelShieldName) {
											stream << "\t\t";
											ChannelShieldName->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldName> not present\n";

										Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
										stream << "\t\t\t";
										if (MaterialID) {
											stream << "\t\t";
											MaterialID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <MaterialID> not present\n";

										Attribute *ChannelShieldNominalThickness = (*list)[TagFromName(ChannelShieldNominalThickness)];
										stream << "\t\t\t";
										if (ChannelShieldNominalThickness) {
											stream << "\t\t";
											ChannelShieldNominalThickness->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldNominalThickness> not present\n";

										Attribute *ChannelShieldNominalTransmission = (*list)[TagFromName(ChannelShieldNominalTransmission)];
										stream << "\t\t\t";
										if (ChannelShieldNominalTransmission) {
											stream << "\t\t";
											ChannelShieldNominalTransmission->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldNominalTransmission> not present\n";

										Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
										stream << "\t\t\t";
										if (ReferencedROINumber) {
											stream << "\t\t";
											ReferencedROINumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedROINumber> not present\n";

									}
								}
							}
							Attribute *ReferencedSourceNumber = (*list)[TagFromName(ReferencedSourceNumber)];
							stream << "\t\t";
							if (ReferencedSourceNumber) {
								stream << "\t\t";
								ReferencedSourceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSourceNumber> not present\n";

							Attribute *NumberOfControlPoints = (*list)[TagFromName(NumberOfControlPoints)];
							stream << "\t\t";
							if (NumberOfControlPoints) {
								stream << "\t\t";
								NumberOfControlPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfControlPoints> not present\n";

							Attribute *FinalCumulativeTimeWeight = (*list)[TagFromName(FinalCumulativeTimeWeight)];
							stream << "\t\t";
							if (FinalCumulativeTimeWeight) {
								stream << "\t\t";
								FinalCumulativeTimeWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FinalCumulativeTimeWeight> not present\n";

	Attribute *BrachyControlPointSequence = (*list)[TagFromName(BrachyControlPointSequence)];
							stream << "\t\t";
							if (BrachyControlPointSequence)
								stream << "\t\tSequence <BrachyControlPointSequence>\n";
							else
								stream << "\t\tSequence <BrachyControlPointSequence> not present\n";
							if (BrachyControlPointSequence && strcmp(BrachyControlPointSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=BrachyControlPointSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ControlPointIndex = (*list)[TagFromName(ControlPointIndex)];
										stream << "\t\t\t";
										if (ControlPointIndex) {
											stream << "\t\t";
											ControlPointIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ControlPointIndex> not present\n";

										Attribute *CumulativeTimeWeight = (*list)[TagFromName(CumulativeTimeWeight)];
										stream << "\t\t\t";
										if (CumulativeTimeWeight) {
											stream << "\t\t";
											CumulativeTimeWeight->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CumulativeTimeWeight> not present\n";

										Attribute *ControlPointRelativePosition = (*list)[TagFromName(ControlPointRelativePosition)];
										stream << "\t\t\t";
										if (ControlPointRelativePosition) {
											stream << "\t\t";
											ControlPointRelativePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ControlPointRelativePosition> not present\n";

										Attribute *ControlPoint3DPosition = (*list)[TagFromName(ControlPoint3DPosition)];
										stream << "\t\t\t";
										if (ControlPoint3DPosition) {
											stream << "\t\t";
											ControlPoint3DPosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ControlPoint3DPosition> not present\n";

										Attribute *ControlPointOrientation = (*list)[TagFromName(ControlPointOrientation)];
										stream << "\t\t\t";
										if (ControlPointOrientation) {
											stream << "\t\t";
											ControlPointOrientation->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ControlPointOrientation> not present\n";

	Attribute *BrachyReferencedDoseReferenceSequence = (*list)[TagFromName(BrachyReferencedDoseReferenceSequence)];
										stream << "\t\t\t";
										if (BrachyReferencedDoseReferenceSequence)
											stream << "\t\tSequence <BrachyReferencedDoseReferenceSequence>\n";
										else
											stream << "\t\tSequence <BrachyReferencedDoseReferenceSequence> not present\n";
										if (BrachyReferencedDoseReferenceSequence && strcmp(BrachyReferencedDoseReferenceSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=BrachyReferencedDoseReferenceSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
													Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
													stream << "\t\t\t\t";
													if (ReferencedDoseReferenceNumber) {
														stream << "\t\t";
														ReferencedDoseReferenceNumber->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

													Attribute *CumulativeDoseReferenceCoefficient = (*list)[TagFromName(CumulativeDoseReferenceCoefficient)];
													stream << "\t\t\t\t";
													if (CumulativeDoseReferenceCoefficient) {
														stream << "\t\t";
														CumulativeDoseReferenceCoefficient->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <CumulativeDoseReferenceCoefficient> not present\n";

												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_Approval::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Approval>\n";

	if (ApprovalStatus) {
		stream << "\t\t";
		ApprovalStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ApprovalStatus> not present\n";

	if (ReviewDate) {
		stream << "\t\t";
		ReviewDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReviewDate> not present\n";

	if (ReviewTime) {
		stream << "\t\t";
		ReviewTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReviewTime> not present\n";

	if (ReviewerName) {
		stream << "\t\t";
		ReviewerName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReviewerName> not present\n";

}

void
Module_RTGeneralTreatmentRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTGeneralTreatmentRecord>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (TreatmentDate) {
		stream << "\t\t";
		TreatmentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentDate> not present\n";

	if (TreatmentTime) {
		stream << "\t\t";
		TreatmentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentTime> not present\n";

	if (ReferencedRTPlanSequence)
		stream << "\t\tSequence <ReferencedRTPlanSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRTPlanSequence> not present\n";
	if (ReferencedRTPlanSequence && strcmp(ReferencedRTPlanSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRTPlanSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedTreatmentRecordSequence)
		stream << "\t\tSequence <ReferencedTreatmentRecordSequence>\n";
	else
		stream << "\t\tSequence <ReferencedTreatmentRecordSequence> not present\n";
	if (ReferencedTreatmentRecordSequence && strcmp(ReferencedTreatmentRecordSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedTreatmentRecordSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_RTTreatmentMachineRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTTreatmentMachineRecord>\n";

	if (TreatmentMachineSequence)
		stream << "\t\tSequence <TreatmentMachineSequence>\n";
	else
		stream << "\t\tSequence <TreatmentMachineSequence> not present\n";
	if (TreatmentMachineSequence && strcmp(TreatmentMachineSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentMachineSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TreatmentMachineName = (*list)[TagFromName(TreatmentMachineName)];
				stream << "\t";
				if (TreatmentMachineName) {
					stream << "\t\t";
					TreatmentMachineName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentMachineName> not present\n";

				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *InstitutionName = (*list)[TagFromName(InstitutionName)];
				stream << "\t";
				if (InstitutionName) {
					stream << "\t\t";
					InstitutionName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionName> not present\n";

				Attribute *InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
				stream << "\t";
				if (InstitutionAddress) {
					stream << "\t\t";
					InstitutionAddress->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionAddress> not present\n";

				Attribute *InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
				stream << "\t";
				if (InstitutionalDepartmentName) {
					stream << "\t\t";
					InstitutionalDepartmentName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	Attribute *InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
				stream << "\t";
				if (InstitutionalDepartmentTypeCodeSequence)
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
				if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
				stream << "\t";
				if (DeviceSerialNumber) {
					stream << "\t\t";
					DeviceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceSerialNumber> not present\n";

			}
		}
	}
}

void
Module_MeasuredDoseReferenceRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MeasuredDoseReferenceRecord>\n";

	if (MeasuredDoseReferenceSequence)
		stream << "\t\tSequence <MeasuredDoseReferenceSequence>\n";
	else
		stream << "\t\tSequence <MeasuredDoseReferenceSequence> not present\n";
	if (MeasuredDoseReferenceSequence && strcmp(MeasuredDoseReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasuredDoseReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
				stream << "\t";
				if (ReferencedDoseReferenceNumber) {
					stream << "\t\t";
					ReferencedDoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

				Attribute *MeasuredDoseReferenceNumber = (*list)[TagFromName(MeasuredDoseReferenceNumber)];
				stream << "\t";
				if (MeasuredDoseReferenceNumber) {
					stream << "\t\t";
					MeasuredDoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MeasuredDoseReferenceNumber> not present\n";

				Attribute *DoseUnits = (*list)[TagFromName(DoseUnits)];
				stream << "\t";
				if (DoseUnits) {
					stream << "\t\t";
					DoseUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseUnits> not present\n";

				Attribute *MeasuredDoseValue = (*list)[TagFromName(MeasuredDoseValue)];
				stream << "\t";
				if (MeasuredDoseValue) {
					stream << "\t\t";
					MeasuredDoseValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MeasuredDoseValue> not present\n";

				Attribute *MeasuredDoseType = (*list)[TagFromName(MeasuredDoseType)];
				stream << "\t";
				if (MeasuredDoseType) {
					stream << "\t\t";
					MeasuredDoseType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MeasuredDoseType> not present\n";

				Attribute *MeasuredDoseDescription = (*list)[TagFromName(MeasuredDoseDescription)];
				stream << "\t";
				if (MeasuredDoseDescription) {
					stream << "\t\t";
					MeasuredDoseDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MeasuredDoseDescription> not present\n";

			}
		}
	}
}

void
Module_CalculatedDoseReferenceRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CalculatedDoseReferenceRecord>\n";

	if (CalculatedDoseReferenceSequence)
		stream << "\t\tSequence <CalculatedDoseReferenceSequence>\n";
	else
		stream << "\t\tSequence <CalculatedDoseReferenceSequence> not present\n";
	if (CalculatedDoseReferenceSequence && strcmp(CalculatedDoseReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CalculatedDoseReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
				stream << "\t";
				if (ReferencedDoseReferenceNumber) {
					stream << "\t\t";
					ReferencedDoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

				Attribute *CalculatedDoseReferenceNumber = (*list)[TagFromName(CalculatedDoseReferenceNumber)];
				stream << "\t";
				if (CalculatedDoseReferenceNumber) {
					stream << "\t\t";
					CalculatedDoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalculatedDoseReferenceNumber> not present\n";

				Attribute *CalculatedDoseReferenceDoseValue = (*list)[TagFromName(CalculatedDoseReferenceDoseValue)];
				stream << "\t";
				if (CalculatedDoseReferenceDoseValue) {
					stream << "\t\t";
					CalculatedDoseReferenceDoseValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalculatedDoseReferenceDoseValue> not present\n";

				Attribute *CalculatedDoseReferenceDescription = (*list)[TagFromName(CalculatedDoseReferenceDescription)];
				stream << "\t";
				if (CalculatedDoseReferenceDescription) {
					stream << "\t\t";
					CalculatedDoseReferenceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalculatedDoseReferenceDescription> not present\n";

			}
		}
	}
}

void
Module_RTBeamsSessionRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTBeamsSessionRecord>\n";

	if (ReferencedFractionGroupNumber) {
		stream << "\t\t";
		ReferencedFractionGroupNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFractionGroupNumber> not present\n";

	if (NumberOfFractionsPlanned) {
		stream << "\t\t";
		NumberOfFractionsPlanned->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFractionsPlanned> not present\n";

	if (PrimaryDosimeterUnit) {
		stream << "\t\t";
		PrimaryDosimeterUnit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryDosimeterUnit> not present\n";

	if (TreatmentSessionBeamSequence)
		stream << "\t\tSequence <TreatmentSessionBeamSequence>\n";
	else
		stream << "\t\tSequence <TreatmentSessionBeamSequence> not present\n";
	if (TreatmentSessionBeamSequence && strcmp(TreatmentSessionBeamSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentSessionBeamSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedBeamNumber = (*list)[TagFromName(ReferencedBeamNumber)];
				stream << "\t";
				if (ReferencedBeamNumber) {
					stream << "\t\t";
					ReferencedBeamNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedBeamNumber> not present\n";

				Attribute *BeamName = (*list)[TagFromName(BeamName)];
				stream << "\t";
				if (BeamName) {
					stream << "\t\t";
					BeamName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamName> not present\n";

				Attribute *BeamDescription = (*list)[TagFromName(BeamDescription)];
				stream << "\t";
				if (BeamDescription) {
					stream << "\t\t";
					BeamDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamDescription> not present\n";

				Attribute *BeamType = (*list)[TagFromName(BeamType)];
				stream << "\t";
				if (BeamType) {
					stream << "\t\t";
					BeamType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamType> not present\n";

				Attribute *RadiationType = (*list)[TagFromName(RadiationType)];
				stream << "\t";
				if (RadiationType) {
					stream << "\t\t";
					RadiationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationType> not present\n";

	Attribute *PrimaryFluenceModeSequence = (*list)[TagFromName(PrimaryFluenceModeSequence)];
				stream << "\t";
				if (PrimaryFluenceModeSequence)
					stream << "\t\tSequence <PrimaryFluenceModeSequence>\n";
				else
					stream << "\t\tSequence <PrimaryFluenceModeSequence> not present\n";
				if (PrimaryFluenceModeSequence && strcmp(PrimaryFluenceModeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PrimaryFluenceModeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FluenceMode = (*list)[TagFromName(FluenceMode)];
							stream << "\t\t";
							if (FluenceMode) {
								stream << "\t\t";
								FluenceMode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FluenceMode> not present\n";

							Attribute *FluenceModeID = (*list)[TagFromName(FluenceModeID)];
							stream << "\t\t";
							if (FluenceModeID) {
								stream << "\t\t";
								FluenceModeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FluenceModeID> not present\n";

						}
					}
				}
				Attribute *HighDoseTechniqueType = (*list)[TagFromName(HighDoseTechniqueType)];
				stream << "\t";
				if (HighDoseTechniqueType) {
					stream << "\t\t";
					HighDoseTechniqueType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HighDoseTechniqueType> not present\n";

	Attribute *ReferencedVerificationImageSequence = (*list)[TagFromName(ReferencedVerificationImageSequence)];
				stream << "\t";
				if (ReferencedVerificationImageSequence)
					stream << "\t\tSequence <ReferencedVerificationImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedVerificationImageSequence> not present\n";
				if (ReferencedVerificationImageSequence && strcmp(ReferencedVerificationImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedVerificationImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *StartMeterset = (*list)[TagFromName(StartMeterset)];
							stream << "\t\t";
							if (StartMeterset) {
								stream << "\t\t";
								StartMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <StartMeterset> not present\n";

							Attribute *EndMeterset = (*list)[TagFromName(EndMeterset)];
							stream << "\t\t";
							if (EndMeterset) {
								stream << "\t\t";
								EndMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EndMeterset> not present\n";

						}
					}
				}
	Attribute *ReferencedMeasuredDoseReferenceSequence = (*list)[TagFromName(ReferencedMeasuredDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedMeasuredDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence> not present\n";
				if (ReferencedMeasuredDoseReferenceSequence && strcmp(ReferencedMeasuredDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedMeasuredDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ReferencedMeasuredDoseReferenceNumber = (*list)[TagFromName(ReferencedMeasuredDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedMeasuredDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedMeasuredDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedMeasuredDoseReferenceNumber> not present\n";

							Attribute *MeasuredDoseValue = (*list)[TagFromName(MeasuredDoseValue)];
							stream << "\t\t";
							if (MeasuredDoseValue) {
								stream << "\t\t";
								MeasuredDoseValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MeasuredDoseValue> not present\n";

						}
					}
				}
	Attribute *ReferencedCalculatedDoseReferenceSequence = (*list)[TagFromName(ReferencedCalculatedDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedCalculatedDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence> not present\n";
				if (ReferencedCalculatedDoseReferenceSequence && strcmp(ReferencedCalculatedDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedCalculatedDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ReferencedCalculatedDoseReferenceNumber = (*list)[TagFromName(ReferencedCalculatedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedCalculatedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedCalculatedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedCalculatedDoseReferenceNumber> not present\n";

							Attribute *CalculatedDoseReferenceDoseValue = (*list)[TagFromName(CalculatedDoseReferenceDoseValue)];
							stream << "\t\t";
							if (CalculatedDoseReferenceDoseValue) {
								stream << "\t\t";
								CalculatedDoseReferenceDoseValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CalculatedDoseReferenceDoseValue> not present\n";

						}
					}
				}
				Attribute *SourceAxisDistance = (*list)[TagFromName(SourceAxisDistance)];
				stream << "\t";
				if (SourceAxisDistance) {
					stream << "\t\t";
					SourceAxisDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceAxisDistance> not present\n";

	Attribute *BeamLimitingDeviceLeafPairsSequence = (*list)[TagFromName(BeamLimitingDeviceLeafPairsSequence)];
				stream << "\t";
				if (BeamLimitingDeviceLeafPairsSequence)
					stream << "\t\tSequence <BeamLimitingDeviceLeafPairsSequence>\n";
				else
					stream << "\t\tSequence <BeamLimitingDeviceLeafPairsSequence> not present\n";
				if (BeamLimitingDeviceLeafPairsSequence && strcmp(BeamLimitingDeviceLeafPairsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BeamLimitingDeviceLeafPairsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *NumberOfLeafJawPairs = (*list)[TagFromName(NumberOfLeafJawPairs)];
							stream << "\t\t";
							if (NumberOfLeafJawPairs) {
								stream << "\t\t";
								NumberOfLeafJawPairs->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfLeafJawPairs> not present\n";

						}
					}
				}
				Attribute *ReferencedPatientSetupNumber = (*list)[TagFromName(ReferencedPatientSetupNumber)];
				stream << "\t";
				if (ReferencedPatientSetupNumber) {
					stream << "\t\t";
					ReferencedPatientSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPatientSetupNumber> not present\n";

				Attribute *NumberOfWedges = (*list)[TagFromName(NumberOfWedges)];
				stream << "\t";
				if (NumberOfWedges) {
					stream << "\t\t";
					NumberOfWedges->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfWedges> not present\n";

	Attribute *RecordedWedgeSequence = (*list)[TagFromName(RecordedWedgeSequence)];
				stream << "\t";
				if (RecordedWedgeSequence)
					stream << "\t\tSequence <RecordedWedgeSequence>\n";
				else
					stream << "\t\tSequence <RecordedWedgeSequence> not present\n";
				if (RecordedWedgeSequence && strcmp(RecordedWedgeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedWedgeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *WedgeNumber = (*list)[TagFromName(WedgeNumber)];
							stream << "\t\t";
							if (WedgeNumber) {
								stream << "\t\t";
								WedgeNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeNumber> not present\n";

							Attribute *WedgeType = (*list)[TagFromName(WedgeType)];
							stream << "\t\t";
							if (WedgeType) {
								stream << "\t\t";
								WedgeType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeType> not present\n";

							Attribute *WedgeID = (*list)[TagFromName(WedgeID)];
							stream << "\t\t";
							if (WedgeID) {
								stream << "\t\t";
								WedgeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *WedgeAngle = (*list)[TagFromName(WedgeAngle)];
							stream << "\t\t";
							if (WedgeAngle) {
								stream << "\t\t";
								WedgeAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeAngle> not present\n";

							Attribute *WedgeOrientation = (*list)[TagFromName(WedgeOrientation)];
							stream << "\t\t";
							if (WedgeOrientation) {
								stream << "\t\t";
								WedgeOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeOrientation> not present\n";

						}
					}
				}
				Attribute *NumberOfCompensators = (*list)[TagFromName(NumberOfCompensators)];
				stream << "\t";
				if (NumberOfCompensators) {
					stream << "\t\t";
					NumberOfCompensators->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfCompensators> not present\n";

	Attribute *RecordedCompensatorSequence = (*list)[TagFromName(RecordedCompensatorSequence)];
				stream << "\t";
				if (RecordedCompensatorSequence)
					stream << "\t\tSequence <RecordedCompensatorSequence>\n";
				else
					stream << "\t\tSequence <RecordedCompensatorSequence> not present\n";
				if (RecordedCompensatorSequence && strcmp(RecordedCompensatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedCompensatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedCompensatorNumber = (*list)[TagFromName(ReferencedCompensatorNumber)];
							stream << "\t\t";
							if (ReferencedCompensatorNumber) {
								stream << "\t\t";
								ReferencedCompensatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedCompensatorNumber> not present\n";

							Attribute *CompensatorType = (*list)[TagFromName(CompensatorType)];
							stream << "\t\t";
							if (CompensatorType) {
								stream << "\t\t";
								CompensatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorType> not present\n";

							Attribute *CompensatorID = (*list)[TagFromName(CompensatorID)];
							stream << "\t\t";
							if (CompensatorID) {
								stream << "\t\t";
								CompensatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *CompensatorTrayID = (*list)[TagFromName(CompensatorTrayID)];
							stream << "\t\t";
							if (CompensatorTrayID) {
								stream << "\t\t";
								CompensatorTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorTrayID> not present\n";

							Attribute *TrayAccessoryCode = (*list)[TagFromName(TrayAccessoryCode)];
							stream << "\t\t";
							if (TrayAccessoryCode) {
								stream << "\t\t";
								TrayAccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrayAccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfBoli = (*list)[TagFromName(NumberOfBoli)];
				stream << "\t";
				if (NumberOfBoli) {
					stream << "\t\t";
					NumberOfBoli->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBoli> not present\n";

	Attribute *ReferencedBolusSequence = (*list)[TagFromName(ReferencedBolusSequence)];
				stream << "\t";
				if (ReferencedBolusSequence)
					stream << "\t\tSequence <ReferencedBolusSequence>\n";
				else
					stream << "\t\tSequence <ReferencedBolusSequence> not present\n";
				if (ReferencedBolusSequence && strcmp(ReferencedBolusSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedBolusSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfBlocks = (*list)[TagFromName(NumberOfBlocks)];
				stream << "\t";
				if (NumberOfBlocks) {
					stream << "\t\t";
					NumberOfBlocks->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBlocks> not present\n";

	Attribute *RecordedBlockSequence = (*list)[TagFromName(RecordedBlockSequence)];
				stream << "\t";
				if (RecordedBlockSequence)
					stream << "\t\tSequence <RecordedBlockSequence>\n";
				else
					stream << "\t\tSequence <RecordedBlockSequence> not present\n";
				if (RecordedBlockSequence && strcmp(RecordedBlockSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedBlockSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BlockTrayID = (*list)[TagFromName(BlockTrayID)];
							stream << "\t\t";
							if (BlockTrayID) {
								stream << "\t\t";
								BlockTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockTrayID> not present\n";

							Attribute *TrayAccessoryCode = (*list)[TagFromName(TrayAccessoryCode)];
							stream << "\t\t";
							if (TrayAccessoryCode) {
								stream << "\t\t";
								TrayAccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrayAccessoryCode> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *ReferencedBlockNumber = (*list)[TagFromName(ReferencedBlockNumber)];
							stream << "\t\t";
							if (ReferencedBlockNumber) {
								stream << "\t\t";
								ReferencedBlockNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedBlockNumber> not present\n";

							Attribute *BlockName = (*list)[TagFromName(BlockName)];
							stream << "\t\t";
							if (BlockName) {
								stream << "\t\t";
								BlockName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockName> not present\n";

						}
					}
				}
	Attribute *ApplicatorSequence = (*list)[TagFromName(ApplicatorSequence)];
				stream << "\t";
				if (ApplicatorSequence)
					stream << "\t\tSequence <ApplicatorSequence>\n";
				else
					stream << "\t\tSequence <ApplicatorSequence> not present\n";
				if (ApplicatorSequence && strcmp(ApplicatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ApplicatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ApplicatorID = (*list)[TagFromName(ApplicatorID)];
							stream << "\t\t";
							if (ApplicatorID) {
								stream << "\t\t";
								ApplicatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *ApplicatorType = (*list)[TagFromName(ApplicatorType)];
							stream << "\t\t";
							if (ApplicatorType) {
								stream << "\t\t";
								ApplicatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorType> not present\n";

							Attribute *ApplicatorDescription = (*list)[TagFromName(ApplicatorDescription)];
							stream << "\t\t";
							if (ApplicatorDescription) {
								stream << "\t\t";
								ApplicatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorDescription> not present\n";

	Attribute *GeneralAccessorySequence = (*list)[TagFromName(GeneralAccessorySequence)];
							stream << "\t\t";
							if (GeneralAccessorySequence)
								stream << "\t\tSequence <GeneralAccessorySequence>\n";
							else
								stream << "\t\tSequence <GeneralAccessorySequence> not present\n";
							if (GeneralAccessorySequence && strcmp(GeneralAccessorySequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=GeneralAccessorySequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *GeneralAccessoryNumber = (*list)[TagFromName(GeneralAccessoryNumber)];
										stream << "\t\t\t";
										if (GeneralAccessoryNumber) {
											stream << "\t\t";
											GeneralAccessoryNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryNumber> not present\n";

										Attribute *GeneralAccessoryID = (*list)[TagFromName(GeneralAccessoryID)];
										stream << "\t\t\t";
										if (GeneralAccessoryID) {
											stream << "\t\t";
											GeneralAccessoryID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryID> not present\n";

										Attribute *GeneralAccessoryDescription = (*list)[TagFromName(GeneralAccessoryDescription)];
										stream << "\t\t\t";
										if (GeneralAccessoryDescription) {
											stream << "\t\t";
											GeneralAccessoryDescription->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryDescription> not present\n";

										Attribute *GeneralAccessoryType = (*list)[TagFromName(GeneralAccessoryType)];
										stream << "\t\t\t";
										if (GeneralAccessoryType) {
											stream << "\t\t";
											GeneralAccessoryType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryType> not present\n";

										Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
										stream << "\t\t\t";
										if (AccessoryCode) {
											stream << "\t\t";
											AccessoryCode->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AccessoryCode> not present\n";

										Attribute *SourceToGeneralAccessoryDistance = (*list)[TagFromName(SourceToGeneralAccessoryDistance)];
										stream << "\t\t\t";
										if (SourceToGeneralAccessoryDistance) {
											stream << "\t\t";
											SourceToGeneralAccessoryDistance->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceToGeneralAccessoryDistance> not present\n";

									}
								}
							}
						}
					}
				}
				Attribute *CurrentFractionNumber = (*list)[TagFromName(CurrentFractionNumber)];
				stream << "\t";
				if (CurrentFractionNumber) {
					stream << "\t\t";
					CurrentFractionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CurrentFractionNumber> not present\n";

				Attribute *TreatmentDeliveryType = (*list)[TagFromName(TreatmentDeliveryType)];
				stream << "\t";
				if (TreatmentDeliveryType) {
					stream << "\t\t";
					TreatmentDeliveryType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentDeliveryType> not present\n";

				Attribute *TreatmentTerminationStatus = (*list)[TagFromName(TreatmentTerminationStatus)];
				stream << "\t";
				if (TreatmentTerminationStatus) {
					stream << "\t\t";
					TreatmentTerminationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentTerminationStatus> not present\n";

				Attribute *TreatmentTerminationCode = (*list)[TagFromName(TreatmentTerminationCode)];
				stream << "\t";
				if (TreatmentTerminationCode) {
					stream << "\t\t";
					TreatmentTerminationCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentTerminationCode> not present\n";

				Attribute *TreatmentVerificationStatus = (*list)[TagFromName(TreatmentVerificationStatus)];
				stream << "\t";
				if (TreatmentVerificationStatus) {
					stream << "\t\t";
					TreatmentVerificationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentVerificationStatus> not present\n";

				Attribute *SpecifiedPrimaryMeterset = (*list)[TagFromName(SpecifiedPrimaryMeterset)];
				stream << "\t";
				if (SpecifiedPrimaryMeterset) {
					stream << "\t\t";
					SpecifiedPrimaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecifiedPrimaryMeterset> not present\n";

				Attribute *SpecifiedSecondaryMeterset = (*list)[TagFromName(SpecifiedSecondaryMeterset)];
				stream << "\t";
				if (SpecifiedSecondaryMeterset) {
					stream << "\t\t";
					SpecifiedSecondaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecifiedSecondaryMeterset> not present\n";

				Attribute *DeliveredPrimaryMeterset = (*list)[TagFromName(DeliveredPrimaryMeterset)];
				stream << "\t";
				if (DeliveredPrimaryMeterset) {
					stream << "\t\t";
					DeliveredPrimaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveredPrimaryMeterset> not present\n";

				Attribute *DeliveredSecondaryMeterset = (*list)[TagFromName(DeliveredSecondaryMeterset)];
				stream << "\t";
				if (DeliveredSecondaryMeterset) {
					stream << "\t\t";
					DeliveredSecondaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveredSecondaryMeterset> not present\n";

				Attribute *SpecifiedTreatmentTime = (*list)[TagFromName(SpecifiedTreatmentTime)];
				stream << "\t";
				if (SpecifiedTreatmentTime) {
					stream << "\t\t";
					SpecifiedTreatmentTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecifiedTreatmentTime> not present\n";

				Attribute *DeliveredTreatmentTime = (*list)[TagFromName(DeliveredTreatmentTime)];
				stream << "\t";
				if (DeliveredTreatmentTime) {
					stream << "\t\t";
					DeliveredTreatmentTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveredTreatmentTime> not present\n";

				Attribute *NumberOfControlPoints = (*list)[TagFromName(NumberOfControlPoints)];
				stream << "\t";
				if (NumberOfControlPoints) {
					stream << "\t\t";
					NumberOfControlPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfControlPoints> not present\n";

	Attribute *ControlPointDeliverySequence = (*list)[TagFromName(ControlPointDeliverySequence)];
				stream << "\t";
				if (ControlPointDeliverySequence)
					stream << "\t\tSequence <ControlPointDeliverySequence>\n";
				else
					stream << "\t\tSequence <ControlPointDeliverySequence> not present\n";
				if (ControlPointDeliverySequence && strcmp(ControlPointDeliverySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ControlPointDeliverySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedControlPointIndex = (*list)[TagFromName(ReferencedControlPointIndex)];
							stream << "\t\t";
							if (ReferencedControlPointIndex) {
								stream << "\t\t";
								ReferencedControlPointIndex->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedControlPointIndex> not present\n";

							Attribute *TreatmentControlPointDate = (*list)[TagFromName(TreatmentControlPointDate)];
							stream << "\t\t";
							if (TreatmentControlPointDate) {
								stream << "\t\t";
								TreatmentControlPointDate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentControlPointDate> not present\n";

							Attribute *TreatmentControlPointTime = (*list)[TagFromName(TreatmentControlPointTime)];
							stream << "\t\t";
							if (TreatmentControlPointTime) {
								stream << "\t\t";
								TreatmentControlPointTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentControlPointTime> not present\n";

							Attribute *SpecifiedMeterset = (*list)[TagFromName(SpecifiedMeterset)];
							stream << "\t\t";
							if (SpecifiedMeterset) {
								stream << "\t\t";
								SpecifiedMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecifiedMeterset> not present\n";

							Attribute *DeliveredMeterset = (*list)[TagFromName(DeliveredMeterset)];
							stream << "\t\t";
							if (DeliveredMeterset) {
								stream << "\t\t";
								DeliveredMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveredMeterset> not present\n";

							Attribute *DoseRateSet = (*list)[TagFromName(DoseRateSet)];
							stream << "\t\t";
							if (DoseRateSet) {
								stream << "\t\t";
								DoseRateSet->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DoseRateSet> not present\n";

							Attribute *DoseRateDelivered = (*list)[TagFromName(DoseRateDelivered)];
							stream << "\t\t";
							if (DoseRateDelivered) {
								stream << "\t\t";
								DoseRateDelivered->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DoseRateDelivered> not present\n";

							Attribute *NominalBeamEnergy = (*list)[TagFromName(NominalBeamEnergy)];
							stream << "\t\t";
							if (NominalBeamEnergy) {
								stream << "\t\t";
								NominalBeamEnergy->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NominalBeamEnergy> not present\n";

							Attribute *NominalBeamEnergyUnit = (*list)[TagFromName(NominalBeamEnergyUnit)];
							stream << "\t\t";
							if (NominalBeamEnergyUnit) {
								stream << "\t\t";
								NominalBeamEnergyUnit->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NominalBeamEnergyUnit> not present\n";

	Attribute *WedgePositionSequence = (*list)[TagFromName(WedgePositionSequence)];
							stream << "\t\t";
							if (WedgePositionSequence)
								stream << "\t\tSequence <WedgePositionSequence>\n";
							else
								stream << "\t\tSequence <WedgePositionSequence> not present\n";
							if (WedgePositionSequence && strcmp(WedgePositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=WedgePositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedWedgeNumber = (*list)[TagFromName(ReferencedWedgeNumber)];
										stream << "\t\t\t";
										if (ReferencedWedgeNumber) {
											stream << "\t\t";
											ReferencedWedgeNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedWedgeNumber> not present\n";

										Attribute *WedgePosition = (*list)[TagFromName(WedgePosition)];
										stream << "\t\t\t";
										if (WedgePosition) {
											stream << "\t\t";
											WedgePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <WedgePosition> not present\n";

									}
								}
							}
	Attribute *BeamLimitingDevicePositionSequence = (*list)[TagFromName(BeamLimitingDevicePositionSequence)];
							stream << "\t\t";
							if (BeamLimitingDevicePositionSequence)
								stream << "\t\tSequence <BeamLimitingDevicePositionSequence>\n";
							else
								stream << "\t\tSequence <BeamLimitingDevicePositionSequence> not present\n";
							if (BeamLimitingDevicePositionSequence && strcmp(BeamLimitingDevicePositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=BeamLimitingDevicePositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
										stream << "\t\t\t";
										if (RTBeamLimitingDeviceType) {
											stream << "\t\t";
											RTBeamLimitingDeviceType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

										Attribute *LeafJawPositions = (*list)[TagFromName(LeafJawPositions)];
										stream << "\t\t\t";
										if (LeafJawPositions) {
											stream << "\t\t";
											LeafJawPositions->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <LeafJawPositions> not present\n";

									}
								}
							}
							Attribute *GantryAngle = (*list)[TagFromName(GantryAngle)];
							stream << "\t\t";
							if (GantryAngle) {
								stream << "\t\t";
								GantryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryAngle> not present\n";

							Attribute *GantryRotationDirection = (*list)[TagFromName(GantryRotationDirection)];
							stream << "\t\t";
							if (GantryRotationDirection) {
								stream << "\t\t";
								GantryRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryRotationDirection> not present\n";

							Attribute *GantryPitchAngle = (*list)[TagFromName(GantryPitchAngle)];
							stream << "\t\t";
							if (GantryPitchAngle) {
								stream << "\t\t";
								GantryPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchAngle> not present\n";

							Attribute *GantryPitchRotationDirection = (*list)[TagFromName(GantryPitchRotationDirection)];
							stream << "\t\t";
							if (GantryPitchRotationDirection) {
								stream << "\t\t";
								GantryPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchRotationDirection> not present\n";

							Attribute *BeamStopperPosition = (*list)[TagFromName(BeamStopperPosition)];
							stream << "\t\t";
							if (BeamStopperPosition) {
								stream << "\t\t";
								BeamStopperPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamStopperPosition> not present\n";

							Attribute *BeamLimitingDeviceAngle = (*list)[TagFromName(BeamLimitingDeviceAngle)];
							stream << "\t\t";
							if (BeamLimitingDeviceAngle) {
								stream << "\t\t";
								BeamLimitingDeviceAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceAngle> not present\n";

							Attribute *BeamLimitingDeviceRotationDirection = (*list)[TagFromName(BeamLimitingDeviceRotationDirection)];
							stream << "\t\t";
							if (BeamLimitingDeviceRotationDirection) {
								stream << "\t\t";
								BeamLimitingDeviceRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceRotationDirection> not present\n";

							Attribute *PatientSupportAngle = (*list)[TagFromName(PatientSupportAngle)];
							stream << "\t\t";
							if (PatientSupportAngle) {
								stream << "\t\t";
								PatientSupportAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportAngle> not present\n";

							Attribute *PatientSupportRotationDirection = (*list)[TagFromName(PatientSupportRotationDirection)];
							stream << "\t\t";
							if (PatientSupportRotationDirection) {
								stream << "\t\t";
								PatientSupportRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportRotationDirection> not present\n";

							Attribute *TableTopEccentricAxisDistance = (*list)[TagFromName(TableTopEccentricAxisDistance)];
							stream << "\t\t";
							if (TableTopEccentricAxisDistance) {
								stream << "\t\t";
								TableTopEccentricAxisDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopEccentricAxisDistance> not present\n";

							Attribute *TableTopEccentricAngle = (*list)[TagFromName(TableTopEccentricAngle)];
							stream << "\t\t";
							if (TableTopEccentricAngle) {
								stream << "\t\t";
								TableTopEccentricAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopEccentricAngle> not present\n";

							Attribute *TableTopEccentricRotationDirection = (*list)[TagFromName(TableTopEccentricRotationDirection)];
							stream << "\t\t";
							if (TableTopEccentricRotationDirection) {
								stream << "\t\t";
								TableTopEccentricRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopEccentricRotationDirection> not present\n";

							Attribute *TableTopPitchAngle = (*list)[TagFromName(TableTopPitchAngle)];
							stream << "\t\t";
							if (TableTopPitchAngle) {
								stream << "\t\t";
								TableTopPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchAngle> not present\n";

							Attribute *TableTopPitchRotationDirection = (*list)[TagFromName(TableTopPitchRotationDirection)];
							stream << "\t\t";
							if (TableTopPitchRotationDirection) {
								stream << "\t\t";
								TableTopPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchRotationDirection> not present\n";

							Attribute *TableTopRollAngle = (*list)[TagFromName(TableTopRollAngle)];
							stream << "\t\t";
							if (TableTopRollAngle) {
								stream << "\t\t";
								TableTopRollAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollAngle> not present\n";

							Attribute *TableTopRollRotationDirection = (*list)[TagFromName(TableTopRollRotationDirection)];
							stream << "\t\t";
							if (TableTopRollRotationDirection) {
								stream << "\t\t";
								TableTopRollRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollRotationDirection> not present\n";

							Attribute *TableTopVerticalPosition = (*list)[TagFromName(TableTopVerticalPosition)];
							stream << "\t\t";
							if (TableTopVerticalPosition) {
								stream << "\t\t";
								TableTopVerticalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopVerticalPosition> not present\n";

							Attribute *TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
							stream << "\t\t";
							if (TableTopLongitudinalPosition) {
								stream << "\t\t";
								TableTopLongitudinalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

							Attribute *TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
							stream << "\t\t";
							if (TableTopLateralPosition) {
								stream << "\t\t";
								TableTopLateralPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLateralPosition> not present\n";

	Attribute *CorrectedParameterSequence = (*list)[TagFromName(CorrectedParameterSequence)];
							stream << "\t\t";
							if (CorrectedParameterSequence)
								stream << "\t\tSequence <CorrectedParameterSequence>\n";
							else
								stream << "\t\tSequence <CorrectedParameterSequence> not present\n";
							if (CorrectedParameterSequence && strcmp(CorrectedParameterSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=CorrectedParameterSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ParameterSequencePointer = (*list)[TagFromName(ParameterSequencePointer)];
										stream << "\t\t\t";
										if (ParameterSequencePointer) {
											stream << "\t\t";
											ParameterSequencePointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterSequencePointer> not present\n";

										Attribute *ParameterItemIndex = (*list)[TagFromName(ParameterItemIndex)];
										stream << "\t\t\t";
										if (ParameterItemIndex) {
											stream << "\t\t";
											ParameterItemIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterItemIndex> not present\n";

										Attribute *ParameterPointer = (*list)[TagFromName(ParameterPointer)];
										stream << "\t\t\t";
										if (ParameterPointer) {
											stream << "\t\t";
											ParameterPointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterPointer> not present\n";

										Attribute *CorrectionValue = (*list)[TagFromName(CorrectionValue)];
										stream << "\t\t\t";
										if (CorrectionValue) {
											stream << "\t\t";
											CorrectionValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CorrectionValue> not present\n";

									}
								}
							}
	Attribute *OverrideSequence = (*list)[TagFromName(OverrideSequence)];
							stream << "\t\t";
							if (OverrideSequence)
								stream << "\t\tSequence <OverrideSequence>\n";
							else
								stream << "\t\tSequence <OverrideSequence> not present\n";
							if (OverrideSequence && strcmp(OverrideSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OverrideSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *OverrideParameterPointer = (*list)[TagFromName(OverrideParameterPointer)];
										stream << "\t\t\t";
										if (OverrideParameterPointer) {
											stream << "\t\t";
											OverrideParameterPointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <OverrideParameterPointer> not present\n";

										Attribute *ParameterSequencePointer = (*list)[TagFromName(ParameterSequencePointer)];
										stream << "\t\t\t";
										if (ParameterSequencePointer) {
											stream << "\t\t";
											ParameterSequencePointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterSequencePointer> not present\n";

										Attribute *ParameterItemIndex = (*list)[TagFromName(ParameterItemIndex)];
										stream << "\t\t\t";
										if (ParameterItemIndex) {
											stream << "\t\t";
											ParameterItemIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterItemIndex> not present\n";

										Attribute *ParameterValueNumber = (*list)[TagFromName(ParameterValueNumber)];
										stream << "\t\t\t";
										if (ParameterValueNumber) {
											stream << "\t\t";
											ParameterValueNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterValueNumber> not present\n";

										Attribute *OperatorsName = (*list)[TagFromName(OperatorsName)];
										stream << "\t\t\t";
										if (OperatorsName) {
											stream << "\t\t";
											OperatorsName->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <OperatorsName> not present\n";

	Attribute *OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
										stream << "\t\t\t";
										if (OperatorIdentificationSequence)
											stream << "\t\tSequence <OperatorIdentificationSequence>\n";
										else
											stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
										if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
																stream << "\t\t\t\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
																stream << "\t\t\t\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

												}
											}
										}
										Attribute *OverrideReason = (*list)[TagFromName(OverrideReason)];
										stream << "\t\t\t";
										if (OverrideReason) {
											stream << "\t\t";
											OverrideReason->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <OverrideReason> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_RTBrachySessionRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTBrachySessionRecord>\n";

	if (ReferencedFractionGroupNumber) {
		stream << "\t\t";
		ReferencedFractionGroupNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFractionGroupNumber> not present\n";

	if (NumberOfFractionsPlanned) {
		stream << "\t\t";
		NumberOfFractionsPlanned->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFractionsPlanned> not present\n";

	if (BrachyTreatmentTechnique) {
		stream << "\t\t";
		BrachyTreatmentTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BrachyTreatmentTechnique> not present\n";

	if (BrachyTreatmentType) {
		stream << "\t\t";
		BrachyTreatmentType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BrachyTreatmentType> not present\n";

	if (RecordedSourceSequence)
		stream << "\t\tSequence <RecordedSourceSequence>\n";
	else
		stream << "\t\tSequence <RecordedSourceSequence> not present\n";
	if (RecordedSourceSequence && strcmp(RecordedSourceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RecordedSourceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SourceNumber = (*list)[TagFromName(SourceNumber)];
				stream << "\t";
				if (SourceNumber) {
					stream << "\t\t";
					SourceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceNumber> not present\n";

				Attribute *SourceType = (*list)[TagFromName(SourceType)];
				stream << "\t";
				if (SourceType) {
					stream << "\t\t";
					SourceType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceType> not present\n";

				Attribute *SourceManufacturer = (*list)[TagFromName(SourceManufacturer)];
				stream << "\t";
				if (SourceManufacturer) {
					stream << "\t\t";
					SourceManufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceManufacturer> not present\n";

				Attribute *SourceSerialNumber = (*list)[TagFromName(SourceSerialNumber)];
				stream << "\t";
				if (SourceSerialNumber) {
					stream << "\t\t";
					SourceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceSerialNumber> not present\n";

				Attribute *SourceIsotopeName = (*list)[TagFromName(SourceIsotopeName)];
				stream << "\t";
				if (SourceIsotopeName) {
					stream << "\t\t";
					SourceIsotopeName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceIsotopeName> not present\n";

				Attribute *SourceIsotopeHalfLife = (*list)[TagFromName(SourceIsotopeHalfLife)];
				stream << "\t";
				if (SourceIsotopeHalfLife) {
					stream << "\t\t";
					SourceIsotopeHalfLife->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceIsotopeHalfLife> not present\n";

				Attribute *SourceStrengthUnits = (*list)[TagFromName(SourceStrengthUnits)];
				stream << "\t";
				if (SourceStrengthUnits) {
					stream << "\t\t";
					SourceStrengthUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrengthUnits> not present\n";

				Attribute *ReferenceAirKermaRate = (*list)[TagFromName(ReferenceAirKermaRate)];
				stream << "\t";
				if (ReferenceAirKermaRate) {
					stream << "\t\t";
					ReferenceAirKermaRate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferenceAirKermaRate> not present\n";

				Attribute *SourceStrength = (*list)[TagFromName(SourceStrength)];
				stream << "\t";
				if (SourceStrength) {
					stream << "\t\t";
					SourceStrength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrength> not present\n";

				Attribute *SourceStrengthReferenceDate = (*list)[TagFromName(SourceStrengthReferenceDate)];
				stream << "\t";
				if (SourceStrengthReferenceDate) {
					stream << "\t\t";
					SourceStrengthReferenceDate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrengthReferenceDate> not present\n";

				Attribute *SourceStrengthReferenceTime = (*list)[TagFromName(SourceStrengthReferenceTime)];
				stream << "\t";
				if (SourceStrengthReferenceTime) {
					stream << "\t\t";
					SourceStrengthReferenceTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStrengthReferenceTime> not present\n";

			}
		}
	}
	if (TreatmentSessionApplicationSetupSequence)
		stream << "\t\tSequence <TreatmentSessionApplicationSetupSequence>\n";
	else
		stream << "\t\tSequence <TreatmentSessionApplicationSetupSequence> not present\n";
	if (TreatmentSessionApplicationSetupSequence && strcmp(TreatmentSessionApplicationSetupSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentSessionApplicationSetupSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ApplicationSetupType = (*list)[TagFromName(ApplicationSetupType)];
				stream << "\t";
				if (ApplicationSetupType) {
					stream << "\t\t";
					ApplicationSetupType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupType> not present\n";

				Attribute *ReferencedBrachyApplicationSetupNumber = (*list)[TagFromName(ReferencedBrachyApplicationSetupNumber)];
				stream << "\t";
				if (ReferencedBrachyApplicationSetupNumber) {
					stream << "\t\t";
					ReferencedBrachyApplicationSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedBrachyApplicationSetupNumber> not present\n";

				Attribute *ApplicationSetupName = (*list)[TagFromName(ApplicationSetupName)];
				stream << "\t";
				if (ApplicationSetupName) {
					stream << "\t\t";
					ApplicationSetupName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupName> not present\n";

				Attribute *ApplicationSetupManufacturer = (*list)[TagFromName(ApplicationSetupManufacturer)];
				stream << "\t";
				if (ApplicationSetupManufacturer) {
					stream << "\t\t";
					ApplicationSetupManufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupManufacturer> not present\n";

				Attribute *TemplateNumber = (*list)[TagFromName(TemplateNumber)];
				stream << "\t";
				if (TemplateNumber) {
					stream << "\t\t";
					TemplateNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateNumber> not present\n";

				Attribute *TemplateType = (*list)[TagFromName(TemplateType)];
				stream << "\t";
				if (TemplateType) {
					stream << "\t\t";
					TemplateType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateType> not present\n";

				Attribute *TemplateName = (*list)[TagFromName(TemplateName)];
				stream << "\t";
				if (TemplateName) {
					stream << "\t\t";
					TemplateName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateName> not present\n";

				Attribute *ApplicationSetupCheck = (*list)[TagFromName(ApplicationSetupCheck)];
				stream << "\t";
				if (ApplicationSetupCheck) {
					stream << "\t\t";
					ApplicationSetupCheck->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationSetupCheck> not present\n";

	Attribute *ReferencedVerificationImageSequence = (*list)[TagFromName(ReferencedVerificationImageSequence)];
				stream << "\t";
				if (ReferencedVerificationImageSequence)
					stream << "\t\tSequence <ReferencedVerificationImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedVerificationImageSequence> not present\n";
				if (ReferencedVerificationImageSequence && strcmp(ReferencedVerificationImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedVerificationImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *TotalReferenceAirKerma = (*list)[TagFromName(TotalReferenceAirKerma)];
				stream << "\t";
				if (TotalReferenceAirKerma) {
					stream << "\t\t";
					TotalReferenceAirKerma->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalReferenceAirKerma> not present\n";

	Attribute *ReferencedMeasuredDoseReferenceSequence = (*list)[TagFromName(ReferencedMeasuredDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedMeasuredDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence> not present\n";
				if (ReferencedMeasuredDoseReferenceSequence && strcmp(ReferencedMeasuredDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedMeasuredDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ReferencedMeasuredDoseReferenceNumber = (*list)[TagFromName(ReferencedMeasuredDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedMeasuredDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedMeasuredDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedMeasuredDoseReferenceNumber> not present\n";

							Attribute *MeasuredDoseValue = (*list)[TagFromName(MeasuredDoseValue)];
							stream << "\t\t";
							if (MeasuredDoseValue) {
								stream << "\t\t";
								MeasuredDoseValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MeasuredDoseValue> not present\n";

						}
					}
				}
	Attribute *ReferencedCalculatedDoseReferenceSequence = (*list)[TagFromName(ReferencedCalculatedDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedCalculatedDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence> not present\n";
				if (ReferencedCalculatedDoseReferenceSequence && strcmp(ReferencedCalculatedDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedCalculatedDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ReferencedCalculatedDoseReferenceNumber = (*list)[TagFromName(ReferencedCalculatedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedCalculatedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedCalculatedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedCalculatedDoseReferenceNumber> not present\n";

							Attribute *CalculatedDoseReferenceDoseValue = (*list)[TagFromName(CalculatedDoseReferenceDoseValue)];
							stream << "\t\t";
							if (CalculatedDoseReferenceDoseValue) {
								stream << "\t\t";
								CalculatedDoseReferenceDoseValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CalculatedDoseReferenceDoseValue> not present\n";

						}
					}
				}
				Attribute *CurrentFractionNumber = (*list)[TagFromName(CurrentFractionNumber)];
				stream << "\t";
				if (CurrentFractionNumber) {
					stream << "\t\t";
					CurrentFractionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CurrentFractionNumber> not present\n";

				Attribute *TreatmentDeliveryType = (*list)[TagFromName(TreatmentDeliveryType)];
				stream << "\t";
				if (TreatmentDeliveryType) {
					stream << "\t\t";
					TreatmentDeliveryType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentDeliveryType> not present\n";

				Attribute *TreatmentTerminationStatus = (*list)[TagFromName(TreatmentTerminationStatus)];
				stream << "\t";
				if (TreatmentTerminationStatus) {
					stream << "\t\t";
					TreatmentTerminationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentTerminationStatus> not present\n";

				Attribute *TreatmentTerminationCode = (*list)[TagFromName(TreatmentTerminationCode)];
				stream << "\t";
				if (TreatmentTerminationCode) {
					stream << "\t\t";
					TreatmentTerminationCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentTerminationCode> not present\n";

				Attribute *TreatmentVerificationStatus = (*list)[TagFromName(TreatmentVerificationStatus)];
				stream << "\t";
				if (TreatmentVerificationStatus) {
					stream << "\t\t";
					TreatmentVerificationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentVerificationStatus> not present\n";

	Attribute *RecordedBrachyAccessoryDeviceSequence = (*list)[TagFromName(RecordedBrachyAccessoryDeviceSequence)];
				stream << "\t";
				if (RecordedBrachyAccessoryDeviceSequence)
					stream << "\t\tSequence <RecordedBrachyAccessoryDeviceSequence>\n";
				else
					stream << "\t\tSequence <RecordedBrachyAccessoryDeviceSequence> not present\n";
				if (RecordedBrachyAccessoryDeviceSequence && strcmp(RecordedBrachyAccessoryDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedBrachyAccessoryDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedBrachyAccessoryDeviceNumber = (*list)[TagFromName(ReferencedBrachyAccessoryDeviceNumber)];
							stream << "\t\t";
							if (ReferencedBrachyAccessoryDeviceNumber) {
								stream << "\t\t";
								ReferencedBrachyAccessoryDeviceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedBrachyAccessoryDeviceNumber> not present\n";

							Attribute *BrachyAccessoryDeviceID = (*list)[TagFromName(BrachyAccessoryDeviceID)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceID) {
								stream << "\t\t";
								BrachyAccessoryDeviceID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceID> not present\n";

							Attribute *BrachyAccessoryDeviceType = (*list)[TagFromName(BrachyAccessoryDeviceType)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceType) {
								stream << "\t\t";
								BrachyAccessoryDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceType> not present\n";

							Attribute *BrachyAccessoryDeviceName = (*list)[TagFromName(BrachyAccessoryDeviceName)];
							stream << "\t\t";
							if (BrachyAccessoryDeviceName) {
								stream << "\t\t";
								BrachyAccessoryDeviceName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BrachyAccessoryDeviceName> not present\n";

						}
					}
				}
	Attribute *RecordedChannelSequence = (*list)[TagFromName(RecordedChannelSequence)];
				stream << "\t";
				if (RecordedChannelSequence)
					stream << "\t\tSequence <RecordedChannelSequence>\n";
				else
					stream << "\t\tSequence <RecordedChannelSequence> not present\n";
				if (RecordedChannelSequence && strcmp(RecordedChannelSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedChannelSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ChannelNumber = (*list)[TagFromName(ChannelNumber)];
							stream << "\t\t";
							if (ChannelNumber) {
								stream << "\t\t";
								ChannelNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelNumber> not present\n";

							Attribute *ChannelLength = (*list)[TagFromName(ChannelLength)];
							stream << "\t\t";
							if (ChannelLength) {
								stream << "\t\t";
								ChannelLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelLength> not present\n";

							Attribute *SpecifiedChannelTotalTime = (*list)[TagFromName(SpecifiedChannelTotalTime)];
							stream << "\t\t";
							if (SpecifiedChannelTotalTime) {
								stream << "\t\t";
								SpecifiedChannelTotalTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecifiedChannelTotalTime> not present\n";

							Attribute *DeliveredChannelTotalTime = (*list)[TagFromName(DeliveredChannelTotalTime)];
							stream << "\t\t";
							if (DeliveredChannelTotalTime) {
								stream << "\t\t";
								DeliveredChannelTotalTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveredChannelTotalTime> not present\n";

							Attribute *SourceMovementType = (*list)[TagFromName(SourceMovementType)];
							stream << "\t\t";
							if (SourceMovementType) {
								stream << "\t\t";
								SourceMovementType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SourceMovementType> not present\n";

							Attribute *SpecifiedNumberOfPulses = (*list)[TagFromName(SpecifiedNumberOfPulses)];
							stream << "\t\t";
							if (SpecifiedNumberOfPulses) {
								stream << "\t\t";
								SpecifiedNumberOfPulses->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecifiedNumberOfPulses> not present\n";

							Attribute *DeliveredNumberOfPulses = (*list)[TagFromName(DeliveredNumberOfPulses)];
							stream << "\t\t";
							if (DeliveredNumberOfPulses) {
								stream << "\t\t";
								DeliveredNumberOfPulses->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveredNumberOfPulses> not present\n";

							Attribute *SpecifiedPulseRepetitionInterval = (*list)[TagFromName(SpecifiedPulseRepetitionInterval)];
							stream << "\t\t";
							if (SpecifiedPulseRepetitionInterval) {
								stream << "\t\t";
								SpecifiedPulseRepetitionInterval->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecifiedPulseRepetitionInterval> not present\n";

							Attribute *DeliveredPulseRepetitionInterval = (*list)[TagFromName(DeliveredPulseRepetitionInterval)];
							stream << "\t\t";
							if (DeliveredPulseRepetitionInterval) {
								stream << "\t\t";
								DeliveredPulseRepetitionInterval->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveredPulseRepetitionInterval> not present\n";

	Attribute *ReferencedMeasuredDoseReferenceSequence = (*list)[TagFromName(ReferencedMeasuredDoseReferenceSequence)];
							stream << "\t\t";
							if (ReferencedMeasuredDoseReferenceSequence)
								stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence>\n";
							else
								stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence> not present\n";
							if (ReferencedMeasuredDoseReferenceSequence && strcmp(ReferencedMeasuredDoseReferenceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedMeasuredDoseReferenceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
										stream << "\t\t\t";
										if (ReferencedDoseReferenceNumber) {
											stream << "\t\t";
											ReferencedDoseReferenceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

										Attribute *ReferencedMeasuredDoseReferenceNumber = (*list)[TagFromName(ReferencedMeasuredDoseReferenceNumber)];
										stream << "\t\t\t";
										if (ReferencedMeasuredDoseReferenceNumber) {
											stream << "\t\t";
											ReferencedMeasuredDoseReferenceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedMeasuredDoseReferenceNumber> not present\n";

										Attribute *MeasuredDoseValue = (*list)[TagFromName(MeasuredDoseValue)];
										stream << "\t\t\t";
										if (MeasuredDoseValue) {
											stream << "\t\t";
											MeasuredDoseValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <MeasuredDoseValue> not present\n";

									}
								}
							}
	Attribute *ReferencedCalculatedDoseReferenceSequence = (*list)[TagFromName(ReferencedCalculatedDoseReferenceSequence)];
							stream << "\t\t";
							if (ReferencedCalculatedDoseReferenceSequence)
								stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence>\n";
							else
								stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence> not present\n";
							if (ReferencedCalculatedDoseReferenceSequence && strcmp(ReferencedCalculatedDoseReferenceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedCalculatedDoseReferenceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
										stream << "\t\t\t";
										if (ReferencedDoseReferenceNumber) {
											stream << "\t\t";
											ReferencedDoseReferenceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

										Attribute *ReferencedCalculatedDoseReferenceNumber = (*list)[TagFromName(ReferencedCalculatedDoseReferenceNumber)];
										stream << "\t\t\t";
										if (ReferencedCalculatedDoseReferenceNumber) {
											stream << "\t\t";
											ReferencedCalculatedDoseReferenceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedCalculatedDoseReferenceNumber> not present\n";

										Attribute *CalculatedDoseReferenceDoseValue = (*list)[TagFromName(CalculatedDoseReferenceDoseValue)];
										stream << "\t\t\t";
										if (CalculatedDoseReferenceDoseValue) {
											stream << "\t\t";
											CalculatedDoseReferenceDoseValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CalculatedDoseReferenceDoseValue> not present\n";

									}
								}
							}
	Attribute *RecordedSourceApplicatorSequence = (*list)[TagFromName(RecordedSourceApplicatorSequence)];
							stream << "\t\t";
							if (RecordedSourceApplicatorSequence)
								stream << "\t\tSequence <RecordedSourceApplicatorSequence>\n";
							else
								stream << "\t\tSequence <RecordedSourceApplicatorSequence> not present\n";
							if (RecordedSourceApplicatorSequence && strcmp(RecordedSourceApplicatorSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RecordedSourceApplicatorSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedSourceApplicatorNumber = (*list)[TagFromName(ReferencedSourceApplicatorNumber)];
										stream << "\t\t\t";
										if (ReferencedSourceApplicatorNumber) {
											stream << "\t\t";
											ReferencedSourceApplicatorNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedSourceApplicatorNumber> not present\n";

										Attribute *SourceApplicatorID = (*list)[TagFromName(SourceApplicatorID)];
										stream << "\t\t\t";
										if (SourceApplicatorID) {
											stream << "\t\t";
											SourceApplicatorID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceApplicatorID> not present\n";

										Attribute *SourceApplicatorType = (*list)[TagFromName(SourceApplicatorType)];
										stream << "\t\t\t";
										if (SourceApplicatorType) {
											stream << "\t\t";
											SourceApplicatorType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceApplicatorType> not present\n";

										Attribute *SourceApplicatorName = (*list)[TagFromName(SourceApplicatorName)];
										stream << "\t\t\t";
										if (SourceApplicatorName) {
											stream << "\t\t";
											SourceApplicatorName->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceApplicatorName> not present\n";

										Attribute *SourceApplicatorLength = (*list)[TagFromName(SourceApplicatorLength)];
										stream << "\t\t\t";
										if (SourceApplicatorLength) {
											stream << "\t\t";
											SourceApplicatorLength->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceApplicatorLength> not present\n";

										Attribute *SourceApplicatorManufacturer = (*list)[TagFromName(SourceApplicatorManufacturer)];
										stream << "\t\t\t";
										if (SourceApplicatorManufacturer) {
											stream << "\t\t";
											SourceApplicatorManufacturer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceApplicatorManufacturer> not present\n";

										Attribute *SourceApplicatorStepSize = (*list)[TagFromName(SourceApplicatorStepSize)];
										stream << "\t\t\t";
										if (SourceApplicatorStepSize) {
											stream << "\t\t";
											SourceApplicatorStepSize->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <SourceApplicatorStepSize> not present\n";

									}
								}
							}
							Attribute *TransferTubeNumber = (*list)[TagFromName(TransferTubeNumber)];
							stream << "\t\t";
							if (TransferTubeNumber) {
								stream << "\t\t";
								TransferTubeNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TransferTubeNumber> not present\n";

							Attribute *TransferTubeLength = (*list)[TagFromName(TransferTubeLength)];
							stream << "\t\t";
							if (TransferTubeLength) {
								stream << "\t\t";
								TransferTubeLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TransferTubeLength> not present\n";

	Attribute *RecordedChannelShieldSequence = (*list)[TagFromName(RecordedChannelShieldSequence)];
							stream << "\t\t";
							if (RecordedChannelShieldSequence)
								stream << "\t\tSequence <RecordedChannelShieldSequence>\n";
							else
								stream << "\t\tSequence <RecordedChannelShieldSequence> not present\n";
							if (RecordedChannelShieldSequence && strcmp(RecordedChannelShieldSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RecordedChannelShieldSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedChannelShieldNumber = (*list)[TagFromName(ReferencedChannelShieldNumber)];
										stream << "\t\t\t";
										if (ReferencedChannelShieldNumber) {
											stream << "\t\t";
											ReferencedChannelShieldNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedChannelShieldNumber> not present\n";

										Attribute *ChannelShieldID = (*list)[TagFromName(ChannelShieldID)];
										stream << "\t\t\t";
										if (ChannelShieldID) {
											stream << "\t\t";
											ChannelShieldID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldID> not present\n";

										Attribute *ChannelShieldName = (*list)[TagFromName(ChannelShieldName)];
										stream << "\t\t\t";
										if (ChannelShieldName) {
											stream << "\t\t";
											ChannelShieldName->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelShieldName> not present\n";

									}
								}
							}
							Attribute *ReferencedSourceNumber = (*list)[TagFromName(ReferencedSourceNumber)];
							stream << "\t\t";
							if (ReferencedSourceNumber) {
								stream << "\t\t";
								ReferencedSourceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSourceNumber> not present\n";

							Attribute *SafePositionExitDate = (*list)[TagFromName(SafePositionExitDate)];
							stream << "\t\t";
							if (SafePositionExitDate) {
								stream << "\t\t";
								SafePositionExitDate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SafePositionExitDate> not present\n";

							Attribute *SafePositionExitTime = (*list)[TagFromName(SafePositionExitTime)];
							stream << "\t\t";
							if (SafePositionExitTime) {
								stream << "\t\t";
								SafePositionExitTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SafePositionExitTime> not present\n";

							Attribute *SafePositionReturnDate = (*list)[TagFromName(SafePositionReturnDate)];
							stream << "\t\t";
							if (SafePositionReturnDate) {
								stream << "\t\t";
								SafePositionReturnDate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SafePositionReturnDate> not present\n";

							Attribute *SafePositionReturnTime = (*list)[TagFromName(SafePositionReturnTime)];
							stream << "\t\t";
							if (SafePositionReturnTime) {
								stream << "\t\t";
								SafePositionReturnTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SafePositionReturnTime> not present\n";

							Attribute *NumberOfControlPoints = (*list)[TagFromName(NumberOfControlPoints)];
							stream << "\t\t";
							if (NumberOfControlPoints) {
								stream << "\t\t";
								NumberOfControlPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfControlPoints> not present\n";

	Attribute *BrachyControlPointDeliveredSequence = (*list)[TagFromName(BrachyControlPointDeliveredSequence)];
							stream << "\t\t";
							if (BrachyControlPointDeliveredSequence)
								stream << "\t\tSequence <BrachyControlPointDeliveredSequence>\n";
							else
								stream << "\t\tSequence <BrachyControlPointDeliveredSequence> not present\n";
							if (BrachyControlPointDeliveredSequence && strcmp(BrachyControlPointDeliveredSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=BrachyControlPointDeliveredSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedControlPointIndex = (*list)[TagFromName(ReferencedControlPointIndex)];
										stream << "\t\t\t";
										if (ReferencedControlPointIndex) {
											stream << "\t\t";
											ReferencedControlPointIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedControlPointIndex> not present\n";

										Attribute *TreatmentControlPointDate = (*list)[TagFromName(TreatmentControlPointDate)];
										stream << "\t\t\t";
										if (TreatmentControlPointDate) {
											stream << "\t\t";
											TreatmentControlPointDate->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <TreatmentControlPointDate> not present\n";

										Attribute *TreatmentControlPointTime = (*list)[TagFromName(TreatmentControlPointTime)];
										stream << "\t\t\t";
										if (TreatmentControlPointTime) {
											stream << "\t\t";
											TreatmentControlPointTime->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <TreatmentControlPointTime> not present\n";

										Attribute *ControlPointRelativePosition = (*list)[TagFromName(ControlPointRelativePosition)];
										stream << "\t\t\t";
										if (ControlPointRelativePosition) {
											stream << "\t\t";
											ControlPointRelativePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ControlPointRelativePosition> not present\n";

	Attribute *OverrideSequence = (*list)[TagFromName(OverrideSequence)];
										stream << "\t\t\t";
										if (OverrideSequence)
											stream << "\t\tSequence <OverrideSequence>\n";
										else
											stream << "\t\tSequence <OverrideSequence> not present\n";
										if (OverrideSequence && strcmp(OverrideSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=OverrideSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
													Attribute *OverrideParameterPointer = (*list)[TagFromName(OverrideParameterPointer)];
													stream << "\t\t\t\t";
													if (OverrideParameterPointer) {
														stream << "\t\t";
														OverrideParameterPointer->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <OverrideParameterPointer> not present\n";

													Attribute *OperatorsName = (*list)[TagFromName(OperatorsName)];
													stream << "\t\t\t\t";
													if (OperatorsName) {
														stream << "\t\t";
														OperatorsName->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <OperatorsName> not present\n";

	Attribute *OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
													stream << "\t\t\t\t";
													if (OperatorIdentificationSequence)
														stream << "\t\tSequence <OperatorIdentificationSequence>\n";
													else
														stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
													if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
														AttributeList **array;
														int n;
														if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
															int i; for (i=0; i<n; ++i) {
																AttributeList *list=array[i];
													stream << "\t\t\t\t";
																	stream << "\t\tItem" << endl;
																			stream << "\t\t\t\t\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
																			stream << "\t\t\t\t\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

															}
														}
													}
													Attribute *OverrideReason = (*list)[TagFromName(OverrideReason)];
													stream << "\t\t\t\t";
													if (OverrideReason) {
														stream << "\t\t";
														OverrideReason->write(stream,dict);
														stream << "\n";
													}
													else
														stream << "\t\tElement <OverrideReason> not present\n";

												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_RTTreatmentSummaryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTTreatmentSummaryRecord>\n";

	if (CurrentTreatmentStatus) {
		stream << "\t\t";
		CurrentTreatmentStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CurrentTreatmentStatus> not present\n";

	if (TreatmentStatusComment) {
		stream << "\t\t";
		TreatmentStatusComment->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TreatmentStatusComment> not present\n";

	if (FirstTreatmentDate) {
		stream << "\t\t";
		FirstTreatmentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FirstTreatmentDate> not present\n";

	if (MostRecentTreatmentDate) {
		stream << "\t\t";
		MostRecentTreatmentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MostRecentTreatmentDate> not present\n";

	if (FractionGroupSummarySequence)
		stream << "\t\tSequence <FractionGroupSummarySequence>\n";
	else
		stream << "\t\tSequence <FractionGroupSummarySequence> not present\n";
	if (FractionGroupSummarySequence && strcmp(FractionGroupSummarySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FractionGroupSummarySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedFractionGroupNumber = (*list)[TagFromName(ReferencedFractionGroupNumber)];
				stream << "\t";
				if (ReferencedFractionGroupNumber) {
					stream << "\t\t";
					ReferencedFractionGroupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFractionGroupNumber> not present\n";

				Attribute *FractionGroupType = (*list)[TagFromName(FractionGroupType)];
				stream << "\t";
				if (FractionGroupType) {
					stream << "\t\t";
					FractionGroupType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FractionGroupType> not present\n";

				Attribute *NumberOfFractionsPlanned = (*list)[TagFromName(NumberOfFractionsPlanned)];
				stream << "\t";
				if (NumberOfFractionsPlanned) {
					stream << "\t\t";
					NumberOfFractionsPlanned->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfFractionsPlanned> not present\n";

				Attribute *NumberOfFractionsDelivered = (*list)[TagFromName(NumberOfFractionsDelivered)];
				stream << "\t";
				if (NumberOfFractionsDelivered) {
					stream << "\t\t";
					NumberOfFractionsDelivered->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfFractionsDelivered> not present\n";

	Attribute *FractionStatusSummarySequence = (*list)[TagFromName(FractionStatusSummarySequence)];
				stream << "\t";
				if (FractionStatusSummarySequence)
					stream << "\t\tSequence <FractionStatusSummarySequence>\n";
				else
					stream << "\t\tSequence <FractionStatusSummarySequence> not present\n";
				if (FractionStatusSummarySequence && strcmp(FractionStatusSummarySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=FractionStatusSummarySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedFractionNumber = (*list)[TagFromName(ReferencedFractionNumber)];
							stream << "\t\t";
							if (ReferencedFractionNumber) {
								stream << "\t\t";
								ReferencedFractionNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedFractionNumber> not present\n";

							Attribute *TreatmentDate = (*list)[TagFromName(TreatmentDate)];
							stream << "\t\t";
							if (TreatmentDate) {
								stream << "\t\t";
								TreatmentDate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentDate> not present\n";

							Attribute *TreatmentTime = (*list)[TagFromName(TreatmentTime)];
							stream << "\t\t";
							if (TreatmentTime) {
								stream << "\t\t";
								TreatmentTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentTime> not present\n";

							Attribute *TreatmentTerminationStatus = (*list)[TagFromName(TreatmentTerminationStatus)];
							stream << "\t\t";
							if (TreatmentTerminationStatus) {
								stream << "\t\t";
								TreatmentTerminationStatus->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentTerminationStatus> not present\n";

						}
					}
				}
			}
		}
	}
	if (TreatmentSummaryMeasuredDoseReferenceSequence)
		stream << "\t\tSequence <TreatmentSummaryMeasuredDoseReferenceSequence>\n";
	else
		stream << "\t\tSequence <TreatmentSummaryMeasuredDoseReferenceSequence> not present\n";
	if (TreatmentSummaryMeasuredDoseReferenceSequence && strcmp(TreatmentSummaryMeasuredDoseReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentSummaryMeasuredDoseReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
				stream << "\t";
				if (ReferencedDoseReferenceNumber) {
					stream << "\t\t";
					ReferencedDoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

				Attribute *DoseReferenceDescription = (*list)[TagFromName(DoseReferenceDescription)];
				stream << "\t";
				if (DoseReferenceDescription) {
					stream << "\t\t";
					DoseReferenceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceDescription> not present\n";

				Attribute *CumulativeDoseToDoseReference = (*list)[TagFromName(CumulativeDoseToDoseReference)];
				stream << "\t";
				if (CumulativeDoseToDoseReference) {
					stream << "\t\t";
					CumulativeDoseToDoseReference->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CumulativeDoseToDoseReference> not present\n";

			}
		}
	}
	if (TreatmentSummaryCalculatedDoseReferenceSequence)
		stream << "\t\tSequence <TreatmentSummaryCalculatedDoseReferenceSequence>\n";
	else
		stream << "\t\tSequence <TreatmentSummaryCalculatedDoseReferenceSequence> not present\n";
	if (TreatmentSummaryCalculatedDoseReferenceSequence && strcmp(TreatmentSummaryCalculatedDoseReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentSummaryCalculatedDoseReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
				stream << "\t";
				if (ReferencedDoseReferenceNumber) {
					stream << "\t\t";
					ReferencedDoseReferenceNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

				Attribute *DoseReferenceDescription = (*list)[TagFromName(DoseReferenceDescription)];
				stream << "\t";
				if (DoseReferenceDescription) {
					stream << "\t\t";
					DoseReferenceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DoseReferenceDescription> not present\n";

				Attribute *CumulativeDoseToDoseReference = (*list)[TagFromName(CumulativeDoseToDoseReference)];
				stream << "\t";
				if (CumulativeDoseToDoseReference) {
					stream << "\t\t";
					CumulativeDoseToDoseReference->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CumulativeDoseToDoseReference> not present\n";

			}
		}
	}
}

void
Module_RTIonToleranceTables::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTIonToleranceTables>\n";

	if (IonToleranceTableSequence)
		stream << "\t\tSequence <IonToleranceTableSequence>\n";
	else
		stream << "\t\tSequence <IonToleranceTableSequence> not present\n";
	if (IonToleranceTableSequence && strcmp(IonToleranceTableSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IonToleranceTableSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ToleranceTableNumber = (*list)[TagFromName(ToleranceTableNumber)];
				stream << "\t";
				if (ToleranceTableNumber) {
					stream << "\t\t";
					ToleranceTableNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ToleranceTableNumber> not present\n";

				Attribute *ToleranceTableLabel = (*list)[TagFromName(ToleranceTableLabel)];
				stream << "\t";
				if (ToleranceTableLabel) {
					stream << "\t\t";
					ToleranceTableLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ToleranceTableLabel> not present\n";

				Attribute *GantryAngleTolerance = (*list)[TagFromName(GantryAngleTolerance)];
				stream << "\t";
				if (GantryAngleTolerance) {
					stream << "\t\t";
					GantryAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryAngleTolerance> not present\n";

				Attribute *BeamLimitingDeviceAngleTolerance = (*list)[TagFromName(BeamLimitingDeviceAngleTolerance)];
				stream << "\t";
				if (BeamLimitingDeviceAngleTolerance) {
					stream << "\t\t";
					BeamLimitingDeviceAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamLimitingDeviceAngleTolerance> not present\n";

	Attribute *BeamLimitingDeviceToleranceSequence = (*list)[TagFromName(BeamLimitingDeviceToleranceSequence)];
				stream << "\t";
				if (BeamLimitingDeviceToleranceSequence)
					stream << "\t\tSequence <BeamLimitingDeviceToleranceSequence>\n";
				else
					stream << "\t\tSequence <BeamLimitingDeviceToleranceSequence> not present\n";
				if (BeamLimitingDeviceToleranceSequence && strcmp(BeamLimitingDeviceToleranceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BeamLimitingDeviceToleranceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *BeamLimitingDevicePositionTolerance = (*list)[TagFromName(BeamLimitingDevicePositionTolerance)];
							stream << "\t\t";
							if (BeamLimitingDevicePositionTolerance) {
								stream << "\t\t";
								BeamLimitingDevicePositionTolerance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDevicePositionTolerance> not present\n";

						}
					}
				}
				Attribute *PatientSupportAngleTolerance = (*list)[TagFromName(PatientSupportAngleTolerance)];
				stream << "\t";
				if (PatientSupportAngleTolerance) {
					stream << "\t\t";
					PatientSupportAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientSupportAngleTolerance> not present\n";

				Attribute *TableTopVerticalPositionTolerance = (*list)[TagFromName(TableTopVerticalPositionTolerance)];
				stream << "\t";
				if (TableTopVerticalPositionTolerance) {
					stream << "\t\t";
					TableTopVerticalPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopVerticalPositionTolerance> not present\n";

				Attribute *TableTopLongitudinalPositionTolerance = (*list)[TagFromName(TableTopLongitudinalPositionTolerance)];
				stream << "\t";
				if (TableTopLongitudinalPositionTolerance) {
					stream << "\t\t";
					TableTopLongitudinalPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLongitudinalPositionTolerance> not present\n";

				Attribute *TableTopLateralPositionTolerance = (*list)[TagFromName(TableTopLateralPositionTolerance)];
				stream << "\t";
				if (TableTopLateralPositionTolerance) {
					stream << "\t\t";
					TableTopLateralPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLateralPositionTolerance> not present\n";

				Attribute *TableTopPitchAngleTolerance = (*list)[TagFromName(TableTopPitchAngleTolerance)];
				stream << "\t";
				if (TableTopPitchAngleTolerance) {
					stream << "\t\t";
					TableTopPitchAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopPitchAngleTolerance> not present\n";

				Attribute *TableTopRollAngleTolerance = (*list)[TagFromName(TableTopRollAngleTolerance)];
				stream << "\t";
				if (TableTopRollAngleTolerance) {
					stream << "\t\t";
					TableTopRollAngleTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopRollAngleTolerance> not present\n";

				Attribute *SnoutPositionTolerance = (*list)[TagFromName(SnoutPositionTolerance)];
				stream << "\t";
				if (SnoutPositionTolerance) {
					stream << "\t\t";
					SnoutPositionTolerance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SnoutPositionTolerance> not present\n";

			}
		}
	}
}

void
Module_RTIonBeams::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTIonBeams>\n";

	if (IonBeamSequence)
		stream << "\t\tSequence <IonBeamSequence>\n";
	else
		stream << "\t\tSequence <IonBeamSequence> not present\n";
	if (IonBeamSequence && strcmp(IonBeamSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IonBeamSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *BeamNumber = (*list)[TagFromName(BeamNumber)];
				stream << "\t";
				if (BeamNumber) {
					stream << "\t\t";
					BeamNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamNumber> not present\n";

				Attribute *BeamName = (*list)[TagFromName(BeamName)];
				stream << "\t";
				if (BeamName) {
					stream << "\t\t";
					BeamName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamName> not present\n";

				Attribute *BeamDescription = (*list)[TagFromName(BeamDescription)];
				stream << "\t";
				if (BeamDescription) {
					stream << "\t\t";
					BeamDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamDescription> not present\n";

				Attribute *BeamType = (*list)[TagFromName(BeamType)];
				stream << "\t";
				if (BeamType) {
					stream << "\t\t";
					BeamType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamType> not present\n";

				Attribute *RadiationType = (*list)[TagFromName(RadiationType)];
				stream << "\t";
				if (RadiationType) {
					stream << "\t\t";
					RadiationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationType> not present\n";

				Attribute *RadiationMassNumber = (*list)[TagFromName(RadiationMassNumber)];
				stream << "\t";
				if (RadiationMassNumber) {
					stream << "\t\t";
					RadiationMassNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationMassNumber> not present\n";

				Attribute *RadiationAtomicNumber = (*list)[TagFromName(RadiationAtomicNumber)];
				stream << "\t";
				if (RadiationAtomicNumber) {
					stream << "\t\t";
					RadiationAtomicNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationAtomicNumber> not present\n";

				Attribute *RadiationChargeState = (*list)[TagFromName(RadiationChargeState)];
				stream << "\t";
				if (RadiationChargeState) {
					stream << "\t\t";
					RadiationChargeState->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationChargeState> not present\n";

				Attribute *ScanMode = (*list)[TagFromName(ScanMode)];
				stream << "\t";
				if (ScanMode) {
					stream << "\t\t";
					ScanMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ScanMode> not present\n";

				Attribute *ModulatedScanModeType = (*list)[TagFromName(ModulatedScanModeType)];
				stream << "\t";
				if (ModulatedScanModeType) {
					stream << "\t\t";
					ModulatedScanModeType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ModulatedScanModeType> not present\n";

				Attribute *TreatmentMachineName = (*list)[TagFromName(TreatmentMachineName)];
				stream << "\t";
				if (TreatmentMachineName) {
					stream << "\t\t";
					TreatmentMachineName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentMachineName> not present\n";

				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *InstitutionName = (*list)[TagFromName(InstitutionName)];
				stream << "\t";
				if (InstitutionName) {
					stream << "\t\t";
					InstitutionName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionName> not present\n";

				Attribute *InstitutionAddress = (*list)[TagFromName(InstitutionAddress)];
				stream << "\t";
				if (InstitutionAddress) {
					stream << "\t\t";
					InstitutionAddress->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionAddress> not present\n";

				Attribute *InstitutionalDepartmentName = (*list)[TagFromName(InstitutionalDepartmentName)];
				stream << "\t";
				if (InstitutionalDepartmentName) {
					stream << "\t\t";
					InstitutionalDepartmentName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	Attribute *InstitutionalDepartmentTypeCodeSequence = (*list)[TagFromName(InstitutionalDepartmentTypeCodeSequence)];
				stream << "\t";
				if (InstitutionalDepartmentTypeCodeSequence)
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
				if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
				stream << "\t";
				if (DeviceSerialNumber) {
					stream << "\t\t";
					DeviceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceSerialNumber> not present\n";

				Attribute *PrimaryDosimeterUnit = (*list)[TagFromName(PrimaryDosimeterUnit)];
				stream << "\t";
				if (PrimaryDosimeterUnit) {
					stream << "\t\t";
					PrimaryDosimeterUnit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PrimaryDosimeterUnit> not present\n";

				Attribute *ReferencedToleranceTableNumber = (*list)[TagFromName(ReferencedToleranceTableNumber)];
				stream << "\t";
				if (ReferencedToleranceTableNumber) {
					stream << "\t\t";
					ReferencedToleranceTableNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedToleranceTableNumber> not present\n";

				Attribute *VirtualSourceAxisDistances = (*list)[TagFromName(VirtualSourceAxisDistances)];
				stream << "\t";
				if (VirtualSourceAxisDistances) {
					stream << "\t\t";
					VirtualSourceAxisDistances->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VirtualSourceAxisDistances> not present\n";

	Attribute *IonBeamLimitingDeviceSequence = (*list)[TagFromName(IonBeamLimitingDeviceSequence)];
				stream << "\t";
				if (IonBeamLimitingDeviceSequence)
					stream << "\t\tSequence <IonBeamLimitingDeviceSequence>\n";
				else
					stream << "\t\tSequence <IonBeamLimitingDeviceSequence> not present\n";
				if (IonBeamLimitingDeviceSequence && strcmp(IonBeamLimitingDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IonBeamLimitingDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *IsocenterToBeamLimitingDeviceDistance = (*list)[TagFromName(IsocenterToBeamLimitingDeviceDistance)];
							stream << "\t\t";
							if (IsocenterToBeamLimitingDeviceDistance) {
								stream << "\t\t";
								IsocenterToBeamLimitingDeviceDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterToBeamLimitingDeviceDistance> not present\n";

							Attribute *NumberOfLeafJawPairs = (*list)[TagFromName(NumberOfLeafJawPairs)];
							stream << "\t\t";
							if (NumberOfLeafJawPairs) {
								stream << "\t\t";
								NumberOfLeafJawPairs->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfLeafJawPairs> not present\n";

							Attribute *LeafPositionBoundaries = (*list)[TagFromName(LeafPositionBoundaries)];
							stream << "\t\t";
							if (LeafPositionBoundaries) {
								stream << "\t\t";
								LeafPositionBoundaries->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LeafPositionBoundaries> not present\n";

						}
					}
				}
				Attribute *ReferencedPatientSetupNumber = (*list)[TagFromName(ReferencedPatientSetupNumber)];
				stream << "\t";
				if (ReferencedPatientSetupNumber) {
					stream << "\t\t";
					ReferencedPatientSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPatientSetupNumber> not present\n";

	Attribute *ReferencedReferenceImageSequence = (*list)[TagFromName(ReferencedReferenceImageSequence)];
				stream << "\t";
				if (ReferencedReferenceImageSequence)
					stream << "\t\tSequence <ReferencedReferenceImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedReferenceImageSequence> not present\n";
				if (ReferencedReferenceImageSequence && strcmp(ReferencedReferenceImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedReferenceImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

							Attribute *ReferenceImageNumber = (*list)[TagFromName(ReferenceImageNumber)];
							stream << "\t\t";
							if (ReferenceImageNumber) {
								stream << "\t\t";
								ReferenceImageNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferenceImageNumber> not present\n";

						}
					}
				}
				Attribute *TreatmentDeliveryType = (*list)[TagFromName(TreatmentDeliveryType)];
				stream << "\t";
				if (TreatmentDeliveryType) {
					stream << "\t\t";
					TreatmentDeliveryType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentDeliveryType> not present\n";

	Attribute *ReferencedDoseSequence = (*list)[TagFromName(ReferencedDoseSequence)];
				stream << "\t";
				if (ReferencedDoseSequence)
					stream << "\t\tSequence <ReferencedDoseSequence>\n";
				else
					stream << "\t\tSequence <ReferencedDoseSequence> not present\n";
				if (ReferencedDoseSequence && strcmp(ReferencedDoseSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedDoseSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedSOPClassUID = (*list)[TagFromName(ReferencedSOPClassUID)];
							stream << "\t\t";
							if (ReferencedSOPClassUID) {
								stream << "\t\t";
								ReferencedSOPClassUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

							Attribute *ReferencedSOPInstanceUID = (*list)[TagFromName(ReferencedSOPInstanceUID)];
							stream << "\t\t";
							if (ReferencedSOPInstanceUID) {
								stream << "\t\t";
								ReferencedSOPInstanceUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

						}
					}
				}
				Attribute *NumberOfWedges = (*list)[TagFromName(NumberOfWedges)];
				stream << "\t";
				if (NumberOfWedges) {
					stream << "\t\t";
					NumberOfWedges->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfWedges> not present\n";

				Attribute *TotalWedgeTrayWaterEquivalentThickness = (*list)[TagFromName(TotalWedgeTrayWaterEquivalentThickness)];
				stream << "\t";
				if (TotalWedgeTrayWaterEquivalentThickness) {
					stream << "\t\t";
					TotalWedgeTrayWaterEquivalentThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalWedgeTrayWaterEquivalentThickness> not present\n";

	Attribute *IonWedgeSequence = (*list)[TagFromName(IonWedgeSequence)];
				stream << "\t";
				if (IonWedgeSequence)
					stream << "\t\tSequence <IonWedgeSequence>\n";
				else
					stream << "\t\tSequence <IonWedgeSequence> not present\n";
				if (IonWedgeSequence && strcmp(IonWedgeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IonWedgeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *WedgeNumber = (*list)[TagFromName(WedgeNumber)];
							stream << "\t\t";
							if (WedgeNumber) {
								stream << "\t\t";
								WedgeNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeNumber> not present\n";

							Attribute *WedgeType = (*list)[TagFromName(WedgeType)];
							stream << "\t\t";
							if (WedgeType) {
								stream << "\t\t";
								WedgeType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeType> not present\n";

							Attribute *WedgeID = (*list)[TagFromName(WedgeID)];
							stream << "\t\t";
							if (WedgeID) {
								stream << "\t\t";
								WedgeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *WedgeAngle = (*list)[TagFromName(WedgeAngle)];
							stream << "\t\t";
							if (WedgeAngle) {
								stream << "\t\t";
								WedgeAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeAngle> not present\n";

							Attribute *WedgeOrientation = (*list)[TagFromName(WedgeOrientation)];
							stream << "\t\t";
							if (WedgeOrientation) {
								stream << "\t\t";
								WedgeOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeOrientation> not present\n";

							Attribute *IsocenterToWedgeTrayDistance = (*list)[TagFromName(IsocenterToWedgeTrayDistance)];
							stream << "\t\t";
							if (IsocenterToWedgeTrayDistance) {
								stream << "\t\t";
								IsocenterToWedgeTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterToWedgeTrayDistance> not present\n";

						}
					}
				}
				Attribute *NumberOfCompensators = (*list)[TagFromName(NumberOfCompensators)];
				stream << "\t";
				if (NumberOfCompensators) {
					stream << "\t\t";
					NumberOfCompensators->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfCompensators> not present\n";

				Attribute *TotalCompensatorTrayWaterEquivalentThickness = (*list)[TagFromName(TotalCompensatorTrayWaterEquivalentThickness)];
				stream << "\t";
				if (TotalCompensatorTrayWaterEquivalentThickness) {
					stream << "\t\t";
					TotalCompensatorTrayWaterEquivalentThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalCompensatorTrayWaterEquivalentThickness> not present\n";

	Attribute *IonRangeCompensatorSequence = (*list)[TagFromName(IonRangeCompensatorSequence)];
				stream << "\t";
				if (IonRangeCompensatorSequence)
					stream << "\t\tSequence <IonRangeCompensatorSequence>\n";
				else
					stream << "\t\tSequence <IonRangeCompensatorSequence> not present\n";
				if (IonRangeCompensatorSequence && strcmp(IonRangeCompensatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IonRangeCompensatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *CompensatorDescription = (*list)[TagFromName(CompensatorDescription)];
							stream << "\t\t";
							if (CompensatorDescription) {
								stream << "\t\t";
								CompensatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorDescription> not present\n";

							Attribute *CompensatorNumber = (*list)[TagFromName(CompensatorNumber)];
							stream << "\t\t";
							if (CompensatorNumber) {
								stream << "\t\t";
								CompensatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorNumber> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *CompensatorID = (*list)[TagFromName(CompensatorID)];
							stream << "\t\t";
							if (CompensatorID) {
								stream << "\t\t";
								CompensatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *IsocenterToCompensatorTrayDistance = (*list)[TagFromName(IsocenterToCompensatorTrayDistance)];
							stream << "\t\t";
							if (IsocenterToCompensatorTrayDistance) {
								stream << "\t\t";
								IsocenterToCompensatorTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterToCompensatorTrayDistance> not present\n";

							Attribute *CompensatorDivergence = (*list)[TagFromName(CompensatorDivergence)];
							stream << "\t\t";
							if (CompensatorDivergence) {
								stream << "\t\t";
								CompensatorDivergence->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorDivergence> not present\n";

							Attribute *CompensatorMountingPosition = (*list)[TagFromName(CompensatorMountingPosition)];
							stream << "\t\t";
							if (CompensatorMountingPosition) {
								stream << "\t\t";
								CompensatorMountingPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorMountingPosition> not present\n";

							Attribute *CompensatorRows = (*list)[TagFromName(CompensatorRows)];
							stream << "\t\t";
							if (CompensatorRows) {
								stream << "\t\t";
								CompensatorRows->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorRows> not present\n";

							Attribute *CompensatorColumns = (*list)[TagFromName(CompensatorColumns)];
							stream << "\t\t";
							if (CompensatorColumns) {
								stream << "\t\t";
								CompensatorColumns->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorColumns> not present\n";

							Attribute *CompensatorPixelSpacing = (*list)[TagFromName(CompensatorPixelSpacing)];
							stream << "\t\t";
							if (CompensatorPixelSpacing) {
								stream << "\t\t";
								CompensatorPixelSpacing->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorPixelSpacing> not present\n";

							Attribute *CompensatorPosition = (*list)[TagFromName(CompensatorPosition)];
							stream << "\t\t";
							if (CompensatorPosition) {
								stream << "\t\t";
								CompensatorPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorPosition> not present\n";

							Attribute *CompensatorColumnOffset = (*list)[TagFromName(CompensatorColumnOffset)];
							stream << "\t\t";
							if (CompensatorColumnOffset) {
								stream << "\t\t";
								CompensatorColumnOffset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorColumnOffset> not present\n";

							Attribute *CompensatorThicknessData = (*list)[TagFromName(CompensatorThicknessData)];
							stream << "\t\t";
							if (CompensatorThicknessData) {
								stream << "\t\t";
								CompensatorThicknessData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorThicknessData> not present\n";

							Attribute *IsocenterToCompensatorDistances = (*list)[TagFromName(IsocenterToCompensatorDistances)];
							stream << "\t\t";
							if (IsocenterToCompensatorDistances) {
								stream << "\t\t";
								IsocenterToCompensatorDistances->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterToCompensatorDistances> not present\n";

							Attribute *CompensatorRelativeStoppingPowerRatio = (*list)[TagFromName(CompensatorRelativeStoppingPowerRatio)];
							stream << "\t\t";
							if (CompensatorRelativeStoppingPowerRatio) {
								stream << "\t\t";
								CompensatorRelativeStoppingPowerRatio->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorRelativeStoppingPowerRatio> not present\n";

							Attribute *CompensatorMillingToolDiameter = (*list)[TagFromName(CompensatorMillingToolDiameter)];
							stream << "\t\t";
							if (CompensatorMillingToolDiameter) {
								stream << "\t\t";
								CompensatorMillingToolDiameter->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorMillingToolDiameter> not present\n";

						}
					}
				}
				Attribute *NumberOfBoli = (*list)[TagFromName(NumberOfBoli)];
				stream << "\t";
				if (NumberOfBoli) {
					stream << "\t\t";
					NumberOfBoli->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBoli> not present\n";

	Attribute *ReferencedBolusSequence = (*list)[TagFromName(ReferencedBolusSequence)];
				stream << "\t";
				if (ReferencedBolusSequence)
					stream << "\t\tSequence <ReferencedBolusSequence>\n";
				else
					stream << "\t\tSequence <ReferencedBolusSequence> not present\n";
				if (ReferencedBolusSequence && strcmp(ReferencedBolusSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedBolusSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfBlocks = (*list)[TagFromName(NumberOfBlocks)];
				stream << "\t";
				if (NumberOfBlocks) {
					stream << "\t\t";
					NumberOfBlocks->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBlocks> not present\n";

				Attribute *TotalBlockTrayWaterEquivalentThickness = (*list)[TagFromName(TotalBlockTrayWaterEquivalentThickness)];
				stream << "\t";
				if (TotalBlockTrayWaterEquivalentThickness) {
					stream << "\t\t";
					TotalBlockTrayWaterEquivalentThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalBlockTrayWaterEquivalentThickness> not present\n";

	Attribute *IonBlockSequence = (*list)[TagFromName(IonBlockSequence)];
				stream << "\t";
				if (IonBlockSequence)
					stream << "\t\tSequence <IonBlockSequence>\n";
				else
					stream << "\t\tSequence <IonBlockSequence> not present\n";
				if (IonBlockSequence && strcmp(IonBlockSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IonBlockSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BlockTrayID = (*list)[TagFromName(BlockTrayID)];
							stream << "\t\t";
							if (BlockTrayID) {
								stream << "\t\t";
								BlockTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockTrayID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *IsocenterToBlockTrayDistance = (*list)[TagFromName(IsocenterToBlockTrayDistance)];
							stream << "\t\t";
							if (IsocenterToBlockTrayDistance) {
								stream << "\t\t";
								IsocenterToBlockTrayDistance->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterToBlockTrayDistance> not present\n";

							Attribute *BlockType = (*list)[TagFromName(BlockType)];
							stream << "\t\t";
							if (BlockType) {
								stream << "\t\t";
								BlockType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockType> not present\n";

							Attribute *BlockDivergence = (*list)[TagFromName(BlockDivergence)];
							stream << "\t\t";
							if (BlockDivergence) {
								stream << "\t\t";
								BlockDivergence->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockDivergence> not present\n";

							Attribute *BlockMountingPosition = (*list)[TagFromName(BlockMountingPosition)];
							stream << "\t\t";
							if (BlockMountingPosition) {
								stream << "\t\t";
								BlockMountingPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockMountingPosition> not present\n";

							Attribute *BlockNumber = (*list)[TagFromName(BlockNumber)];
							stream << "\t\t";
							if (BlockNumber) {
								stream << "\t\t";
								BlockNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockNumber> not present\n";

							Attribute *BlockName = (*list)[TagFromName(BlockName)];
							stream << "\t\t";
							if (BlockName) {
								stream << "\t\t";
								BlockName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockName> not present\n";

							Attribute *MaterialID = (*list)[TagFromName(MaterialID)];
							stream << "\t\t";
							if (MaterialID) {
								stream << "\t\t";
								MaterialID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MaterialID> not present\n";

							Attribute *BlockThickness = (*list)[TagFromName(BlockThickness)];
							stream << "\t\t";
							if (BlockThickness) {
								stream << "\t\t";
								BlockThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockThickness> not present\n";

							Attribute *BlockNumberOfPoints = (*list)[TagFromName(BlockNumberOfPoints)];
							stream << "\t\t";
							if (BlockNumberOfPoints) {
								stream << "\t\t";
								BlockNumberOfPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockNumberOfPoints> not present\n";

							Attribute *BlockData = (*list)[TagFromName(BlockData)];
							stream << "\t\t";
							if (BlockData) {
								stream << "\t\t";
								BlockData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockData> not present\n";

						}
					}
				}
	Attribute *SnoutSequence = (*list)[TagFromName(SnoutSequence)];
				stream << "\t";
				if (SnoutSequence)
					stream << "\t\tSequence <SnoutSequence>\n";
				else
					stream << "\t\tSequence <SnoutSequence> not present\n";
				if (SnoutSequence && strcmp(SnoutSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SnoutSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SnoutID = (*list)[TagFromName(SnoutID)];
							stream << "\t\t";
							if (SnoutID) {
								stream << "\t\t";
								SnoutID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SnoutID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
	Attribute *ApplicatorSequence = (*list)[TagFromName(ApplicatorSequence)];
				stream << "\t";
				if (ApplicatorSequence)
					stream << "\t\tSequence <ApplicatorSequence>\n";
				else
					stream << "\t\tSequence <ApplicatorSequence> not present\n";
				if (ApplicatorSequence && strcmp(ApplicatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ApplicatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ApplicatorID = (*list)[TagFromName(ApplicatorID)];
							stream << "\t\t";
							if (ApplicatorID) {
								stream << "\t\t";
								ApplicatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *ApplicatorType = (*list)[TagFromName(ApplicatorType)];
							stream << "\t\t";
							if (ApplicatorType) {
								stream << "\t\t";
								ApplicatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorType> not present\n";

							Attribute *ApplicatorDescription = (*list)[TagFromName(ApplicatorDescription)];
							stream << "\t\t";
							if (ApplicatorDescription) {
								stream << "\t\t";
								ApplicatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorDescription> not present\n";

	Attribute *GeneralAccessorySequence = (*list)[TagFromName(GeneralAccessorySequence)];
							stream << "\t\t";
							if (GeneralAccessorySequence)
								stream << "\t\tSequence <GeneralAccessorySequence>\n";
							else
								stream << "\t\tSequence <GeneralAccessorySequence> not present\n";
							if (GeneralAccessorySequence && strcmp(GeneralAccessorySequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=GeneralAccessorySequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *GeneralAccessoryNumber = (*list)[TagFromName(GeneralAccessoryNumber)];
										stream << "\t\t\t";
										if (GeneralAccessoryNumber) {
											stream << "\t\t";
											GeneralAccessoryNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryNumber> not present\n";

										Attribute *GeneralAccessoryID = (*list)[TagFromName(GeneralAccessoryID)];
										stream << "\t\t\t";
										if (GeneralAccessoryID) {
											stream << "\t\t";
											GeneralAccessoryID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryID> not present\n";

										Attribute *GeneralAccessoryDescription = (*list)[TagFromName(GeneralAccessoryDescription)];
										stream << "\t\t\t";
										if (GeneralAccessoryDescription) {
											stream << "\t\t";
											GeneralAccessoryDescription->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryDescription> not present\n";

										Attribute *GeneralAccessoryType = (*list)[TagFromName(GeneralAccessoryType)];
										stream << "\t\t\t";
										if (GeneralAccessoryType) {
											stream << "\t\t";
											GeneralAccessoryType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryType> not present\n";

										Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
										stream << "\t\t\t";
										if (AccessoryCode) {
											stream << "\t\t";
											AccessoryCode->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AccessoryCode> not present\n";

										Attribute *IsocenterToGeneralAccessoryDistance = (*list)[TagFromName(IsocenterToGeneralAccessoryDistance)];
										stream << "\t\t\t";
										if (IsocenterToGeneralAccessoryDistance) {
											stream << "\t\t";
											IsocenterToGeneralAccessoryDistance->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <IsocenterToGeneralAccessoryDistance> not present\n";

									}
								}
							}
						}
					}
				}
				Attribute *NumberOfRangeShifters = (*list)[TagFromName(NumberOfRangeShifters)];
				stream << "\t";
				if (NumberOfRangeShifters) {
					stream << "\t\t";
					NumberOfRangeShifters->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfRangeShifters> not present\n";

	Attribute *RangeShifterSequence = (*list)[TagFromName(RangeShifterSequence)];
				stream << "\t";
				if (RangeShifterSequence)
					stream << "\t\tSequence <RangeShifterSequence>\n";
				else
					stream << "\t\tSequence <RangeShifterSequence> not present\n";
				if (RangeShifterSequence && strcmp(RangeShifterSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RangeShifterSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RangeShifterNumber = (*list)[TagFromName(RangeShifterNumber)];
							stream << "\t\t";
							if (RangeShifterNumber) {
								stream << "\t\t";
								RangeShifterNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeShifterNumber> not present\n";

							Attribute *RangeShifterID = (*list)[TagFromName(RangeShifterID)];
							stream << "\t\t";
							if (RangeShifterID) {
								stream << "\t\t";
								RangeShifterID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeShifterID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *RangeShifterType = (*list)[TagFromName(RangeShifterType)];
							stream << "\t\t";
							if (RangeShifterType) {
								stream << "\t\t";
								RangeShifterType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeShifterType> not present\n";

							Attribute *RangeShifterDescription = (*list)[TagFromName(RangeShifterDescription)];
							stream << "\t\t";
							if (RangeShifterDescription) {
								stream << "\t\t";
								RangeShifterDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeShifterDescription> not present\n";

						}
					}
				}
				Attribute *NumberOfLateralSpreadingDevices = (*list)[TagFromName(NumberOfLateralSpreadingDevices)];
				stream << "\t";
				if (NumberOfLateralSpreadingDevices) {
					stream << "\t\t";
					NumberOfLateralSpreadingDevices->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfLateralSpreadingDevices> not present\n";

	Attribute *LateralSpreadingDeviceSequence = (*list)[TagFromName(LateralSpreadingDeviceSequence)];
				stream << "\t";
				if (LateralSpreadingDeviceSequence)
					stream << "\t\tSequence <LateralSpreadingDeviceSequence>\n";
				else
					stream << "\t\tSequence <LateralSpreadingDeviceSequence> not present\n";
				if (LateralSpreadingDeviceSequence && strcmp(LateralSpreadingDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=LateralSpreadingDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *LateralSpreadingDeviceNumber = (*list)[TagFromName(LateralSpreadingDeviceNumber)];
							stream << "\t\t";
							if (LateralSpreadingDeviceNumber) {
								stream << "\t\t";
								LateralSpreadingDeviceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LateralSpreadingDeviceNumber> not present\n";

							Attribute *LateralSpreadingDeviceID = (*list)[TagFromName(LateralSpreadingDeviceID)];
							stream << "\t\t";
							if (LateralSpreadingDeviceID) {
								stream << "\t\t";
								LateralSpreadingDeviceID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LateralSpreadingDeviceID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *LateralSpreadingDeviceType = (*list)[TagFromName(LateralSpreadingDeviceType)];
							stream << "\t\t";
							if (LateralSpreadingDeviceType) {
								stream << "\t\t";
								LateralSpreadingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LateralSpreadingDeviceType> not present\n";

							Attribute *LateralSpreadingDeviceDescription = (*list)[TagFromName(LateralSpreadingDeviceDescription)];
							stream << "\t\t";
							if (LateralSpreadingDeviceDescription) {
								stream << "\t\t";
								LateralSpreadingDeviceDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LateralSpreadingDeviceDescription> not present\n";

						}
					}
				}
				Attribute *NumberOfRangeModulators = (*list)[TagFromName(NumberOfRangeModulators)];
				stream << "\t";
				if (NumberOfRangeModulators) {
					stream << "\t\t";
					NumberOfRangeModulators->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfRangeModulators> not present\n";

	Attribute *RangeModulatorSequence = (*list)[TagFromName(RangeModulatorSequence)];
				stream << "\t";
				if (RangeModulatorSequence)
					stream << "\t\tSequence <RangeModulatorSequence>\n";
				else
					stream << "\t\tSequence <RangeModulatorSequence> not present\n";
				if (RangeModulatorSequence && strcmp(RangeModulatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RangeModulatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RangeModulatorNumber = (*list)[TagFromName(RangeModulatorNumber)];
							stream << "\t\t";
							if (RangeModulatorNumber) {
								stream << "\t\t";
								RangeModulatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeModulatorNumber> not present\n";

							Attribute *RangeModulatorID = (*list)[TagFromName(RangeModulatorID)];
							stream << "\t\t";
							if (RangeModulatorID) {
								stream << "\t\t";
								RangeModulatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeModulatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *RangeModulatorType = (*list)[TagFromName(RangeModulatorType)];
							stream << "\t\t";
							if (RangeModulatorType) {
								stream << "\t\t";
								RangeModulatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeModulatorType> not present\n";

							Attribute *RangeModulatorDescription = (*list)[TagFromName(RangeModulatorDescription)];
							stream << "\t\t";
							if (RangeModulatorDescription) {
								stream << "\t\t";
								RangeModulatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeModulatorDescription> not present\n";

							Attribute *BeamCurrentModulationID = (*list)[TagFromName(BeamCurrentModulationID)];
							stream << "\t\t";
							if (BeamCurrentModulationID) {
								stream << "\t\t";
								BeamCurrentModulationID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamCurrentModulationID> not present\n";

						}
					}
				}
							stream << "\t\t";
	Macro_PatientSupportIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientSupportIdentificationMacro>\n";

				Attribute *FixationLightAzimuthalAngle = (*list)[TagFromName(FixationLightAzimuthalAngle)];
				stream << "\t";
				if (FixationLightAzimuthalAngle) {
					stream << "\t\t";
					FixationLightAzimuthalAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FixationLightAzimuthalAngle> not present\n";

				Attribute *FixationLightPolarAngle = (*list)[TagFromName(FixationLightPolarAngle)];
				stream << "\t";
				if (FixationLightPolarAngle) {
					stream << "\t\t";
					FixationLightPolarAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FixationLightPolarAngle> not present\n";

				Attribute *FinalCumulativeMetersetWeight = (*list)[TagFromName(FinalCumulativeMetersetWeight)];
				stream << "\t";
				if (FinalCumulativeMetersetWeight) {
					stream << "\t\t";
					FinalCumulativeMetersetWeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FinalCumulativeMetersetWeight> not present\n";

				Attribute *NumberOfControlPoints = (*list)[TagFromName(NumberOfControlPoints)];
				stream << "\t";
				if (NumberOfControlPoints) {
					stream << "\t\t";
					NumberOfControlPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfControlPoints> not present\n";

	Attribute *IonControlPointSequence = (*list)[TagFromName(IonControlPointSequence)];
				stream << "\t";
				if (IonControlPointSequence)
					stream << "\t\tSequence <IonControlPointSequence>\n";
				else
					stream << "\t\tSequence <IonControlPointSequence> not present\n";
				if (IonControlPointSequence && strcmp(IonControlPointSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IonControlPointSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ControlPointIndex = (*list)[TagFromName(ControlPointIndex)];
							stream << "\t\t";
							if (ControlPointIndex) {
								stream << "\t\t";
								ControlPointIndex->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ControlPointIndex> not present\n";

							Attribute *CumulativeMetersetWeight = (*list)[TagFromName(CumulativeMetersetWeight)];
							stream << "\t\t";
							if (CumulativeMetersetWeight) {
								stream << "\t\t";
								CumulativeMetersetWeight->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CumulativeMetersetWeight> not present\n";

	Attribute *ReferencedDoseReferenceSequence = (*list)[TagFromName(ReferencedDoseReferenceSequence)];
							stream << "\t\t";
							if (ReferencedDoseReferenceSequence)
								stream << "\t\tSequence <ReferencedDoseReferenceSequence>\n";
							else
								stream << "\t\tSequence <ReferencedDoseReferenceSequence> not present\n";
							if (ReferencedDoseReferenceSequence && strcmp(ReferencedDoseReferenceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedDoseReferenceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
										stream << "\t\t\t";
										if (ReferencedDoseReferenceNumber) {
											stream << "\t\t";
											ReferencedDoseReferenceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

										Attribute *CumulativeDoseReferenceCoefficient = (*list)[TagFromName(CumulativeDoseReferenceCoefficient)];
										stream << "\t\t\t";
										if (CumulativeDoseReferenceCoefficient) {
											stream << "\t\t";
											CumulativeDoseReferenceCoefficient->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CumulativeDoseReferenceCoefficient> not present\n";

									}
								}
							}
							Attribute *NominalBeamEnergy = (*list)[TagFromName(NominalBeamEnergy)];
							stream << "\t\t";
							if (NominalBeamEnergy) {
								stream << "\t\t";
								NominalBeamEnergy->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NominalBeamEnergy> not present\n";

							Attribute *KVP = (*list)[TagFromName(KVP)];
							stream << "\t\t";
							if (KVP) {
								stream << "\t\t";
								KVP->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <KVP> not present\n";

							Attribute *MetersetRate = (*list)[TagFromName(MetersetRate)];
							stream << "\t\t";
							if (MetersetRate) {
								stream << "\t\t";
								MetersetRate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MetersetRate> not present\n";

	Attribute *IonWedgePositionSequence = (*list)[TagFromName(IonWedgePositionSequence)];
							stream << "\t\t";
							if (IonWedgePositionSequence)
								stream << "\t\tSequence <IonWedgePositionSequence>\n";
							else
								stream << "\t\tSequence <IonWedgePositionSequence> not present\n";
							if (IonWedgePositionSequence && strcmp(IonWedgePositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=IonWedgePositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedWedgeNumber = (*list)[TagFromName(ReferencedWedgeNumber)];
										stream << "\t\t\t";
										if (ReferencedWedgeNumber) {
											stream << "\t\t";
											ReferencedWedgeNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedWedgeNumber> not present\n";

										Attribute *WedgePosition = (*list)[TagFromName(WedgePosition)];
										stream << "\t\t\t";
										if (WedgePosition) {
											stream << "\t\t";
											WedgePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <WedgePosition> not present\n";

										Attribute *WedgeThinEdgePosition = (*list)[TagFromName(WedgeThinEdgePosition)];
										stream << "\t\t\t";
										if (WedgeThinEdgePosition) {
											stream << "\t\t";
											WedgeThinEdgePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <WedgeThinEdgePosition> not present\n";

									}
								}
							}
	Attribute *RangeShifterSettingsSequence = (*list)[TagFromName(RangeShifterSettingsSequence)];
							stream << "\t\t";
							if (RangeShifterSettingsSequence)
								stream << "\t\tSequence <RangeShifterSettingsSequence>\n";
							else
								stream << "\t\tSequence <RangeShifterSettingsSequence> not present\n";
							if (RangeShifterSettingsSequence && strcmp(RangeShifterSettingsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RangeShifterSettingsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedRangeShifterNumber = (*list)[TagFromName(ReferencedRangeShifterNumber)];
										stream << "\t\t\t";
										if (ReferencedRangeShifterNumber) {
											stream << "\t\t";
											ReferencedRangeShifterNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedRangeShifterNumber> not present\n";

										Attribute *RangeShifterSetting = (*list)[TagFromName(RangeShifterSetting)];
										stream << "\t\t\t";
										if (RangeShifterSetting) {
											stream << "\t\t";
											RangeShifterSetting->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeShifterSetting> not present\n";

										Attribute *IsocenterToRangeShifterDistance = (*list)[TagFromName(IsocenterToRangeShifterDistance)];
										stream << "\t\t\t";
										if (IsocenterToRangeShifterDistance) {
											stream << "\t\t";
											IsocenterToRangeShifterDistance->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <IsocenterToRangeShifterDistance> not present\n";

										Attribute *RangeShifterWaterEquivalentThickness = (*list)[TagFromName(RangeShifterWaterEquivalentThickness)];
										stream << "\t\t\t";
										if (RangeShifterWaterEquivalentThickness) {
											stream << "\t\t";
											RangeShifterWaterEquivalentThickness->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeShifterWaterEquivalentThickness> not present\n";

									}
								}
							}
	Attribute *LateralSpreadingDeviceSettingsSequence = (*list)[TagFromName(LateralSpreadingDeviceSettingsSequence)];
							stream << "\t\t";
							if (LateralSpreadingDeviceSettingsSequence)
								stream << "\t\tSequence <LateralSpreadingDeviceSettingsSequence>\n";
							else
								stream << "\t\tSequence <LateralSpreadingDeviceSettingsSequence> not present\n";
							if (LateralSpreadingDeviceSettingsSequence && strcmp(LateralSpreadingDeviceSettingsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=LateralSpreadingDeviceSettingsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedLateralSpreadingDeviceNumber = (*list)[TagFromName(ReferencedLateralSpreadingDeviceNumber)];
										stream << "\t\t\t";
										if (ReferencedLateralSpreadingDeviceNumber) {
											stream << "\t\t";
											ReferencedLateralSpreadingDeviceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedLateralSpreadingDeviceNumber> not present\n";

										Attribute *LateralSpreadingDeviceSetting = (*list)[TagFromName(LateralSpreadingDeviceSetting)];
										stream << "\t\t\t";
										if (LateralSpreadingDeviceSetting) {
											stream << "\t\t";
											LateralSpreadingDeviceSetting->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <LateralSpreadingDeviceSetting> not present\n";

										Attribute *IsocenterToLateralSpreadingDeviceDistance = (*list)[TagFromName(IsocenterToLateralSpreadingDeviceDistance)];
										stream << "\t\t\t";
										if (IsocenterToLateralSpreadingDeviceDistance) {
											stream << "\t\t";
											IsocenterToLateralSpreadingDeviceDistance->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <IsocenterToLateralSpreadingDeviceDistance> not present\n";

										Attribute *LateralSpreadingDeviceWaterEquivalentThickness = (*list)[TagFromName(LateralSpreadingDeviceWaterEquivalentThickness)];
										stream << "\t\t\t";
										if (LateralSpreadingDeviceWaterEquivalentThickness) {
											stream << "\t\t";
											LateralSpreadingDeviceWaterEquivalentThickness->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <LateralSpreadingDeviceWaterEquivalentThickness> not present\n";

									}
								}
							}
	Attribute *RangeModulatorSettingsSequence = (*list)[TagFromName(RangeModulatorSettingsSequence)];
							stream << "\t\t";
							if (RangeModulatorSettingsSequence)
								stream << "\t\tSequence <RangeModulatorSettingsSequence>\n";
							else
								stream << "\t\tSequence <RangeModulatorSettingsSequence> not present\n";
							if (RangeModulatorSettingsSequence && strcmp(RangeModulatorSettingsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RangeModulatorSettingsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedRangeModulatorNumber = (*list)[TagFromName(ReferencedRangeModulatorNumber)];
										stream << "\t\t\t";
										if (ReferencedRangeModulatorNumber) {
											stream << "\t\t";
											ReferencedRangeModulatorNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedRangeModulatorNumber> not present\n";

										Attribute *RangeModulatorGatingStartValue = (*list)[TagFromName(RangeModulatorGatingStartValue)];
										stream << "\t\t\t";
										if (RangeModulatorGatingStartValue) {
											stream << "\t\t";
											RangeModulatorGatingStartValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeModulatorGatingStartValue> not present\n";

										Attribute *RangeModulatorGatingStopValue = (*list)[TagFromName(RangeModulatorGatingStopValue)];
										stream << "\t\t\t";
										if (RangeModulatorGatingStopValue) {
											stream << "\t\t";
											RangeModulatorGatingStopValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeModulatorGatingStopValue> not present\n";

										Attribute *RangeModulatorGatingStartWaterEquivalentThickness = (*list)[TagFromName(RangeModulatorGatingStartWaterEquivalentThickness)];
										stream << "\t\t\t";
										if (RangeModulatorGatingStartWaterEquivalentThickness) {
											stream << "\t\t";
											RangeModulatorGatingStartWaterEquivalentThickness->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeModulatorGatingStartWaterEquivalentThickness> not present\n";

										Attribute *RangeModulatorGatingStopWaterEquivalentThickness = (*list)[TagFromName(RangeModulatorGatingStopWaterEquivalentThickness)];
										stream << "\t\t\t";
										if (RangeModulatorGatingStopWaterEquivalentThickness) {
											stream << "\t\t";
											RangeModulatorGatingStopWaterEquivalentThickness->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeModulatorGatingStopWaterEquivalentThickness> not present\n";

									}
								}
							}
										stream << "\t\t\t";
	Macro_BeamLimitingDevicePositionMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <BeamLimitingDevicePositionMacro>\n";

							Attribute *GantryAngle = (*list)[TagFromName(GantryAngle)];
							stream << "\t\t";
							if (GantryAngle) {
								stream << "\t\t";
								GantryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryAngle> not present\n";

							Attribute *GantryRotationDirection = (*list)[TagFromName(GantryRotationDirection)];
							stream << "\t\t";
							if (GantryRotationDirection) {
								stream << "\t\t";
								GantryRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryRotationDirection> not present\n";

							Attribute *GantryPitchAngle = (*list)[TagFromName(GantryPitchAngle)];
							stream << "\t\t";
							if (GantryPitchAngle) {
								stream << "\t\t";
								GantryPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchAngle> not present\n";

							Attribute *GantryPitchRotationDirection = (*list)[TagFromName(GantryPitchRotationDirection)];
							stream << "\t\t";
							if (GantryPitchRotationDirection) {
								stream << "\t\t";
								GantryPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchRotationDirection> not present\n";

							Attribute *BeamLimitingDeviceAngle = (*list)[TagFromName(BeamLimitingDeviceAngle)];
							stream << "\t\t";
							if (BeamLimitingDeviceAngle) {
								stream << "\t\t";
								BeamLimitingDeviceAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceAngle> not present\n";

							Attribute *BeamLimitingDeviceRotationDirection = (*list)[TagFromName(BeamLimitingDeviceRotationDirection)];
							stream << "\t\t";
							if (BeamLimitingDeviceRotationDirection) {
								stream << "\t\t";
								BeamLimitingDeviceRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceRotationDirection> not present\n";

							Attribute *ScanSpotPositionMap = (*list)[TagFromName(ScanSpotPositionMap)];
							stream << "\t\t";
							if (ScanSpotPositionMap) {
								stream << "\t\t";
								ScanSpotPositionMap->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanSpotPositionMap> not present\n";

							Attribute *ScanSpotMetersetWeights = (*list)[TagFromName(ScanSpotMetersetWeights)];
							stream << "\t\t";
							if (ScanSpotMetersetWeights) {
								stream << "\t\t";
								ScanSpotMetersetWeights->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanSpotMetersetWeights> not present\n";

							Attribute *ScanningSpotSize = (*list)[TagFromName(ScanningSpotSize)];
							stream << "\t\t";
							if (ScanningSpotSize) {
								stream << "\t\t";
								ScanningSpotSize->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanningSpotSize> not present\n";

							Attribute *NumberOfPaintings = (*list)[TagFromName(NumberOfPaintings)];
							stream << "\t\t";
							if (NumberOfPaintings) {
								stream << "\t\t";
								NumberOfPaintings->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfPaintings> not present\n";

							Attribute *PatientSupportAngle = (*list)[TagFromName(PatientSupportAngle)];
							stream << "\t\t";
							if (PatientSupportAngle) {
								stream << "\t\t";
								PatientSupportAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportAngle> not present\n";

							Attribute *PatientSupportRotationDirection = (*list)[TagFromName(PatientSupportRotationDirection)];
							stream << "\t\t";
							if (PatientSupportRotationDirection) {
								stream << "\t\t";
								PatientSupportRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportRotationDirection> not present\n";

							Attribute *TableTopPitchAngle = (*list)[TagFromName(TableTopPitchAngle)];
							stream << "\t\t";
							if (TableTopPitchAngle) {
								stream << "\t\t";
								TableTopPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchAngle> not present\n";

							Attribute *TableTopPitchRotationDirection = (*list)[TagFromName(TableTopPitchRotationDirection)];
							stream << "\t\t";
							if (TableTopPitchRotationDirection) {
								stream << "\t\t";
								TableTopPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchRotationDirection> not present\n";

							Attribute *TableTopRollAngle = (*list)[TagFromName(TableTopRollAngle)];
							stream << "\t\t";
							if (TableTopRollAngle) {
								stream << "\t\t";
								TableTopRollAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollAngle> not present\n";

							Attribute *TableTopRollRotationDirection = (*list)[TagFromName(TableTopRollRotationDirection)];
							stream << "\t\t";
							if (TableTopRollRotationDirection) {
								stream << "\t\t";
								TableTopRollRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollRotationDirection> not present\n";

							Attribute *HeadFixationAngle = (*list)[TagFromName(HeadFixationAngle)];
							stream << "\t\t";
							if (HeadFixationAngle) {
								stream << "\t\t";
								HeadFixationAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <HeadFixationAngle> not present\n";

							Attribute *TableTopVerticalPosition = (*list)[TagFromName(TableTopVerticalPosition)];
							stream << "\t\t";
							if (TableTopVerticalPosition) {
								stream << "\t\t";
								TableTopVerticalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopVerticalPosition> not present\n";

							Attribute *TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
							stream << "\t\t";
							if (TableTopLongitudinalPosition) {
								stream << "\t\t";
								TableTopLongitudinalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

							Attribute *TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
							stream << "\t\t";
							if (TableTopLateralPosition) {
								stream << "\t\t";
								TableTopLateralPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLateralPosition> not present\n";

							Attribute *SnoutPosition = (*list)[TagFromName(SnoutPosition)];
							stream << "\t\t";
							if (SnoutPosition) {
								stream << "\t\t";
								SnoutPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SnoutPosition> not present\n";

							Attribute *IsocenterPosition = (*list)[TagFromName(IsocenterPosition)];
							stream << "\t\t";
							if (IsocenterPosition) {
								stream << "\t\t";
								IsocenterPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IsocenterPosition> not present\n";

							Attribute *SurfaceEntryPoint = (*list)[TagFromName(SurfaceEntryPoint)];
							stream << "\t\t";
							if (SurfaceEntryPoint) {
								stream << "\t\t";
								SurfaceEntryPoint->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SurfaceEntryPoint> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_RTIonBeamsSessionRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RTIonBeamsSessionRecord>\n";

	if (ReferencedFractionGroupNumber) {
		stream << "\t\t";
		ReferencedFractionGroupNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFractionGroupNumber> not present\n";

	if (NumberOfFractionsPlanned) {
		stream << "\t\t";
		NumberOfFractionsPlanned->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFractionsPlanned> not present\n";

	if (PrimaryDosimeterUnit) {
		stream << "\t\t";
		PrimaryDosimeterUnit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryDosimeterUnit> not present\n";

	if (TreatmentSessionIonBeamSequence)
		stream << "\t\tSequence <TreatmentSessionIonBeamSequence>\n";
	else
		stream << "\t\tSequence <TreatmentSessionIonBeamSequence> not present\n";
	if (TreatmentSessionIonBeamSequence && strcmp(TreatmentSessionIonBeamSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TreatmentSessionIonBeamSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedBeamNumber = (*list)[TagFromName(ReferencedBeamNumber)];
				stream << "\t";
				if (ReferencedBeamNumber) {
					stream << "\t\t";
					ReferencedBeamNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedBeamNumber> not present\n";

				Attribute *BeamName = (*list)[TagFromName(BeamName)];
				stream << "\t";
				if (BeamName) {
					stream << "\t\t";
					BeamName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamName> not present\n";

				Attribute *BeamDescription = (*list)[TagFromName(BeamDescription)];
				stream << "\t";
				if (BeamDescription) {
					stream << "\t\t";
					BeamDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamDescription> not present\n";

				Attribute *BeamType = (*list)[TagFromName(BeamType)];
				stream << "\t";
				if (BeamType) {
					stream << "\t\t";
					BeamType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamType> not present\n";

				Attribute *RadiationType = (*list)[TagFromName(RadiationType)];
				stream << "\t";
				if (RadiationType) {
					stream << "\t\t";
					RadiationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationType> not present\n";

				Attribute *RadiationMassNumber = (*list)[TagFromName(RadiationMassNumber)];
				stream << "\t";
				if (RadiationMassNumber) {
					stream << "\t\t";
					RadiationMassNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationMassNumber> not present\n";

				Attribute *RadiationAtomicNumber = (*list)[TagFromName(RadiationAtomicNumber)];
				stream << "\t";
				if (RadiationAtomicNumber) {
					stream << "\t\t";
					RadiationAtomicNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationAtomicNumber> not present\n";

				Attribute *RadiationChargeState = (*list)[TagFromName(RadiationChargeState)];
				stream << "\t";
				if (RadiationChargeState) {
					stream << "\t\t";
					RadiationChargeState->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiationChargeState> not present\n";

				Attribute *ScanMode = (*list)[TagFromName(ScanMode)];
				stream << "\t";
				if (ScanMode) {
					stream << "\t\t";
					ScanMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ScanMode> not present\n";

				Attribute *ModulatedScanModeType = (*list)[TagFromName(ModulatedScanModeType)];
				stream << "\t";
				if (ModulatedScanModeType) {
					stream << "\t\t";
					ModulatedScanModeType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ModulatedScanModeType> not present\n";

				Attribute *ReferencedToleranceTableNumber = (*list)[TagFromName(ReferencedToleranceTableNumber)];
				stream << "\t";
				if (ReferencedToleranceTableNumber) {
					stream << "\t\t";
					ReferencedToleranceTableNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedToleranceTableNumber> not present\n";

	Attribute *BeamLimitingDeviceLeafPairsSequence = (*list)[TagFromName(BeamLimitingDeviceLeafPairsSequence)];
				stream << "\t";
				if (BeamLimitingDeviceLeafPairsSequence)
					stream << "\t\tSequence <BeamLimitingDeviceLeafPairsSequence>\n";
				else
					stream << "\t\tSequence <BeamLimitingDeviceLeafPairsSequence> not present\n";
				if (BeamLimitingDeviceLeafPairsSequence && strcmp(BeamLimitingDeviceLeafPairsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=BeamLimitingDeviceLeafPairsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *RTBeamLimitingDeviceType = (*list)[TagFromName(RTBeamLimitingDeviceType)];
							stream << "\t\t";
							if (RTBeamLimitingDeviceType) {
								stream << "\t\t";
								RTBeamLimitingDeviceType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RTBeamLimitingDeviceType> not present\n";

							Attribute *NumberOfLeafJawPairs = (*list)[TagFromName(NumberOfLeafJawPairs)];
							stream << "\t\t";
							if (NumberOfLeafJawPairs) {
								stream << "\t\t";
								NumberOfLeafJawPairs->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfLeafJawPairs> not present\n";

						}
					}
				}
				Attribute *ReferencedPatientSetupNumber = (*list)[TagFromName(ReferencedPatientSetupNumber)];
				stream << "\t";
				if (ReferencedPatientSetupNumber) {
					stream << "\t\t";
					ReferencedPatientSetupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPatientSetupNumber> not present\n";

	Attribute *ReferencedVerificationImageSequence = (*list)[TagFromName(ReferencedVerificationImageSequence)];
				stream << "\t";
				if (ReferencedVerificationImageSequence)
					stream << "\t\tSequence <ReferencedVerificationImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedVerificationImageSequence> not present\n";
				if (ReferencedVerificationImageSequence && strcmp(ReferencedVerificationImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedVerificationImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedMeasuredDoseReferenceSequence = (*list)[TagFromName(ReferencedMeasuredDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedMeasuredDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedMeasuredDoseReferenceSequence> not present\n";
				if (ReferencedMeasuredDoseReferenceSequence && strcmp(ReferencedMeasuredDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedMeasuredDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ReferencedMeasuredDoseReferenceNumber = (*list)[TagFromName(ReferencedMeasuredDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedMeasuredDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedMeasuredDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedMeasuredDoseReferenceNumber> not present\n";

							Attribute *MeasuredDoseValue = (*list)[TagFromName(MeasuredDoseValue)];
							stream << "\t\t";
							if (MeasuredDoseValue) {
								stream << "\t\t";
								MeasuredDoseValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MeasuredDoseValue> not present\n";

						}
					}
				}
	Attribute *ReferencedCalculatedDoseReferenceSequence = (*list)[TagFromName(ReferencedCalculatedDoseReferenceSequence)];
				stream << "\t";
				if (ReferencedCalculatedDoseReferenceSequence)
					stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedCalculatedDoseReferenceSequence> not present\n";
				if (ReferencedCalculatedDoseReferenceSequence && strcmp(ReferencedCalculatedDoseReferenceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedCalculatedDoseReferenceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedDoseReferenceNumber = (*list)[TagFromName(ReferencedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedDoseReferenceNumber> not present\n";

							Attribute *ReferencedCalculatedDoseReferenceNumber = (*list)[TagFromName(ReferencedCalculatedDoseReferenceNumber)];
							stream << "\t\t";
							if (ReferencedCalculatedDoseReferenceNumber) {
								stream << "\t\t";
								ReferencedCalculatedDoseReferenceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedCalculatedDoseReferenceNumber> not present\n";

							Attribute *CalculatedDoseReferenceDoseValue = (*list)[TagFromName(CalculatedDoseReferenceDoseValue)];
							stream << "\t\t";
							if (CalculatedDoseReferenceDoseValue) {
								stream << "\t\t";
								CalculatedDoseReferenceDoseValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CalculatedDoseReferenceDoseValue> not present\n";

						}
					}
				}
				Attribute *NumberOfWedges = (*list)[TagFromName(NumberOfWedges)];
				stream << "\t";
				if (NumberOfWedges) {
					stream << "\t\t";
					NumberOfWedges->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfWedges> not present\n";

	Attribute *RecordedWedgeSequence = (*list)[TagFromName(RecordedWedgeSequence)];
				stream << "\t";
				if (RecordedWedgeSequence)
					stream << "\t\tSequence <RecordedWedgeSequence>\n";
				else
					stream << "\t\tSequence <RecordedWedgeSequence> not present\n";
				if (RecordedWedgeSequence && strcmp(RecordedWedgeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedWedgeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *WedgeNumber = (*list)[TagFromName(WedgeNumber)];
							stream << "\t\t";
							if (WedgeNumber) {
								stream << "\t\t";
								WedgeNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeNumber> not present\n";

							Attribute *WedgeType = (*list)[TagFromName(WedgeType)];
							stream << "\t\t";
							if (WedgeType) {
								stream << "\t\t";
								WedgeType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeType> not present\n";

							Attribute *WedgeID = (*list)[TagFromName(WedgeID)];
							stream << "\t\t";
							if (WedgeID) {
								stream << "\t\t";
								WedgeID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *WedgeAngle = (*list)[TagFromName(WedgeAngle)];
							stream << "\t\t";
							if (WedgeAngle) {
								stream << "\t\t";
								WedgeAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeAngle> not present\n";

							Attribute *WedgeOrientation = (*list)[TagFromName(WedgeOrientation)];
							stream << "\t\t";
							if (WedgeOrientation) {
								stream << "\t\t";
								WedgeOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WedgeOrientation> not present\n";

						}
					}
				}
				Attribute *NumberOfCompensators = (*list)[TagFromName(NumberOfCompensators)];
				stream << "\t";
				if (NumberOfCompensators) {
					stream << "\t\t";
					NumberOfCompensators->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfCompensators> not present\n";

	Attribute *RecordedCompensatorSequence = (*list)[TagFromName(RecordedCompensatorSequence)];
				stream << "\t";
				if (RecordedCompensatorSequence)
					stream << "\t\tSequence <RecordedCompensatorSequence>\n";
				else
					stream << "\t\tSequence <RecordedCompensatorSequence> not present\n";
				if (RecordedCompensatorSequence && strcmp(RecordedCompensatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedCompensatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedCompensatorNumber = (*list)[TagFromName(ReferencedCompensatorNumber)];
							stream << "\t\t";
							if (ReferencedCompensatorNumber) {
								stream << "\t\t";
								ReferencedCompensatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedCompensatorNumber> not present\n";

							Attribute *CompensatorType = (*list)[TagFromName(CompensatorType)];
							stream << "\t\t";
							if (CompensatorType) {
								stream << "\t\t";
								CompensatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorType> not present\n";

							Attribute *CompensatorID = (*list)[TagFromName(CompensatorID)];
							stream << "\t\t";
							if (CompensatorID) {
								stream << "\t\t";
								CompensatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CompensatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfBoli = (*list)[TagFromName(NumberOfBoli)];
				stream << "\t";
				if (NumberOfBoli) {
					stream << "\t\t";
					NumberOfBoli->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBoli> not present\n";

	Attribute *ReferencedBolusSequence = (*list)[TagFromName(ReferencedBolusSequence)];
				stream << "\t";
				if (ReferencedBolusSequence)
					stream << "\t\tSequence <ReferencedBolusSequence>\n";
				else
					stream << "\t\tSequence <ReferencedBolusSequence> not present\n";
				if (ReferencedBolusSequence && strcmp(ReferencedBolusSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedBolusSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedROINumber = (*list)[TagFromName(ReferencedROINumber)];
							stream << "\t\t";
							if (ReferencedROINumber) {
								stream << "\t\t";
								ReferencedROINumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedROINumber> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfBlocks = (*list)[TagFromName(NumberOfBlocks)];
				stream << "\t";
				if (NumberOfBlocks) {
					stream << "\t\t";
					NumberOfBlocks->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfBlocks> not present\n";

	Attribute *RecordedBlockSequence = (*list)[TagFromName(RecordedBlockSequence)];
				stream << "\t";
				if (RecordedBlockSequence)
					stream << "\t\tSequence <RecordedBlockSequence>\n";
				else
					stream << "\t\tSequence <RecordedBlockSequence> not present\n";
				if (RecordedBlockSequence && strcmp(RecordedBlockSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedBlockSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BlockTrayID = (*list)[TagFromName(BlockTrayID)];
							stream << "\t\t";
							if (BlockTrayID) {
								stream << "\t\t";
								BlockTrayID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockTrayID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *ReferencedBlockNumber = (*list)[TagFromName(ReferencedBlockNumber)];
							stream << "\t\t";
							if (ReferencedBlockNumber) {
								stream << "\t\t";
								ReferencedBlockNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedBlockNumber> not present\n";

							Attribute *BlockName = (*list)[TagFromName(BlockName)];
							stream << "\t\t";
							if (BlockName) {
								stream << "\t\t";
								BlockName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BlockName> not present\n";

						}
					}
				}
	Attribute *RecordedSnoutSequence = (*list)[TagFromName(RecordedSnoutSequence)];
				stream << "\t";
				if (RecordedSnoutSequence)
					stream << "\t\tSequence <RecordedSnoutSequence>\n";
				else
					stream << "\t\tSequence <RecordedSnoutSequence> not present\n";
				if (RecordedSnoutSequence && strcmp(RecordedSnoutSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedSnoutSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SnoutID = (*list)[TagFromName(SnoutID)];
							stream << "\t\t";
							if (SnoutID) {
								stream << "\t\t";
								SnoutID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SnoutID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
	Attribute *ApplicatorSequence = (*list)[TagFromName(ApplicatorSequence)];
				stream << "\t";
				if (ApplicatorSequence)
					stream << "\t\tSequence <ApplicatorSequence>\n";
				else
					stream << "\t\tSequence <ApplicatorSequence> not present\n";
				if (ApplicatorSequence && strcmp(ApplicatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ApplicatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ApplicatorID = (*list)[TagFromName(ApplicatorID)];
							stream << "\t\t";
							if (ApplicatorID) {
								stream << "\t\t";
								ApplicatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *ApplicatorType = (*list)[TagFromName(ApplicatorType)];
							stream << "\t\t";
							if (ApplicatorType) {
								stream << "\t\t";
								ApplicatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorType> not present\n";

							Attribute *ApplicatorDescription = (*list)[TagFromName(ApplicatorDescription)];
							stream << "\t\t";
							if (ApplicatorDescription) {
								stream << "\t\t";
								ApplicatorDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ApplicatorDescription> not present\n";

	Attribute *GeneralAccessorySequence = (*list)[TagFromName(GeneralAccessorySequence)];
							stream << "\t\t";
							if (GeneralAccessorySequence)
								stream << "\t\tSequence <GeneralAccessorySequence>\n";
							else
								stream << "\t\tSequence <GeneralAccessorySequence> not present\n";
							if (GeneralAccessorySequence && strcmp(GeneralAccessorySequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=GeneralAccessorySequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *GeneralAccessoryNumber = (*list)[TagFromName(GeneralAccessoryNumber)];
										stream << "\t\t\t";
										if (GeneralAccessoryNumber) {
											stream << "\t\t";
											GeneralAccessoryNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryNumber> not present\n";

										Attribute *GeneralAccessoryID = (*list)[TagFromName(GeneralAccessoryID)];
										stream << "\t\t\t";
										if (GeneralAccessoryID) {
											stream << "\t\t";
											GeneralAccessoryID->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryID> not present\n";

										Attribute *GeneralAccessoryDescription = (*list)[TagFromName(GeneralAccessoryDescription)];
										stream << "\t\t\t";
										if (GeneralAccessoryDescription) {
											stream << "\t\t";
											GeneralAccessoryDescription->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryDescription> not present\n";

										Attribute *GeneralAccessoryType = (*list)[TagFromName(GeneralAccessoryType)];
										stream << "\t\t\t";
										if (GeneralAccessoryType) {
											stream << "\t\t";
											GeneralAccessoryType->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <GeneralAccessoryType> not present\n";

										Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
										stream << "\t\t\t";
										if (AccessoryCode) {
											stream << "\t\t";
											AccessoryCode->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AccessoryCode> not present\n";

									}
								}
							}
						}
					}
				}
				Attribute *NumberOfRangeShifters = (*list)[TagFromName(NumberOfRangeShifters)];
				stream << "\t";
				if (NumberOfRangeShifters) {
					stream << "\t\t";
					NumberOfRangeShifters->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfRangeShifters> not present\n";

	Attribute *RecordedRangeShifterSequence = (*list)[TagFromName(RecordedRangeShifterSequence)];
				stream << "\t";
				if (RecordedRangeShifterSequence)
					stream << "\t\tSequence <RecordedRangeShifterSequence>\n";
				else
					stream << "\t\tSequence <RecordedRangeShifterSequence> not present\n";
				if (RecordedRangeShifterSequence && strcmp(RecordedRangeShifterSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedRangeShifterSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedRangeShifterNumber = (*list)[TagFromName(ReferencedRangeShifterNumber)];
							stream << "\t\t";
							if (ReferencedRangeShifterNumber) {
								stream << "\t\t";
								ReferencedRangeShifterNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedRangeShifterNumber> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfLateralSpreadingDevices = (*list)[TagFromName(NumberOfLateralSpreadingDevices)];
				stream << "\t";
				if (NumberOfLateralSpreadingDevices) {
					stream << "\t\t";
					NumberOfLateralSpreadingDevices->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfLateralSpreadingDevices> not present\n";

	Attribute *RecordedLateralSpreadingDeviceSequence = (*list)[TagFromName(RecordedLateralSpreadingDeviceSequence)];
				stream << "\t";
				if (RecordedLateralSpreadingDeviceSequence)
					stream << "\t\tSequence <RecordedLateralSpreadingDeviceSequence>\n";
				else
					stream << "\t\tSequence <RecordedLateralSpreadingDeviceSequence> not present\n";
				if (RecordedLateralSpreadingDeviceSequence && strcmp(RecordedLateralSpreadingDeviceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedLateralSpreadingDeviceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedLateralSpreadingDeviceNumber = (*list)[TagFromName(ReferencedLateralSpreadingDeviceNumber)];
							stream << "\t\t";
							if (ReferencedLateralSpreadingDeviceNumber) {
								stream << "\t\t";
								ReferencedLateralSpreadingDeviceNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedLateralSpreadingDeviceNumber> not present\n";

							Attribute *LateralSpreadingDeviceID = (*list)[TagFromName(LateralSpreadingDeviceID)];
							stream << "\t\t";
							if (LateralSpreadingDeviceID) {
								stream << "\t\t";
								LateralSpreadingDeviceID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LateralSpreadingDeviceID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

						}
					}
				}
				Attribute *NumberOfRangeModulators = (*list)[TagFromName(NumberOfRangeModulators)];
				stream << "\t";
				if (NumberOfRangeModulators) {
					stream << "\t\t";
					NumberOfRangeModulators->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfRangeModulators> not present\n";

	Attribute *RecordedRangeModulatorSequence = (*list)[TagFromName(RecordedRangeModulatorSequence)];
				stream << "\t";
				if (RecordedRangeModulatorSequence)
					stream << "\t\tSequence <RecordedRangeModulatorSequence>\n";
				else
					stream << "\t\tSequence <RecordedRangeModulatorSequence> not present\n";
				if (RecordedRangeModulatorSequence && strcmp(RecordedRangeModulatorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RecordedRangeModulatorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedRangeModulatorNumber = (*list)[TagFromName(ReferencedRangeModulatorNumber)];
							stream << "\t\t";
							if (ReferencedRangeModulatorNumber) {
								stream << "\t\t";
								ReferencedRangeModulatorNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedRangeModulatorNumber> not present\n";

							Attribute *RangeModulatorID = (*list)[TagFromName(RangeModulatorID)];
							stream << "\t\t";
							if (RangeModulatorID) {
								stream << "\t\t";
								RangeModulatorID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeModulatorID> not present\n";

							Attribute *AccessoryCode = (*list)[TagFromName(AccessoryCode)];
							stream << "\t\t";
							if (AccessoryCode) {
								stream << "\t\t";
								AccessoryCode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AccessoryCode> not present\n";

							Attribute *RangeModulatorType = (*list)[TagFromName(RangeModulatorType)];
							stream << "\t\t";
							if (RangeModulatorType) {
								stream << "\t\t";
								RangeModulatorType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RangeModulatorType> not present\n";

							Attribute *BeamCurrentModulationID = (*list)[TagFromName(BeamCurrentModulationID)];
							stream << "\t\t";
							if (BeamCurrentModulationID) {
								stream << "\t\t";
								BeamCurrentModulationID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamCurrentModulationID> not present\n";

						}
					}
				}
							stream << "\t\t";
	Macro_PatientSupportIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientSupportIdentificationMacro>\n";

				Attribute *FixationLightAzimuthalAngle = (*list)[TagFromName(FixationLightAzimuthalAngle)];
				stream << "\t";
				if (FixationLightAzimuthalAngle) {
					stream << "\t\t";
					FixationLightAzimuthalAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FixationLightAzimuthalAngle> not present\n";

				Attribute *FixationLightPolarAngle = (*list)[TagFromName(FixationLightPolarAngle)];
				stream << "\t";
				if (FixationLightPolarAngle) {
					stream << "\t\t";
					FixationLightPolarAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FixationLightPolarAngle> not present\n";

				Attribute *CurrentFractionNumber = (*list)[TagFromName(CurrentFractionNumber)];
				stream << "\t";
				if (CurrentFractionNumber) {
					stream << "\t\t";
					CurrentFractionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CurrentFractionNumber> not present\n";

				Attribute *TreatmentDeliveryType = (*list)[TagFromName(TreatmentDeliveryType)];
				stream << "\t";
				if (TreatmentDeliveryType) {
					stream << "\t\t";
					TreatmentDeliveryType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentDeliveryType> not present\n";

				Attribute *TreatmentTerminationStatus = (*list)[TagFromName(TreatmentTerminationStatus)];
				stream << "\t";
				if (TreatmentTerminationStatus) {
					stream << "\t\t";
					TreatmentTerminationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentTerminationStatus> not present\n";

				Attribute *TreatmentTerminationCode = (*list)[TagFromName(TreatmentTerminationCode)];
				stream << "\t";
				if (TreatmentTerminationCode) {
					stream << "\t\t";
					TreatmentTerminationCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentTerminationCode> not present\n";

				Attribute *TreatmentVerificationStatus = (*list)[TagFromName(TreatmentVerificationStatus)];
				stream << "\t";
				if (TreatmentVerificationStatus) {
					stream << "\t\t";
					TreatmentVerificationStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TreatmentVerificationStatus> not present\n";

				Attribute *SpecifiedPrimaryMeterset = (*list)[TagFromName(SpecifiedPrimaryMeterset)];
				stream << "\t";
				if (SpecifiedPrimaryMeterset) {
					stream << "\t\t";
					SpecifiedPrimaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecifiedPrimaryMeterset> not present\n";

				Attribute *SpecifiedSecondaryMeterset = (*list)[TagFromName(SpecifiedSecondaryMeterset)];
				stream << "\t";
				if (SpecifiedSecondaryMeterset) {
					stream << "\t\t";
					SpecifiedSecondaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecifiedSecondaryMeterset> not present\n";

				Attribute *DeliveredPrimaryMeterset = (*list)[TagFromName(DeliveredPrimaryMeterset)];
				stream << "\t";
				if (DeliveredPrimaryMeterset) {
					stream << "\t\t";
					DeliveredPrimaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveredPrimaryMeterset> not present\n";

				Attribute *DeliveredSecondaryMeterset = (*list)[TagFromName(DeliveredSecondaryMeterset)];
				stream << "\t";
				if (DeliveredSecondaryMeterset) {
					stream << "\t\t";
					DeliveredSecondaryMeterset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveredSecondaryMeterset> not present\n";

				Attribute *SpecifiedTreatmentTime = (*list)[TagFromName(SpecifiedTreatmentTime)];
				stream << "\t";
				if (SpecifiedTreatmentTime) {
					stream << "\t\t";
					SpecifiedTreatmentTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecifiedTreatmentTime> not present\n";

				Attribute *DeliveredTreatmentTime = (*list)[TagFromName(DeliveredTreatmentTime)];
				stream << "\t";
				if (DeliveredTreatmentTime) {
					stream << "\t\t";
					DeliveredTreatmentTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeliveredTreatmentTime> not present\n";

				Attribute *NumberOfControlPoints = (*list)[TagFromName(NumberOfControlPoints)];
				stream << "\t";
				if (NumberOfControlPoints) {
					stream << "\t\t";
					NumberOfControlPoints->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfControlPoints> not present\n";

	Attribute *IonControlPointDeliverySequence = (*list)[TagFromName(IonControlPointDeliverySequence)];
				stream << "\t";
				if (IonControlPointDeliverySequence)
					stream << "\t\tSequence <IonControlPointDeliverySequence>\n";
				else
					stream << "\t\tSequence <IonControlPointDeliverySequence> not present\n";
				if (IonControlPointDeliverySequence && strcmp(IonControlPointDeliverySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IonControlPointDeliverySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ReferencedControlPointIndex = (*list)[TagFromName(ReferencedControlPointIndex)];
							stream << "\t\t";
							if (ReferencedControlPointIndex) {
								stream << "\t\t";
								ReferencedControlPointIndex->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ReferencedControlPointIndex> not present\n";

							Attribute *TreatmentControlPointDate = (*list)[TagFromName(TreatmentControlPointDate)];
							stream << "\t\t";
							if (TreatmentControlPointDate) {
								stream << "\t\t";
								TreatmentControlPointDate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentControlPointDate> not present\n";

							Attribute *TreatmentControlPointTime = (*list)[TagFromName(TreatmentControlPointTime)];
							stream << "\t\t";
							if (TreatmentControlPointTime) {
								stream << "\t\t";
								TreatmentControlPointTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TreatmentControlPointTime> not present\n";

							Attribute *SpecifiedMeterset = (*list)[TagFromName(SpecifiedMeterset)];
							stream << "\t\t";
							if (SpecifiedMeterset) {
								stream << "\t\t";
								SpecifiedMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecifiedMeterset> not present\n";

							Attribute *DeliveredMeterset = (*list)[TagFromName(DeliveredMeterset)];
							stream << "\t\t";
							if (DeliveredMeterset) {
								stream << "\t\t";
								DeliveredMeterset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DeliveredMeterset> not present\n";

							Attribute *MetersetRateSet = (*list)[TagFromName(MetersetRateSet)];
							stream << "\t\t";
							if (MetersetRateSet) {
								stream << "\t\t";
								MetersetRateSet->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MetersetRateSet> not present\n";

							Attribute *MetersetRateDelivered = (*list)[TagFromName(MetersetRateDelivered)];
							stream << "\t\t";
							if (MetersetRateDelivered) {
								stream << "\t\t";
								MetersetRateDelivered->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MetersetRateDelivered> not present\n";

							Attribute *NominalBeamEnergy = (*list)[TagFromName(NominalBeamEnergy)];
							stream << "\t\t";
							if (NominalBeamEnergy) {
								stream << "\t\t";
								NominalBeamEnergy->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NominalBeamEnergy> not present\n";

							Attribute *KVP = (*list)[TagFromName(KVP)];
							stream << "\t\t";
							if (KVP) {
								stream << "\t\t";
								KVP->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <KVP> not present\n";

	Attribute *IonWedgePositionSequence = (*list)[TagFromName(IonWedgePositionSequence)];
							stream << "\t\t";
							if (IonWedgePositionSequence)
								stream << "\t\tSequence <IonWedgePositionSequence>\n";
							else
								stream << "\t\tSequence <IonWedgePositionSequence> not present\n";
							if (IonWedgePositionSequence && strcmp(IonWedgePositionSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=IonWedgePositionSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedWedgeNumber = (*list)[TagFromName(ReferencedWedgeNumber)];
										stream << "\t\t\t";
										if (ReferencedWedgeNumber) {
											stream << "\t\t";
											ReferencedWedgeNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedWedgeNumber> not present\n";

										Attribute *WedgePosition = (*list)[TagFromName(WedgePosition)];
										stream << "\t\t\t";
										if (WedgePosition) {
											stream << "\t\t";
											WedgePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <WedgePosition> not present\n";

										Attribute *WedgeThinEdgePosition = (*list)[TagFromName(WedgeThinEdgePosition)];
										stream << "\t\t\t";
										if (WedgeThinEdgePosition) {
											stream << "\t\t";
											WedgeThinEdgePosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <WedgeThinEdgePosition> not present\n";

									}
								}
							}
										stream << "\t\t\t";
	Macro_BeamLimitingDevicePositionMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <BeamLimitingDevicePositionMacro>\n";

	Attribute *RangeShifterSettingsSequence = (*list)[TagFromName(RangeShifterSettingsSequence)];
							stream << "\t\t";
							if (RangeShifterSettingsSequence)
								stream << "\t\tSequence <RangeShifterSettingsSequence>\n";
							else
								stream << "\t\tSequence <RangeShifterSettingsSequence> not present\n";
							if (RangeShifterSettingsSequence && strcmp(RangeShifterSettingsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RangeShifterSettingsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedRangeShifterNumber = (*list)[TagFromName(ReferencedRangeShifterNumber)];
										stream << "\t\t\t";
										if (ReferencedRangeShifterNumber) {
											stream << "\t\t";
											ReferencedRangeShifterNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedRangeShifterNumber> not present\n";

										Attribute *RangeShifterSetting = (*list)[TagFromName(RangeShifterSetting)];
										stream << "\t\t\t";
										if (RangeShifterSetting) {
											stream << "\t\t";
											RangeShifterSetting->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeShifterSetting> not present\n";

									}
								}
							}
	Attribute *LateralSpreadingDeviceSettingsSequence = (*list)[TagFromName(LateralSpreadingDeviceSettingsSequence)];
							stream << "\t\t";
							if (LateralSpreadingDeviceSettingsSequence)
								stream << "\t\tSequence <LateralSpreadingDeviceSettingsSequence>\n";
							else
								stream << "\t\tSequence <LateralSpreadingDeviceSettingsSequence> not present\n";
							if (LateralSpreadingDeviceSettingsSequence && strcmp(LateralSpreadingDeviceSettingsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=LateralSpreadingDeviceSettingsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedLateralSpreadingDeviceNumber = (*list)[TagFromName(ReferencedLateralSpreadingDeviceNumber)];
										stream << "\t\t\t";
										if (ReferencedLateralSpreadingDeviceNumber) {
											stream << "\t\t";
											ReferencedLateralSpreadingDeviceNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedLateralSpreadingDeviceNumber> not present\n";

										Attribute *LateralSpreadingDeviceSetting = (*list)[TagFromName(LateralSpreadingDeviceSetting)];
										stream << "\t\t\t";
										if (LateralSpreadingDeviceSetting) {
											stream << "\t\t";
											LateralSpreadingDeviceSetting->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <LateralSpreadingDeviceSetting> not present\n";

									}
								}
							}
	Attribute *RangeModulatorSettingsSequence = (*list)[TagFromName(RangeModulatorSettingsSequence)];
							stream << "\t\t";
							if (RangeModulatorSettingsSequence)
								stream << "\t\tSequence <RangeModulatorSettingsSequence>\n";
							else
								stream << "\t\tSequence <RangeModulatorSettingsSequence> not present\n";
							if (RangeModulatorSettingsSequence && strcmp(RangeModulatorSettingsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=RangeModulatorSettingsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedRangeModulatorNumber = (*list)[TagFromName(ReferencedRangeModulatorNumber)];
										stream << "\t\t\t";
										if (ReferencedRangeModulatorNumber) {
											stream << "\t\t";
											ReferencedRangeModulatorNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedRangeModulatorNumber> not present\n";

										Attribute *RangeModulatorGatingStartValue = (*list)[TagFromName(RangeModulatorGatingStartValue)];
										stream << "\t\t\t";
										if (RangeModulatorGatingStartValue) {
											stream << "\t\t";
											RangeModulatorGatingStartValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeModulatorGatingStartValue> not present\n";

										Attribute *RangeModulatorGatingStopValue = (*list)[TagFromName(RangeModulatorGatingStopValue)];
										stream << "\t\t\t";
										if (RangeModulatorGatingStopValue) {
											stream << "\t\t";
											RangeModulatorGatingStopValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <RangeModulatorGatingStopValue> not present\n";

									}
								}
							}
							Attribute *GantryAngle = (*list)[TagFromName(GantryAngle)];
							stream << "\t\t";
							if (GantryAngle) {
								stream << "\t\t";
								GantryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryAngle> not present\n";

							Attribute *GantryRotationDirection = (*list)[TagFromName(GantryRotationDirection)];
							stream << "\t\t";
							if (GantryRotationDirection) {
								stream << "\t\t";
								GantryRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryRotationDirection> not present\n";

							Attribute *GantryPitchAngle = (*list)[TagFromName(GantryPitchAngle)];
							stream << "\t\t";
							if (GantryPitchAngle) {
								stream << "\t\t";
								GantryPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchAngle> not present\n";

							Attribute *GantryPitchRotationDirection = (*list)[TagFromName(GantryPitchRotationDirection)];
							stream << "\t\t";
							if (GantryPitchRotationDirection) {
								stream << "\t\t";
								GantryPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GantryPitchRotationDirection> not present\n";

							Attribute *BeamLimitingDeviceAngle = (*list)[TagFromName(BeamLimitingDeviceAngle)];
							stream << "\t\t";
							if (BeamLimitingDeviceAngle) {
								stream << "\t\t";
								BeamLimitingDeviceAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceAngle> not present\n";

							Attribute *BeamLimitingDeviceRotationDirection = (*list)[TagFromName(BeamLimitingDeviceRotationDirection)];
							stream << "\t\t";
							if (BeamLimitingDeviceRotationDirection) {
								stream << "\t\t";
								BeamLimitingDeviceRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BeamLimitingDeviceRotationDirection> not present\n";

							Attribute *ScanSpotTuneID = (*list)[TagFromName(ScanSpotTuneID)];
							stream << "\t\t";
							if (ScanSpotTuneID) {
								stream << "\t\t";
								ScanSpotTuneID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanSpotTuneID> not present\n";

							Attribute *NumberOfScanSpotPositions = (*list)[TagFromName(NumberOfScanSpotPositions)];
							stream << "\t\t";
							if (NumberOfScanSpotPositions) {
								stream << "\t\t";
								NumberOfScanSpotPositions->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfScanSpotPositions> not present\n";

							Attribute *ScanSpotPositionMap = (*list)[TagFromName(ScanSpotPositionMap)];
							stream << "\t\t";
							if (ScanSpotPositionMap) {
								stream << "\t\t";
								ScanSpotPositionMap->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanSpotPositionMap> not present\n";

							Attribute *ScanSpotMetersetsDelivered = (*list)[TagFromName(ScanSpotMetersetsDelivered)];
							stream << "\t\t";
							if (ScanSpotMetersetsDelivered) {
								stream << "\t\t";
								ScanSpotMetersetsDelivered->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanSpotMetersetsDelivered> not present\n";

							Attribute *ScanSpotTimeOffset = (*list)[TagFromName(ScanSpotTimeOffset)];
							stream << "\t\t";
							if (ScanSpotTimeOffset) {
								stream << "\t\t";
								ScanSpotTimeOffset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanSpotTimeOffset> not present\n";

							Attribute *ScanningSpotSize = (*list)[TagFromName(ScanningSpotSize)];
							stream << "\t\t";
							if (ScanningSpotSize) {
								stream << "\t\t";
								ScanningSpotSize->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ScanningSpotSize> not present\n";

							Attribute *NumberOfPaintings = (*list)[TagFromName(NumberOfPaintings)];
							stream << "\t\t";
							if (NumberOfPaintings) {
								stream << "\t\t";
								NumberOfPaintings->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfPaintings> not present\n";

							Attribute *PatientSupportAngle = (*list)[TagFromName(PatientSupportAngle)];
							stream << "\t\t";
							if (PatientSupportAngle) {
								stream << "\t\t";
								PatientSupportAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportAngle> not present\n";

							Attribute *PatientSupportRotationDirection = (*list)[TagFromName(PatientSupportRotationDirection)];
							stream << "\t\t";
							if (PatientSupportRotationDirection) {
								stream << "\t\t";
								PatientSupportRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PatientSupportRotationDirection> not present\n";

							Attribute *TableTopPitchAngle = (*list)[TagFromName(TableTopPitchAngle)];
							stream << "\t\t";
							if (TableTopPitchAngle) {
								stream << "\t\t";
								TableTopPitchAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchAngle> not present\n";

							Attribute *TableTopPitchRotationDirection = (*list)[TagFromName(TableTopPitchRotationDirection)];
							stream << "\t\t";
							if (TableTopPitchRotationDirection) {
								stream << "\t\t";
								TableTopPitchRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopPitchRotationDirection> not present\n";

							Attribute *TableTopRollAngle = (*list)[TagFromName(TableTopRollAngle)];
							stream << "\t\t";
							if (TableTopRollAngle) {
								stream << "\t\t";
								TableTopRollAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollAngle> not present\n";

							Attribute *TableTopRollRotationDirection = (*list)[TagFromName(TableTopRollRotationDirection)];
							stream << "\t\t";
							if (TableTopRollRotationDirection) {
								stream << "\t\t";
								TableTopRollRotationDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopRollRotationDirection> not present\n";

							Attribute *HeadFixationAngle = (*list)[TagFromName(HeadFixationAngle)];
							stream << "\t\t";
							if (HeadFixationAngle) {
								stream << "\t\t";
								HeadFixationAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <HeadFixationAngle> not present\n";

							Attribute *TableTopVerticalPosition = (*list)[TagFromName(TableTopVerticalPosition)];
							stream << "\t\t";
							if (TableTopVerticalPosition) {
								stream << "\t\t";
								TableTopVerticalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopVerticalPosition> not present\n";

							Attribute *TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
							stream << "\t\t";
							if (TableTopLongitudinalPosition) {
								stream << "\t\t";
								TableTopLongitudinalPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

							Attribute *TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
							stream << "\t\t";
							if (TableTopLateralPosition) {
								stream << "\t\t";
								TableTopLateralPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TableTopLateralPosition> not present\n";

							Attribute *SnoutPosition = (*list)[TagFromName(SnoutPosition)];
							stream << "\t\t";
							if (SnoutPosition) {
								stream << "\t\t";
								SnoutPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SnoutPosition> not present\n";

	Attribute *CorrectedParameterSequence = (*list)[TagFromName(CorrectedParameterSequence)];
							stream << "\t\t";
							if (CorrectedParameterSequence)
								stream << "\t\tSequence <CorrectedParameterSequence>\n";
							else
								stream << "\t\tSequence <CorrectedParameterSequence> not present\n";
							if (CorrectedParameterSequence && strcmp(CorrectedParameterSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=CorrectedParameterSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ParameterSequencePointer = (*list)[TagFromName(ParameterSequencePointer)];
										stream << "\t\t\t";
										if (ParameterSequencePointer) {
											stream << "\t\t";
											ParameterSequencePointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterSequencePointer> not present\n";

										Attribute *ParameterItemIndex = (*list)[TagFromName(ParameterItemIndex)];
										stream << "\t\t\t";
										if (ParameterItemIndex) {
											stream << "\t\t";
											ParameterItemIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterItemIndex> not present\n";

										Attribute *ParameterPointer = (*list)[TagFromName(ParameterPointer)];
										stream << "\t\t\t";
										if (ParameterPointer) {
											stream << "\t\t";
											ParameterPointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterPointer> not present\n";

										Attribute *CorrectionValue = (*list)[TagFromName(CorrectionValue)];
										stream << "\t\t\t";
										if (CorrectionValue) {
											stream << "\t\t";
											CorrectionValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <CorrectionValue> not present\n";

									}
								}
							}
	Attribute *OverrideSequence = (*list)[TagFromName(OverrideSequence)];
							stream << "\t\t";
							if (OverrideSequence)
								stream << "\t\tSequence <OverrideSequence>\n";
							else
								stream << "\t\tSequence <OverrideSequence> not present\n";
							if (OverrideSequence && strcmp(OverrideSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OverrideSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ParameterSequencePointer = (*list)[TagFromName(ParameterSequencePointer)];
										stream << "\t\t\t";
										if (ParameterSequencePointer) {
											stream << "\t\t";
											ParameterSequencePointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterSequencePointer> not present\n";

										Attribute *OverrideParameterPointer = (*list)[TagFromName(OverrideParameterPointer)];
										stream << "\t\t\t";
										if (OverrideParameterPointer) {
											stream << "\t\t";
											OverrideParameterPointer->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <OverrideParameterPointer> not present\n";

										Attribute *ParameterItemIndex = (*list)[TagFromName(ParameterItemIndex)];
										stream << "\t\t\t";
										if (ParameterItemIndex) {
											stream << "\t\t";
											ParameterItemIndex->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterItemIndex> not present\n";

										Attribute *ParameterValueNumber = (*list)[TagFromName(ParameterValueNumber)];
										stream << "\t\t\t";
										if (ParameterValueNumber) {
											stream << "\t\t";
											ParameterValueNumber->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ParameterValueNumber> not present\n";

										Attribute *OperatorsName = (*list)[TagFromName(OperatorsName)];
										stream << "\t\t\t";
										if (OperatorsName) {
											stream << "\t\t";
											OperatorsName->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <OperatorsName> not present\n";

	Attribute *OperatorIdentificationSequence = (*list)[TagFromName(OperatorIdentificationSequence)];
										stream << "\t\t\t";
										if (OperatorIdentificationSequence)
											stream << "\t\tSequence <OperatorIdentificationSequence>\n";
										else
											stream << "\t\tSequence <OperatorIdentificationSequence> not present\n";
										if (OperatorIdentificationSequence && strcmp(OperatorIdentificationSequence->getVR(),"SQ") == 0) {
											AttributeList **array;
											int n;
											if ((n=OperatorIdentificationSequence->getLists(&array)) > 0) {
												int i; for (i=0; i<n; ++i) {
													AttributeList *list=array[i];
										stream << "\t\t\t";
														stream << "\t\tItem" << endl;
																stream << "\t\t\t\t\t";
	Macro_PersonIdentificationMacro(list,ie).write(stream,list,dict);
																stream << "\t\t\t\t\t";
	stream << "\tEndMacro <PersonIdentificationMacro>\n";

												}
											}
										}
										Attribute *OverrideReason = (*list)[TagFromName(OverrideReason)];
										stream << "\t\t\t";
										if (OverrideReason) {
											stream << "\t\t";
											OverrideReason->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <OverrideReason> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_AcquisitionContext::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <AcquisitionContext>\n";

	if (AcquisitionContextSequence)
		stream << "\t\tSequence <AcquisitionContextSequence>\n";
	else
		stream << "\t\tSequence <AcquisitionContextSequence> not present\n";
	if (AcquisitionContextSequence && strcmp(AcquisitionContextSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AcquisitionContextSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ValueType = (*list)[TagFromName(ValueType)];
				stream << "\t";
				if (ValueType) {
					stream << "\t\t";
					ValueType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ValueType> not present\n";

				Attribute *ObservationDateTime = (*list)[TagFromName(ObservationDateTime)];
				stream << "\t";
				if (ObservationDateTime) {
					stream << "\t\t";
					ObservationDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ObservationDateTime> not present\n";

	Attribute *ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
				stream << "\t";
				if (ConceptNameCodeSequence)
					stream << "\t\tSequence <ConceptNameCodeSequence>\n";
				else
					stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
				if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
				stream << "\t";
				if (ReferencedFrameNumber) {
					stream << "\t\t";
					ReferencedFrameNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameNumber> not present\n";

				Attribute *NumericValue = (*list)[TagFromName(NumericValue)];
				stream << "\t";
				if (NumericValue) {
					stream << "\t\t";
					NumericValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumericValue> not present\n";

				Attribute *FloatingPointValue = (*list)[TagFromName(FloatingPointValue)];
				stream << "\t";
				if (FloatingPointValue) {
					stream << "\t\t";
					FloatingPointValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FloatingPointValue> not present\n";

				Attribute *RationalNumeratorValue = (*list)[TagFromName(RationalNumeratorValue)];
				stream << "\t";
				if (RationalNumeratorValue) {
					stream << "\t\t";
					RationalNumeratorValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RationalNumeratorValue> not present\n";

				Attribute *RationalDenominatorValue = (*list)[TagFromName(RationalDenominatorValue)];
				stream << "\t";
				if (RationalDenominatorValue) {
					stream << "\t\t";
					RationalDenominatorValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RationalDenominatorValue> not present\n";

	Attribute *MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
				stream << "\t";
				if (MeasurementUnitsCodeSequence)
					stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
				else
					stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
				if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *Date = (*list)[TagFromName(Date)];
				stream << "\t";
				if (Date) {
					stream << "\t\t";
					Date->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Date> not present\n";

				Attribute *Time = (*list)[TagFromName(Time)];
				stream << "\t";
				if (Time) {
					stream << "\t\t";
					Time->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Time> not present\n";

				Attribute *PersonName = (*list)[TagFromName(PersonName)];
				stream << "\t";
				if (PersonName) {
					stream << "\t\t";
					PersonName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PersonName> not present\n";

				Attribute *TextValue = (*list)[TagFromName(TextValue)];
				stream << "\t";
				if (TextValue) {
					stream << "\t\t";
					TextValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TextValue> not present\n";

	Attribute *ConceptCodeSequence = (*list)[TagFromName(ConceptCodeSequence)];
				stream << "\t";
				if (ConceptCodeSequence)
					stream << "\t\tSequence <ConceptCodeSequence>\n";
				else
					stream << "\t\tSequence <ConceptCodeSequence> not present\n";
				if (ConceptCodeSequence && strcmp(ConceptCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ConceptCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (AcquisitionContextDescription) {
		stream << "\t\t";
		AcquisitionContextDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionContextDescription> not present\n";

}

void
Macro_SpecimenMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SpecimenMacro>\n";

	if (ContainerIdentifier) {
		stream << "\t\t";
		ContainerIdentifier->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContainerIdentifier> not present\n";

	if (IssuerOfTheContainerIdentifierSequence)
		stream << "\t\tSequence <IssuerOfTheContainerIdentifierSequence>\n";
	else
		stream << "\t\tSequence <IssuerOfTheContainerIdentifierSequence> not present\n";
	if (IssuerOfTheContainerIdentifierSequence && strcmp(IssuerOfTheContainerIdentifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IssuerOfTheContainerIdentifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

			}
		}
	}
	if (AlternateContainerIdentifierSequence)
		stream << "\t\tSequence <AlternateContainerIdentifierSequence>\n";
	else
		stream << "\t\tSequence <AlternateContainerIdentifierSequence> not present\n";
	if (AlternateContainerIdentifierSequence && strcmp(AlternateContainerIdentifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AlternateContainerIdentifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ContainerIdentifier = (*list)[TagFromName(ContainerIdentifier)];
				stream << "\t";
				if (ContainerIdentifier) {
					stream << "\t\t";
					ContainerIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerIdentifier> not present\n";

	Attribute *IssuerOfTheContainerIdentifierSequence = (*list)[TagFromName(IssuerOfTheContainerIdentifierSequence)];
				stream << "\t";
				if (IssuerOfTheContainerIdentifierSequence)
					stream << "\t\tSequence <IssuerOfTheContainerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <IssuerOfTheContainerIdentifierSequence> not present\n";
				if (IssuerOfTheContainerIdentifierSequence && strcmp(IssuerOfTheContainerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IssuerOfTheContainerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ContainerTypeCodeSequence)
		stream << "\t\tSequence <ContainerTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <ContainerTypeCodeSequence> not present\n";
	if (ContainerTypeCodeSequence && strcmp(ContainerTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContainerTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ContainerDescription) {
		stream << "\t\t";
		ContainerDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContainerDescription> not present\n";

	if (ContainerComponentSequence)
		stream << "\t\tSequence <ContainerComponentSequence>\n";
	else
		stream << "\t\tSequence <ContainerComponentSequence> not present\n";
	if (ContainerComponentSequence && strcmp(ContainerComponentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContainerComponentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *ContainerComponentTypeCodeSequence = (*list)[TagFromName(ContainerComponentTypeCodeSequence)];
				stream << "\t";
				if (ContainerComponentTypeCodeSequence)
					stream << "\t\tSequence <ContainerComponentTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <ContainerComponentTypeCodeSequence> not present\n";
				if (ContainerComponentTypeCodeSequence && strcmp(ContainerComponentTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ContainerComponentTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *ContainerComponentID = (*list)[TagFromName(ContainerComponentID)];
				stream << "\t";
				if (ContainerComponentID) {
					stream << "\t\t";
					ContainerComponentID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentID> not present\n";

				Attribute *ContainerComponentLength = (*list)[TagFromName(ContainerComponentLength)];
				stream << "\t";
				if (ContainerComponentLength) {
					stream << "\t\t";
					ContainerComponentLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentLength> not present\n";

				Attribute *ContainerComponentWidth = (*list)[TagFromName(ContainerComponentWidth)];
				stream << "\t";
				if (ContainerComponentWidth) {
					stream << "\t\t";
					ContainerComponentWidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentWidth> not present\n";

				Attribute *ContainerComponentDiameter = (*list)[TagFromName(ContainerComponentDiameter)];
				stream << "\t";
				if (ContainerComponentDiameter) {
					stream << "\t\t";
					ContainerComponentDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentDiameter> not present\n";

				Attribute *ContainerComponentThickness = (*list)[TagFromName(ContainerComponentThickness)];
				stream << "\t";
				if (ContainerComponentThickness) {
					stream << "\t\t";
					ContainerComponentThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentThickness> not present\n";

				Attribute *ContainerComponentMaterial = (*list)[TagFromName(ContainerComponentMaterial)];
				stream << "\t";
				if (ContainerComponentMaterial) {
					stream << "\t\t";
					ContainerComponentMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentMaterial> not present\n";

				Attribute *ContainerComponentDescription = (*list)[TagFromName(ContainerComponentDescription)];
				stream << "\t";
				if (ContainerComponentDescription) {
					stream << "\t\t";
					ContainerComponentDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContainerComponentDescription> not present\n";

			}
		}
	}
	if (SpecimenDescriptionSequence)
		stream << "\t\tSequence <SpecimenDescriptionSequence>\n";
	else
		stream << "\t\tSequence <SpecimenDescriptionSequence> not present\n";
	if (SpecimenDescriptionSequence && strcmp(SpecimenDescriptionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SpecimenDescriptionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SpecimenIdentifier = (*list)[TagFromName(SpecimenIdentifier)];
				stream << "\t";
				if (SpecimenIdentifier) {
					stream << "\t\t";
					SpecimenIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecimenIdentifier> not present\n";

	Attribute *IssuerOfTheSpecimenIdentifierSequence = (*list)[TagFromName(IssuerOfTheSpecimenIdentifierSequence)];
				stream << "\t";
				if (IssuerOfTheSpecimenIdentifierSequence)
					stream << "\t\tSequence <IssuerOfTheSpecimenIdentifierSequence>\n";
				else
					stream << "\t\tSequence <IssuerOfTheSpecimenIdentifierSequence> not present\n";
				if (IssuerOfTheSpecimenIdentifierSequence && strcmp(IssuerOfTheSpecimenIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IssuerOfTheSpecimenIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *SpecimenUID = (*list)[TagFromName(SpecimenUID)];
				stream << "\t";
				if (SpecimenUID) {
					stream << "\t\t";
					SpecimenUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecimenUID> not present\n";

	Attribute *SpecimenTypeCodeSequence = (*list)[TagFromName(SpecimenTypeCodeSequence)];
				stream << "\t";
				if (SpecimenTypeCodeSequence)
					stream << "\t\tSequence <SpecimenTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <SpecimenTypeCodeSequence> not present\n";
				if (SpecimenTypeCodeSequence && strcmp(SpecimenTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SpecimenTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *SpecimenShortDescription = (*list)[TagFromName(SpecimenShortDescription)];
				stream << "\t";
				if (SpecimenShortDescription) {
					stream << "\t\t";
					SpecimenShortDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecimenShortDescription> not present\n";

				Attribute *SpecimenDetailedDescription = (*list)[TagFromName(SpecimenDetailedDescription)];
				stream << "\t";
				if (SpecimenDetailedDescription) {
					stream << "\t\t";
					SpecimenDetailedDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecimenDetailedDescription> not present\n";

	Attribute *SpecimenPreparationSequence = (*list)[TagFromName(SpecimenPreparationSequence)];
				stream << "\t";
				if (SpecimenPreparationSequence)
					stream << "\t\tSequence <SpecimenPreparationSequence>\n";
				else
					stream << "\t\tSequence <SpecimenPreparationSequence> not present\n";
				if (SpecimenPreparationSequence && strcmp(SpecimenPreparationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SpecimenPreparationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *SpecimenPreparationStepContentItemSequence = (*list)[TagFromName(SpecimenPreparationStepContentItemSequence)];
							stream << "\t\t";
							if (SpecimenPreparationStepContentItemSequence)
								stream << "\t\tSequence <SpecimenPreparationStepContentItemSequence>\n";
							else
								stream << "\t\tSequence <SpecimenPreparationStepContentItemSequence> not present\n";
							if (SpecimenPreparationStepContentItemSequence && strcmp(SpecimenPreparationStepContentItemSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=SpecimenPreparationStepContentItemSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

									}
								}
							}
						}
					}
				}
							stream << "\t\t";
	Macro_PrimaryAnatomicStructureMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PrimaryAnatomicStructureMacro>\n";

	Attribute *SpecimenLocalizationContentItemSequence = (*list)[TagFromName(SpecimenLocalizationContentItemSequence)];
				stream << "\t";
				if (SpecimenLocalizationContentItemSequence)
					stream << "\t\tSequence <SpecimenLocalizationContentItemSequence>\n";
				else
					stream << "\t\tSequence <SpecimenLocalizationContentItemSequence> not present\n";
				if (SpecimenLocalizationContentItemSequence && strcmp(SpecimenLocalizationContentItemSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SpecimenLocalizationContentItemSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_Specimen::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Specimen>\n";

				stream << "\t";
	Macro_SpecimenMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <SpecimenMacro>\n";

}

void
Module_XRayAcquisitionDose::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayAcquisitionDose>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (XRayTubeCurrent) {
		stream << "\t\t";
		XRayTubeCurrent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrent> not present\n";

	if (XRayTubeCurrentInuA) {
		stream << "\t\t";
		XRayTubeCurrentInuA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInuA> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (ExposureTimeInuS) {
		stream << "\t\t";
		ExposureTimeInuS->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInuS> not present\n";

	if (Exposure) {
		stream << "\t\t";
		Exposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Exposure> not present\n";

	if (ExposureInuAs) {
		stream << "\t\t";
		ExposureInuAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInuAs> not present\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (ImageAndFluoroscopyAreaDoseProduct) {
		stream << "\t\t";
		ImageAndFluoroscopyAreaDoseProduct->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageAndFluoroscopyAreaDoseProduct> not present\n";

	if (BodyPartThickness) {
		stream << "\t\t";
		BodyPartThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartThickness> not present\n";

	if (RelativeXRayExposure) {
		stream << "\t\t";
		RelativeXRayExposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RelativeXRayExposure> not present\n";

	if (EntranceDose) {
		stream << "\t\t";
		EntranceDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EntranceDose> not present\n";

	if (EntranceDoseInmGy) {
		stream << "\t\t";
		EntranceDoseInmGy->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EntranceDoseInmGy> not present\n";

	if (EntranceDoseDerivation) {
		stream << "\t\t";
		EntranceDoseDerivation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EntranceDoseDerivation> not present\n";

	if (ExposedArea) {
		stream << "\t\t";
		ExposedArea->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposedArea> not present\n";

	if (DistanceSourceToEntrance) {
		stream << "\t\t";
		DistanceSourceToEntrance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToEntrance> not present\n";

	if (CommentsOnRadiationDose) {
		stream << "\t\t";
		CommentsOnRadiationDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CommentsOnRadiationDose> not present\n";

	if (XRayOutput) {
		stream << "\t\t";
		XRayOutput->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayOutput> not present\n";

	if (HalfValueLayer) {
		stream << "\t\t";
		HalfValueLayer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HalfValueLayer> not present\n";

	if (OrganDose) {
		stream << "\t\t";
		OrganDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OrganDose> not present\n";

	if (OrganExposed) {
		stream << "\t\t";
		OrganExposed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OrganExposed> not present\n";

	if (AnodeTargetMaterial) {
		stream << "\t\t";
		AnodeTargetMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AnodeTargetMaterial> not present\n";

				stream << "\t";
	Macro_XRayFiltrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <XRayFiltrationMacro>\n";

	if (RectificationType) {
		stream << "\t\t";
		RectificationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RectificationType> not present\n";

				stream << "\t";
	Macro_ExposureIndexMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ExposureIndexMacro>\n";

}

void
Module_XRayGeneration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayGeneration>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (XRayTubeCurrent) {
		stream << "\t\t";
		XRayTubeCurrent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrent> not present\n";

	if (XRayTubeCurrentInuA) {
		stream << "\t\t";
		XRayTubeCurrentInuA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInuA> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (ExposureTimeInuS) {
		stream << "\t\t";
		ExposureTimeInuS->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInuS> not present\n";

	if (Exposure) {
		stream << "\t\t";
		Exposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Exposure> not present\n";

	if (ExposureInuAs) {
		stream << "\t\t";
		ExposureInuAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInuAs> not present\n";

	if (ExposureControlMode) {
		stream << "\t\t";
		ExposureControlMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureControlMode> not present\n";

	if (ExposureControlModeDescription) {
		stream << "\t\t";
		ExposureControlModeDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureControlModeDescription> not present\n";

	if (ExposureStatus) {
		stream << "\t\t";
		ExposureStatus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureStatus> not present\n";

	if (PhototimerSetting) {
		stream << "\t\t";
		PhototimerSetting->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhototimerSetting> not present\n";

	if (FocalSpots) {
		stream << "\t\t";
		FocalSpots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocalSpots> not present\n";

	if (AnodeTargetMaterial) {
		stream << "\t\t";
		AnodeTargetMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AnodeTargetMaterial> not present\n";

	if (RectificationType) {
		stream << "\t\t";
		RectificationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RectificationType> not present\n";

	if (GeneratorID) {
		stream << "\t\t";
		GeneratorID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GeneratorID> not present\n";

}

void
Macro_XRayFiltrationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFiltrationMacro>\n";

	if (FilterType) {
		stream << "\t\t";
		FilterType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterType> not present\n";

	if (FilterMaterial) {
		stream << "\t\t";
		FilterMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterMaterial> not present\n";

	if (FilterThicknessMaximum) {
		stream << "\t\t";
		FilterThicknessMaximum->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterThicknessMaximum> not present\n";

	if (FilterThicknessMinimum) {
		stream << "\t\t";
		FilterThicknessMinimum->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterThicknessMinimum> not present\n";

	if (FilterBeamPathLengthMinimum) {
		stream << "\t\t";
		FilterBeamPathLengthMinimum->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterBeamPathLengthMinimum> not present\n";

	if (FilterBeamPathLengthMaximum) {
		stream << "\t\t";
		FilterBeamPathLengthMaximum->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterBeamPathLengthMaximum> not present\n";

}

void
Module_XRayFiltration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayFiltration>\n";

				stream << "\t";
	Macro_XRayFiltrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <XRayFiltrationMacro>\n";

}

void
Macro_XRayGridDescriptionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayGridDescriptionMacro>\n";

	if (GridAbsorbingMaterial) {
		stream << "\t\t";
		GridAbsorbingMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridAbsorbingMaterial> not present\n";

	if (GridSpacingMaterial) {
		stream << "\t\t";
		GridSpacingMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridSpacingMaterial> not present\n";

	if (GridThickness) {
		stream << "\t\t";
		GridThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridThickness> not present\n";

	if (GridPitch) {
		stream << "\t\t";
		GridPitch->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridPitch> not present\n";

	if (GridAspectRatio) {
		stream << "\t\t";
		GridAspectRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridAspectRatio> not present\n";

	if (GridPeriod) {
		stream << "\t\t";
		GridPeriod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridPeriod> not present\n";

	if (GridFocalDistance) {
		stream << "\t\t";
		GridFocalDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridFocalDistance> not present\n";

	if (GridID) {
		stream << "\t\t";
		GridID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GridID> not present\n";

}

void
Module_XRayGrid::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayGrid>\n";

	if (Grid) {
		stream << "\t\t";
		Grid->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Grid> not present\n";

				stream << "\t";
	Macro_XRayGridDescriptionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <XRayGridDescriptionMacro>\n";

}

void
Module_DXSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DXSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (PresentationIntentType) {
		stream << "\t\t";
		PresentationIntentType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationIntentType> not present\n";

}

void
Module_DXAnatomyImaged::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DXAnatomyImaged>\n";

	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyRequiredMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyRequiredMacro>\n";

}

void
Module_DXImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DXImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PixelIntensityRelationship) {
		stream << "\t\t";
		PixelIntensityRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelIntensityRelationship> not present\n";

	if (PixelIntensityRelationshipSign) {
		stream << "\t\t";
		PixelIntensityRelationshipSign->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelIntensityRelationshipSign> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (RescaleType) {
		stream << "\t\t";
		RescaleType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleType> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (DerivationDescription) {
		stream << "\t\t";
		DerivationDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DerivationDescription> not present\n";

	if (AcquisitionDeviceProcessingDescription) {
		stream << "\t\t";
		AcquisitionDeviceProcessingDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

	if (AcquisitionDeviceProcessingCode) {
		stream << "\t\t";
		AcquisitionDeviceProcessingCode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDeviceProcessingCode> not present\n";

	if (PatientOrientation) {
		stream << "\t\t";
		PatientOrientation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientOrientation> not present\n";

	if (CalibrationImage) {
		stream << "\t\t";
		CalibrationImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CalibrationImage> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (VOILUTSequence)
		stream << "\t\tSequence <VOILUTSequence>\n";
	else
		stream << "\t\tSequence <VOILUTSequence> not present\n";
	if (VOILUTSequence && strcmp(VOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LUTDescriptor = (*list)[TagFromName(LUTDescriptor)];
				stream << "\t";
				if (LUTDescriptor) {
					stream << "\t\t";
					LUTDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTDescriptor> not present\n";

				Attribute *LUTExplanation = (*list)[TagFromName(LUTExplanation)];
				stream << "\t";
				if (LUTExplanation) {
					stream << "\t\t";
					LUTExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTExplanation> not present\n";

				Attribute *LUTData = (*list)[TagFromName(LUTData)];
				stream << "\t";
				if (LUTData) {
					stream << "\t\t";
					LUTData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTData> not present\n";

			}
		}
	}
	if (WindowCenter) {
		stream << "\t\t";
		WindowCenter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowCenter> not present\n";

	if (WindowWidth) {
		stream << "\t\t";
		WindowWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowWidth> not present\n";

	if (WindowCenterWidthExplanation) {
		stream << "\t\t";
		WindowCenterWidthExplanation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowCenterWidthExplanation> not present\n";

}

void
Macro_DigitalXRayDetectorMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DigitalXRayDetectorMacro>\n";

	if (DetectorType) {
		stream << "\t\t";
		DetectorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorType> not present\n";

	if (DetectorConfiguration) {
		stream << "\t\t";
		DetectorConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorConfiguration> not present\n";

	if (DetectorDescription) {
		stream << "\t\t";
		DetectorDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorDescription> not present\n";

	if (DetectorMode) {
		stream << "\t\t";
		DetectorMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorMode> not present\n";

	if (DetectorID) {
		stream << "\t\t";
		DetectorID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorID> not present\n";

	if (DateOfLastDetectorCalibration) {
		stream << "\t\t";
		DateOfLastDetectorCalibration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DateOfLastDetectorCalibration> not present\n";

	if (TimeOfLastDetectorCalibration) {
		stream << "\t\t";
		TimeOfLastDetectorCalibration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeOfLastDetectorCalibration> not present\n";

	if (ExposuresOnDetectorSinceLastCalibration) {
		stream << "\t\t";
		ExposuresOnDetectorSinceLastCalibration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposuresOnDetectorSinceLastCalibration> not present\n";

	if (ExposuresOnDetectorSinceManufactured) {
		stream << "\t\t";
		ExposuresOnDetectorSinceManufactured->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposuresOnDetectorSinceManufactured> not present\n";

	if (DetectorTimeSinceLastExposure) {
		stream << "\t\t";
		DetectorTimeSinceLastExposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorTimeSinceLastExposure> not present\n";

	if (DetectorBinning) {
		stream << "\t\t";
		DetectorBinning->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorBinning> not present\n";

	if (DetectorManufacturerName) {
		stream << "\t\t";
		DetectorManufacturerName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorManufacturerName> not present\n";

	if (DetectorManufacturerModelName) {
		stream << "\t\t";
		DetectorManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorManufacturerModelName> not present\n";

	if (DetectorConditionsNominalFlag) {
		stream << "\t\t";
		DetectorConditionsNominalFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorConditionsNominalFlag> not present\n";

	if (DetectorTemperature) {
		stream << "\t\t";
		DetectorTemperature->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorTemperature> not present\n";

	if (Sensitivity) {
		stream << "\t\t";
		Sensitivity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Sensitivity> not present\n";

	if (DetectorElementPhysicalSize) {
		stream << "\t\t";
		DetectorElementPhysicalSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorElementPhysicalSize> not present\n";

	if (DetectorElementSpacing) {
		stream << "\t\t";
		DetectorElementSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorElementSpacing> not present\n";

	if (DetectorActiveShape) {
		stream << "\t\t";
		DetectorActiveShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorActiveShape> not present\n";

	if (DetectorActiveDimensions) {
		stream << "\t\t";
		DetectorActiveDimensions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorActiveDimensions> not present\n";

	if (DetectorActiveOrigin) {
		stream << "\t\t";
		DetectorActiveOrigin->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorActiveOrigin> not present\n";

				stream << "\t";
	Macro_ExposureIndexMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ExposureIndexMacro>\n";

}

void
Module_DXDetector::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DXDetector>\n";

				stream << "\t";
	Macro_DigitalXRayDetectorMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DigitalXRayDetectorMacro>\n";

	if (DetectorActiveTime) {
		stream << "\t\t";
		DetectorActiveTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorActiveTime> not present\n";

	if (DetectorActivationOffsetFromExposure) {
		stream << "\t\t";
		DetectorActivationOffsetFromExposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorActivationOffsetFromExposure> not present\n";

	if (FieldOfViewShape) {
		stream << "\t\t";
		FieldOfViewShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewShape> not present\n";

	if (FieldOfViewDimensions) {
		stream << "\t\t";
		FieldOfViewDimensions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewDimensions> not present\n";

	if (FieldOfViewOrigin) {
		stream << "\t\t";
		FieldOfViewOrigin->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewOrigin> not present\n";

	if (FieldOfViewRotation) {
		stream << "\t\t";
		FieldOfViewRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewRotation> not present\n";

	if (FieldOfViewHorizontalFlip) {
		stream << "\t\t";
		FieldOfViewHorizontalFlip->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewHorizontalFlip> not present\n";

	if (ImagerPixelSpacing) {
		stream << "\t\t";
		ImagerPixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagerPixelSpacing> not present\n";

				stream << "\t";
	Macro_BasicPixelSpacingCalibrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicPixelSpacingCalibrationMacro>\n";

	if (CassetteID) {
		stream << "\t\t";
		CassetteID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CassetteID> not present\n";

	if (PlateID) {
		stream << "\t\t";
		PlateID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlateID> not present\n";

}

void
Module_DXPositioning::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DXPositioning>\n";

	if (ProjectionEponymousNameCodeSequence)
		stream << "\t\tSequence <ProjectionEponymousNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ProjectionEponymousNameCodeSequence> not present\n";
	if (ProjectionEponymousNameCodeSequence && strcmp(ProjectionEponymousNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ProjectionEponymousNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (PatientPosition) {
		stream << "\t\t";
		PatientPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientPosition> not present\n";

	if (ViewPosition) {
		stream << "\t\t";
		ViewPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ViewPosition> not present\n";

	if (ViewCodeSequence)
		stream << "\t\tSequence <ViewCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewCodeSequence> not present\n";
	if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
				stream << "\t";
				if (ViewModifierCodeSequence)
					stream << "\t\tSequence <ViewModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
				if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ViewModifierCodeSequence)
		stream << "\t\tSequence <ViewModifierCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
	if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
	if (PatientOrientationCodeSequence)
		stream << "\t\tSequence <PatientOrientationCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientOrientationCodeSequence> not present\n";
	if (PatientOrientationCodeSequence && strcmp(PatientOrientationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientOrientationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *PatientOrientationModifierCodeSequence = (*list)[TagFromName(PatientOrientationModifierCodeSequence)];
				stream << "\t";
				if (PatientOrientationModifierCodeSequence)
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence> not present\n";
				if (PatientOrientationModifierCodeSequence && strcmp(PatientOrientationModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PatientOrientationModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PatientOrientationModifierCodeSequence)
		stream << "\t\tSequence <PatientOrientationModifierCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientOrientationModifierCodeSequence> not present\n";
	if (PatientOrientationModifierCodeSequence && strcmp(PatientOrientationModifierCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientOrientationModifierCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
	if (PatientGantryRelationshipCodeSequence)
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence> not present\n";
	if (PatientGantryRelationshipCodeSequence && strcmp(PatientGantryRelationshipCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientGantryRelationshipCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (EstimatedRadiographicMagnificationFactor) {
		stream << "\t\t";
		EstimatedRadiographicMagnificationFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EstimatedRadiographicMagnificationFactor> not present\n";

	if (PositionerType) {
		stream << "\t\t";
		PositionerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerType> not present\n";

	if (PositionerPrimaryAngle) {
		stream << "\t\t";
		PositionerPrimaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

	if (PositionerSecondaryAngle) {
		stream << "\t\t";
		PositionerSecondaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerSecondaryAngle> not present\n";

	if (DetectorPrimaryAngle) {
		stream << "\t\t";
		DetectorPrimaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorPrimaryAngle> not present\n";

	if (DetectorSecondaryAngle) {
		stream << "\t\t";
		DetectorSecondaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorSecondaryAngle> not present\n";

	if (ColumnAngulation) {
		stream << "\t\t";
		ColumnAngulation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColumnAngulation> not present\n";

	if (TableType) {
		stream << "\t\t";
		TableType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableType> not present\n";

	if (TableAngle) {
		stream << "\t\t";
		TableAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableAngle> not present\n";

	if (BodyPartThickness) {
		stream << "\t\t";
		BodyPartThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartThickness> not present\n";

	if (CompressionForce) {
		stream << "\t\t";
		CompressionForce->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CompressionForce> not present\n";

	if (PaddleDescription) {
		stream << "\t\t";
		PaddleDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PaddleDescription> not present\n";

}

void
Module_MammographySeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MammographySeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (RequestAttributesSequence)
		stream << "\t\tSequence <RequestAttributesSequence>\n";
	else
		stream << "\t\tSequence <RequestAttributesSequence> not present\n";
	if (RequestAttributesSequence && strcmp(RequestAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RequestAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RequestAttributesMacro>\n";

			}
		}
	}
}

void
Module_MammographyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MammographyImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (PositionerType) {
		stream << "\t\t";
		PositionerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerType> not present\n";

	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (PositionerPrimaryAngle) {
		stream << "\t\t";
		PositionerPrimaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

	if (PositionerPrimaryAngleDirection) {
		stream << "\t\t";
		PositionerPrimaryAngleDirection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerPrimaryAngleDirection> not present\n";

	if (PositionerSecondaryAngle) {
		stream << "\t\t";
		PositionerSecondaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerSecondaryAngle> not present\n";

	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (OrganExposed) {
		stream << "\t\t";
		OrganExposed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OrganExposed> not present\n";

	if (BreastImplantPresent) {
		stream << "\t\t";
		BreastImplantPresent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BreastImplantPresent> not present\n";

	if (PartialView) {
		stream << "\t\t";
		PartialView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PartialView> not present\n";

	if (PartialViewDescription) {
		stream << "\t\t";
		PartialViewDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PartialViewDescription> not present\n";

	if (PartialViewCodeSequence)
		stream << "\t\tSequence <PartialViewCodeSequence>\n";
	else
		stream << "\t\tSequence <PartialViewCodeSequence> not present\n";
	if (PartialViewCodeSequence && strcmp(PartialViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PartialViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_GeneralAnatomyMandatoryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyMandatoryMacro>\n";

	if (ViewCodeSequence)
		stream << "\t\tSequence <ViewCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewCodeSequence> not present\n";
	if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
				stream << "\t";
				if (ViewModifierCodeSequence)
					stream << "\t\tSequence <ViewModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
				if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (BiopsyTargetSequence)
		stream << "\t\tSequence <BiopsyTargetSequence>\n";
	else
		stream << "\t\tSequence <BiopsyTargetSequence> not present\n";
	if (BiopsyTargetSequence && strcmp(BiopsyTargetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BiopsyTargetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TargetUID = (*list)[TagFromName(TargetUID)];
				stream << "\t";
				if (TargetUID) {
					stream << "\t\t";
					TargetUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TargetUID> not present\n";

				Attribute *LocalizingCursorPosition = (*list)[TagFromName(LocalizingCursorPosition)];
				stream << "\t";
				if (LocalizingCursorPosition) {
					stream << "\t\t";
					LocalizingCursorPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LocalizingCursorPosition> not present\n";

				Attribute *CalculatedTargetPosition = (*list)[TagFromName(CalculatedTargetPosition)];
				stream << "\t";
				if (CalculatedTargetPosition) {
					stream << "\t\t";
					CalculatedTargetPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalculatedTargetPosition> not present\n";

				Attribute *DisplayedZValue = (*list)[TagFromName(DisplayedZValue)];
				stream << "\t";
				if (DisplayedZValue) {
					stream << "\t\t";
					DisplayedZValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplayedZValue> not present\n";

				Attribute *TargetLabel = (*list)[TagFromName(TargetLabel)];
				stream << "\t";
				if (TargetLabel) {
					stream << "\t\t";
					TargetLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TargetLabel> not present\n";

			}
		}
	}
}

void
Module_IntraoralSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntraoralSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_IntraoralImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntraoralImage>\n";

	if (PositionerType) {
		stream << "\t\t";
		PositionerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerType> not present\n";

	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
				stream << "\t";
				if (AnatomicRegionModifierSequence)
					stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
				if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PrimaryAnatomicStructureSequence)
		stream << "\t\tSequence <PrimaryAnatomicStructureSequence>\n";
	else
		stream << "\t\tSequence <PrimaryAnatomicStructureSequence> not present\n";
	if (PrimaryAnatomicStructureSequence && strcmp(PrimaryAnatomicStructureSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrimaryAnatomicStructureSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Module_ImageHistogram::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ImageHistogram>\n";

	if (HistogramSequence)
		stream << "\t\tSequence <HistogramSequence>\n";
	else
		stream << "\t\tSequence <HistogramSequence> not present\n";
	if (HistogramSequence && strcmp(HistogramSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HistogramSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *HistogramNumberOfBins = (*list)[TagFromName(HistogramNumberOfBins)];
				stream << "\t";
				if (HistogramNumberOfBins) {
					stream << "\t\t";
					HistogramNumberOfBins->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HistogramNumberOfBins> not present\n";

				Attribute *HistogramFirstBinValue = (*list)[TagFromName(HistogramFirstBinValue)];
				stream << "\t";
				if (HistogramFirstBinValue) {
					stream << "\t\t";
					HistogramFirstBinValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HistogramFirstBinValue> not present\n";

				Attribute *HistogramLastBinValue = (*list)[TagFromName(HistogramLastBinValue)];
				stream << "\t";
				if (HistogramLastBinValue) {
					stream << "\t\t";
					HistogramLastBinValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HistogramLastBinValue> not present\n";

				Attribute *HistogramBinWidth = (*list)[TagFromName(HistogramBinWidth)];
				stream << "\t";
				if (HistogramBinWidth) {
					stream << "\t\t";
					HistogramBinWidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HistogramBinWidth> not present\n";

				Attribute *HistogramExplanation = (*list)[TagFromName(HistogramExplanation)];
				stream << "\t";
				if (HistogramExplanation) {
					stream << "\t\t";
					HistogramExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HistogramExplanation> not present\n";

				Attribute *HistogramData = (*list)[TagFromName(HistogramData)];
				stream << "\t";
				if (HistogramData) {
					stream << "\t\t";
					HistogramData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HistogramData> not present\n";

			}
		}
	}
}

void
Module_IHEDBTProfile::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEDBTProfile>\n";

	if (PatientName) {
		stream << "\t\t";
		PatientName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientName> not present\n";

	if (PatientID) {
		stream << "\t\t";
		PatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientID> not present\n";

	if (PatientBirthDate) {
		stream << "\t\t";
		PatientBirthDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBirthDate> not present\n";

	if (PatientAge) {
		stream << "\t\t";
		PatientAge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientAge> not present\n";

	if (OperatorsName) {
		stream << "\t\t";
		OperatorsName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OperatorsName> not present\n";

	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (InstitutionAddress) {
		stream << "\t\t";
		InstitutionAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionAddress> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (DeviceSerialNumber) {
		stream << "\t\t";
		DeviceSerialNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceSerialNumber> not present\n";

	if (StationName) {
		stream << "\t\t";
		StationName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationName> not present\n";

	if (ContributingSourcesSequence)
		stream << "\t\tSequence <ContributingSourcesSequence>\n";
	else
		stream << "\t\tSequence <ContributingSourcesSequence> not present\n";
	if (ContributingSourcesSequence && strcmp(ContributingSourcesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContributingSourcesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AcquisitionDateTime = (*list)[TagFromName(AcquisitionDateTime)];
				stream << "\t";
				if (AcquisitionDateTime) {
					stream << "\t\t";
					AcquisitionDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDateTime> not present\n";

			}
		}
	}
	if (XRay3DAcquisitionSequence)
		stream << "\t\tSequence <XRay3DAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <XRay3DAcquisitionSequence> not present\n";
	if (XRay3DAcquisitionSequence && strcmp(XRay3DAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRay3DAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OrganDose = (*list)[TagFromName(OrganDose)];
				stream << "\t";
				if (OrganDose) {
					stream << "\t\t";
					OrganDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganDose> not present\n";

				Attribute *EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
				stream << "\t";
				if (EntranceDoseInmGy) {
					stream << "\t\t";
					EntranceDoseInmGy->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EntranceDoseInmGy> not present\n";

			}
		}
	}
}

void
Module_IHEMammoProfile::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEMammoProfile>\n";

	if (PatientName) {
		stream << "\t\t";
		PatientName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientName> not present\n";

	if (PatientID) {
		stream << "\t\t";
		PatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientID> not present\n";

	if (PatientBirthDate) {
		stream << "\t\t";
		PatientBirthDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientBirthDate> not present\n";

	if (PatientAge) {
		stream << "\t\t";
		PatientAge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientAge> not present\n";

	if (AcquisitionDate) {
		stream << "\t\t";
		AcquisitionDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDate> not present\n";

	if (AcquisitionTime) {
		stream << "\t\t";
		AcquisitionTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTime> not present\n";

	if (OperatorsName) {
		stream << "\t\t";
		OperatorsName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OperatorsName> not present\n";

	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (InstitutionAddress) {
		stream << "\t\t";
		InstitutionAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionAddress> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (DeviceSerialNumber) {
		stream << "\t\t";
		DeviceSerialNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceSerialNumber> not present\n";

	if (DetectorID) {
		stream << "\t\t";
		DetectorID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorID> not present\n";

	if (SoftwareVersions) {
		stream << "\t\t";
		SoftwareVersions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftwareVersions> not present\n";

	if (StationName) {
		stream << "\t\t";
		StationName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationName> not present\n";

	if (GantryID) {
		stream << "\t\t";
		GantryID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GantryID> not present\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (Exposure) {
		stream << "\t\t";
		Exposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Exposure> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (FilterMaterial) {
		stream << "\t\t";
		FilterMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FilterMaterial> not present\n";

	if (AnodeTargetMaterial) {
		stream << "\t\t";
		AnodeTargetMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AnodeTargetMaterial> not present\n";

	if (CompressionForce) {
		stream << "\t\t";
		CompressionForce->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CompressionForce> not present\n";

	if (BodyPartThickness) {
		stream << "\t\t";
		BodyPartThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartThickness> not present\n";

	if (PositionerPrimaryAngle) {
		stream << "\t\t";
		PositionerPrimaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

	if (RelativeXRayExposure) {
		stream << "\t\t";
		RelativeXRayExposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RelativeXRayExposure> not present\n";

	if (EntranceDoseInmGy) {
		stream << "\t\t";
		EntranceDoseInmGy->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EntranceDoseInmGy> not present\n";

	if (OrganDose) {
		stream << "\t\t";
		OrganDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OrganDose> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (BreastImplantPresent) {
		stream << "\t\t";
		BreastImplantPresent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BreastImplantPresent> not present\n";

	if (PixelPaddingValue) {
		stream << "\t\t";
		PixelPaddingValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPaddingValue> not present\n";

	if (EstimatedRadiographicMagnificationFactor) {
		stream << "\t\t";
		EstimatedRadiographicMagnificationFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EstimatedRadiographicMagnificationFactor> not present\n";

	if (DateOfLastDetectorCalibration) {
		stream << "\t\t";
		DateOfLastDetectorCalibration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DateOfLastDetectorCalibration> not present\n";

}

void
Module_IHEMammoProfileWithoutPartialViewOption::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEMammoProfileWithoutPartialViewOption>\n";

}

void
Module_IHEMammoProfileWithPartialViewOption::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEMammoProfileWithPartialViewOption>\n";

	if (PartialView) {
		stream << "\t\t";
		PartialView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PartialView> not present\n";

	if (PartialViewCodeSequence)
		stream << "\t\tSequence <PartialViewCodeSequence>\n";
	else
		stream << "\t\tSequence <PartialViewCodeSequence> not present\n";
	if (PartialViewCodeSequence && strcmp(PartialViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PartialViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Module_IHEMammoProfileForPresentationOnly::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEMammoProfileForPresentationOnly>\n";

	if (SourceImageSequence)
		stream << "\t\tSequence <SourceImageSequence>\n";
	else
		stream << "\t\tSequence <SourceImageSequence> not present\n";
	if (SourceImageSequence && strcmp(SourceImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SpatialLocationsPreserved = (*list)[TagFromName(SpatialLocationsPreserved)];
				stream << "\t";
				if (SpatialLocationsPreserved) {
					stream << "\t\t";
					SpatialLocationsPreserved->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpatialLocationsPreserved> not present\n";

			}
		}
	}
	if (VOILUTSequence)
		stream << "\t\tSequence <VOILUTSequence>\n";
	else
		stream << "\t\tSequence <VOILUTSequence> not present\n";
	if (VOILUTSequence && strcmp(VOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LUTExplanation = (*list)[TagFromName(LUTExplanation)];
				stream << "\t";
				if (LUTExplanation) {
					stream << "\t\t";
					LUTExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTExplanation> not present\n";

			}
		}
	}
	if (WindowCenterWidthExplanation) {
		stream << "\t\t";
		WindowCenterWidthExplanation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowCenterWidthExplanation> not present\n";

	if (VOILUTFunction) {
		stream << "\t\t";
		VOILUTFunction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VOILUTFunction> not present\n";

}

void
Module_DentalImageOnMediaProfile::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DentalImageOnMediaProfile>\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (DetectorID) {
		stream << "\t\t";
		DetectorID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorID> not present\n";

	if (DetectorManufacturerName) {
		stream << "\t\t";
		DetectorManufacturerName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorManufacturerName> not present\n";

	if (DetectorManufacturerModelName) {
		stream << "\t\t";
		DetectorManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorManufacturerModelName> not present\n";

}

void
Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForBreastTomosynthesisImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_IdentityPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentityPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTWithLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTWithLUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_IdentityPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentityPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTWithLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTWithLUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_XRay3DFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DFrameTypeMacro>\n";

			}
		}
	}
}

void
Macro_IdentityPixelValueTransformationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IdentityPixelValueTransformationMacro>\n";

	if (PixelValueTransformationSequence)
		stream << "\t\tSequence <PixelValueTransformationSequence>\n";
	else
		stream << "\t\tSequence <PixelValueTransformationSequence> not present\n";
	if (PixelValueTransformationSequence && strcmp(PixelValueTransformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PixelValueTransformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
				stream << "\t";
				if (RescaleIntercept) {
					stream << "\t\t";
					RescaleIntercept->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleIntercept> not present\n";

				Attribute *RescaleSlope = (*list)[TagFromName(RescaleSlope)];
				stream << "\t";
				if (RescaleSlope) {
					stream << "\t\t";
					RescaleSlope->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleSlope> not present\n";

				Attribute *RescaleType = (*list)[TagFromName(RescaleType)];
				stream << "\t";
				if (RescaleType) {
					stream << "\t\t";
					RescaleType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleType> not present\n";

			}
		}
	}
}

void
Macro_FrameVOILUTWithLUTMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <FrameVOILUTWithLUTMacro>\n";

	if (FrameVOILUTSequence)
		stream << "\t\tSequence <FrameVOILUTSequence>\n";
	else
		stream << "\t\tSequence <FrameVOILUTSequence> not present\n";
	if (FrameVOILUTSequence && strcmp(FrameVOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameVOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_VOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VOILUTMacro>\n";

			}
		}
	}
}

void
Module_BreastTomosynthesisContributingSources::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <BreastTomosynthesisContributingSources>\n";

	if (ContributingSourcesSequence)
		stream << "\t\tSequence <ContributingSourcesSequence>\n";
	else
		stream << "\t\tSequence <ContributingSourcesSequence> not present\n";
	if (ContributingSourcesSequence && strcmp(ContributingSourcesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContributingSourcesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_GeneralContributingSourcesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <GeneralContributingSourcesMacro>\n";

							stream << "\t\t";
	Macro_ContributingImageSourcesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContributingImageSourcesMacro>\n";

				Attribute *DetectorType = (*list)[TagFromName(DetectorType)];
				stream << "\t";
				if (DetectorType) {
					stream << "\t\t";
					DetectorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorType> not present\n";

				Attribute *DetectorID = (*list)[TagFromName(DetectorID)];
				stream << "\t";
				if (DetectorID) {
					stream << "\t\t";
					DetectorID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorID> not present\n";

				Attribute *DateOfLastDetectorCalibration = (*list)[TagFromName(DateOfLastDetectorCalibration)];
				stream << "\t";
				if (DateOfLastDetectorCalibration) {
					stream << "\t\t";
					DateOfLastDetectorCalibration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DateOfLastDetectorCalibration> not present\n";

				Attribute *TimeOfLastDetectorCalibration = (*list)[TagFromName(TimeOfLastDetectorCalibration)];
				stream << "\t";
				if (TimeOfLastDetectorCalibration) {
					stream << "\t\t";
					TimeOfLastDetectorCalibration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TimeOfLastDetectorCalibration> not present\n";

				Attribute *DetectorElementSpacing = (*list)[TagFromName(DetectorElementSpacing)];
				stream << "\t";
				if (DetectorElementSpacing) {
					stream << "\t\t";
					DetectorElementSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorElementSpacing> not present\n";

			}
		}
	}
}

void
Module_BreastTomosynthesisAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <BreastTomosynthesisAcquisition>\n";

	if (XRay3DAcquisitionSequence)
		stream << "\t\tSequence <XRay3DAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <XRay3DAcquisitionSequence> not present\n";
	if (XRay3DAcquisitionSequence && strcmp(XRay3DAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRay3DAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
				stream << "\t";
				if (FieldOfViewShape) {
					stream << "\t\t";
					FieldOfViewShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewShape> not present\n";

				Attribute *XRayReceptorType = (*list)[TagFromName(XRayReceptorType)];
				stream << "\t";
				if (XRayReceptorType) {
					stream << "\t\t";
					XRayReceptorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayReceptorType> not present\n";

							stream << "\t\t";
	Macro_XRay3DGeneralSharedAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DGeneralSharedAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRay3DGeneralPositionerMovementMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DGeneralPositionerMovementMacro>\n";

				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

				Attribute *DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
				stream << "\t";
				if (DistanceSourceToPatient) {
					stream << "\t\t";
					DistanceSourceToPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToPatient> not present\n";

				Attribute *EstimatedRadiographicMagnificationFactor = (*list)[TagFromName(EstimatedRadiographicMagnificationFactor)];
				stream << "\t";
				if (EstimatedRadiographicMagnificationFactor) {
					stream << "\t\t";
					EstimatedRadiographicMagnificationFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EstimatedRadiographicMagnificationFactor> not present\n";

				Attribute *AnodeTargetMaterial = (*list)[TagFromName(AnodeTargetMaterial)];
				stream << "\t";
				if (AnodeTargetMaterial) {
					stream << "\t\t";
					AnodeTargetMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AnodeTargetMaterial> not present\n";

				Attribute *BodyPartThickness = (*list)[TagFromName(BodyPartThickness)];
				stream << "\t";
				if (BodyPartThickness) {
					stream << "\t\t";
					BodyPartThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BodyPartThickness> not present\n";

				Attribute *ExposureControlMode = (*list)[TagFromName(ExposureControlMode)];
				stream << "\t";
				if (ExposureControlMode) {
					stream << "\t\t";
					ExposureControlMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlMode> not present\n";

				Attribute *ExposureControlModeDescription = (*list)[TagFromName(ExposureControlModeDescription)];
				stream << "\t";
				if (ExposureControlModeDescription) {
					stream << "\t\t";
					ExposureControlModeDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlModeDescription> not present\n";

				Attribute *HalfValueLayer = (*list)[TagFromName(HalfValueLayer)];
				stream << "\t";
				if (HalfValueLayer) {
					stream << "\t\t";
					HalfValueLayer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HalfValueLayer> not present\n";

				Attribute *OrganDose = (*list)[TagFromName(OrganDose)];
				stream << "\t";
				if (OrganDose) {
					stream << "\t\t";
					OrganDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganDose> not present\n";

				Attribute *EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
				stream << "\t";
				if (EntranceDoseInmGy) {
					stream << "\t\t";
					EntranceDoseInmGy->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EntranceDoseInmGy> not present\n";

				Attribute *EntranceDoseDerivation = (*list)[TagFromName(EntranceDoseDerivation)];
				stream << "\t";
				if (EntranceDoseDerivation) {
					stream << "\t\t";
					EntranceDoseDerivation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EntranceDoseDerivation> not present\n";

				Attribute *FocalSpots = (*list)[TagFromName(FocalSpots)];
				stream << "\t";
				if (FocalSpots) {
					stream << "\t\t";
					FocalSpots->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FocalSpots> not present\n";

				Attribute *DetectorBinning = (*list)[TagFromName(DetectorBinning)];
				stream << "\t";
				if (DetectorBinning) {
					stream << "\t\t";
					DetectorBinning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorBinning> not present\n";

				Attribute *DetectorTemperature = (*list)[TagFromName(DetectorTemperature)];
				stream << "\t";
				if (DetectorTemperature) {
					stream << "\t\t";
					DetectorTemperature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorTemperature> not present\n";

				Attribute *FilterType = (*list)[TagFromName(FilterType)];
				stream << "\t";
				if (FilterType) {
					stream << "\t\t";
					FilterType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterType> not present\n";

				Attribute *FilterMaterial = (*list)[TagFromName(FilterMaterial)];
				stream << "\t";
				if (FilterMaterial) {
					stream << "\t\t";
					FilterMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterMaterial> not present\n";

				Attribute *FilterThicknessMinimum = (*list)[TagFromName(FilterThicknessMinimum)];
				stream << "\t";
				if (FilterThicknessMinimum) {
					stream << "\t\t";
					FilterThicknessMinimum->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterThicknessMinimum> not present\n";

				Attribute *FilterThicknessMaximum = (*list)[TagFromName(FilterThicknessMaximum)];
				stream << "\t";
				if (FilterThicknessMaximum) {
					stream << "\t\t";
					FilterThicknessMaximum->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterThicknessMaximum> not present\n";

				Attribute *FilterBeamPathLengthMinimum = (*list)[TagFromName(FilterBeamPathLengthMinimum)];
				stream << "\t";
				if (FilterBeamPathLengthMinimum) {
					stream << "\t\t";
					FilterBeamPathLengthMinimum->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterBeamPathLengthMinimum> not present\n";

				Attribute *FilterBeamPathLengthMaximum = (*list)[TagFromName(FilterBeamPathLengthMaximum)];
				stream << "\t";
				if (FilterBeamPathLengthMaximum) {
					stream << "\t\t";
					FilterBeamPathLengthMaximum->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterBeamPathLengthMaximum> not present\n";

				Attribute *CompressionForce = (*list)[TagFromName(CompressionForce)];
				stream << "\t";
				if (CompressionForce) {
					stream << "\t\t";
					CompressionForce->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CompressionForce> not present\n";

				Attribute *PaddleDescription = (*list)[TagFromName(PaddleDescription)];
				stream << "\t";
				if (PaddleDescription) {
					stream << "\t\t";
					PaddleDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PaddleDescription> not present\n";

	Attribute *PerProjectionAcquisitionSequence = (*list)[TagFromName(PerProjectionAcquisitionSequence)];
				stream << "\t";
				if (PerProjectionAcquisitionSequence)
					stream << "\t\tSequence <PerProjectionAcquisitionSequence>\n";
				else
					stream << "\t\tSequence <PerProjectionAcquisitionSequence> not present\n";
				if (PerProjectionAcquisitionSequence && strcmp(PerProjectionAcquisitionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PerProjectionAcquisitionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_XRay3DGeneralPerProjectionAcquisitionMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <XRay3DGeneralPerProjectionAcquisitionMacro>\n";

							Attribute *PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
							stream << "\t\t";
							if (PositionerPrimaryAngle) {
								stream << "\t\t";
								PositionerPrimaryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

							Attribute *PositionerPrimaryAngleDirection = (*list)[TagFromName(PositionerPrimaryAngleDirection)];
							stream << "\t\t";
							if (PositionerPrimaryAngleDirection) {
								stream << "\t\t";
								PositionerPrimaryAngleDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PositionerPrimaryAngleDirection> not present\n";

							Attribute *PositionerSecondaryAngle = (*list)[TagFromName(PositionerSecondaryAngle)];
							stream << "\t\t";
							if (PositionerSecondaryAngle) {
								stream << "\t\t";
								PositionerSecondaryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PositionerSecondaryAngle> not present\n";

							Attribute *ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
							stream << "\t\t";
							if (ExposureTimeInms) {
								stream << "\t\t";
								ExposureTimeInms->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ExposureTimeInms> not present\n";

							Attribute *ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
							stream << "\t\t";
							if (ExposureInmAs) {
								stream << "\t\t";
								ExposureInmAs->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ExposureInmAs> not present\n";

							Attribute *RelativeXRayExposure = (*list)[TagFromName(RelativeXRayExposure)];
							stream << "\t\t";
							if (RelativeXRayExposure) {
								stream << "\t\t";
								RelativeXRayExposure->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RelativeXRayExposure> not present\n";

							Attribute *OrganDose = (*list)[TagFromName(OrganDose)];
							stream << "\t\t";
							if (OrganDose) {
								stream << "\t\t";
								OrganDose->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OrganDose> not present\n";

							Attribute *EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
							stream << "\t\t";
							if (EntranceDoseInmGy) {
								stream << "\t\t";
								EntranceDoseInmGy->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EntranceDoseInmGy> not present\n";

							Attribute *EntranceDoseDerivation = (*list)[TagFromName(EntranceDoseDerivation)];
							stream << "\t\t";
							if (EntranceDoseDerivation) {
								stream << "\t\t";
								EntranceDoseDerivation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <EntranceDoseDerivation> not present\n";

										stream << "\t\t\t";
	Macro_ExposureIndexMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ExposureIndexMacro>\n";

							Attribute *IrradiationEventUID = (*list)[TagFromName(IrradiationEventUID)];
							stream << "\t\t";
							if (IrradiationEventUID) {
								stream << "\t\t";
								IrradiationEventUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <IrradiationEventUID> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_BreastView::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <BreastView>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (ViewCodeSequence)
		stream << "\t\tSequence <ViewCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewCodeSequence> not present\n";
	if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ViewModifierCodeSequence = (*list)[TagFromName(ViewModifierCodeSequence)];
				stream << "\t";
				if (ViewModifierCodeSequence)
					stream << "\t\tSequence <ViewModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <ViewModifierCodeSequence> not present\n";
				if (ViewModifierCodeSequence && strcmp(ViewModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ViewModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (BreastImplantPresent) {
		stream << "\t\t";
		BreastImplantPresent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BreastImplantPresent> not present\n";

	if (PartialView) {
		stream << "\t\t";
		PartialView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PartialView> not present\n";

	if (PartialViewCodeSequence)
		stream << "\t\tSequence <PartialViewCodeSequence>\n";
	else
		stream << "\t\tSequence <PartialViewCodeSequence> not present\n";
	if (PartialViewCodeSequence && strcmp(PartialViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PartialViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Module_EnhancedMammographySeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedMammographySeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (RequestAttributesSequence)
		stream << "\t\tSequence <RequestAttributesSequence>\n";
	else
		stream << "\t\tSequence <RequestAttributesSequence> not present\n";
	if (RequestAttributesSequence && strcmp(RequestAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RequestAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RequestAttributesMacro>\n";

			}
		}
	}
}

void
Module_EnhancedMammographyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedMammographyImage>\n";

	if (PositionerMotion) {
		stream << "\t\t";
		PositionerMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerMotion> not present\n";

	if (PositionerType) {
		stream << "\t\t";
		PositionerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerType> not present\n";

	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

				stream << "\t";
	Macro_DigitalXRayDetectorMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DigitalXRayDetectorMacro>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (XRayTubeCurrentInmA) {
		stream << "\t\t";
		XRayTubeCurrentInmA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

	if (ExposureTimeInms) {
		stream << "\t\t";
		ExposureTimeInms->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInms> not present\n";

	if (ExposureInmAs) {
		stream << "\t\t";
		ExposureInmAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInmAs> not present\n";

	if (FocalSpots) {
		stream << "\t\t";
		FocalSpots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocalSpots> not present\n";

	if (AnodeTargetMaterial) {
		stream << "\t\t";
		AnodeTargetMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AnodeTargetMaterial> not present\n";

	if (BodyPartThickness) {
		stream << "\t\t";
		BodyPartThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartThickness> not present\n";

	if (CompressionForce) {
		stream << "\t\t";
		CompressionForce->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CompressionForce> not present\n";

	if (PaddleDescription) {
		stream << "\t\t";
		PaddleDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PaddleDescription> not present\n";

	if (ExposureControlMode) {
		stream << "\t\t";
		ExposureControlMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureControlMode> not present\n";

	if (ExposureControlModeDescription) {
		stream << "\t\t";
		ExposureControlModeDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureControlModeDescription> not present\n";

	if (PatientOrientation) {
		stream << "\t\t";
		PatientOrientation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientOrientation> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (QualityControlImage) {
		stream << "\t\t";
		QualityControlImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <QualityControlImage> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (OrganDose) {
		stream << "\t\t";
		OrganDose->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OrganDose> not present\n";

	if (EntranceDoseInmGy) {
		stream << "\t\t";
		EntranceDoseInmGy->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EntranceDoseInmGy> not present\n";

	if (EntranceDoseDerivation) {
		stream << "\t\t";
		EntranceDoseDerivation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EntranceDoseDerivation> not present\n";

	if (TypeOfDetectorMotion) {
		stream << "\t\t";
		TypeOfDetectorMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfDetectorMotion> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

}

void
Macro_BreastXRayPositionerMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BreastXRayPositionerMacro>\n";

	if (PositionerPositionSequence)
		stream << "\t\tSequence <PositionerPositionSequence>\n";
	else
		stream << "\t\tSequence <PositionerPositionSequence> not present\n";
	if (PositionerPositionSequence && strcmp(PositionerPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PositionerPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
				stream << "\t";
				if (PositionerPrimaryAngle) {
					stream << "\t\t";
					PositionerPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

				Attribute *PositionerPrimaryAngleDirection = (*list)[TagFromName(PositionerPrimaryAngleDirection)];
				stream << "\t";
				if (PositionerPrimaryAngleDirection) {
					stream << "\t\t";
					PositionerPrimaryAngleDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerPrimaryAngleDirection> not present\n";

				Attribute *PositionerSecondaryAngle = (*list)[TagFromName(PositionerSecondaryAngle)];
				stream << "\t";
				if (PositionerSecondaryAngle) {
					stream << "\t\t";
					PositionerSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerSecondaryAngle> not present\n";

			}
		}
	}
}

void
Macro_BreastXRayDetectorMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BreastXRayDetectorMacro>\n";

	if (DetectorPositionSequence)
		stream << "\t\tSequence <DetectorPositionSequence>\n";
	else
		stream << "\t\tSequence <DetectorPositionSequence> not present\n";
	if (DetectorPositionSequence && strcmp(DetectorPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DetectorPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DetectorPrimaryAngle = (*list)[TagFromName(DetectorPrimaryAngle)];
				stream << "\t";
				if (DetectorPrimaryAngle) {
					stream << "\t\t";
					DetectorPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorPrimaryAngle> not present\n";

				Attribute *DetectorSecondaryAngle = (*list)[TagFromName(DetectorSecondaryAngle)];
				stream << "\t";
				if (DetectorSecondaryAngle) {
					stream << "\t\t";
					DetectorSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorSecondaryAngle> not present\n";

			}
		}
	}
}

void
Macro_BreastXRayGeometryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BreastXRayGeometryMacro>\n";

	if (XRayGeometrySequence)
		stream << "\t\tSequence <XRayGeometrySequence>\n";
	else
		stream << "\t\tSequence <XRayGeometrySequence> not present\n";
	if (XRayGeometrySequence && strcmp(XRayGeometrySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRayGeometrySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

				Attribute *DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
				stream << "\t";
				if (DistanceSourceToPatient) {
					stream << "\t\t";
					DistanceSourceToPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToPatient> not present\n";

				Attribute *DistanceSourceToIsocenter = (*list)[TagFromName(DistanceSourceToIsocenter)];
				stream << "\t";
				if (DistanceSourceToIsocenter) {
					stream << "\t\t";
					DistanceSourceToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToIsocenter> not present\n";

				Attribute *DistanceSourceToEntrance = (*list)[TagFromName(DistanceSourceToEntrance)];
				stream << "\t";
				if (DistanceSourceToEntrance) {
					stream << "\t\t";
					DistanceSourceToEntrance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToEntrance> not present\n";

				Attribute *EstimatedRadiographicMagnificationFactor = (*list)[TagFromName(EstimatedRadiographicMagnificationFactor)];
				stream << "\t";
				if (EstimatedRadiographicMagnificationFactor) {
					stream << "\t\t";
					EstimatedRadiographicMagnificationFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EstimatedRadiographicMagnificationFactor> not present\n";

			}
		}
	}
}

void
Macro_BreastXRayAcquisitionDoseMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BreastXRayAcquisitionDoseMacro>\n";

	if (XRayAcquisitionDoseSequence)
		stream << "\t\tSequence <XRayAcquisitionDoseSequence>\n";
	else
		stream << "\t\tSequence <XRayAcquisitionDoseSequence> not present\n";
	if (XRayAcquisitionDoseSequence && strcmp(XRayAcquisitionDoseSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRayAcquisitionDoseSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
				stream << "\t";
				if (ExposureTimeInms) {
					stream << "\t\t";
					ExposureTimeInms->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureTimeInms> not present\n";

				Attribute *ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
				stream << "\t";
				if (ExposureInmAs) {
					stream << "\t\t";
					ExposureInmAs->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureInmAs> not present\n";

				Attribute *RelativeXRayExposure = (*list)[TagFromName(RelativeXRayExposure)];
				stream << "\t";
				if (RelativeXRayExposure) {
					stream << "\t\t";
					RelativeXRayExposure->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RelativeXRayExposure> not present\n";

				Attribute *HalfValueLayer = (*list)[TagFromName(HalfValueLayer)];
				stream << "\t";
				if (HalfValueLayer) {
					stream << "\t\t";
					HalfValueLayer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HalfValueLayer> not present\n";

				Attribute *OrganDose = (*list)[TagFromName(OrganDose)];
				stream << "\t";
				if (OrganDose) {
					stream << "\t\t";
					OrganDose->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OrganDose> not present\n";

				Attribute *EntranceDoseInmGy = (*list)[TagFromName(EntranceDoseInmGy)];
				stream << "\t";
				if (EntranceDoseInmGy) {
					stream << "\t\t";
					EntranceDoseInmGy->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EntranceDoseInmGy> not present\n";

				Attribute *EntranceDoseDerivation = (*list)[TagFromName(EntranceDoseDerivation)];
				stream << "\t";
				if (EntranceDoseDerivation) {
					stream << "\t\t";
					EntranceDoseDerivation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EntranceDoseDerivation> not present\n";

			}
		}
	}
}

void
Macro_BreastXRayIsocenterReferenceSystemMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <BreastXRayIsocenterReferenceSystemMacro>\n";

	if (IsocenterReferenceSystemSequence)
		stream << "\t\tSequence <IsocenterReferenceSystemSequence>\n";
	else
		stream << "\t\tSequence <IsocenterReferenceSystemSequence> not present\n";
	if (IsocenterReferenceSystemSequence && strcmp(IsocenterReferenceSystemSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IsocenterReferenceSystemSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *XRaySourceIsocenterPrimaryAngle = (*list)[TagFromName(XRaySourceIsocenterPrimaryAngle)];
				stream << "\t";
				if (XRaySourceIsocenterPrimaryAngle) {
					stream << "\t\t";
					XRaySourceIsocenterPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRaySourceIsocenterPrimaryAngle> not present\n";

				Attribute *XRaySourceIsocenterSecondaryAngle = (*list)[TagFromName(XRaySourceIsocenterSecondaryAngle)];
				stream << "\t";
				if (XRaySourceIsocenterSecondaryAngle) {
					stream << "\t\t";
					XRaySourceIsocenterSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRaySourceIsocenterSecondaryAngle> not present\n";

				Attribute *BreastSupportIsocenterPrimaryAngle = (*list)[TagFromName(BreastSupportIsocenterPrimaryAngle)];
				stream << "\t";
				if (BreastSupportIsocenterPrimaryAngle) {
					stream << "\t\t";
					BreastSupportIsocenterPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BreastSupportIsocenterPrimaryAngle> not present\n";

				Attribute *BreastSupportIsocenterSecondaryAngle = (*list)[TagFromName(BreastSupportIsocenterSecondaryAngle)];
				stream << "\t";
				if (BreastSupportIsocenterSecondaryAngle) {
					stream << "\t\t";
					BreastSupportIsocenterSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BreastSupportIsocenterSecondaryAngle> not present\n";

				Attribute *BreastSupportXPositionToIsocenter = (*list)[TagFromName(BreastSupportXPositionToIsocenter)];
				stream << "\t";
				if (BreastSupportXPositionToIsocenter) {
					stream << "\t\t";
					BreastSupportXPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BreastSupportXPositionToIsocenter> not present\n";

				Attribute *BreastSupportYPositionToIsocenter = (*list)[TagFromName(BreastSupportYPositionToIsocenter)];
				stream << "\t";
				if (BreastSupportYPositionToIsocenter) {
					stream << "\t\t";
					BreastSupportYPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BreastSupportYPositionToIsocenter> not present\n";

				Attribute *BreastSupportZPositionToIsocenter = (*list)[TagFromName(BreastSupportZPositionToIsocenter)];
				stream << "\t";
				if (BreastSupportZPositionToIsocenter) {
					stream << "\t\t";
					BreastSupportZPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BreastSupportZPositionToIsocenter> not present\n";

				Attribute *DetectorIsocenterPrimaryAngle = (*list)[TagFromName(DetectorIsocenterPrimaryAngle)];
				stream << "\t";
				if (DetectorIsocenterPrimaryAngle) {
					stream << "\t\t";
					DetectorIsocenterPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorIsocenterPrimaryAngle> not present\n";

				Attribute *DetectorIsocenterSecondaryAngle = (*list)[TagFromName(DetectorIsocenterSecondaryAngle)];
				stream << "\t";
				if (DetectorIsocenterSecondaryAngle) {
					stream << "\t\t";
					DetectorIsocenterSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorIsocenterSecondaryAngle> not present\n";

				Attribute *DetectorXPositionToIsocenter = (*list)[TagFromName(DetectorXPositionToIsocenter)];
				stream << "\t";
				if (DetectorXPositionToIsocenter) {
					stream << "\t\t";
					DetectorXPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorXPositionToIsocenter> not present\n";

				Attribute *DetectorYPositionToIsocenter = (*list)[TagFromName(DetectorYPositionToIsocenter)];
				stream << "\t";
				if (DetectorYPositionToIsocenter) {
					stream << "\t\t";
					DetectorYPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorYPositionToIsocenter> not present\n";

				Attribute *DetectorZPositionToIsocenter = (*list)[TagFromName(DetectorZPositionToIsocenter)];
				stream << "\t";
				if (DetectorZPositionToIsocenter) {
					stream << "\t\t";
					DetectorZPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorZPositionToIsocenter> not present\n";

				Attribute *DetectorActiveAreaTLHCPosition = (*list)[TagFromName(DetectorActiveAreaTLHCPosition)];
				stream << "\t";
				if (DetectorActiveAreaTLHCPosition) {
					stream << "\t\t";
					DetectorActiveAreaTLHCPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorActiveAreaTLHCPosition> not present\n";

				Attribute *DetectorActiveAreaOrientation = (*list)[TagFromName(DetectorActiveAreaOrientation)];
				stream << "\t";
				if (DetectorActiveAreaOrientation) {
					stream << "\t\t";
					DetectorActiveAreaOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorActiveAreaOrientation> not present\n";

			}
		}
	}
}

void
Macro_XRayGridMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayGridMacro>\n";

	if (XRayGridSequence)
		stream << "\t\tSequence <XRayGridSequence>\n";
	else
		stream << "\t\tSequence <XRayGridSequence> not present\n";
	if (XRayGridSequence && strcmp(XRayGridSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRayGridSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *Grid = (*list)[TagFromName(Grid)];
				stream << "\t";
				if (Grid) {
					stream << "\t\t";
					Grid->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Grid> not present\n";

							stream << "\t\t";
	Macro_XRayGridDescriptionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGridDescriptionMacro>\n";

			}
		}
	}
}

void
Macro_XRayFilterMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFilterMacro>\n";

	if (XRayFilterSequence)
		stream << "\t\tSequence <XRayFilterSequence>\n";
	else
		stream << "\t\tSequence <XRayFilterSequence> not present\n";
	if (XRayFilterSequence && strcmp(XRayFilterSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRayFilterSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_XRayFiltrationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFiltrationMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForBreastProjectionXRayImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_IdentityPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentityPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTWithLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTWithLUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_XRayFieldOfViewMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFieldOfViewMacro>\n";

							stream << "\t\t";
	Macro_XRayFramePixelDataPropertiesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFramePixelDataPropertiesMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameDetectorParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameDetectorParametersMacro>\n";

							stream << "\t\t";
	Macro_XRayCalibrationDeviceUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCalibrationDeviceUsageMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRayCollimatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCollimatorMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayPositionerMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayPositionerMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayDetectorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayDetectorMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayGeometryMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayAcquisitionDoseMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayAcquisitionDoseMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayIsocenterReferenceSystemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayIsocenterReferenceSystemMacro>\n";

							stream << "\t\t";
	Macro_XRayGridMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGridMacro>\n";

							stream << "\t\t";
	Macro_XRayFilterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFilterMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_IdentityPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentityPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTWithLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTWithLUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_XRayFieldOfViewMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFieldOfViewMacro>\n";

							stream << "\t\t";
	Macro_XRayFramePixelDataPropertiesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFramePixelDataPropertiesMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameDetectorParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameDetectorParametersMacro>\n";

							stream << "\t\t";
	Macro_XRayCalibrationDeviceUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCalibrationDeviceUsageMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRayCollimatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCollimatorMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayPositionerMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayPositionerMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayDetectorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayDetectorMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayGeometryMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayAcquisitionDoseMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayAcquisitionDoseMacro>\n";

							stream << "\t\t";
	Macro_BreastXRayIsocenterReferenceSystemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <BreastXRayIsocenterReferenceSystemMacro>\n";

							stream << "\t\t";
	Macro_XRayGridMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGridMacro>\n";

							stream << "\t\t";
	Macro_XRayFilterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFilterMacro>\n";

			}
		}
	}
}

void
Module_VLImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VLImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (WindowCenter) {
		stream << "\t\t";
		WindowCenter->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowCenter> not present\n";

	if (WindowWidth) {
		stream << "\t\t";
		WindowWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WindowWidth> not present\n";

	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *AnatomicRegionModifierSequence = (*list)[TagFromName(AnatomicRegionModifierSequence)];
				stream << "\t";
				if (AnatomicRegionModifierSequence)
					stream << "\t\tSequence <AnatomicRegionModifierSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionModifierSequence> not present\n";
				if (AnatomicRegionModifierSequence && strcmp(AnatomicRegionModifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionModifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
				stream << "\t";
	Macro_PrimaryAnatomicStructureMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrimaryAnatomicStructureMacro>\n";

	if (ChannelDescriptionCodeSequence)
		stream << "\t\tSequence <ChannelDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <ChannelDescriptionCodeSequence> not present\n";
	if (ChannelDescriptionCodeSequence && strcmp(ChannelDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ChannelDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (PixelSpacing) {
		stream << "\t\t";
		PixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacing> not present\n";

	if (ImagerPixelSpacing) {
		stream << "\t\t";
		ImagerPixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagerPixelSpacing> not present\n";

}

void
Module_VLEndoscopicSeriesPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VLEndoscopicSeriesPseudo>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_VLMicroscopicSeriesPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VLMicroscopicSeriesPseudo>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_VLSlideCoordinatesMicroscopicSeriesPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VLSlideCoordinatesMicroscopicSeriesPseudo>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_VLPhotographicSeriesPseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VLPhotographicSeriesPseudo>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_SlideCoordinates::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SlideCoordinates>\n";

	if (ImageCenterPointCoordinatesSequence)
		stream << "\t\tSequence <ImageCenterPointCoordinatesSequence>\n";
	else
		stream << "\t\tSequence <ImageCenterPointCoordinatesSequence> not present\n";
	if (ImageCenterPointCoordinatesSequence && strcmp(ImageCenterPointCoordinatesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ImageCenterPointCoordinatesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *XOffsetInSlideCoordinateSystem = (*list)[TagFromName(XOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (XOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					XOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XOffsetInSlideCoordinateSystem> not present\n";

				Attribute *YOffsetInSlideCoordinateSystem = (*list)[TagFromName(YOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (YOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					YOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <YOffsetInSlideCoordinateSystem> not present\n";

				Attribute *ZOffsetInSlideCoordinateSystem = (*list)[TagFromName(ZOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (ZOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					ZOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZOffsetInSlideCoordinateSystem> not present\n";

			}
		}
	}
}

void
Module_OphthalmicPhotographySeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPhotographySeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_OphthalmicPhotography8BitImagePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPhotography8BitImagePseudo>\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

}

void
Module_OphthalmicPhotography16BitImagePseudo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPhotography16BitImagePseudo>\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

}

void
Module_OphthalmicPhotographyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPhotographyImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (SamplesPerPixelUsed) {
		stream << "\t\t";
		SamplesPerPixelUsed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixelUsed> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (PixelSpacing) {
		stream << "\t\t";
		PixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelSpacing> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (SourceImageSequence)
		stream << "\t\tSequence <SourceImageSequence>\n";
	else
		stream << "\t\tSequence <SourceImageSequence> not present\n";
	if (SourceImageSequence && strcmp(SourceImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (CalibrationImage) {
		stream << "\t\t";
		CalibrationImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CalibrationImage> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

}

void
Module_OphthalmicPhotographicParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPhotographicParameters>\n";

	if (AcquisitionDeviceTypeCodeSequence)
		stream << "\t\tSequence <AcquisitionDeviceTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <AcquisitionDeviceTypeCodeSequence> not present\n";
	if (AcquisitionDeviceTypeCodeSequence && strcmp(AcquisitionDeviceTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AcquisitionDeviceTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (IlluminationTypeCodeSequence)
		stream << "\t\tSequence <IlluminationTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <IlluminationTypeCodeSequence> not present\n";
	if (IlluminationTypeCodeSequence && strcmp(IlluminationTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IlluminationTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (LightPathFilterTypeStackCodeSequence)
		stream << "\t\tSequence <LightPathFilterTypeStackCodeSequence>\n";
	else
		stream << "\t\tSequence <LightPathFilterTypeStackCodeSequence> not present\n";
	if (LightPathFilterTypeStackCodeSequence && strcmp(LightPathFilterTypeStackCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LightPathFilterTypeStackCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (LightPathFilterPassThroughWavelength) {
		stream << "\t\t";
		LightPathFilterPassThroughWavelength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LightPathFilterPassThroughWavelength> not present\n";

	if (LightPathFilterPassBand) {
		stream << "\t\t";
		LightPathFilterPassBand->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LightPathFilterPassBand> not present\n";

	if (ImagePathFilterTypeStackCodeSequence)
		stream << "\t\tSequence <ImagePathFilterTypeStackCodeSequence>\n";
	else
		stream << "\t\tSequence <ImagePathFilterTypeStackCodeSequence> not present\n";
	if (ImagePathFilterTypeStackCodeSequence && strcmp(ImagePathFilterTypeStackCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ImagePathFilterTypeStackCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ImagePathFilterPassThroughWavelength) {
		stream << "\t\t";
		ImagePathFilterPassThroughWavelength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagePathFilterPassThroughWavelength> not present\n";

	if (ImagePathFilterPassBand) {
		stream << "\t\t";
		ImagePathFilterPassBand->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagePathFilterPassBand> not present\n";

	if (LensesCodeSequence)
		stream << "\t\tSequence <LensesCodeSequence>\n";
	else
		stream << "\t\tSequence <LensesCodeSequence> not present\n";
	if (LensesCodeSequence && strcmp(LensesCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LensesCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (DetectorType) {
		stream << "\t\t";
		DetectorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorType> not present\n";

	if (ChannelDescriptionCodeSequence)
		stream << "\t\tSequence <ChannelDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <ChannelDescriptionCodeSequence> not present\n";
	if (ChannelDescriptionCodeSequence && strcmp(ChannelDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ChannelDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (CameraAngleOfView) {
		stream << "\t\t";
		CameraAngleOfView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CameraAngleOfView> not present\n";

}

void
Macro_OphthalmicAcquisitionParametersMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAcquisitionParametersMacro>\n";

	if (RefractiveStateSequence)
		stream << "\t\tSequence <RefractiveStateSequence>\n";
	else
		stream << "\t\tSequence <RefractiveStateSequence> not present\n";
	if (RefractiveStateSequence && strcmp(RefractiveStateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RefractiveStateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SphericalLensPower = (*list)[TagFromName(SphericalLensPower)];
				stream << "\t";
				if (SphericalLensPower) {
					stream << "\t\t";
					SphericalLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SphericalLensPower> not present\n";

				Attribute *CylinderLensPower = (*list)[TagFromName(CylinderLensPower)];
				stream << "\t";
				if (CylinderLensPower) {
					stream << "\t\t";
					CylinderLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderLensPower> not present\n";

				Attribute *CylinderAxis = (*list)[TagFromName(CylinderAxis)];
				stream << "\t";
				if (CylinderAxis) {
					stream << "\t\t";
					CylinderAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderAxis> not present\n";

			}
		}
	}
	if (EmmetropicMagnification) {
		stream << "\t\t";
		EmmetropicMagnification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EmmetropicMagnification> not present\n";

	if (IntraOcularPressure) {
		stream << "\t\t";
		IntraOcularPressure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntraOcularPressure> not present\n";

	if (PupilDilated) {
		stream << "\t\t";
		PupilDilated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PupilDilated> not present\n";

	if (MydriaticAgentSequence)
		stream << "\t\tSequence <MydriaticAgentSequence>\n";
	else
		stream << "\t\tSequence <MydriaticAgentSequence> not present\n";
	if (MydriaticAgentSequence && strcmp(MydriaticAgentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MydriaticAgentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *MydriaticAgentCodeSequence = (*list)[TagFromName(MydriaticAgentCodeSequence)];
				stream << "\t";
				if (MydriaticAgentCodeSequence)
					stream << "\t\tSequence <MydriaticAgentCodeSequence>\n";
				else
					stream << "\t\tSequence <MydriaticAgentCodeSequence> not present\n";
				if (MydriaticAgentCodeSequence && strcmp(MydriaticAgentCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MydriaticAgentCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *MydriaticAgentConcentration = (*list)[TagFromName(MydriaticAgentConcentration)];
				stream << "\t";
				if (MydriaticAgentConcentration) {
					stream << "\t\t";
					MydriaticAgentConcentration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MydriaticAgentConcentration> not present\n";

	Attribute *MydriaticAgentConcentrationUnitsSequence = (*list)[TagFromName(MydriaticAgentConcentrationUnitsSequence)];
				stream << "\t";
				if (MydriaticAgentConcentrationUnitsSequence)
					stream << "\t\tSequence <MydriaticAgentConcentrationUnitsSequence>\n";
				else
					stream << "\t\tSequence <MydriaticAgentConcentrationUnitsSequence> not present\n";
				if (MydriaticAgentConcentrationUnitsSequence && strcmp(MydriaticAgentConcentrationUnitsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MydriaticAgentConcentrationUnitsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (DegreeOfDilation) {
		stream << "\t\t";
		DegreeOfDilation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DegreeOfDilation> not present\n";

}

void
Module_OphthalmicPhotographyAcquisitionParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPhotographyAcquisitionParameters>\n";

	if (PatientEyeMovementCommanded) {
		stream << "\t\t";
		PatientEyeMovementCommanded->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientEyeMovementCommanded> not present\n";

	if (PatientEyeMovementCommandCodeSequence)
		stream << "\t\tSequence <PatientEyeMovementCommandCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientEyeMovementCommandCodeSequence> not present\n";
	if (PatientEyeMovementCommandCodeSequence && strcmp(PatientEyeMovementCommandCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientEyeMovementCommandCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (HorizontalFieldOfView) {
		stream << "\t\t";
		HorizontalFieldOfView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HorizontalFieldOfView> not present\n";

				stream << "\t";
	Macro_OphthalmicAcquisitionParametersMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OphthalmicAcquisitionParametersMacro>\n";

}

void
Module_OcularRegionImaged::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OcularRegionImaged>\n";

	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (RelativeImagePositionCodeSequence)
		stream << "\t\tSequence <RelativeImagePositionCodeSequence>\n";
	else
		stream << "\t\tSequence <RelativeImagePositionCodeSequence> not present\n";
	if (RelativeImagePositionCodeSequence && strcmp(RelativeImagePositionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RelativeImagePositionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_GeneralAnatomyMandatoryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyMandatoryMacro>\n";

}

void
Module_StereometricSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <StereometricSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_StereometricRelationship::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <StereometricRelationship>\n";

	if (StereoPairsSequence)
		stream << "\t\tSequence <StereoPairsSequence>\n";
	else
		stream << "\t\tSequence <StereoPairsSequence> not present\n";
	if (StereoPairsSequence && strcmp(StereoPairsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StereoPairsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StereoBaselineAngle = (*list)[TagFromName(StereoBaselineAngle)];
				stream << "\t";
				if (StereoBaselineAngle) {
					stream << "\t\t";
					StereoBaselineAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StereoBaselineAngle> not present\n";

				Attribute *StereoBaselineDisplacement = (*list)[TagFromName(StereoBaselineDisplacement)];
				stream << "\t";
				if (StereoBaselineDisplacement) {
					stream << "\t\t";
					StereoBaselineDisplacement->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StereoBaselineDisplacement> not present\n";

				Attribute *StereoHorizontalPixelOffset = (*list)[TagFromName(StereoHorizontalPixelOffset)];
				stream << "\t";
				if (StereoHorizontalPixelOffset) {
					stream << "\t\t";
					StereoHorizontalPixelOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StereoHorizontalPixelOffset> not present\n";

				Attribute *StereoVerticalPixelOffset = (*list)[TagFromName(StereoVerticalPixelOffset)];
				stream << "\t";
				if (StereoVerticalPixelOffset) {
					stream << "\t\t";
					StereoVerticalPixelOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StereoVerticalPixelOffset> not present\n";

				Attribute *StereoRotation = (*list)[TagFromName(StereoRotation)];
				stream << "\t";
				if (StereoRotation) {
					stream << "\t\t";
					StereoRotation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StereoRotation> not present\n";

	Attribute *LeftImageSequence = (*list)[TagFromName(LeftImageSequence)];
				stream << "\t";
				if (LeftImageSequence)
					stream << "\t\tSequence <LeftImageSequence>\n";
				else
					stream << "\t\tSequence <LeftImageSequence> not present\n";
				if (LeftImageSequence && strcmp(LeftImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=LeftImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *RightImageSequence = (*list)[TagFromName(RightImageSequence)];
				stream << "\t";
				if (RightImageSequence)
					stream << "\t\tSequence <RightImageSequence>\n";
				else
					stream << "\t\tSequence <RightImageSequence> not present\n";
				if (RightImageSequence && strcmp(RightImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RightImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_OphthalmicTomographySeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicTomographySeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_OphthalmicTomographyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicTomographyImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (ConcatenationFrameOffsetNumber) {
		stream << "\t\t";
		ConcatenationFrameOffsetNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConcatenationFrameOffsetNumber> not present\n";

	if (InConcatenationNumber) {
		stream << "\t\t";
		InConcatenationNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InConcatenationNumber> not present\n";

	if (InConcatenationTotalNumber) {
		stream << "\t\t";
		InConcatenationTotalNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InConcatenationTotalNumber> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

}

void
Module_OphthalmicTomographyAcquisitionParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicTomographyAcquisitionParameters>\n";

	if (AxialLengthOfTheEye) {
		stream << "\t\t";
		AxialLengthOfTheEye->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AxialLengthOfTheEye> not present\n";

	if (HorizontalFieldOfView) {
		stream << "\t\t";
		HorizontalFieldOfView->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HorizontalFieldOfView> not present\n";

				stream << "\t";
	Macro_OphthalmicAcquisitionParametersMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OphthalmicAcquisitionParametersMacro>\n";

}

void
Module_OphthalmicTomographyParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicTomographyParameters>\n";

	if (AcquisitionDeviceTypeCodeSequence)
		stream << "\t\tSequence <AcquisitionDeviceTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <AcquisitionDeviceTypeCodeSequence> not present\n";
	if (AcquisitionDeviceTypeCodeSequence && strcmp(AcquisitionDeviceTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AcquisitionDeviceTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (LightPathFilterTypeStackCodeSequence)
		stream << "\t\tSequence <LightPathFilterTypeStackCodeSequence>\n";
	else
		stream << "\t\tSequence <LightPathFilterTypeStackCodeSequence> not present\n";
	if (LightPathFilterTypeStackCodeSequence && strcmp(LightPathFilterTypeStackCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LightPathFilterTypeStackCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (LightPathFilterPassThroughWavelength) {
		stream << "\t\t";
		LightPathFilterPassThroughWavelength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LightPathFilterPassThroughWavelength> not present\n";

	if (LightPathFilterPassBand) {
		stream << "\t\t";
		LightPathFilterPassBand->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LightPathFilterPassBand> not present\n";

	if (DetectorType) {
		stream << "\t\t";
		DetectorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorType> not present\n";

	if (IlluminationWaveLength) {
		stream << "\t\t";
		IlluminationWaveLength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IlluminationWaveLength> not present\n";

	if (IlluminationPower) {
		stream << "\t\t";
		IlluminationPower->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IlluminationPower> not present\n";

	if (IlluminationBandwidth) {
		stream << "\t\t";
		IlluminationBandwidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IlluminationBandwidth> not present\n";

	if (DepthSpatialResolution) {
		stream << "\t\t";
		DepthSpatialResolution->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DepthSpatialResolution> not present\n";

	if (MaximumDepthDistortion) {
		stream << "\t\t";
		MaximumDepthDistortion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumDepthDistortion> not present\n";

	if (AlongScanSpatialResolution) {
		stream << "\t\t";
		AlongScanSpatialResolution->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AlongScanSpatialResolution> not present\n";

	if (MaximumAlongScanDistortion) {
		stream << "\t\t";
		MaximumAlongScanDistortion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumAlongScanDistortion> not present\n";

	if (AcrossScanSpatialResolution) {
		stream << "\t\t";
		AcrossScanSpatialResolution->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcrossScanSpatialResolution> not present\n";

	if (MaximumAcrossScanDistortion) {
		stream << "\t\t";
		MaximumAcrossScanDistortion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumAcrossScanDistortion> not present\n";

}

void
Macro_OphthalmicFrameLocationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicFrameLocationMacro>\n";

	if (OphthalmicFrameLocationSequence)
		stream << "\t\tSequence <OphthalmicFrameLocationSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicFrameLocationSequence> not present\n";
	if (OphthalmicFrameLocationSequence && strcmp(OphthalmicFrameLocationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicFrameLocationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

							Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
							stream << "\t\t";
							if (CodeValue) {
								stream << "\t\t";
								CodeValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CodeValue> not present\n";

						}
					}
				}
				Attribute *ReferenceCoordinates = (*list)[TagFromName(ReferenceCoordinates)];
				stream << "\t";
				if (ReferenceCoordinates) {
					stream << "\t\t";
					ReferenceCoordinates->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferenceCoordinates> not present\n";

				Attribute *DepthOfTransverseImage = (*list)[TagFromName(DepthOfTransverseImage)];
				stream << "\t";
				if (DepthOfTransverseImage) {
					stream << "\t\t";
					DepthOfTransverseImage->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DepthOfTransverseImage> not present\n";

				Attribute *OphthalmicImageOrientation = (*list)[TagFromName(OphthalmicImageOrientation)];
				stream << "\t";
				if (OphthalmicImageOrientation) {
					stream << "\t\t";
					OphthalmicImageOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicImageOrientation> not present\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForOphthalmicTomography::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForOphthalmicTomography>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_OphthalmicFrameLocationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicFrameLocationMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_OphthalmicFrameLocationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicFrameLocationMacro>\n";

			}
		}
	}
}

void
Module_WholeSlideMicroscopySeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <WholeSlideMicroscopySeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_WholeSlideMicroscopyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <WholeSlideMicroscopyImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (ImagedVolumeWidth) {
		stream << "\t\t";
		ImagedVolumeWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagedVolumeWidth> not present\n";

	if (ImagedVolumeHeight) {
		stream << "\t\t";
		ImagedVolumeHeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagedVolumeHeight> not present\n";

	if (ImagedVolumeDepth) {
		stream << "\t\t";
		ImagedVolumeDepth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagedVolumeDepth> not present\n";

	if (TotalPixelMatrixColumns) {
		stream << "\t\t";
		TotalPixelMatrixColumns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TotalPixelMatrixColumns> not present\n";

	if (TotalPixelMatrixRows) {
		stream << "\t\t";
		TotalPixelMatrixRows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TotalPixelMatrixRows> not present\n";

	if (TotalPixelMatrixFocalPlanes) {
		stream << "\t\t";
		TotalPixelMatrixFocalPlanes->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TotalPixelMatrixFocalPlanes> not present\n";

	if (TotalPixelMatrixOriginSequence)
		stream << "\t\tSequence <TotalPixelMatrixOriginSequence>\n";
	else
		stream << "\t\tSequence <TotalPixelMatrixOriginSequence> not present\n";
	if (TotalPixelMatrixOriginSequence && strcmp(TotalPixelMatrixOriginSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TotalPixelMatrixOriginSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *XOffsetInSlideCoordinateSystem = (*list)[TagFromName(XOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (XOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					XOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XOffsetInSlideCoordinateSystem> not present\n";

				Attribute *YOffsetInSlideCoordinateSystem = (*list)[TagFromName(YOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (YOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					YOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <YOffsetInSlideCoordinateSystem> not present\n";

			}
		}
	}
	if (ImageOrientationSlide) {
		stream << "\t\t";
		ImageOrientationSlide->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageOrientationSlide> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (NumberOfFrames) {
		stream << "\t\t";
		NumberOfFrames->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFrames> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (SpecimenLabelInImage) {
		stream << "\t\t";
		SpecimenLabelInImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecimenLabelInImage> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (FocusMethod) {
		stream << "\t\t";
		FocusMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocusMethod> not present\n";

	if (ExtendedDepthOfField) {
		stream << "\t\t";
		ExtendedDepthOfField->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExtendedDepthOfField> not present\n";

	if (NumberOfFocalPlanes) {
		stream << "\t\t";
		NumberOfFocalPlanes->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfFocalPlanes> not present\n";

	if (DistanceBetweenFocalPlanes) {
		stream << "\t\t";
		DistanceBetweenFocalPlanes->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceBetweenFocalPlanes> not present\n";

	if (AcquisitionDeviceProcessingDescription) {
		stream << "\t\t";
		AcquisitionDeviceProcessingDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

	if (ConvolutionKernel) {
		stream << "\t\t";
		ConvolutionKernel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ConvolutionKernel> not present\n";

	if (RecommendedAbsentPixelCIELabValue) {
		stream << "\t\t";
		RecommendedAbsentPixelCIELabValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecommendedAbsentPixelCIELabValue> not present\n";

}

void
Module_OpticalPath::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OpticalPath>\n";

	if (NumberOfOpticalPaths) {
		stream << "\t\t";
		NumberOfOpticalPaths->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfOpticalPaths> not present\n";

	if (OpticalPathSequence)
		stream << "\t\tSequence <OpticalPathSequence>\n";
	else
		stream << "\t\tSequence <OpticalPathSequence> not present\n";
	if (OpticalPathSequence && strcmp(OpticalPathSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OpticalPathSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OpticalPathIdentifier = (*list)[TagFromName(OpticalPathIdentifier)];
				stream << "\t";
				if (OpticalPathIdentifier) {
					stream << "\t\t";
					OpticalPathIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OpticalPathIdentifier> not present\n";

				Attribute *OpticalPathDescription = (*list)[TagFromName(OpticalPathDescription)];
				stream << "\t";
				if (OpticalPathDescription) {
					stream << "\t\t";
					OpticalPathDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OpticalPathDescription> not present\n";

	Attribute *IlluminatorTypeCodeSequence = (*list)[TagFromName(IlluminatorTypeCodeSequence)];
				stream << "\t";
				if (IlluminatorTypeCodeSequence)
					stream << "\t\tSequence <IlluminatorTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <IlluminatorTypeCodeSequence> not present\n";
				if (IlluminatorTypeCodeSequence && strcmp(IlluminatorTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IlluminatorTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *IlluminationWaveLength = (*list)[TagFromName(IlluminationWaveLength)];
				stream << "\t";
				if (IlluminationWaveLength) {
					stream << "\t\t";
					IlluminationWaveLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IlluminationWaveLength> not present\n";

	Attribute *IlluminationColorCodeSequence = (*list)[TagFromName(IlluminationColorCodeSequence)];
				stream << "\t";
				if (IlluminationColorCodeSequence)
					stream << "\t\tSequence <IlluminationColorCodeSequence>\n";
				else
					stream << "\t\tSequence <IlluminationColorCodeSequence> not present\n";
				if (IlluminationColorCodeSequence && strcmp(IlluminationColorCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IlluminationColorCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *IlluminationTypeCodeSequence = (*list)[TagFromName(IlluminationTypeCodeSequence)];
				stream << "\t";
				if (IlluminationTypeCodeSequence)
					stream << "\t\tSequence <IlluminationTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <IlluminationTypeCodeSequence> not present\n";
				if (IlluminationTypeCodeSequence && strcmp(IlluminationTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IlluminationTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *LightPathFilterTypeStackCodeSequence = (*list)[TagFromName(LightPathFilterTypeStackCodeSequence)];
				stream << "\t";
				if (LightPathFilterTypeStackCodeSequence)
					stream << "\t\tSequence <LightPathFilterTypeStackCodeSequence>\n";
				else
					stream << "\t\tSequence <LightPathFilterTypeStackCodeSequence> not present\n";
				if (LightPathFilterTypeStackCodeSequence && strcmp(LightPathFilterTypeStackCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=LightPathFilterTypeStackCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *LightPathFilterPassThroughWavelength = (*list)[TagFromName(LightPathFilterPassThroughWavelength)];
				stream << "\t";
				if (LightPathFilterPassThroughWavelength) {
					stream << "\t\t";
					LightPathFilterPassThroughWavelength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LightPathFilterPassThroughWavelength> not present\n";

				Attribute *LightPathFilterPassBand = (*list)[TagFromName(LightPathFilterPassBand)];
				stream << "\t";
				if (LightPathFilterPassBand) {
					stream << "\t\t";
					LightPathFilterPassBand->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LightPathFilterPassBand> not present\n";

	Attribute *ImagePathFilterTypeStackCodeSequence = (*list)[TagFromName(ImagePathFilterTypeStackCodeSequence)];
				stream << "\t";
				if (ImagePathFilterTypeStackCodeSequence)
					stream << "\t\tSequence <ImagePathFilterTypeStackCodeSequence>\n";
				else
					stream << "\t\tSequence <ImagePathFilterTypeStackCodeSequence> not present\n";
				if (ImagePathFilterTypeStackCodeSequence && strcmp(ImagePathFilterTypeStackCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ImagePathFilterTypeStackCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ImagePathFilterPassThroughWavelength = (*list)[TagFromName(ImagePathFilterPassThroughWavelength)];
				stream << "\t";
				if (ImagePathFilterPassThroughWavelength) {
					stream << "\t\t";
					ImagePathFilterPassThroughWavelength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagePathFilterPassThroughWavelength> not present\n";

				Attribute *ImagePathFilterPassBand = (*list)[TagFromName(ImagePathFilterPassBand)];
				stream << "\t";
				if (ImagePathFilterPassBand) {
					stream << "\t\t";
					ImagePathFilterPassBand->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagePathFilterPassBand> not present\n";

	Attribute *LensesCodeSequence = (*list)[TagFromName(LensesCodeSequence)];
				stream << "\t";
				if (LensesCodeSequence)
					stream << "\t\tSequence <LensesCodeSequence>\n";
				else
					stream << "\t\tSequence <LensesCodeSequence> not present\n";
				if (LensesCodeSequence && strcmp(LensesCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=LensesCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *CondenserLensPower = (*list)[TagFromName(CondenserLensPower)];
				stream << "\t";
				if (CondenserLensPower) {
					stream << "\t\t";
					CondenserLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CondenserLensPower> not present\n";

				Attribute *ObjectiveLensPower = (*list)[TagFromName(ObjectiveLensPower)];
				stream << "\t";
				if (ObjectiveLensPower) {
					stream << "\t\t";
					ObjectiveLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ObjectiveLensPower> not present\n";

				Attribute *ObjectiveLensNumericalAperture = (*list)[TagFromName(ObjectiveLensNumericalAperture)];
				stream << "\t";
				if (ObjectiveLensNumericalAperture) {
					stream << "\t\t";
					ObjectiveLensNumericalAperture->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ObjectiveLensNumericalAperture> not present\n";

	Attribute *ChannelDescriptionCodeSequence = (*list)[TagFromName(ChannelDescriptionCodeSequence)];
				stream << "\t";
				if (ChannelDescriptionCodeSequence)
					stream << "\t\tSequence <ChannelDescriptionCodeSequence>\n";
				else
					stream << "\t\tSequence <ChannelDescriptionCodeSequence> not present\n";
				if (ChannelDescriptionCodeSequence && strcmp(ChannelDescriptionCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ChannelDescriptionCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *PaletteColorLookupTableSequence = (*list)[TagFromName(PaletteColorLookupTableSequence)];
				stream << "\t";
				if (PaletteColorLookupTableSequence)
					stream << "\t\tSequence <PaletteColorLookupTableSequence>\n";
				else
					stream << "\t\tSequence <PaletteColorLookupTableSequence> not present\n";
				if (PaletteColorLookupTableSequence && strcmp(PaletteColorLookupTableSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PaletteColorLookupTableSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_PaletteColorLookupTableMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <PaletteColorLookupTableMacro>\n";

						}
					}
				}
				Attribute *ICCProfile = (*list)[TagFromName(ICCProfile)];
				stream << "\t";
				if (ICCProfile) {
					stream << "\t\t";
					ICCProfile->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ICCProfile> not present\n";

				Attribute *ColorSpace = (*list)[TagFromName(ColorSpace)];
				stream << "\t";
				if (ColorSpace) {
					stream << "\t\t";
					ColorSpace->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ColorSpace> not present\n";

			}
		}
	}
}

void
Macro_PlanePositionSlideMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PlanePositionSlideMacro>\n";

	if (PlanePositionSlideSequence)
		stream << "\t\tSequence <PlanePositionSlideSequence>\n";
	else
		stream << "\t\tSequence <PlanePositionSlideSequence> not present\n";
	if (PlanePositionSlideSequence && strcmp(PlanePositionSlideSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PlanePositionSlideSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ColumnPositionInTotalImagePixelMatrix = (*list)[TagFromName(ColumnPositionInTotalImagePixelMatrix)];
				stream << "\t";
				if (ColumnPositionInTotalImagePixelMatrix) {
					stream << "\t\t";
					ColumnPositionInTotalImagePixelMatrix->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ColumnPositionInTotalImagePixelMatrix> not present\n";

				Attribute *RowPositionInTotalImagePixelMatrix = (*list)[TagFromName(RowPositionInTotalImagePixelMatrix)];
				stream << "\t";
				if (RowPositionInTotalImagePixelMatrix) {
					stream << "\t\t";
					RowPositionInTotalImagePixelMatrix->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RowPositionInTotalImagePixelMatrix> not present\n";

				Attribute *XOffsetInSlideCoordinateSystem = (*list)[TagFromName(XOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (XOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					XOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XOffsetInSlideCoordinateSystem> not present\n";

				Attribute *YOffsetInSlideCoordinateSystem = (*list)[TagFromName(YOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (YOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					YOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <YOffsetInSlideCoordinateSystem> not present\n";

				Attribute *ZOffsetInSlideCoordinateSystem = (*list)[TagFromName(ZOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (ZOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					ZOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZOffsetInSlideCoordinateSystem> not present\n";

			}
		}
	}
}

void
Macro_OpticalPathIdentificationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OpticalPathIdentificationMacro>\n";

	if (OpticalPathIdentificationSequence)
		stream << "\t\tSequence <OpticalPathIdentificationSequence>\n";
	else
		stream << "\t\tSequence <OpticalPathIdentificationSequence> not present\n";
	if (OpticalPathIdentificationSequence && strcmp(OpticalPathIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OpticalPathIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OpticalPathIdentifier = (*list)[TagFromName(OpticalPathIdentifier)];
				stream << "\t";
				if (OpticalPathIdentifier) {
					stream << "\t\t";
					OpticalPathIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OpticalPathIdentifier> not present\n";

			}
		}
	}
}

void
Macro_SpecimenReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SpecimenReferenceMacro>\n";

	if (SpecimenReferenceSequence)
		stream << "\t\tSequence <SpecimenReferenceSequence>\n";
	else
		stream << "\t\tSequence <SpecimenReferenceSequence> not present\n";
	if (SpecimenReferenceSequence && strcmp(SpecimenReferenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SpecimenReferenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SpecimenUID = (*list)[TagFromName(SpecimenUID)];
				stream << "\t";
				if (SpecimenUID) {
					stream << "\t\t";
					SpecimenUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpecimenUID> not present\n";

			}
		}
	}
}

void
Macro_WholeSlideMicroscopyImageFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <WholeSlideMicroscopyImageFrameTypeMacro>\n";

	if (WholeSlideMicroscopyImageFrameTypeSequence)
		stream << "\t\tSequence <WholeSlideMicroscopyImageFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <WholeSlideMicroscopyImageFrameTypeSequence> not present\n";
	if (WholeSlideMicroscopyImageFrameTypeSequence && strcmp(WholeSlideMicroscopyImageFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=WholeSlideMicroscopyImageFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

			}
		}
	}
}

void
Module_MultiResolutionNavigation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiResolutionNavigation>\n";

	if (ReferencedImageNavigationSequence)
		stream << "\t\tSequence <ReferencedImageNavigationSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageNavigationSequence> not present\n";
	if (ReferencedImageNavigationSequence && strcmp(ReferencedImageNavigationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageNavigationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

				Attribute *ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
				stream << "\t";
				if (ReferencedFrameNumber) {
					stream << "\t\t";
					ReferencedFrameNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameNumber> not present\n";

				Attribute *TopLeftHandCornerOfLocalizerArea = (*list)[TagFromName(TopLeftHandCornerOfLocalizerArea)];
				stream << "\t";
				if (TopLeftHandCornerOfLocalizerArea) {
					stream << "\t\t";
					TopLeftHandCornerOfLocalizerArea->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TopLeftHandCornerOfLocalizerArea> not present\n";

				Attribute *BottomRightHandCornerOfLocalizerArea = (*list)[TagFromName(BottomRightHandCornerOfLocalizerArea)];
				stream << "\t";
				if (BottomRightHandCornerOfLocalizerArea) {
					stream << "\t\t";
					BottomRightHandCornerOfLocalizerArea->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BottomRightHandCornerOfLocalizerArea> not present\n";

				Attribute *PixelSpacing = (*list)[TagFromName(PixelSpacing)];
				stream << "\t";
				if (PixelSpacing) {
					stream << "\t\t";
					PixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelSpacing> not present\n";

				Attribute *ZOffsetInSlideCoordinateSystem = (*list)[TagFromName(ZOffsetInSlideCoordinateSystem)];
				stream << "\t";
				if (ZOffsetInSlideCoordinateSystem) {
					stream << "\t\t";
					ZOffsetInSlideCoordinateSystem->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZOffsetInSlideCoordinateSystem> not present\n";

				Attribute *SamplesPerPixel = (*list)[TagFromName(SamplesPerPixel)];
				stream << "\t";
				if (SamplesPerPixel) {
					stream << "\t\t";
					SamplesPerPixel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SamplesPerPixel> not present\n";

				Attribute *OpticalPathIdentifier = (*list)[TagFromName(OpticalPathIdentifier)];
				stream << "\t";
				if (OpticalPathIdentifier) {
					stream << "\t\t";
					OpticalPathIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OpticalPathIdentifier> not present\n";

			}
		}
	}
}

void
Module_SlideLabel::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SlideLabel>\n";

	if (BarcodeValue) {
		stream << "\t\t";
		BarcodeValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BarcodeValue> not present\n";

	if (LabelText) {
		stream << "\t\t";
		LabelText->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LabelText> not present\n";

}

void
Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForWholeSlideMicroscopy>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionSlideMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionSlideMacro>\n";

							stream << "\t\t";
	Macro_OpticalPathIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OpticalPathIdentificationMacro>\n";

							stream << "\t\t";
	Macro_SpecimenReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SpecimenReferenceMacro>\n";

							stream << "\t\t";
	Macro_WholeSlideMicroscopyImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <WholeSlideMicroscopyImageFrameTypeMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionSlideMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionSlideMacro>\n";

							stream << "\t\t";
	Macro_OpticalPathIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OpticalPathIdentificationMacro>\n";

							stream << "\t\t";
	Macro_SpecimenReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SpecimenReferenceMacro>\n";

			}
		}
	}
}

void
Module_LensometryMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <LensometryMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_AutorefractionMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <AutorefractionMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_KeratometryMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <KeratometryMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_SubjectiveRefractionMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SubjectiveRefractionMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_VisualAcuityMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualAcuityMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Macro_CylinderSequenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CylinderSequenceMacro>\n";

	if (CylinderSequence)
		stream << "\t\tSequence <CylinderSequence>\n";
	else
		stream << "\t\tSequence <CylinderSequence> not present\n";
	if (CylinderSequence && strcmp(CylinderSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CylinderSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CylinderPower = (*list)[TagFromName(CylinderPower)];
				stream << "\t";
				if (CylinderPower) {
					stream << "\t\t";
					CylinderPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderPower> not present\n";

				Attribute *CylinderAxis = (*list)[TagFromName(CylinderAxis)];
				stream << "\t";
				if (CylinderAxis) {
					stream << "\t\t";
					CylinderAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderAxis> not present\n";

			}
		}
	}
}

void
Macro_PrismSequenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PrismSequenceMacro>\n";

	if (PrismSequence)
		stream << "\t\tSequence <PrismSequence>\n";
	else
		stream << "\t\tSequence <PrismSequence> not present\n";
	if (PrismSequence && strcmp(PrismSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PrismSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *HorizontalPrismPower = (*list)[TagFromName(HorizontalPrismPower)];
				stream << "\t";
				if (HorizontalPrismPower) {
					stream << "\t\t";
					HorizontalPrismPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HorizontalPrismPower> not present\n";

				Attribute *HorizontalPrismBase = (*list)[TagFromName(HorizontalPrismBase)];
				stream << "\t";
				if (HorizontalPrismBase) {
					stream << "\t\t";
					HorizontalPrismBase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <HorizontalPrismBase> not present\n";

				Attribute *VerticalPrismPower = (*list)[TagFromName(VerticalPrismPower)];
				stream << "\t";
				if (VerticalPrismPower) {
					stream << "\t\t";
					VerticalPrismPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerticalPrismPower> not present\n";

				Attribute *VerticalPrismBase = (*list)[TagFromName(VerticalPrismBase)];
				stream << "\t";
				if (VerticalPrismBase) {
					stream << "\t\t";
					VerticalPrismBase->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerticalPrismBase> not present\n";

			}
		}
	}
}

void
Module_GeneralOphthalmicRefractiveMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GeneralOphthalmicRefractiveMeasurements>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (MeasurementLaterality) {
		stream << "\t\t";
		MeasurementLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MeasurementLaterality> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (ReferencedRefractiveMeasurementsSequence)
		stream << "\t\tSequence <ReferencedRefractiveMeasurementsSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRefractiveMeasurementsSequence> not present\n";
	if (ReferencedRefractiveMeasurementsSequence && strcmp(ReferencedRefractiveMeasurementsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRefractiveMeasurementsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_LensometryMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <LensometryMeasurements>\n";

	if (LensDescription) {
		stream << "\t\t";
		LensDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LensDescription> not present\n";

	if (RightLensSequence)
		stream << "\t\tSequence <RightLensSequence>\n";
	else
		stream << "\t\tSequence <RightLensSequence> not present\n";
	if (RightLensSequence && strcmp(RightLensSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RightLensSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_LensometryMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <LensometryMeasurementsMacro>\n";

			}
		}
	}
	if (LeftLensSequence)
		stream << "\t\tSequence <LeftLensSequence>\n";
	else
		stream << "\t\tSequence <LeftLensSequence> not present\n";
	if (LeftLensSequence && strcmp(LeftLensSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LeftLensSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_LensometryMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <LensometryMeasurementsMacro>\n";

			}
		}
	}
	if (UnspecifiedLateralityLensSequence)
		stream << "\t\tSequence <UnspecifiedLateralityLensSequence>\n";
	else
		stream << "\t\tSequence <UnspecifiedLateralityLensSequence> not present\n";
	if (UnspecifiedLateralityLensSequence && strcmp(UnspecifiedLateralityLensSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=UnspecifiedLateralityLensSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_LensometryMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <LensometryMeasurementsMacro>\n";

			}
		}
	}
}

void
Macro_LensometryMeasurementsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <LensometryMeasurementsMacro>\n";

	if (SpherePower) {
		stream << "\t\t";
		SpherePower->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpherePower> not present\n";

				stream << "\t";
	Macro_CylinderSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CylinderSequenceMacro>\n";

	if (AddNearSequence)
		stream << "\t\tSequence <AddNearSequence>\n";
	else
		stream << "\t\tSequence <AddNearSequence> not present\n";
	if (AddNearSequence && strcmp(AddNearSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AddNearSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AddPower = (*list)[TagFromName(AddPower)];
				stream << "\t";
				if (AddPower) {
					stream << "\t\t";
					AddPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AddPower> not present\n";

				Attribute *ViewingDistance = (*list)[TagFromName(ViewingDistance)];
				stream << "\t";
				if (ViewingDistance) {
					stream << "\t\t";
					ViewingDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ViewingDistance> not present\n";

			}
		}
	}
	if (AddIntermediateSequence)
		stream << "\t\tSequence <AddIntermediateSequence>\n";
	else
		stream << "\t\tSequence <AddIntermediateSequence> not present\n";
	if (AddIntermediateSequence && strcmp(AddIntermediateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AddIntermediateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AddPower = (*list)[TagFromName(AddPower)];
				stream << "\t";
				if (AddPower) {
					stream << "\t\t";
					AddPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AddPower> not present\n";

				Attribute *ViewingDistance = (*list)[TagFromName(ViewingDistance)];
				stream << "\t";
				if (ViewingDistance) {
					stream << "\t\t";
					ViewingDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ViewingDistance> not present\n";

			}
		}
	}
				stream << "\t";
	Macro_PrismSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrismSequenceMacro>\n";

	if (LensSegmentType) {
		stream << "\t\t";
		LensSegmentType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LensSegmentType> not present\n";

	if (OpticalTransmittance) {
		stream << "\t\t";
		OpticalTransmittance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OpticalTransmittance> not present\n";

	if (ChannelWidth) {
		stream << "\t\t";
		ChannelWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ChannelWidth> not present\n";

}

void
Module_AutorefractionMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <AutorefractionMeasurements>\n";

	if (AutorefractionRightEyeSequence)
		stream << "\t\tSequence <AutorefractionRightEyeSequence>\n";
	else
		stream << "\t\tSequence <AutorefractionRightEyeSequence> not present\n";
	if (AutorefractionRightEyeSequence && strcmp(AutorefractionRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AutorefractionRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SpherePower = (*list)[TagFromName(SpherePower)];
				stream << "\t";
				if (SpherePower) {
					stream << "\t\t";
					SpherePower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpherePower> not present\n";

							stream << "\t\t";
	Macro_CylinderSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CylinderSequenceMacro>\n";

				Attribute *PupilSize = (*list)[TagFromName(PupilSize)];
				stream << "\t";
				if (PupilSize) {
					stream << "\t\t";
					PupilSize->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PupilSize> not present\n";

				Attribute *CornealSize = (*list)[TagFromName(CornealSize)];
				stream << "\t";
				if (CornealSize) {
					stream << "\t\t";
					CornealSize->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CornealSize> not present\n";

			}
		}
	}
	if (AutorefractionLeftEyeSequence)
		stream << "\t\tSequence <AutorefractionLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <AutorefractionLeftEyeSequence> not present\n";
	if (AutorefractionLeftEyeSequence && strcmp(AutorefractionLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AutorefractionLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SpherePower = (*list)[TagFromName(SpherePower)];
				stream << "\t";
				if (SpherePower) {
					stream << "\t\t";
					SpherePower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpherePower> not present\n";

							stream << "\t\t";
	Macro_CylinderSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CylinderSequenceMacro>\n";

				Attribute *PupilSize = (*list)[TagFromName(PupilSize)];
				stream << "\t";
				if (PupilSize) {
					stream << "\t\t";
					PupilSize->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PupilSize> not present\n";

				Attribute *CornealSize = (*list)[TagFromName(CornealSize)];
				stream << "\t";
				if (CornealSize) {
					stream << "\t\t";
					CornealSize->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CornealSize> not present\n";

			}
		}
	}
	if (DistancePupillaryDistance) {
		stream << "\t\t";
		DistancePupillaryDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistancePupillaryDistance> not present\n";

	if (NearPupillaryDistance) {
		stream << "\t\t";
		NearPupillaryDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NearPupillaryDistance> not present\n";

}

void
Module_KeratometryMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <KeratometryMeasurements>\n";

	if (KeratometryRightEyeSequence)
		stream << "\t\tSequence <KeratometryRightEyeSequence>\n";
	else
		stream << "\t\tSequence <KeratometryRightEyeSequence> not present\n";
	if (KeratometryRightEyeSequence && strcmp(KeratometryRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=KeratometryRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_KeratometricMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <KeratometricMeasurementsMacro>\n";

			}
		}
	}
	if (KeratometryLeftEyeSequence)
		stream << "\t\tSequence <KeratometryLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <KeratometryLeftEyeSequence> not present\n";
	if (KeratometryLeftEyeSequence && strcmp(KeratometryLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=KeratometryLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_KeratometricMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <KeratometricMeasurementsMacro>\n";

			}
		}
	}
}

void
Macro_KeratometricMeasurementsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <KeratometricMeasurementsMacro>\n";

	if (SteepKeratometricAxisSequence)
		stream << "\t\tSequence <SteepKeratometricAxisSequence>\n";
	else
		stream << "\t\tSequence <SteepKeratometricAxisSequence> not present\n";
	if (SteepKeratometricAxisSequence && strcmp(SteepKeratometricAxisSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SteepKeratometricAxisSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RadiusOfCurvature = (*list)[TagFromName(RadiusOfCurvature)];
				stream << "\t";
				if (RadiusOfCurvature) {
					stream << "\t\t";
					RadiusOfCurvature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiusOfCurvature> not present\n";

				Attribute *KeratometricPower = (*list)[TagFromName(KeratometricPower)];
				stream << "\t";
				if (KeratometricPower) {
					stream << "\t\t";
					KeratometricPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricPower> not present\n";

				Attribute *KeratometricAxis = (*list)[TagFromName(KeratometricAxis)];
				stream << "\t";
				if (KeratometricAxis) {
					stream << "\t\t";
					KeratometricAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricAxis> not present\n";

			}
		}
	}
	if (FlatKeratometricAxisSequence)
		stream << "\t\tSequence <FlatKeratometricAxisSequence>\n";
	else
		stream << "\t\tSequence <FlatKeratometricAxisSequence> not present\n";
	if (FlatKeratometricAxisSequence && strcmp(FlatKeratometricAxisSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FlatKeratometricAxisSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RadiusOfCurvature = (*list)[TagFromName(RadiusOfCurvature)];
				stream << "\t";
				if (RadiusOfCurvature) {
					stream << "\t\t";
					RadiusOfCurvature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiusOfCurvature> not present\n";

				Attribute *KeratometricPower = (*list)[TagFromName(KeratometricPower)];
				stream << "\t";
				if (KeratometricPower) {
					stream << "\t\t";
					KeratometricPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricPower> not present\n";

				Attribute *KeratometricAxis = (*list)[TagFromName(KeratometricAxis)];
				stream << "\t";
				if (KeratometricAxis) {
					stream << "\t\t";
					KeratometricAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricAxis> not present\n";

			}
		}
	}
}

void
Module_SubjectiveRefractionMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SubjectiveRefractionMeasurements>\n";

	if (SubjectiveRefractionRightEyeSequence)
		stream << "\t\tSequence <SubjectiveRefractionRightEyeSequence>\n";
	else
		stream << "\t\tSequence <SubjectiveRefractionRightEyeSequence> not present\n";
	if (SubjectiveRefractionRightEyeSequence && strcmp(SubjectiveRefractionRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SubjectiveRefractionRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SubjectiveRefractionMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SubjectiveRefractionMeasurementsMacro>\n";

			}
		}
	}
	if (SubjectiveRefractionLeftEyeSequence)
		stream << "\t\tSequence <SubjectiveRefractionLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <SubjectiveRefractionLeftEyeSequence> not present\n";
	if (SubjectiveRefractionLeftEyeSequence && strcmp(SubjectiveRefractionLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SubjectiveRefractionLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SubjectiveRefractionMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SubjectiveRefractionMeasurementsMacro>\n";

			}
		}
	}
	if (DistancePupillaryDistance) {
		stream << "\t\t";
		DistancePupillaryDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistancePupillaryDistance> not present\n";

	if (NearPupillaryDistance) {
		stream << "\t\t";
		NearPupillaryDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NearPupillaryDistance> not present\n";

	if (IntermediatePupillaryDistance) {
		stream << "\t\t";
		IntermediatePupillaryDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntermediatePupillaryDistance> not present\n";

	if (OtherPupillaryDistance) {
		stream << "\t\t";
		OtherPupillaryDistance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OtherPupillaryDistance> not present\n";

}

void
Macro_SubjectiveRefractionMeasurementsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SubjectiveRefractionMeasurementsMacro>\n";

	if (SpherePower) {
		stream << "\t\t";
		SpherePower->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpherePower> not present\n";

				stream << "\t";
	Macro_CylinderSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CylinderSequenceMacro>\n";

				stream << "\t";
	Macro_PrismSequenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PrismSequenceMacro>\n";

	if (AddNearSequence)
		stream << "\t\tSequence <AddNearSequence>\n";
	else
		stream << "\t\tSequence <AddNearSequence> not present\n";
	if (AddNearSequence && strcmp(AddNearSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AddNearSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AddPower = (*list)[TagFromName(AddPower)];
				stream << "\t";
				if (AddPower) {
					stream << "\t\t";
					AddPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AddPower> not present\n";

				Attribute *ViewingDistance = (*list)[TagFromName(ViewingDistance)];
				stream << "\t";
				if (ViewingDistance) {
					stream << "\t\t";
					ViewingDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ViewingDistance> not present\n";

			}
		}
	}
	if (AddIntermediateSequence)
		stream << "\t\tSequence <AddIntermediateSequence>\n";
	else
		stream << "\t\tSequence <AddIntermediateSequence> not present\n";
	if (AddIntermediateSequence && strcmp(AddIntermediateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AddIntermediateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AddPower = (*list)[TagFromName(AddPower)];
				stream << "\t";
				if (AddPower) {
					stream << "\t\t";
					AddPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AddPower> not present\n";

				Attribute *ViewingDistance = (*list)[TagFromName(ViewingDistance)];
				stream << "\t";
				if (ViewingDistance) {
					stream << "\t\t";
					ViewingDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ViewingDistance> not present\n";

			}
		}
	}
	if (AddOtherSequence)
		stream << "\t\tSequence <AddOtherSequence>\n";
	else
		stream << "\t\tSequence <AddOtherSequence> not present\n";
	if (AddOtherSequence && strcmp(AddOtherSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AddOtherSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AddPower = (*list)[TagFromName(AddPower)];
				stream << "\t";
				if (AddPower) {
					stream << "\t\t";
					AddPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AddPower> not present\n";

				Attribute *ViewingDistance = (*list)[TagFromName(ViewingDistance)];
				stream << "\t";
				if (ViewingDistance) {
					stream << "\t\t";
					ViewingDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ViewingDistance> not present\n";

			}
		}
	}
}

void
Module_VisualAcuityMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualAcuityMeasurements>\n";

	if (ViewingDistanceType) {
		stream << "\t\t";
		ViewingDistanceType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ViewingDistanceType> not present\n";

	if (VisualAcuityTypeCodeSequence)
		stream << "\t\tSequence <VisualAcuityTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <VisualAcuityTypeCodeSequence> not present\n";
	if (VisualAcuityTypeCodeSequence && strcmp(VisualAcuityTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualAcuityTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (BackgroundColor) {
		stream << "\t\t";
		BackgroundColor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BackgroundColor> not present\n";

	if (Optotype) {
		stream << "\t\t";
		Optotype->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Optotype> not present\n";

	if (OptotypeDetailedDefinition) {
		stream << "\t\t";
		OptotypeDetailedDefinition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OptotypeDetailedDefinition> not present\n";

	if (OptotypePresentation) {
		stream << "\t\t";
		OptotypePresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OptotypePresentation> not present\n";

	if (VisualAcuityRightEyeSequence)
		stream << "\t\tSequence <VisualAcuityRightEyeSequence>\n";
	else
		stream << "\t\tSequence <VisualAcuityRightEyeSequence> not present\n";
	if (VisualAcuityRightEyeSequence && strcmp(VisualAcuityRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualAcuityRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_VisualAcuityMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VisualAcuityMeasurementsMacro>\n";

			}
		}
	}
	if (VisualAcuityLeftEyeSequence)
		stream << "\t\tSequence <VisualAcuityLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <VisualAcuityLeftEyeSequence> not present\n";
	if (VisualAcuityLeftEyeSequence && strcmp(VisualAcuityLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualAcuityLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_VisualAcuityMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VisualAcuityMeasurementsMacro>\n";

			}
		}
	}
	if (VisualAcuityBothEyesOpenSequence)
		stream << "\t\tSequence <VisualAcuityBothEyesOpenSequence>\n";
	else
		stream << "\t\tSequence <VisualAcuityBothEyesOpenSequence> not present\n";
	if (VisualAcuityBothEyesOpenSequence && strcmp(VisualAcuityBothEyesOpenSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualAcuityBothEyesOpenSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_VisualAcuityMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VisualAcuityMeasurementsMacro>\n";

			}
		}
	}
}

void
Macro_VisualAcuityMeasurementsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <VisualAcuityMeasurementsMacro>\n";

	if (DecimalVisualAcuity) {
		stream << "\t\t";
		DecimalVisualAcuity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecimalVisualAcuity> not present\n";

	if (VisualAcuityModifiers) {
		stream << "\t\t";
		VisualAcuityModifiers->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualAcuityModifiers> not present\n";

}

void
Module_OphthalmicAxialMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicAxialMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_OphthalmicAxialMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicAxialMeasurements>\n";

	if (OphthalmicAxialMeasurementsDeviceType) {
		stream << "\t\t";
		OphthalmicAxialMeasurementsDeviceType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OphthalmicAxialMeasurementsDeviceType> not present\n";

	if (OphthalmicUltrasoundMethodCodeSequence)
		stream << "\t\tSequence <OphthalmicUltrasoundMethodCodeSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicUltrasoundMethodCodeSequence> not present\n";
	if (OphthalmicUltrasoundMethodCodeSequence && strcmp(OphthalmicUltrasoundMethodCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicUltrasoundMethodCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (AnteriorChamberDepthDefinitionCodeSequence)
		stream << "\t\tSequence <AnteriorChamberDepthDefinitionCodeSequence>\n";
	else
		stream << "\t\tSequence <AnteriorChamberDepthDefinitionCodeSequence> not present\n";
	if (AnteriorChamberDepthDefinitionCodeSequence && strcmp(AnteriorChamberDepthDefinitionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnteriorChamberDepthDefinitionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (OphthalmicAxialMeasurementsRightEyeSequence)
		stream << "\t\tSequence <OphthalmicAxialMeasurementsRightEyeSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicAxialMeasurementsRightEyeSequence> not present\n";
	if (OphthalmicAxialMeasurementsRightEyeSequence && strcmp(OphthalmicAxialMeasurementsRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicAxialMeasurementsRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_OphthalmicAxialMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsMacro>\n";

							stream << "\t\t";
	Macro_OphthalmicAxialMeasurementsSelectedMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsSelectedMacro>\n";

			}
		}
	}
	if (OphthalmicAxialMeasurementsLeftEyeSequence)
		stream << "\t\tSequence <OphthalmicAxialMeasurementsLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicAxialMeasurementsLeftEyeSequence> not present\n";
	if (OphthalmicAxialMeasurementsLeftEyeSequence && strcmp(OphthalmicAxialMeasurementsLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicAxialMeasurementsLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_OphthalmicAxialMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsMacro>\n";

							stream << "\t\t";
	Macro_OphthalmicAxialMeasurementsSelectedMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsSelectedMacro>\n";

			}
		}
	}
}

void
Macro_OphthalmicAxialMeasurementsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAxialMeasurementsMacro>\n";

	if (LensStatusCodeSequence)
		stream << "\t\tSequence <LensStatusCodeSequence>\n";
	else
		stream << "\t\tSequence <LensStatusCodeSequence> not present\n";
	if (LensStatusCodeSequence && strcmp(LensStatusCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LensStatusCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (LensStatusDescription) {
		stream << "\t\t";
		LensStatusDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LensStatusDescription> not present\n";

	if (VitreousStatusCodeSequence)
		stream << "\t\tSequence <VitreousStatusCodeSequence>\n";
	else
		stream << "\t\tSequence <VitreousStatusCodeSequence> not present\n";
	if (VitreousStatusCodeSequence && strcmp(VitreousStatusCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VitreousStatusCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (VitreousStatusDescription) {
		stream << "\t\t";
		VitreousStatusDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VitreousStatusDescription> not present\n";

	if (PupilDilated) {
		stream << "\t\t";
		PupilDilated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PupilDilated> not present\n";

	if (DegreeOfDilation) {
		stream << "\t\t";
		DegreeOfDilation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DegreeOfDilation> not present\n";

	if (MydriaticAgentSequence)
		stream << "\t\tSequence <MydriaticAgentSequence>\n";
	else
		stream << "\t\tSequence <MydriaticAgentSequence> not present\n";
	if (MydriaticAgentSequence && strcmp(MydriaticAgentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MydriaticAgentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *MydriaticAgentCodeSequence = (*list)[TagFromName(MydriaticAgentCodeSequence)];
				stream << "\t";
				if (MydriaticAgentCodeSequence)
					stream << "\t\tSequence <MydriaticAgentCodeSequence>\n";
				else
					stream << "\t\tSequence <MydriaticAgentCodeSequence> not present\n";
				if (MydriaticAgentCodeSequence && strcmp(MydriaticAgentCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MydriaticAgentCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *MydriaticAgentConcentration = (*list)[TagFromName(MydriaticAgentConcentration)];
				stream << "\t";
				if (MydriaticAgentConcentration) {
					stream << "\t\t";
					MydriaticAgentConcentration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MydriaticAgentConcentration> not present\n";

	Attribute *MydriaticAgentConcentrationUnitsSequence = (*list)[TagFromName(MydriaticAgentConcentrationUnitsSequence)];
				stream << "\t";
				if (MydriaticAgentConcentrationUnitsSequence)
					stream << "\t\tSequence <MydriaticAgentConcentrationUnitsSequence>\n";
				else
					stream << "\t\tSequence <MydriaticAgentConcentrationUnitsSequence> not present\n";
				if (MydriaticAgentConcentrationUnitsSequence && strcmp(MydriaticAgentConcentrationUnitsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MydriaticAgentConcentrationUnitsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (OphthalmicAxialLengthMeasurementsSequence)
		stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSequence> not present\n";
	if (OphthalmicAxialLengthMeasurementsSequence && strcmp(OphthalmicAxialLengthMeasurementsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicAxialLengthMeasurementsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OphthalmicAxialLengthMeasurementsType = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsType)];
				stream << "\t";
				if (OphthalmicAxialLengthMeasurementsType) {
					stream << "\t\t";
					OphthalmicAxialLengthMeasurementsType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicAxialLengthMeasurementsType> not present\n";

	Attribute *OphthalmicAxialLengthMeasurementsTotalLengthSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsTotalLengthSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthMeasurementsTotalLengthSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsTotalLengthSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsTotalLengthSequence> not present\n";
				if (OphthalmicAxialLengthMeasurementsTotalLengthSequence && strcmp(OphthalmicAxialLengthMeasurementsTotalLengthSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthMeasurementsTotalLengthSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
							stream << "\t\t";
							if (OphthalmicAxialLength) {
								stream << "\t\t";
								OphthalmicAxialLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OphthalmicAxialLength> not present\n";

							Attribute *OphthalmicAxialLengthMeasurementModified = (*list)[TagFromName(OphthalmicAxialLengthMeasurementModified)];
							stream << "\t\t";
							if (OphthalmicAxialLengthMeasurementModified) {
								stream << "\t\t";
								OphthalmicAxialLengthMeasurementModified->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OphthalmicAxialLengthMeasurementModified> not present\n";

	Attribute *ReferencedOphthalmicAxialLengthMeasurementQCImageSequence = (*list)[TagFromName(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)];
							stream << "\t\t";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence>\n";
							else
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence> not present\n";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence && strcmp(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
										stream << "\t\t\t";
	Macro_OphthalmicAxialMeasurementsRelatedInformationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsRelatedInformationMacro>\n";

						}
					}
				}
	Attribute *OphthalmicAxialLengthMeasurementsLengthSummationSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsLengthSummationSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthMeasurementsLengthSummationSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsLengthSummationSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsLengthSummationSequence> not present\n";
				if (OphthalmicAxialLengthMeasurementsLengthSummationSequence && strcmp(OphthalmicAxialLengthMeasurementsLengthSummationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthMeasurementsLengthSummationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
							stream << "\t\t";
							if (OphthalmicAxialLength) {
								stream << "\t\t";
								OphthalmicAxialLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OphthalmicAxialLength> not present\n";

							Attribute *OphthalmicAxialLengthMeasurementModified = (*list)[TagFromName(OphthalmicAxialLengthMeasurementModified)];
							stream << "\t\t";
							if (OphthalmicAxialLengthMeasurementModified) {
								stream << "\t\t";
								OphthalmicAxialLengthMeasurementModified->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OphthalmicAxialLengthMeasurementModified> not present\n";

	Attribute *ReferencedOphthalmicAxialLengthMeasurementQCImageSequence = (*list)[TagFromName(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)];
							stream << "\t\t";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence>\n";
							else
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence> not present\n";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence && strcmp(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
	Attribute *OphthalmicAxialLengthMeasurementsSegmentalLengthSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence)];
							stream << "\t\t";
							if (OphthalmicAxialLengthMeasurementsSegmentalLengthSequence)
								stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentalLengthSequence>\n";
							else
								stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentalLengthSequence> not present\n";
							if (OphthalmicAxialLengthMeasurementsSegmentalLengthSequence && strcmp(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OphthalmicAxialLengthMeasurementsSegmentalLengthSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialLengthSegmentalMeasurementsMacro>\n";

									}
								}
							}
						}
					}
				}
	Attribute *OphthalmicAxialLengthMeasurementsSegmentalLengthSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthMeasurementsSegmentalLengthSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentalLengthSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentalLengthSequence> not present\n";
				if (OphthalmicAxialLengthMeasurementsSegmentalLengthSequence && strcmp(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthMeasurementsSegmentalLengthSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialLengthSegmentalMeasurementsMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAxialLengthSegmentalMeasurementsMacro>\n";

	if (OphthalmicAxialLength) {
		stream << "\t\t";
		OphthalmicAxialLength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OphthalmicAxialLength> not present\n";

	if (OphthalmicAxialLengthMeasurementModified) {
		stream << "\t\t";
		OphthalmicAxialLengthMeasurementModified->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OphthalmicAxialLengthMeasurementModified> not present\n";

	if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence)
		stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence> not present\n";
	if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence && strcmp(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_OphthalmicAxialMeasurementsRelatedInformationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsRelatedInformationMacro>\n";

}

void
Macro_OphthalmicAxialMeasurementsRelatedInformationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAxialMeasurementsRelatedInformationMacro>\n";

	if (UltrasoundOphthalmicAxialLengthMeasurementsSequence)
		stream << "\t\tSequence <UltrasoundOphthalmicAxialLengthMeasurementsSequence>\n";
	else
		stream << "\t\tSequence <UltrasoundOphthalmicAxialLengthMeasurementsSequence> not present\n";
	if (UltrasoundOphthalmicAxialLengthMeasurementsSequence && strcmp(UltrasoundOphthalmicAxialLengthMeasurementsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=UltrasoundOphthalmicAxialLengthMeasurementsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OphthalmicAxialLengthVelocity = (*list)[TagFromName(OphthalmicAxialLengthVelocity)];
				stream << "\t";
				if (OphthalmicAxialLengthVelocity) {
					stream << "\t\t";
					OphthalmicAxialLengthVelocity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicAxialLengthVelocity> not present\n";

				Attribute *ObserverType = (*list)[TagFromName(ObserverType)];
				stream << "\t";
				if (ObserverType) {
					stream << "\t\t";
					ObserverType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ObserverType> not present\n";

	Attribute *OphthalmicAxialLengthDataSourceCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthDataSourceCodeSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthDataSourceCodeSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthDataSourceCodeSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthDataSourceCodeSequence> not present\n";
				if (OphthalmicAxialLengthDataSourceCodeSequence && strcmp(OphthalmicAxialLengthDataSourceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthDataSourceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *OphthalmicAxialLengthDataSourceDescription = (*list)[TagFromName(OphthalmicAxialLengthDataSourceDescription)];
				stream << "\t";
				if (OphthalmicAxialLengthDataSourceDescription) {
					stream << "\t\t";
					OphthalmicAxialLengthDataSourceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicAxialLengthDataSourceDescription> not present\n";

			}
		}
	}
	if (OpticalOphthalmicAxialLengthMeasurementsSequence)
		stream << "\t\tSequence <OpticalOphthalmicAxialLengthMeasurementsSequence>\n";
	else
		stream << "\t\tSequence <OpticalOphthalmicAxialLengthMeasurementsSequence> not present\n";
	if (OpticalOphthalmicAxialLengthMeasurementsSequence && strcmp(OpticalOphthalmicAxialLengthMeasurementsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OpticalOphthalmicAxialLengthMeasurementsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SignalToNoiseRatio = (*list)[TagFromName(SignalToNoiseRatio)];
				stream << "\t";
				if (SignalToNoiseRatio) {
					stream << "\t\t";
					SignalToNoiseRatio->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SignalToNoiseRatio> not present\n";

	Attribute *OphthalmicAxialLengthDataSourceCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthDataSourceCodeSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthDataSourceCodeSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthDataSourceCodeSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthDataSourceCodeSequence> not present\n";
				if (OphthalmicAxialLengthDataSourceCodeSequence && strcmp(OphthalmicAxialLengthDataSourceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthDataSourceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *OphthalmicAxialLengthDataSourceDescription = (*list)[TagFromName(OphthalmicAxialLengthDataSourceDescription)];
				stream << "\t";
				if (OphthalmicAxialLengthDataSourceDescription) {
					stream << "\t\t";
					OphthalmicAxialLengthDataSourceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicAxialLengthDataSourceDescription> not present\n";

			}
		}
	}
}

void
Macro_OphthalmicAxialMeasurementsSelectedMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAxialMeasurementsSelectedMacro>\n";

	if (UltrasoundSelectedOphthalmicAxialLengthSequence)
		stream << "\t\tSequence <UltrasoundSelectedOphthalmicAxialLengthSequence>\n";
	else
		stream << "\t\tSequence <UltrasoundSelectedOphthalmicAxialLengthSequence> not present\n";
	if (UltrasoundSelectedOphthalmicAxialLengthSequence && strcmp(UltrasoundSelectedOphthalmicAxialLengthSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=UltrasoundSelectedOphthalmicAxialLengthSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
				stream << "\t";
				if (OphthalmicAxialLength) {
					stream << "\t\t";
					OphthalmicAxialLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicAxialLength> not present\n";

	Attribute *OphthalmicAxialLengthSelectionMethodCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthSelectionMethodCodeSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthSelectionMethodCodeSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthSelectionMethodCodeSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthSelectionMethodCodeSequence> not present\n";
				if (OphthalmicAxialLengthSelectionMethodCodeSequence && strcmp(OphthalmicAxialLengthSelectionMethodCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthSelectionMethodCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedOphthalmicAxialLengthMeasurementQCImageSequence = (*list)[TagFromName(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)];
				stream << "\t";
				if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)
					stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence> not present\n";
				if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence && strcmp(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *OphthalmicAxialLengthQualityMetricSequence = (*list)[TagFromName(OphthalmicAxialLengthQualityMetricSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthQualityMetricSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthQualityMetricSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthQualityMetricSequence> not present\n";
				if (OphthalmicAxialLengthQualityMetricSequence && strcmp(OphthalmicAxialLengthQualityMetricSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthQualityMetricSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_OphthalmicAxialLengthQualityMetricMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialLengthQualityMetricMacro>\n";

						}
					}
				}
	Attribute *SelectedSegmentalOphthalmicAxialLengthSequence = (*list)[TagFromName(SelectedSegmentalOphthalmicAxialLengthSequence)];
				stream << "\t";
				if (SelectedSegmentalOphthalmicAxialLengthSequence)
					stream << "\t\tSequence <SelectedSegmentalOphthalmicAxialLengthSequence>\n";
				else
					stream << "\t\tSequence <SelectedSegmentalOphthalmicAxialLengthSequence> not present\n";
				if (SelectedSegmentalOphthalmicAxialLengthSequence && strcmp(SelectedSegmentalOphthalmicAxialLengthSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SelectedSegmentalOphthalmicAxialLengthSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence)];
							stream << "\t\t";
							if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence)
								stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence>\n";
							else
								stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence> not present\n";
							if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence && strcmp(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (OpticalSelectedOphthalmicAxialLengthSequence)
		stream << "\t\tSequence <OpticalSelectedOphthalmicAxialLengthSequence>\n";
	else
		stream << "\t\tSequence <OpticalSelectedOphthalmicAxialLengthSequence> not present\n";
	if (OpticalSelectedOphthalmicAxialLengthSequence && strcmp(OpticalSelectedOphthalmicAxialLengthSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OpticalSelectedOphthalmicAxialLengthSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *SelectedTotalOphthalmicAxialLengthSequence = (*list)[TagFromName(SelectedTotalOphthalmicAxialLengthSequence)];
				stream << "\t";
				if (SelectedTotalOphthalmicAxialLengthSequence)
					stream << "\t\tSequence <SelectedTotalOphthalmicAxialLengthSequence>\n";
				else
					stream << "\t\tSequence <SelectedTotalOphthalmicAxialLengthSequence> not present\n";
				if (SelectedTotalOphthalmicAxialLengthSequence && strcmp(SelectedTotalOphthalmicAxialLengthSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SelectedTotalOphthalmicAxialLengthSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
							stream << "\t\t";
							if (OphthalmicAxialLength) {
								stream << "\t\t";
								OphthalmicAxialLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OphthalmicAxialLength> not present\n";

	Attribute *ReferencedOphthalmicAxialLengthMeasurementQCImageSequence = (*list)[TagFromName(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)];
							stream << "\t\t";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence>\n";
							else
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence> not present\n";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence && strcmp(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
	Attribute *OphthalmicAxialLengthQualityMetricSequence = (*list)[TagFromName(OphthalmicAxialLengthQualityMetricSequence)];
							stream << "\t\t";
							if (OphthalmicAxialLengthQualityMetricSequence)
								stream << "\t\tSequence <OphthalmicAxialLengthQualityMetricSequence>\n";
							else
								stream << "\t\tSequence <OphthalmicAxialLengthQualityMetricSequence> not present\n";
							if (OphthalmicAxialLengthQualityMetricSequence && strcmp(OphthalmicAxialLengthQualityMetricSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OphthalmicAxialLengthQualityMetricSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialLengthQualityMetricMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialLengthQualityMetricMacro>\n";

									}
								}
							}
						}
					}
				}
	Attribute *SelectedSegmentalOphthalmicAxialLengthSequence = (*list)[TagFromName(SelectedSegmentalOphthalmicAxialLengthSequence)];
				stream << "\t";
				if (SelectedSegmentalOphthalmicAxialLengthSequence)
					stream << "\t\tSequence <SelectedSegmentalOphthalmicAxialLengthSequence>\n";
				else
					stream << "\t\tSequence <SelectedSegmentalOphthalmicAxialLengthSequence> not present\n";
				if (SelectedSegmentalOphthalmicAxialLengthSequence && strcmp(SelectedSegmentalOphthalmicAxialLengthSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SelectedSegmentalOphthalmicAxialLengthSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence)];
							stream << "\t\t";
							if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence)
								stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence>\n";
							else
								stream << "\t\tSequence <OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence> not present\n";
							if (OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence && strcmp(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
							Attribute *OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
							stream << "\t\t";
							if (OphthalmicAxialLength) {
								stream << "\t\t";
								OphthalmicAxialLength->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OphthalmicAxialLength> not present\n";

	Attribute *ReferencedOphthalmicAxialLengthMeasurementQCImageSequence = (*list)[TagFromName(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)];
							stream << "\t\t";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence)
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence>\n";
							else
								stream << "\t\tSequence <ReferencedOphthalmicAxialLengthMeasurementQCImageSequence> not present\n";
							if (ReferencedOphthalmicAxialLengthMeasurementQCImageSequence && strcmp(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedOphthalmicAxialLengthMeasurementQCImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
	Attribute *OphthalmicAxialLengthQualityMetricSequence = (*list)[TagFromName(OphthalmicAxialLengthQualityMetricSequence)];
							stream << "\t\t";
							if (OphthalmicAxialLengthQualityMetricSequence)
								stream << "\t\tSequence <OphthalmicAxialLengthQualityMetricSequence>\n";
							else
								stream << "\t\tSequence <OphthalmicAxialLengthQualityMetricSequence> not present\n";
							if (OphthalmicAxialLengthQualityMetricSequence && strcmp(OphthalmicAxialLengthQualityMetricSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=OphthalmicAxialLengthQualityMetricSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_OphthalmicAxialLengthQualityMetricMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <OphthalmicAxialLengthQualityMetricMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Macro_OphthalmicAxialLengthQualityMetricMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAxialLengthQualityMetricMacro>\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (NumericValue) {
		stream << "\t\t";
		NumericValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumericValue> not present\n";

	if (MeasurementUnitsCodeSequence)
		stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
	else
		stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
	if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Module_IntraocularLensCalculationsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntraocularLensCalculationsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_IntraocularLensCalculations::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IntraocularLensCalculations>\n";

	if (IntraocularLensCalculationsRightEyeSequence)
		stream << "\t\tSequence <IntraocularLensCalculationsRightEyeSequence>\n";
	else
		stream << "\t\tSequence <IntraocularLensCalculationsRightEyeSequence> not present\n";
	if (IntraocularLensCalculationsRightEyeSequence && strcmp(IntraocularLensCalculationsRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IntraocularLensCalculationsRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IntraocularLensCalculationsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntraocularLensCalculationsMacro>\n";

			}
		}
	}
	if (IntraocularLensCalculationsLeftEyeSequence)
		stream << "\t\tSequence <IntraocularLensCalculationsLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <IntraocularLensCalculationsLeftEyeSequence> not present\n";
	if (IntraocularLensCalculationsLeftEyeSequence && strcmp(IntraocularLensCalculationsLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IntraocularLensCalculationsLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IntraocularLensCalculationsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IntraocularLensCalculationsMacro>\n";

			}
		}
	}
}

void
Macro_IntraocularLensCalculationsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IntraocularLensCalculationsMacro>\n";

	if (TargetRefraction) {
		stream << "\t\t";
		TargetRefraction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TargetRefraction> not present\n";

	if (RefractiveProcedureOccurred) {
		stream << "\t\t";
		RefractiveProcedureOccurred->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RefractiveProcedureOccurred> not present\n";

	if (RefractiveSurgeryTypeCodeSequence)
		stream << "\t\tSequence <RefractiveSurgeryTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <RefractiveSurgeryTypeCodeSequence> not present\n";
	if (RefractiveSurgeryTypeCodeSequence && strcmp(RefractiveSurgeryTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RefractiveSurgeryTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (RefractiveErrorBeforeRefractiveSurgeryCodeSequence)
		stream << "\t\tSequence <RefractiveErrorBeforeRefractiveSurgeryCodeSequence>\n";
	else
		stream << "\t\tSequence <RefractiveErrorBeforeRefractiveSurgeryCodeSequence> not present\n";
	if (RefractiveErrorBeforeRefractiveSurgeryCodeSequence && strcmp(RefractiveErrorBeforeRefractiveSurgeryCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RefractiveErrorBeforeRefractiveSurgeryCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (CornealSizeSequence)
		stream << "\t\tSequence <CornealSizeSequence>\n";
	else
		stream << "\t\tSequence <CornealSizeSequence> not present\n";
	if (CornealSizeSequence && strcmp(CornealSizeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CornealSizeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CornealSize = (*list)[TagFromName(CornealSize)];
				stream << "\t";
				if (CornealSize) {
					stream << "\t\t";
					CornealSize->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CornealSize> not present\n";

	Attribute *SourceOfCornealSizeDataCodeSequence = (*list)[TagFromName(SourceOfCornealSizeDataCodeSequence)];
				stream << "\t";
				if (SourceOfCornealSizeDataCodeSequence)
					stream << "\t\tSequence <SourceOfCornealSizeDataCodeSequence>\n";
				else
					stream << "\t\tSequence <SourceOfCornealSizeDataCodeSequence> not present\n";
				if (SourceOfCornealSizeDataCodeSequence && strcmp(SourceOfCornealSizeDataCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SourceOfCornealSizeDataCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
				stream << "\t";
				if (ReferencedSOPSequence)
					stream << "\t\tSequence <ReferencedSOPSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
				if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (LensThicknessSequence)
		stream << "\t\tSequence <LensThicknessSequence>\n";
	else
		stream << "\t\tSequence <LensThicknessSequence> not present\n";
	if (LensThicknessSequence && strcmp(LensThicknessSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LensThicknessSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LensThickness = (*list)[TagFromName(LensThickness)];
				stream << "\t";
				if (LensThickness) {
					stream << "\t\t";
					LensThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LensThickness> not present\n";

	Attribute *SourceOfLensThicknessDataCodeSequence = (*list)[TagFromName(SourceOfLensThicknessDataCodeSequence)];
				stream << "\t";
				if (SourceOfLensThicknessDataCodeSequence)
					stream << "\t\tSequence <SourceOfLensThicknessDataCodeSequence>\n";
				else
					stream << "\t\tSequence <SourceOfLensThicknessDataCodeSequence> not present\n";
				if (SourceOfLensThicknessDataCodeSequence && strcmp(SourceOfLensThicknessDataCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SourceOfLensThicknessDataCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
				stream << "\t";
				if (ReferencedSOPSequence)
					stream << "\t\tSequence <ReferencedSOPSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
				if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (AnteriorChamberDepthSequence)
		stream << "\t\tSequence <AnteriorChamberDepthSequence>\n";
	else
		stream << "\t\tSequence <AnteriorChamberDepthSequence> not present\n";
	if (AnteriorChamberDepthSequence && strcmp(AnteriorChamberDepthSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnteriorChamberDepthSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AnteriorChamberDepth = (*list)[TagFromName(AnteriorChamberDepth)];
				stream << "\t";
				if (AnteriorChamberDepth) {
					stream << "\t\t";
					AnteriorChamberDepth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AnteriorChamberDepth> not present\n";

	Attribute *SourceOfAnteriorChamberDepthDataCodeSequence = (*list)[TagFromName(SourceOfAnteriorChamberDepthDataCodeSequence)];
				stream << "\t";
				if (SourceOfAnteriorChamberDepthDataCodeSequence)
					stream << "\t\tSequence <SourceOfAnteriorChamberDepthDataCodeSequence>\n";
				else
					stream << "\t\tSequence <SourceOfAnteriorChamberDepthDataCodeSequence> not present\n";
				if (SourceOfAnteriorChamberDepthDataCodeSequence && strcmp(SourceOfAnteriorChamberDepthDataCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SourceOfAnteriorChamberDepthDataCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
				stream << "\t";
				if (ReferencedSOPSequence)
					stream << "\t\tSequence <ReferencedSOPSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
				if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (RefractiveStateSequence)
		stream << "\t\tSequence <RefractiveStateSequence>\n";
	else
		stream << "\t\tSequence <RefractiveStateSequence> not present\n";
	if (RefractiveStateSequence && strcmp(RefractiveStateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RefractiveStateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SphericalLensPower = (*list)[TagFromName(SphericalLensPower)];
				stream << "\t";
				if (SphericalLensPower) {
					stream << "\t\t";
					SphericalLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SphericalLensPower> not present\n";

				Attribute *CylinderLensPower = (*list)[TagFromName(CylinderLensPower)];
				stream << "\t";
				if (CylinderLensPower) {
					stream << "\t\t";
					CylinderLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderLensPower> not present\n";

				Attribute *CylinderAxis = (*list)[TagFromName(CylinderAxis)];
				stream << "\t";
				if (CylinderAxis) {
					stream << "\t\t";
					CylinderAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderAxis> not present\n";

	Attribute *SourceOfRefractiveMeasurementsSequence = (*list)[TagFromName(SourceOfRefractiveMeasurementsSequence)];
				stream << "\t";
				if (SourceOfRefractiveMeasurementsSequence)
					stream << "\t\tSequence <SourceOfRefractiveMeasurementsSequence>\n";
				else
					stream << "\t\tSequence <SourceOfRefractiveMeasurementsSequence> not present\n";
				if (SourceOfRefractiveMeasurementsSequence && strcmp(SourceOfRefractiveMeasurementsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SourceOfRefractiveMeasurementsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *SourceOfRefractiveMeasurementsCodeSequence = (*list)[TagFromName(SourceOfRefractiveMeasurementsCodeSequence)];
							stream << "\t\t";
							if (SourceOfRefractiveMeasurementsCodeSequence)
								stream << "\t\tSequence <SourceOfRefractiveMeasurementsCodeSequence>\n";
							else
								stream << "\t\tSequence <SourceOfRefractiveMeasurementsCodeSequence> not present\n";
							if (SourceOfRefractiveMeasurementsCodeSequence && strcmp(SourceOfRefractiveMeasurementsCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=SourceOfRefractiveMeasurementsCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
							stream << "\t\t";
							if (ReferencedSOPSequence)
								stream << "\t\tSequence <ReferencedSOPSequence>\n";
							else
								stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
							if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
				stream << "\t";
	Macro_KeratometryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <KeratometryMacro>\n";

	if (IOLFormulaCodeSequence)
		stream << "\t\tSequence <IOLFormulaCodeSequence>\n";
	else
		stream << "\t\tSequence <IOLFormulaCodeSequence> not present\n";
	if (IOLFormulaCodeSequence && strcmp(IOLFormulaCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IOLFormulaCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (IOLFormulaDetail) {
		stream << "\t\t";
		IOLFormulaDetail->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IOLFormulaDetail> not present\n";

				stream << "\t";
	Macro_IOLOphthalmicAxialLengthMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <IOLOphthalmicAxialLengthMacro>\n";

				stream << "\t";
	Macro_CalculatedIOLMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CalculatedIOLMacro>\n";

}

void
Macro_KeratometryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <KeratometryMacro>\n";

	if (SteepKeratometricAxisSequence)
		stream << "\t\tSequence <SteepKeratometricAxisSequence>\n";
	else
		stream << "\t\tSequence <SteepKeratometricAxisSequence> not present\n";
	if (SteepKeratometricAxisSequence && strcmp(SteepKeratometricAxisSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SteepKeratometricAxisSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RadiusOfCurvature = (*list)[TagFromName(RadiusOfCurvature)];
				stream << "\t";
				if (RadiusOfCurvature) {
					stream << "\t\t";
					RadiusOfCurvature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiusOfCurvature> not present\n";

				Attribute *KeratometricPower = (*list)[TagFromName(KeratometricPower)];
				stream << "\t";
				if (KeratometricPower) {
					stream << "\t\t";
					KeratometricPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricPower> not present\n";

				Attribute *KeratometricAxis = (*list)[TagFromName(KeratometricAxis)];
				stream << "\t";
				if (KeratometricAxis) {
					stream << "\t\t";
					KeratometricAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricAxis> not present\n";

			}
		}
	}
	if (FlatKeratometricAxisSequence)
		stream << "\t\tSequence <FlatKeratometricAxisSequence>\n";
	else
		stream << "\t\tSequence <FlatKeratometricAxisSequence> not present\n";
	if (FlatKeratometricAxisSequence && strcmp(FlatKeratometricAxisSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FlatKeratometricAxisSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RadiusOfCurvature = (*list)[TagFromName(RadiusOfCurvature)];
				stream << "\t";
				if (RadiusOfCurvature) {
					stream << "\t\t";
					RadiusOfCurvature->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiusOfCurvature> not present\n";

				Attribute *KeratometricPower = (*list)[TagFromName(KeratometricPower)];
				stream << "\t";
				if (KeratometricPower) {
					stream << "\t\t";
					KeratometricPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricPower> not present\n";

				Attribute *KeratometricAxis = (*list)[TagFromName(KeratometricAxis)];
				stream << "\t";
				if (KeratometricAxis) {
					stream << "\t\t";
					KeratometricAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KeratometricAxis> not present\n";

			}
		}
	}
	if (KeratometryMeasurementTypeCodeSequence)
		stream << "\t\tSequence <KeratometryMeasurementTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <KeratometryMeasurementTypeCodeSequence> not present\n";
	if (KeratometryMeasurementTypeCodeSequence && strcmp(KeratometryMeasurementTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=KeratometryMeasurementTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (KeratometerIndex) {
		stream << "\t\t";
		KeratometerIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KeratometerIndex> not present\n";

}

void
Macro_IOLOphthalmicAxialLengthMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IOLOphthalmicAxialLengthMacro>\n";

	if (OphthalmicAxialLengthSequence)
		stream << "\t\tSequence <OphthalmicAxialLengthSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicAxialLengthSequence> not present\n";
	if (OphthalmicAxialLengthSequence && strcmp(OphthalmicAxialLengthSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicAxialLengthSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *OphthalmicAxialLength = (*list)[TagFromName(OphthalmicAxialLength)];
				stream << "\t";
				if (OphthalmicAxialLength) {
					stream << "\t\t";
					OphthalmicAxialLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <OphthalmicAxialLength> not present\n";

	Attribute *OphthalmicAxialLengthSelectionMethodCodeSequence = (*list)[TagFromName(OphthalmicAxialLengthSelectionMethodCodeSequence)];
				stream << "\t";
				if (OphthalmicAxialLengthSelectionMethodCodeSequence)
					stream << "\t\tSequence <OphthalmicAxialLengthSelectionMethodCodeSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicAxialLengthSelectionMethodCodeSequence> not present\n";
				if (OphthalmicAxialLengthSelectionMethodCodeSequence && strcmp(OphthalmicAxialLengthSelectionMethodCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicAxialLengthSelectionMethodCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *SourceOfOphthalmicAxialLengthCodeSequence = (*list)[TagFromName(SourceOfOphthalmicAxialLengthCodeSequence)];
				stream << "\t";
				if (SourceOfOphthalmicAxialLengthCodeSequence)
					stream << "\t\tSequence <SourceOfOphthalmicAxialLengthCodeSequence>\n";
				else
					stream << "\t\tSequence <SourceOfOphthalmicAxialLengthCodeSequence> not present\n";
				if (SourceOfOphthalmicAxialLengthCodeSequence && strcmp(SourceOfOphthalmicAxialLengthCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SourceOfOphthalmicAxialLengthCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
				stream << "\t";
				if (ReferencedSOPSequence)
					stream << "\t\tSequence <ReferencedSOPSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
				if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *OphthalmicUltrasoundMethodCodeSequence = (*list)[TagFromName(OphthalmicUltrasoundMethodCodeSequence)];
				stream << "\t";
				if (OphthalmicUltrasoundMethodCodeSequence)
					stream << "\t\tSequence <OphthalmicUltrasoundMethodCodeSequence>\n";
				else
					stream << "\t\tSequence <OphthalmicUltrasoundMethodCodeSequence> not present\n";
				if (OphthalmicUltrasoundMethodCodeSequence && strcmp(OphthalmicUltrasoundMethodCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OphthalmicUltrasoundMethodCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_CalculatedIOLMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CalculatedIOLMacro>\n";

	if (IOLManufacturer) {
		stream << "\t\t";
		IOLManufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IOLManufacturer> not present\n";

	if (ImplantName) {
		stream << "\t\t";
		ImplantName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImplantName> not present\n";

	if (LensConstantSequence)
		stream << "\t\tSequence <LensConstantSequence>\n";
	else
		stream << "\t\tSequence <LensConstantSequence> not present\n";
	if (LensConstantSequence && strcmp(LensConstantSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=LensConstantSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
				stream << "\t";
				if (ConceptNameCodeSequence)
					stream << "\t\tSequence <ConceptNameCodeSequence>\n";
				else
					stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
				if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *NumericValue = (*list)[TagFromName(NumericValue)];
				stream << "\t";
				if (NumericValue) {
					stream << "\t\t";
					NumericValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumericValue> not present\n";

			}
		}
	}
	if (IOLPowerSequence)
		stream << "\t\tSequence <IOLPowerSequence>\n";
	else
		stream << "\t\tSequence <IOLPowerSequence> not present\n";
	if (IOLPowerSequence && strcmp(IOLPowerSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IOLPowerSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *IOLPower = (*list)[TagFromName(IOLPower)];
				stream << "\t";
				if (IOLPower) {
					stream << "\t\t";
					IOLPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IOLPower> not present\n";

				Attribute *PredictedRefractiveError = (*list)[TagFromName(PredictedRefractiveError)];
				stream << "\t";
				if (PredictedRefractiveError) {
					stream << "\t\t";
					PredictedRefractiveError->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PredictedRefractiveError> not present\n";

				Attribute *ImplantPartNumber = (*list)[TagFromName(ImplantPartNumber)];
				stream << "\t";
				if (ImplantPartNumber) {
					stream << "\t\t";
					ImplantPartNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImplantPartNumber> not present\n";

			}
		}
	}
	if (IOLPowerForExactEmmetropia) {
		stream << "\t\t";
		IOLPowerForExactEmmetropia->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IOLPowerForExactEmmetropia> not present\n";

	if (IOLPowerForExactTargetRefraction) {
		stream << "\t\t";
		IOLPowerForExactTargetRefraction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IOLPowerForExactTargetRefraction> not present\n";

}

void
Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro>\n";

	if (ReferencedSOPClassUID) {
		stream << "\t\t";
		ReferencedSOPClassUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedSOPClassUID> not present\n";

	if (ReferencedSOPInstanceUID) {
		stream << "\t\t";
		ReferencedSOPInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedSOPInstanceUID> not present\n";

	if (ReferencedFrameNumber) {
		stream << "\t\t";
		ReferencedFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFrameNumber> not present\n";

}

void
Module_VisualFieldStaticPerimetryMeasurementsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualFieldStaticPerimetryMeasurementsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (RequestAttributesSequence)
		stream << "\t\tSequence <RequestAttributesSequence>\n";
	else
		stream << "\t\tSequence <RequestAttributesSequence> not present\n";
	if (RequestAttributesSequence && strcmp(RequestAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RequestAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_RequestAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RequestAttributesMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_PerformedProcedureStepSummaryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PerformedProcedureStepSummaryMacro>\n";

}

void
Module_VisualFieldStaticPerimetryTestParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualFieldStaticPerimetryTestParameters>\n";

	if (VisualFieldHorizontalExtent) {
		stream << "\t\t";
		VisualFieldHorizontalExtent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualFieldHorizontalExtent> not present\n";

	if (VisualFieldVerticalExtent) {
		stream << "\t\t";
		VisualFieldVerticalExtent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualFieldVerticalExtent> not present\n";

	if (VisualFieldShape) {
		stream << "\t\t";
		VisualFieldShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualFieldShape> not present\n";

	if (ScreeningTestModeCodeSequence)
		stream << "\t\tSequence <ScreeningTestModeCodeSequence>\n";
	else
		stream << "\t\tSequence <ScreeningTestModeCodeSequence> not present\n";
	if (ScreeningTestModeCodeSequence && strcmp(ScreeningTestModeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ScreeningTestModeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (MaximumStimulusLuminance) {
		stream << "\t\t";
		MaximumStimulusLuminance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MaximumStimulusLuminance> not present\n";

	if (BackgroundLuminance) {
		stream << "\t\t";
		BackgroundLuminance->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BackgroundLuminance> not present\n";

	if (StimulusColorCodeSequence)
		stream << "\t\tSequence <StimulusColorCodeSequence>\n";
	else
		stream << "\t\tSequence <StimulusColorCodeSequence> not present\n";
	if (StimulusColorCodeSequence && strcmp(StimulusColorCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StimulusColorCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (BackgroundIlluminationColorCodeSequence)
		stream << "\t\tSequence <BackgroundIlluminationColorCodeSequence>\n";
	else
		stream << "\t\tSequence <BackgroundIlluminationColorCodeSequence> not present\n";
	if (BackgroundIlluminationColorCodeSequence && strcmp(BackgroundIlluminationColorCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BackgroundIlluminationColorCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (StimulusArea) {
		stream << "\t\t";
		StimulusArea->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StimulusArea> not present\n";

	if (StimulusPresentationTime) {
		stream << "\t\t";
		StimulusPresentationTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StimulusPresentationTime> not present\n";

}

void
Module_VisualFieldStaticPerimetryTestReliability::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualFieldStaticPerimetryTestReliability>\n";

	if (FixationSequence)
		stream << "\t\tSequence <FixationSequence>\n";
	else
		stream << "\t\tSequence <FixationSequence> not present\n";
	if (FixationSequence && strcmp(FixationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FixationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *FixationMonitoringCodeSequence = (*list)[TagFromName(FixationMonitoringCodeSequence)];
				stream << "\t";
				if (FixationMonitoringCodeSequence)
					stream << "\t\tSequence <FixationMonitoringCodeSequence>\n";
				else
					stream << "\t\tSequence <FixationMonitoringCodeSequence> not present\n";
				if (FixationMonitoringCodeSequence && strcmp(FixationMonitoringCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=FixationMonitoringCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *FixationCheckedQuantity = (*list)[TagFromName(FixationCheckedQuantity)];
				stream << "\t";
				if (FixationCheckedQuantity) {
					stream << "\t\t";
					FixationCheckedQuantity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FixationCheckedQuantity> not present\n";

				Attribute *PatientNotProperlyFixatedQuantity = (*list)[TagFromName(PatientNotProperlyFixatedQuantity)];
				stream << "\t";
				if (PatientNotProperlyFixatedQuantity) {
					stream << "\t\t";
					PatientNotProperlyFixatedQuantity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PatientNotProperlyFixatedQuantity> not present\n";

				Attribute *ExcessiveFixationLossesDataFlag = (*list)[TagFromName(ExcessiveFixationLossesDataFlag)];
				stream << "\t";
				if (ExcessiveFixationLossesDataFlag) {
					stream << "\t\t";
					ExcessiveFixationLossesDataFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExcessiveFixationLossesDataFlag> not present\n";

				Attribute *ExcessiveFixationLosses = (*list)[TagFromName(ExcessiveFixationLosses)];
				stream << "\t";
				if (ExcessiveFixationLosses) {
					stream << "\t\t";
					ExcessiveFixationLosses->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExcessiveFixationLosses> not present\n";

			}
		}
	}
	if (VisualFieldCatchTrialSequence)
		stream << "\t\tSequence <VisualFieldCatchTrialSequence>\n";
	else
		stream << "\t\tSequence <VisualFieldCatchTrialSequence> not present\n";
	if (VisualFieldCatchTrialSequence && strcmp(VisualFieldCatchTrialSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualFieldCatchTrialSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CatchTrialsDataFlag = (*list)[TagFromName(CatchTrialsDataFlag)];
				stream << "\t";
				if (CatchTrialsDataFlag) {
					stream << "\t\t";
					CatchTrialsDataFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CatchTrialsDataFlag> not present\n";

				Attribute *NegativeCatchTrialsQuantity = (*list)[TagFromName(NegativeCatchTrialsQuantity)];
				stream << "\t";
				if (NegativeCatchTrialsQuantity) {
					stream << "\t\t";
					NegativeCatchTrialsQuantity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NegativeCatchTrialsQuantity> not present\n";

				Attribute *FalseNegativesQuantity = (*list)[TagFromName(FalseNegativesQuantity)];
				stream << "\t";
				if (FalseNegativesQuantity) {
					stream << "\t\t";
					FalseNegativesQuantity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FalseNegativesQuantity> not present\n";

				Attribute *FalseNegativesEstimateFlag = (*list)[TagFromName(FalseNegativesEstimateFlag)];
				stream << "\t";
				if (FalseNegativesEstimateFlag) {
					stream << "\t\t";
					FalseNegativesEstimateFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FalseNegativesEstimateFlag> not present\n";

				Attribute *FalseNegativesEstimate = (*list)[TagFromName(FalseNegativesEstimate)];
				stream << "\t";
				if (FalseNegativesEstimate) {
					stream << "\t\t";
					FalseNegativesEstimate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FalseNegativesEstimate> not present\n";

				Attribute *ExcessiveFalseNegativesDataFlag = (*list)[TagFromName(ExcessiveFalseNegativesDataFlag)];
				stream << "\t";
				if (ExcessiveFalseNegativesDataFlag) {
					stream << "\t\t";
					ExcessiveFalseNegativesDataFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExcessiveFalseNegativesDataFlag> not present\n";

				Attribute *ExcessiveFalseNegatives = (*list)[TagFromName(ExcessiveFalseNegatives)];
				stream << "\t";
				if (ExcessiveFalseNegatives) {
					stream << "\t\t";
					ExcessiveFalseNegatives->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExcessiveFalseNegatives> not present\n";

				Attribute *PositiveCatchTrialsQuantity = (*list)[TagFromName(PositiveCatchTrialsQuantity)];
				stream << "\t";
				if (PositiveCatchTrialsQuantity) {
					stream << "\t\t";
					PositiveCatchTrialsQuantity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositiveCatchTrialsQuantity> not present\n";

				Attribute *FalsePositivesQuantity = (*list)[TagFromName(FalsePositivesQuantity)];
				stream << "\t";
				if (FalsePositivesQuantity) {
					stream << "\t\t";
					FalsePositivesQuantity->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FalsePositivesQuantity> not present\n";

				Attribute *FalsePositivesEstimateFlag = (*list)[TagFromName(FalsePositivesEstimateFlag)];
				stream << "\t";
				if (FalsePositivesEstimateFlag) {
					stream << "\t\t";
					FalsePositivesEstimateFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FalsePositivesEstimateFlag> not present\n";

				Attribute *FalsePositivesEstimate = (*list)[TagFromName(FalsePositivesEstimate)];
				stream << "\t";
				if (FalsePositivesEstimate) {
					stream << "\t\t";
					FalsePositivesEstimate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FalsePositivesEstimate> not present\n";

				Attribute *ExcessiveFalsePositivesDataFlag = (*list)[TagFromName(ExcessiveFalsePositivesDataFlag)];
				stream << "\t";
				if (ExcessiveFalsePositivesDataFlag) {
					stream << "\t\t";
					ExcessiveFalsePositivesDataFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExcessiveFalsePositivesDataFlag> not present\n";

				Attribute *ExcessiveFalsePositives = (*list)[TagFromName(ExcessiveFalsePositives)];
				stream << "\t";
				if (ExcessiveFalsePositives) {
					stream << "\t\t";
					ExcessiveFalsePositives->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExcessiveFalsePositives> not present\n";

			}
		}
	}
	if (StimuliRetestingQuantity) {
		stream << "\t\t";
		StimuliRetestingQuantity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StimuliRetestingQuantity> not present\n";

	if (PatientReliabilityIndicator) {
		stream << "\t\t";
		PatientReliabilityIndicator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientReliabilityIndicator> not present\n";

	if (CommentsOnPatientPerformanceOfVisualField) {
		stream << "\t\t";
		CommentsOnPatientPerformanceOfVisualField->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CommentsOnPatientPerformanceOfVisualField> not present\n";

	if (VisualFieldTestReliabilityGlobalIndexSequence)
		stream << "\t\tSequence <VisualFieldTestReliabilityGlobalIndexSequence>\n";
	else
		stream << "\t\tSequence <VisualFieldTestReliabilityGlobalIndexSequence> not present\n";
	if (VisualFieldTestReliabilityGlobalIndexSequence && strcmp(VisualFieldTestReliabilityGlobalIndexSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualFieldTestReliabilityGlobalIndexSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_OphthalmicVisualFieldGlobalIndexMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicVisualFieldGlobalIndexMacro>\n";

			}
		}
	}
}

void
Macro_OphthalmicVisualFieldGlobalIndexMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicVisualFieldGlobalIndexMacro>\n";

	if (DataObservationSequence)
		stream << "\t\tSequence <DataObservationSequence>\n";
	else
		stream << "\t\tSequence <DataObservationSequence> not present\n";
	if (DataObservationSequence && strcmp(DataObservationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DataObservationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

			}
		}
	}
	if (IndexNormalsFlag) {
		stream << "\t\t";
		IndexNormalsFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IndexNormalsFlag> not present\n";

	if (IndexProbabilitySequence)
		stream << "\t\tSequence <IndexProbabilitySequence>\n";
	else
		stream << "\t\tSequence <IndexProbabilitySequence> not present\n";
	if (IndexProbabilitySequence && strcmp(IndexProbabilitySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IndexProbabilitySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *IndexProbability = (*list)[TagFromName(IndexProbability)];
				stream << "\t";
				if (IndexProbability) {
					stream << "\t\t";
					IndexProbability->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IndexProbability> not present\n";

							stream << "\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

			}
		}
	}
}

void
Module_VisualFieldStaticPerimetryTestMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualFieldStaticPerimetryTestMeasurements>\n";

	if (MeasurementLaterality) {
		stream << "\t\t";
		MeasurementLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MeasurementLaterality> not present\n";

	if (PresentedVisualStimuliDataFlag) {
		stream << "\t\t";
		PresentedVisualStimuliDataFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentedVisualStimuliDataFlag> not present\n";

	if (NumberOfVisualStimuli) {
		stream << "\t\t";
		NumberOfVisualStimuli->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfVisualStimuli> not present\n";

	if (VisualFieldTestDuration) {
		stream << "\t\t";
		VisualFieldTestDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualFieldTestDuration> not present\n";

	if (FovealSensitivityMeasured) {
		stream << "\t\t";
		FovealSensitivityMeasured->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FovealSensitivityMeasured> not present\n";

	if (FovealSensitivity) {
		stream << "\t\t";
		FovealSensitivity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FovealSensitivity> not present\n";

	if (FovealPointNormativeDataFlag) {
		stream << "\t\t";
		FovealPointNormativeDataFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FovealPointNormativeDataFlag> not present\n";

	if (FovealPointProbabilityValue) {
		stream << "\t\t";
		FovealPointProbabilityValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FovealPointProbabilityValue> not present\n";

	if (ScreeningBaselineMeasured) {
		stream << "\t\t";
		ScreeningBaselineMeasured->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScreeningBaselineMeasured> not present\n";

	if (ScreeningBaselineMeasuredSequence)
		stream << "\t\tSequence <ScreeningBaselineMeasuredSequence>\n";
	else
		stream << "\t\tSequence <ScreeningBaselineMeasuredSequence> not present\n";
	if (ScreeningBaselineMeasuredSequence && strcmp(ScreeningBaselineMeasuredSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ScreeningBaselineMeasuredSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ScreeningBaselineType = (*list)[TagFromName(ScreeningBaselineType)];
				stream << "\t";
				if (ScreeningBaselineType) {
					stream << "\t\t";
					ScreeningBaselineType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ScreeningBaselineType> not present\n";

				Attribute *ScreeningBaselineValue = (*list)[TagFromName(ScreeningBaselineValue)];
				stream << "\t";
				if (ScreeningBaselineValue) {
					stream << "\t\t";
					ScreeningBaselineValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ScreeningBaselineValue> not present\n";

			}
		}
	}
	if (BlindSpotLocalized) {
		stream << "\t\t";
		BlindSpotLocalized->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BlindSpotLocalized> not present\n";

	if (BlindSpotXCoordinate) {
		stream << "\t\t";
		BlindSpotXCoordinate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BlindSpotXCoordinate> not present\n";

	if (BlindSpotYCoordinate) {
		stream << "\t\t";
		BlindSpotYCoordinate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BlindSpotYCoordinate> not present\n";

	if (MinimumSensitivityValue) {
		stream << "\t\t";
		MinimumSensitivityValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MinimumSensitivityValue> not present\n";

	if (TestPointNormalsDataFlag) {
		stream << "\t\t";
		TestPointNormalsDataFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TestPointNormalsDataFlag> not present\n";

	if (TestPointNormalsSequence)
		stream << "\t\tSequence <TestPointNormalsSequence>\n";
	else
		stream << "\t\tSequence <TestPointNormalsSequence> not present\n";
	if (TestPointNormalsSequence && strcmp(TestPointNormalsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TestPointNormalsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_DataSetIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DataSetIdentificationMacro>\n";

			}
		}
	}
	if (AgeCorrectedSensitivityDeviationAlgorithmSequence)
		stream << "\t\tSequence <AgeCorrectedSensitivityDeviationAlgorithmSequence>\n";
	else
		stream << "\t\tSequence <AgeCorrectedSensitivityDeviationAlgorithmSequence> not present\n";
	if (AgeCorrectedSensitivityDeviationAlgorithmSequence && strcmp(AgeCorrectedSensitivityDeviationAlgorithmSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AgeCorrectedSensitivityDeviationAlgorithmSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

			}
		}
	}
	if (GeneralizedDefectSensitivityDeviationAlgorithmSequence)
		stream << "\t\tSequence <GeneralizedDefectSensitivityDeviationAlgorithmSequence>\n";
	else
		stream << "\t\tSequence <GeneralizedDefectSensitivityDeviationAlgorithmSequence> not present\n";
	if (GeneralizedDefectSensitivityDeviationAlgorithmSequence && strcmp(GeneralizedDefectSensitivityDeviationAlgorithmSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=GeneralizedDefectSensitivityDeviationAlgorithmSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

			}
		}
	}
	if (VisualFieldTestPointSequence)
		stream << "\t\tSequence <VisualFieldTestPointSequence>\n";
	else
		stream << "\t\tSequence <VisualFieldTestPointSequence> not present\n";
	if (VisualFieldTestPointSequence && strcmp(VisualFieldTestPointSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualFieldTestPointSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *VisualFieldTestPointXCoordinate = (*list)[TagFromName(VisualFieldTestPointXCoordinate)];
				stream << "\t";
				if (VisualFieldTestPointXCoordinate) {
					stream << "\t\t";
					VisualFieldTestPointXCoordinate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VisualFieldTestPointXCoordinate> not present\n";

				Attribute *VisualFieldTestPointYCoordinate = (*list)[TagFromName(VisualFieldTestPointYCoordinate)];
				stream << "\t";
				if (VisualFieldTestPointYCoordinate) {
					stream << "\t\t";
					VisualFieldTestPointYCoordinate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VisualFieldTestPointYCoordinate> not present\n";

				Attribute *StimulusResults = (*list)[TagFromName(StimulusResults)];
				stream << "\t";
				if (StimulusResults) {
					stream << "\t\t";
					StimulusResults->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StimulusResults> not present\n";

				Attribute *SensitivityValue = (*list)[TagFromName(SensitivityValue)];
				stream << "\t";
				if (SensitivityValue) {
					stream << "\t\t";
					SensitivityValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SensitivityValue> not present\n";

				Attribute *RetestStimulusSeen = (*list)[TagFromName(RetestStimulusSeen)];
				stream << "\t";
				if (RetestStimulusSeen) {
					stream << "\t\t";
					RetestStimulusSeen->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RetestStimulusSeen> not present\n";

				Attribute *RetestSensitivityValue = (*list)[TagFromName(RetestSensitivityValue)];
				stream << "\t";
				if (RetestSensitivityValue) {
					stream << "\t\t";
					RetestSensitivityValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RetestSensitivityValue> not present\n";

				Attribute *QuantifiedDefect = (*list)[TagFromName(QuantifiedDefect)];
				stream << "\t";
				if (QuantifiedDefect) {
					stream << "\t\t";
					QuantifiedDefect->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <QuantifiedDefect> not present\n";

	Attribute *VisualFieldTestPointNormalsSequence = (*list)[TagFromName(VisualFieldTestPointNormalsSequence)];
				stream << "\t";
				if (VisualFieldTestPointNormalsSequence)
					stream << "\t\tSequence <VisualFieldTestPointNormalsSequence>\n";
				else
					stream << "\t\tSequence <VisualFieldTestPointNormalsSequence> not present\n";
				if (VisualFieldTestPointNormalsSequence && strcmp(VisualFieldTestPointNormalsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=VisualFieldTestPointNormalsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *AgeCorrectedSensitivityDeviationValue = (*list)[TagFromName(AgeCorrectedSensitivityDeviationValue)];
							stream << "\t\t";
							if (AgeCorrectedSensitivityDeviationValue) {
								stream << "\t\t";
								AgeCorrectedSensitivityDeviationValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AgeCorrectedSensitivityDeviationValue> not present\n";

							Attribute *AgeCorrectedSensitivityDeviationProbabilityValue = (*list)[TagFromName(AgeCorrectedSensitivityDeviationProbabilityValue)];
							stream << "\t\t";
							if (AgeCorrectedSensitivityDeviationProbabilityValue) {
								stream << "\t\t";
								AgeCorrectedSensitivityDeviationProbabilityValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AgeCorrectedSensitivityDeviationProbabilityValue> not present\n";

							Attribute *GeneralizedDefectCorrectedSensitivityDeviationFlag = (*list)[TagFromName(GeneralizedDefectCorrectedSensitivityDeviationFlag)];
							stream << "\t\t";
							if (GeneralizedDefectCorrectedSensitivityDeviationFlag) {
								stream << "\t\t";
								GeneralizedDefectCorrectedSensitivityDeviationFlag->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralizedDefectCorrectedSensitivityDeviationFlag> not present\n";

							Attribute *GeneralizedDefectCorrectedSensitivityDeviationValue = (*list)[TagFromName(GeneralizedDefectCorrectedSensitivityDeviationValue)];
							stream << "\t\t";
							if (GeneralizedDefectCorrectedSensitivityDeviationValue) {
								stream << "\t\t";
								GeneralizedDefectCorrectedSensitivityDeviationValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralizedDefectCorrectedSensitivityDeviationValue> not present\n";

							Attribute *GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue = (*list)[TagFromName(GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue)];
							stream << "\t\t";
							if (GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue) {
								stream << "\t\t";
								GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_VisualFieldStaticPerimetryTestResults::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <VisualFieldStaticPerimetryTestResults>\n";

	if (VisualFieldMeanSensitivity) {
		stream << "\t\t";
		VisualFieldMeanSensitivity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualFieldMeanSensitivity> not present\n";

	if (VisualFieldTestNormalsFlag) {
		stream << "\t\t";
		VisualFieldTestNormalsFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VisualFieldTestNormalsFlag> not present\n";

	if (ResultsNormalsSequence)
		stream << "\t\tSequence <ResultsNormalsSequence>\n";
	else
		stream << "\t\tSequence <ResultsNormalsSequence> not present\n";
	if (ResultsNormalsSequence && strcmp(ResultsNormalsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ResultsNormalsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_DataSetIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DataSetIdentificationMacro>\n";

				Attribute *GlobalDeviationFromNormal = (*list)[TagFromName(GlobalDeviationFromNormal)];
				stream << "\t";
				if (GlobalDeviationFromNormal) {
					stream << "\t\t";
					GlobalDeviationFromNormal->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GlobalDeviationFromNormal> not present\n";

				Attribute *GlobalDeviationProbabilityNormalsFlag = (*list)[TagFromName(GlobalDeviationProbabilityNormalsFlag)];
				stream << "\t";
				if (GlobalDeviationProbabilityNormalsFlag) {
					stream << "\t\t";
					GlobalDeviationProbabilityNormalsFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GlobalDeviationProbabilityNormalsFlag> not present\n";

	Attribute *GlobalDeviationProbabilitySequence = (*list)[TagFromName(GlobalDeviationProbabilitySequence)];
				stream << "\t";
				if (GlobalDeviationProbabilitySequence)
					stream << "\t\tSequence <GlobalDeviationProbabilitySequence>\n";
				else
					stream << "\t\tSequence <GlobalDeviationProbabilitySequence> not present\n";
				if (GlobalDeviationProbabilitySequence && strcmp(GlobalDeviationProbabilitySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=GlobalDeviationProbabilitySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *GlobalDeviationProbability = (*list)[TagFromName(GlobalDeviationProbability)];
							stream << "\t\t";
							if (GlobalDeviationProbability) {
								stream << "\t\t";
								GlobalDeviationProbability->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GlobalDeviationProbability> not present\n";

										stream << "\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

						}
					}
				}
				Attribute *LocalizedDeviationFromNormal = (*list)[TagFromName(LocalizedDeviationFromNormal)];
				stream << "\t";
				if (LocalizedDeviationFromNormal) {
					stream << "\t\t";
					LocalizedDeviationFromNormal->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LocalizedDeviationFromNormal> not present\n";

				Attribute *LocalDeviationProbabilityNormalsFlag = (*list)[TagFromName(LocalDeviationProbabilityNormalsFlag)];
				stream << "\t";
				if (LocalDeviationProbabilityNormalsFlag) {
					stream << "\t\t";
					LocalDeviationProbabilityNormalsFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LocalDeviationProbabilityNormalsFlag> not present\n";

	Attribute *LocalizedDeviationProbabilitySequence = (*list)[TagFromName(LocalizedDeviationProbabilitySequence)];
				stream << "\t";
				if (LocalizedDeviationProbabilitySequence)
					stream << "\t\tSequence <LocalizedDeviationProbabilitySequence>\n";
				else
					stream << "\t\tSequence <LocalizedDeviationProbabilitySequence> not present\n";
				if (LocalizedDeviationProbabilitySequence && strcmp(LocalizedDeviationProbabilitySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=LocalizedDeviationProbabilitySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *LocalizedDeviationProbability = (*list)[TagFromName(LocalizedDeviationProbability)];
							stream << "\t\t";
							if (LocalizedDeviationProbability) {
								stream << "\t\t";
								LocalizedDeviationProbability->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <LocalizedDeviationProbability> not present\n";

										stream << "\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ShortTermFluctuationCalculated) {
		stream << "\t\t";
		ShortTermFluctuationCalculated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShortTermFluctuationCalculated> not present\n";

	if (ShortTermFluctuation) {
		stream << "\t\t";
		ShortTermFluctuation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShortTermFluctuation> not present\n";

	if (ShortTermFluctuationProbabilityCalculated) {
		stream << "\t\t";
		ShortTermFluctuationProbabilityCalculated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShortTermFluctuationProbabilityCalculated> not present\n";

	if (ShortTermFluctuationProbability) {
		stream << "\t\t";
		ShortTermFluctuationProbability->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShortTermFluctuationProbability> not present\n";

	if (CorrectedLocalizedDeviationFromNormalCalculated) {
		stream << "\t\t";
		CorrectedLocalizedDeviationFromNormalCalculated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CorrectedLocalizedDeviationFromNormalCalculated> not present\n";

	if (CorrectedLocalizedDeviationFromNormal) {
		stream << "\t\t";
		CorrectedLocalizedDeviationFromNormal->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CorrectedLocalizedDeviationFromNormal> not present\n";

	if (CorrectedLocalizedDeviationFromNormalProbabilityCalculated) {
		stream << "\t\t";
		CorrectedLocalizedDeviationFromNormalProbabilityCalculated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CorrectedLocalizedDeviationFromNormalProbabilityCalculated> not present\n";

	if (CorrectedLocalizedDeviationFromNormalProbability) {
		stream << "\t\t";
		CorrectedLocalizedDeviationFromNormalProbability->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CorrectedLocalizedDeviationFromNormalProbability> not present\n";

	if (VisualFieldGlobalResultsIndexSequence)
		stream << "\t\tSequence <VisualFieldGlobalResultsIndexSequence>\n";
	else
		stream << "\t\tSequence <VisualFieldGlobalResultsIndexSequence> not present\n";
	if (VisualFieldGlobalResultsIndexSequence && strcmp(VisualFieldGlobalResultsIndexSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualFieldGlobalResultsIndexSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_OphthalmicVisualFieldGlobalIndexMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicVisualFieldGlobalIndexMacro>\n";

			}
		}
	}
}

void
Module_OphthalmicPatientClinicalInformationandTestLensParameters::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OphthalmicPatientClinicalInformationandTestLensParameters>\n";

	if (OphthalmicPatientClinicalInformationLeftEyeSequence)
		stream << "\t\tSequence <OphthalmicPatientClinicalInformationLeftEyeSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicPatientClinicalInformationLeftEyeSequence> not present\n";
	if (OphthalmicPatientClinicalInformationLeftEyeSequence && strcmp(OphthalmicPatientClinicalInformationLeftEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicPatientClinicalInformationLeftEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicPatientClinicalInformationandTestLensParametersMacro>\n";

			}
		}
	}
	if (OphthalmicPatientClinicalInformationRightEyeSequence)
		stream << "\t\tSequence <OphthalmicPatientClinicalInformationRightEyeSequence>\n";
	else
		stream << "\t\tSequence <OphthalmicPatientClinicalInformationRightEyeSequence> not present\n";
	if (OphthalmicPatientClinicalInformationRightEyeSequence && strcmp(OphthalmicPatientClinicalInformationRightEyeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=OphthalmicPatientClinicalInformationRightEyeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <OphthalmicPatientClinicalInformationandTestLensParametersMacro>\n";

			}
		}
	}
}

void
Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <OphthalmicPatientClinicalInformationandTestLensParametersMacro>\n";

	if (RefractiveParametersUsedOnPatientSequence)
		stream << "\t\tSequence <RefractiveParametersUsedOnPatientSequence>\n";
	else
		stream << "\t\tSequence <RefractiveParametersUsedOnPatientSequence> not present\n";
	if (RefractiveParametersUsedOnPatientSequence && strcmp(RefractiveParametersUsedOnPatientSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RefractiveParametersUsedOnPatientSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SphericalLensPower = (*list)[TagFromName(SphericalLensPower)];
				stream << "\t";
				if (SphericalLensPower) {
					stream << "\t\t";
					SphericalLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SphericalLensPower> not present\n";

				Attribute *CylinderLensPower = (*list)[TagFromName(CylinderLensPower)];
				stream << "\t";
				if (CylinderLensPower) {
					stream << "\t\t";
					CylinderLensPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderLensPower> not present\n";

				Attribute *CylinderAxis = (*list)[TagFromName(CylinderAxis)];
				stream << "\t";
				if (CylinderAxis) {
					stream << "\t\t";
					CylinderAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CylinderAxis> not present\n";

			}
		}
	}
	if (PupilSize) {
		stream << "\t\t";
		PupilSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PupilSize> not present\n";

	if (PupilDilated) {
		stream << "\t\t";
		PupilDilated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PupilDilated> not present\n";

	if (IntraOcularPressure) {
		stream << "\t\t";
		IntraOcularPressure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntraOcularPressure> not present\n";

	if (VisualAcuityMeasurementSequence)
		stream << "\t\tSequence <VisualAcuityMeasurementSequence>\n";
	else
		stream << "\t\tSequence <VisualAcuityMeasurementSequence> not present\n";
	if (VisualAcuityMeasurementSequence && strcmp(VisualAcuityMeasurementSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VisualAcuityMeasurementSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_VisualAcuityMeasurementsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VisualAcuityMeasurementsMacro>\n";

			}
		}
	}
}

void
Module_Synchronization::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Synchronization>\n";

	if (SynchronizationFrameOfReferenceUID) {
		stream << "\t\t";
		SynchronizationFrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SynchronizationFrameOfReferenceUID> not present\n";

	if (SynchronizationTrigger) {
		stream << "\t\t";
		SynchronizationTrigger->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SynchronizationTrigger> not present\n";

	if (TriggerSourceOrType) {
		stream << "\t\t";
		TriggerSourceOrType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TriggerSourceOrType> not present\n";

	if (SynchronizationChannel) {
		stream << "\t\t";
		SynchronizationChannel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SynchronizationChannel> not present\n";

	if (AcquisitionTimeSynchronized) {
		stream << "\t\t";
		AcquisitionTimeSynchronized->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTimeSynchronized> not present\n";

	if (TimeSource) {
		stream << "\t\t";
		TimeSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeSource> not present\n";

	if (TimeDistributionProtocol) {
		stream << "\t\t";
		TimeDistributionProtocol->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeDistributionProtocol> not present\n";

	if (NTPSourceAddress) {
		stream << "\t\t";
		NTPSourceAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NTPSourceAddress> not present\n";

}

void
Module_WaveformIdentification::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <WaveformIdentification>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_Waveform::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Waveform>\n";

	if (WaveformSequence)
		stream << "\t\tSequence <WaveformSequence>\n";
	else
		stream << "\t\tSequence <WaveformSequence> not present\n";
	if (WaveformSequence && strcmp(WaveformSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=WaveformSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MultiplexGroupTimeOffset = (*list)[TagFromName(MultiplexGroupTimeOffset)];
				stream << "\t";
				if (MultiplexGroupTimeOffset) {
					stream << "\t\t";
					MultiplexGroupTimeOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultiplexGroupTimeOffset> not present\n";

				Attribute *TriggerTimeOffset = (*list)[TagFromName(TriggerTimeOffset)];
				stream << "\t";
				if (TriggerTimeOffset) {
					stream << "\t\t";
					TriggerTimeOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TriggerTimeOffset> not present\n";

				Attribute *TriggerSamplePosition = (*list)[TagFromName(TriggerSamplePosition)];
				stream << "\t";
				if (TriggerSamplePosition) {
					stream << "\t\t";
					TriggerSamplePosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TriggerSamplePosition> not present\n";

				Attribute *WaveformOriginality = (*list)[TagFromName(WaveformOriginality)];
				stream << "\t";
				if (WaveformOriginality) {
					stream << "\t\t";
					WaveformOriginality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformOriginality> not present\n";

				Attribute *NumberOfWaveformChannels = (*list)[TagFromName(NumberOfWaveformChannels)];
				stream << "\t";
				if (NumberOfWaveformChannels) {
					stream << "\t\t";
					NumberOfWaveformChannels->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfWaveformChannels> not present\n";

				Attribute *NumberOfWaveformSamples = (*list)[TagFromName(NumberOfWaveformSamples)];
				stream << "\t";
				if (NumberOfWaveformSamples) {
					stream << "\t\t";
					NumberOfWaveformSamples->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfWaveformSamples> not present\n";

				Attribute *SamplingFrequency = (*list)[TagFromName(SamplingFrequency)];
				stream << "\t";
				if (SamplingFrequency) {
					stream << "\t\t";
					SamplingFrequency->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SamplingFrequency> not present\n";

				Attribute *MultiplexGroupLabel = (*list)[TagFromName(MultiplexGroupLabel)];
				stream << "\t";
				if (MultiplexGroupLabel) {
					stream << "\t\t";
					MultiplexGroupLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultiplexGroupLabel> not present\n";

	Attribute *ChannelDefinitionSequence = (*list)[TagFromName(ChannelDefinitionSequence)];
				stream << "\t";
				if (ChannelDefinitionSequence)
					stream << "\t\tSequence <ChannelDefinitionSequence>\n";
				else
					stream << "\t\tSequence <ChannelDefinitionSequence> not present\n";
				if (ChannelDefinitionSequence && strcmp(ChannelDefinitionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ChannelDefinitionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *WaveformChannelNumber = (*list)[TagFromName(WaveformChannelNumber)];
							stream << "\t\t";
							if (WaveformChannelNumber) {
								stream << "\t\t";
								WaveformChannelNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WaveformChannelNumber> not present\n";

							Attribute *ChannelLabel = (*list)[TagFromName(ChannelLabel)];
							stream << "\t\t";
							if (ChannelLabel) {
								stream << "\t\t";
								ChannelLabel->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelLabel> not present\n";

							Attribute *ChannelStatus = (*list)[TagFromName(ChannelStatus)];
							stream << "\t\t";
							if (ChannelStatus) {
								stream << "\t\t";
								ChannelStatus->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelStatus> not present\n";

	Attribute *ChannelSourceSequence = (*list)[TagFromName(ChannelSourceSequence)];
							stream << "\t\t";
							if (ChannelSourceSequence)
								stream << "\t\tSequence <ChannelSourceSequence>\n";
							else
								stream << "\t\tSequence <ChannelSourceSequence> not present\n";
							if (ChannelSourceSequence && strcmp(ChannelSourceSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ChannelSourceSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *ChannelSourceModifiersSequence = (*list)[TagFromName(ChannelSourceModifiersSequence)];
							stream << "\t\t";
							if (ChannelSourceModifiersSequence)
								stream << "\t\tSequence <ChannelSourceModifiersSequence>\n";
							else
								stream << "\t\tSequence <ChannelSourceModifiersSequence> not present\n";
							if (ChannelSourceModifiersSequence && strcmp(ChannelSourceModifiersSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ChannelSourceModifiersSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *SourceWaveformSequence = (*list)[TagFromName(SourceWaveformSequence)];
							stream << "\t\t";
							if (SourceWaveformSequence)
								stream << "\t\tSequence <SourceWaveformSequence>\n";
							else
								stream << "\t\tSequence <SourceWaveformSequence> not present\n";
							if (SourceWaveformSequence && strcmp(SourceWaveformSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=SourceWaveformSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

										Attribute *ReferencedWaveformChannels = (*list)[TagFromName(ReferencedWaveformChannels)];
										stream << "\t\t\t";
										if (ReferencedWaveformChannels) {
											stream << "\t\t";
											ReferencedWaveformChannels->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedWaveformChannels> not present\n";

									}
								}
							}
							Attribute *ChannelDerivationDescription = (*list)[TagFromName(ChannelDerivationDescription)];
							stream << "\t\t";
							if (ChannelDerivationDescription) {
								stream << "\t\t";
								ChannelDerivationDescription->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelDerivationDescription> not present\n";

							Attribute *ChannelSensitivity = (*list)[TagFromName(ChannelSensitivity)];
							stream << "\t\t";
							if (ChannelSensitivity) {
								stream << "\t\t";
								ChannelSensitivity->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelSensitivity> not present\n";

	Attribute *ChannelSensitivityUnitsSequence = (*list)[TagFromName(ChannelSensitivityUnitsSequence)];
							stream << "\t\t";
							if (ChannelSensitivityUnitsSequence)
								stream << "\t\tSequence <ChannelSensitivityUnitsSequence>\n";
							else
								stream << "\t\tSequence <ChannelSensitivityUnitsSequence> not present\n";
							if (ChannelSensitivityUnitsSequence && strcmp(ChannelSensitivityUnitsSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ChannelSensitivityUnitsSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
							Attribute *ChannelSensitivityCorrectionFactor = (*list)[TagFromName(ChannelSensitivityCorrectionFactor)];
							stream << "\t\t";
							if (ChannelSensitivityCorrectionFactor) {
								stream << "\t\t";
								ChannelSensitivityCorrectionFactor->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelSensitivityCorrectionFactor> not present\n";

							Attribute *ChannelBaseline = (*list)[TagFromName(ChannelBaseline)];
							stream << "\t\t";
							if (ChannelBaseline) {
								stream << "\t\t";
								ChannelBaseline->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelBaseline> not present\n";

							Attribute *ChannelTimeSkew = (*list)[TagFromName(ChannelTimeSkew)];
							stream << "\t\t";
							if (ChannelTimeSkew) {
								stream << "\t\t";
								ChannelTimeSkew->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelTimeSkew> not present\n";

							Attribute *ChannelSampleSkew = (*list)[TagFromName(ChannelSampleSkew)];
							stream << "\t\t";
							if (ChannelSampleSkew) {
								stream << "\t\t";
								ChannelSampleSkew->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelSampleSkew> not present\n";

							Attribute *ChannelOffset = (*list)[TagFromName(ChannelOffset)];
							stream << "\t\t";
							if (ChannelOffset) {
								stream << "\t\t";
								ChannelOffset->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelOffset> not present\n";

							Attribute *WaveformBitsStored = (*list)[TagFromName(WaveformBitsStored)];
							stream << "\t\t";
							if (WaveformBitsStored) {
								stream << "\t\t";
								WaveformBitsStored->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <WaveformBitsStored> not present\n";

							Attribute *FilterLowFrequency = (*list)[TagFromName(FilterLowFrequency)];
							stream << "\t\t";
							if (FilterLowFrequency) {
								stream << "\t\t";
								FilterLowFrequency->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FilterLowFrequency> not present\n";

							Attribute *FilterHighFrequency = (*list)[TagFromName(FilterHighFrequency)];
							stream << "\t\t";
							if (FilterHighFrequency) {
								stream << "\t\t";
								FilterHighFrequency->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FilterHighFrequency> not present\n";

							Attribute *NotchFilterFrequency = (*list)[TagFromName(NotchFilterFrequency)];
							stream << "\t\t";
							if (NotchFilterFrequency) {
								stream << "\t\t";
								NotchFilterFrequency->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NotchFilterFrequency> not present\n";

							Attribute *NotchFilterBandwidth = (*list)[TagFromName(NotchFilterBandwidth)];
							stream << "\t\t";
							if (NotchFilterBandwidth) {
								stream << "\t\t";
								NotchFilterBandwidth->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NotchFilterBandwidth> not present\n";

							Attribute *ChannelMinimumValue = (*list)[TagFromName(ChannelMinimumValue)];
							stream << "\t\t";
							if (ChannelMinimumValue) {
								stream << "\t\t";
								ChannelMinimumValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelMinimumValue> not present\n";

							Attribute *ChannelMaximumValue = (*list)[TagFromName(ChannelMaximumValue)];
							stream << "\t\t";
							if (ChannelMaximumValue) {
								stream << "\t\t";
								ChannelMaximumValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChannelMaximumValue> not present\n";

						}
					}
				}
				Attribute *WaveformBitsAllocated = (*list)[TagFromName(WaveformBitsAllocated)];
				stream << "\t";
				if (WaveformBitsAllocated) {
					stream << "\t\t";
					WaveformBitsAllocated->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformBitsAllocated> not present\n";

				Attribute *WaveformSampleInterpretation = (*list)[TagFromName(WaveformSampleInterpretation)];
				stream << "\t";
				if (WaveformSampleInterpretation) {
					stream << "\t\t";
					WaveformSampleInterpretation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformSampleInterpretation> not present\n";

				Attribute *WaveformPaddingValue = (*list)[TagFromName(WaveformPaddingValue)];
				stream << "\t";
				if (WaveformPaddingValue) {
					stream << "\t\t";
					WaveformPaddingValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformPaddingValue> not present\n";

				Attribute *WaveformData = (*list)[TagFromName(WaveformData)];
				stream << "\t";
				if (WaveformData) {
					stream << "\t\t";
					WaveformData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformData> not present\n";

				Attribute *WaveformDataDisplayScale = (*list)[TagFromName(WaveformDataDisplayScale)];
				stream << "\t";
				if (WaveformDataDisplayScale) {
					stream << "\t\t";
					WaveformDataDisplayScale->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformDataDisplayScale> not present\n";

				Attribute *WaveformDisplayBackgroundCIELabValue = (*list)[TagFromName(WaveformDisplayBackgroundCIELabValue)];
				stream << "\t";
				if (WaveformDisplayBackgroundCIELabValue) {
					stream << "\t\t";
					WaveformDisplayBackgroundCIELabValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaveformDisplayBackgroundCIELabValue> not present\n";

	Attribute *WaveformPresentationGroupSequence = (*list)[TagFromName(WaveformPresentationGroupSequence)];
				stream << "\t";
				if (WaveformPresentationGroupSequence)
					stream << "\t\tSequence <WaveformPresentationGroupSequence>\n";
				else
					stream << "\t\tSequence <WaveformPresentationGroupSequence> not present\n";
				if (WaveformPresentationGroupSequence && strcmp(WaveformPresentationGroupSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=WaveformPresentationGroupSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *PresentationGroupNumber = (*list)[TagFromName(PresentationGroupNumber)];
							stream << "\t\t";
							if (PresentationGroupNumber) {
								stream << "\t\t";
								PresentationGroupNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PresentationGroupNumber> not present\n";

	Attribute *ChannelDisplaySequence = (*list)[TagFromName(ChannelDisplaySequence)];
							stream << "\t\t";
							if (ChannelDisplaySequence)
								stream << "\t\tSequence <ChannelDisplaySequence>\n";
							else
								stream << "\t\tSequence <ChannelDisplaySequence> not present\n";
							if (ChannelDisplaySequence && strcmp(ChannelDisplaySequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ChannelDisplaySequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *ReferencedWaveformChannels = (*list)[TagFromName(ReferencedWaveformChannels)];
										stream << "\t\t\t";
										if (ReferencedWaveformChannels) {
											stream << "\t\t";
											ReferencedWaveformChannels->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ReferencedWaveformChannels> not present\n";

										Attribute *ChannelOffset = (*list)[TagFromName(ChannelOffset)];
										stream << "\t\t\t";
										if (ChannelOffset) {
											stream << "\t\t";
											ChannelOffset->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelOffset> not present\n";

										Attribute *ChannelRecommendedDisplayCIELabValue = (*list)[TagFromName(ChannelRecommendedDisplayCIELabValue)];
										stream << "\t\t\t";
										if (ChannelRecommendedDisplayCIELabValue) {
											stream << "\t\t";
											ChannelRecommendedDisplayCIELabValue->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelRecommendedDisplayCIELabValue> not present\n";

										Attribute *ChannelPosition = (*list)[TagFromName(ChannelPosition)];
										stream << "\t\t\t";
										if (ChannelPosition) {
											stream << "\t\t";
											ChannelPosition->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <ChannelPosition> not present\n";

										Attribute *DisplayShadingFlag = (*list)[TagFromName(DisplayShadingFlag)];
										stream << "\t\t\t";
										if (DisplayShadingFlag) {
											stream << "\t\t";
											DisplayShadingFlag->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <DisplayShadingFlag> not present\n";

										Attribute *FractionalChannelDisplayScale = (*list)[TagFromName(FractionalChannelDisplayScale)];
										stream << "\t\t\t";
										if (FractionalChannelDisplayScale) {
											stream << "\t\t";
											FractionalChannelDisplayScale->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <FractionalChannelDisplayScale> not present\n";

										Attribute *AbsoluteChannelDisplayScale = (*list)[TagFromName(AbsoluteChannelDisplayScale)];
										stream << "\t\t\t";
										if (AbsoluteChannelDisplayScale) {
											stream << "\t\t";
											AbsoluteChannelDisplayScale->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <AbsoluteChannelDisplayScale> not present\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
}

void
Module_WaveformAnnotation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <WaveformAnnotation>\n";

	if (WaveformAnnotationSequence)
		stream << "\t\tSequence <WaveformAnnotationSequence>\n";
	else
		stream << "\t\tSequence <WaveformAnnotationSequence> not present\n";
	if (WaveformAnnotationSequence && strcmp(WaveformAnnotationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=WaveformAnnotationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *UnformattedTextValue = (*list)[TagFromName(UnformattedTextValue)];
				stream << "\t";
				if (UnformattedTextValue) {
					stream << "\t\t";
					UnformattedTextValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <UnformattedTextValue> not present\n";

	Attribute *ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
				stream << "\t";
				if (ConceptNameCodeSequence)
					stream << "\t\tSequence <ConceptNameCodeSequence>\n";
				else
					stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
				if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ModifierCodeSequence = (*list)[TagFromName(ModifierCodeSequence)];
							stream << "\t\t";
							if (ModifierCodeSequence)
								stream << "\t\tSequence <ModifierCodeSequence>\n";
							else
								stream << "\t\tSequence <ModifierCodeSequence> not present\n";
							if (ModifierCodeSequence && strcmp(ModifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ModifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
						}
					}
				}
	Attribute *ConceptCodeSequence = (*list)[TagFromName(ConceptCodeSequence)];
				stream << "\t";
				if (ConceptCodeSequence)
					stream << "\t\tSequence <ConceptCodeSequence>\n";
				else
					stream << "\t\tSequence <ConceptCodeSequence> not present\n";
				if (ConceptCodeSequence && strcmp(ConceptCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ConceptCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ModifierCodeSequence = (*list)[TagFromName(ModifierCodeSequence)];
							stream << "\t\t";
							if (ModifierCodeSequence)
								stream << "\t\tSequence <ModifierCodeSequence>\n";
							else
								stream << "\t\tSequence <ModifierCodeSequence> not present\n";
							if (ModifierCodeSequence && strcmp(ModifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ModifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
						}
					}
				}
				Attribute *NumericValue = (*list)[TagFromName(NumericValue)];
				stream << "\t";
				if (NumericValue) {
					stream << "\t\t";
					NumericValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumericValue> not present\n";

	Attribute *MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
				stream << "\t";
				if (MeasurementUnitsCodeSequence)
					stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
				else
					stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
				if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ReferencedWaveformChannels = (*list)[TagFromName(ReferencedWaveformChannels)];
				stream << "\t";
				if (ReferencedWaveformChannels) {
					stream << "\t\t";
					ReferencedWaveformChannels->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedWaveformChannels> not present\n";

				Attribute *TemporalRangeType = (*list)[TagFromName(TemporalRangeType)];
				stream << "\t";
				if (TemporalRangeType) {
					stream << "\t\t";
					TemporalRangeType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemporalRangeType> not present\n";

				Attribute *ReferencedSamplePositions = (*list)[TagFromName(ReferencedSamplePositions)];
				stream << "\t";
				if (ReferencedSamplePositions) {
					stream << "\t\t";
					ReferencedSamplePositions->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSamplePositions> not present\n";

				Attribute *ReferencedTimeOffsets = (*list)[TagFromName(ReferencedTimeOffsets)];
				stream << "\t";
				if (ReferencedTimeOffsets) {
					stream << "\t\t";
					ReferencedTimeOffsets->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedTimeOffsets> not present\n";

				Attribute *ReferencedDateTime = (*list)[TagFromName(ReferencedDateTime)];
				stream << "\t";
				if (ReferencedDateTime) {
					stream << "\t\t";
					ReferencedDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedDateTime> not present\n";

				Attribute *AnnotationGroupNumber = (*list)[TagFromName(AnnotationGroupNumber)];
				stream << "\t";
				if (AnnotationGroupNumber) {
					stream << "\t\t";
					AnnotationGroupNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AnnotationGroupNumber> not present\n";

			}
		}
	}
}

void
Macro_HierarchicalSOPInstanceReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HierarchicalSOPInstanceReferenceMacro>\n";

	if (StudyInstanceUID) {
		stream << "\t\t";
		StudyInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyInstanceUID> not present\n";

	if (ReferencedSeriesSequence)
		stream << "\t\tSequence <ReferencedSeriesSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
	if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSeriesReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSeriesReferenceMacro>\n";

			}
		}
	}
}

void
Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro>\n";

	if (StudyInstanceUID) {
		stream << "\t\t";
		StudyInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyInstanceUID> not present\n";

	if (ReferencedSeriesSequence)
		stream << "\t\tSequence <ReferencedSeriesSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
	if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro>\n";

			}
		}
	}
}

void
Macro_HierarchicalSeriesReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HierarchicalSeriesReferenceMacro>\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (RetrieveAETitle) {
		stream << "\t\t";
		RetrieveAETitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RetrieveAETitle> not present\n";

	if (RetrieveLocationUID) {
		stream << "\t\t";
		RetrieveLocationUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RetrieveLocationUID> not present\n";

	if (StorageMediaFileSetID) {
		stream << "\t\t";
		StorageMediaFileSetID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StorageMediaFileSetID> not present\n";

	if (StorageMediaFileSetUID) {
		stream << "\t\t";
		StorageMediaFileSetUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StorageMediaFileSetUID> not present\n";

	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedDigitalSignatureSequence = (*list)[TagFromName(ReferencedDigitalSignatureSequence)];
				stream << "\t";
				if (ReferencedDigitalSignatureSequence)
					stream << "\t\tSequence <ReferencedDigitalSignatureSequence>\n";
				else
					stream << "\t\tSequence <ReferencedDigitalSignatureSequence> not present\n";
				if (ReferencedDigitalSignatureSequence && strcmp(ReferencedDigitalSignatureSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedDigitalSignatureSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *DigitalSignatureUID = (*list)[TagFromName(DigitalSignatureUID)];
							stream << "\t\t";
							if (DigitalSignatureUID) {
								stream << "\t\t";
								DigitalSignatureUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DigitalSignatureUID> not present\n";

							Attribute *Signature = (*list)[TagFromName(Signature)];
							stream << "\t\t";
							if (Signature) {
								stream << "\t\t";
								Signature->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <Signature> not present\n";

						}
					}
				}
	Attribute *ReferencedSOPInstanceMACSequence = (*list)[TagFromName(ReferencedSOPInstanceMACSequence)];
				stream << "\t";
				if (ReferencedSOPInstanceMACSequence)
					stream << "\t\tSequence <ReferencedSOPInstanceMACSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPInstanceMACSequence> not present\n";
				if (ReferencedSOPInstanceMACSequence && strcmp(ReferencedSOPInstanceMACSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPInstanceMACSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *MACCalculationTransferSyntaxUID = (*list)[TagFromName(MACCalculationTransferSyntaxUID)];
							stream << "\t\t";
							if (MACCalculationTransferSyntaxUID) {
								stream << "\t\t";
								MACCalculationTransferSyntaxUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MACCalculationTransferSyntaxUID> not present\n";

							Attribute *MACAlgorithm = (*list)[TagFromName(MACAlgorithm)];
							stream << "\t\t";
							if (MACAlgorithm) {
								stream << "\t\t";
								MACAlgorithm->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MACAlgorithm> not present\n";

							Attribute *DataElementsSigned = (*list)[TagFromName(DataElementsSigned)];
							stream << "\t\t";
							if (DataElementsSigned) {
								stream << "\t\t";
								DataElementsSigned->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DataElementsSigned> not present\n";

							Attribute *MAC = (*list)[TagFromName(MAC)];
							stream << "\t\t";
							if (MAC) {
								stream << "\t\t";
								MAC->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MAC> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro>\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (RetrieveAETitle) {
		stream << "\t\t";
		RetrieveAETitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RetrieveAETitle> not present\n";

	if (RetrieveLocationUID) {
		stream << "\t\t";
		RetrieveLocationUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RetrieveLocationUID> not present\n";

	if (StorageMediaFileSetID) {
		stream << "\t\t";
		StorageMediaFileSetID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StorageMediaFileSetID> not present\n";

	if (StorageMediaFileSetUID) {
		stream << "\t\t";
		StorageMediaFileSetUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StorageMediaFileSetUID> not present\n";

	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedDigitalSignatureSequence = (*list)[TagFromName(ReferencedDigitalSignatureSequence)];
				stream << "\t";
				if (ReferencedDigitalSignatureSequence)
					stream << "\t\tSequence <ReferencedDigitalSignatureSequence>\n";
				else
					stream << "\t\tSequence <ReferencedDigitalSignatureSequence> not present\n";
				if (ReferencedDigitalSignatureSequence && strcmp(ReferencedDigitalSignatureSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedDigitalSignatureSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *DigitalSignatureUID = (*list)[TagFromName(DigitalSignatureUID)];
							stream << "\t\t";
							if (DigitalSignatureUID) {
								stream << "\t\t";
								DigitalSignatureUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DigitalSignatureUID> not present\n";

							Attribute *Signature = (*list)[TagFromName(Signature)];
							stream << "\t\t";
							if (Signature) {
								stream << "\t\t";
								Signature->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <Signature> not present\n";

						}
					}
				}
	Attribute *ReferencedSOPInstanceMACSequence = (*list)[TagFromName(ReferencedSOPInstanceMACSequence)];
				stream << "\t";
				if (ReferencedSOPInstanceMACSequence)
					stream << "\t\tSequence <ReferencedSOPInstanceMACSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPInstanceMACSequence> not present\n";
				if (ReferencedSOPInstanceMACSequence && strcmp(ReferencedSOPInstanceMACSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPInstanceMACSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *MACCalculationTransferSyntaxUID = (*list)[TagFromName(MACCalculationTransferSyntaxUID)];
							stream << "\t\t";
							if (MACCalculationTransferSyntaxUID) {
								stream << "\t\t";
								MACCalculationTransferSyntaxUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MACCalculationTransferSyntaxUID> not present\n";

							Attribute *MACAlgorithm = (*list)[TagFromName(MACAlgorithm)];
							stream << "\t\t";
							if (MACAlgorithm) {
								stream << "\t\t";
								MACAlgorithm->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MACAlgorithm> not present\n";

							Attribute *DataElementsSigned = (*list)[TagFromName(DataElementsSigned)];
							stream << "\t\t";
							if (DataElementsSigned) {
								stream << "\t\t";
								DataElementsSigned->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DataElementsSigned> not present\n";

							Attribute *MAC = (*list)[TagFromName(MAC)];
							stream << "\t\t";
							if (MAC) {
								stream << "\t\t";
								MAC->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MAC> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_IdentifiedPersonOrDeviceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <IdentifiedPersonOrDeviceMacro>\n";

	if (ObserverType) {
		stream << "\t\t";
		ObserverType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ObserverType> not present\n";

	if (PersonName) {
		stream << "\t\t";
		PersonName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PersonName> not present\n";

	if (PersonIdentificationCodeSequence)
		stream << "\t\tSequence <PersonIdentificationCodeSequence>\n";
	else
		stream << "\t\tSequence <PersonIdentificationCodeSequence> not present\n";
	if (PersonIdentificationCodeSequence && strcmp(PersonIdentificationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PersonIdentificationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (StationName) {
		stream << "\t\t";
		StationName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationName> not present\n";

	if (DeviceUID) {
		stream << "\t\t";
		DeviceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceUID> not present\n";

	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (StationAETitle) {
		stream << "\t\t";
		StationAETitle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationAETitle> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (InstitutionCodeSequence)
		stream << "\t\tSequence <InstitutionCodeSequence>\n";
	else
		stream << "\t\tSequence <InstitutionCodeSequence> not present\n";
	if (InstitutionCodeSequence && strcmp(InstitutionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InstitutionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (InstitutionalDepartmentName) {
		stream << "\t\t";
		InstitutionalDepartmentName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	if (InstitutionalDepartmentTypeCodeSequence)
		stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence>\n";
	else
		stream << "\t\tSequence <InstitutionalDepartmentTypeCodeSequence> not present\n";
	if (InstitutionalDepartmentTypeCodeSequence && strcmp(InstitutionalDepartmentTypeCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InstitutionalDepartmentTypeCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_NumericMeasurementMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <NumericMeasurementMacro>\n";

	if (MeasuredValueSequence)
		stream << "\t\tSequence <MeasuredValueSequence>\n";
	else
		stream << "\t\tSequence <MeasuredValueSequence> not present\n";
	if (MeasuredValueSequence && strcmp(MeasuredValueSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasuredValueSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *NumericValue = (*list)[TagFromName(NumericValue)];
				stream << "\t";
				if (NumericValue) {
					stream << "\t\t";
					NumericValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumericValue> not present\n";

				Attribute *FloatingPointValue = (*list)[TagFromName(FloatingPointValue)];
				stream << "\t";
				if (FloatingPointValue) {
					stream << "\t\t";
					FloatingPointValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FloatingPointValue> not present\n";

				Attribute *RationalNumeratorValue = (*list)[TagFromName(RationalNumeratorValue)];
				stream << "\t";
				if (RationalNumeratorValue) {
					stream << "\t\t";
					RationalNumeratorValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RationalNumeratorValue> not present\n";

				Attribute *RationalDenominatorValue = (*list)[TagFromName(RationalDenominatorValue)];
				stream << "\t";
				if (RationalDenominatorValue) {
					stream << "\t\t";
					RationalDenominatorValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RationalDenominatorValue> not present\n";

	Attribute *MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
				stream << "\t";
				if (MeasurementUnitsCodeSequence)
					stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
				else
					stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
				if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (NumericValueQualifierCodeSequence)
		stream << "\t\tSequence <NumericValueQualifierCodeSequence>\n";
	else
		stream << "\t\tSequence <NumericValueQualifierCodeSequence> not present\n";
	if (NumericValueQualifierCodeSequence && strcmp(NumericValueQualifierCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=NumericValueQualifierCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_CodeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CodeMacro>\n";

	if (ConceptCodeSequence)
		stream << "\t\tSequence <ConceptCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptCodeSequence> not present\n";
	if (ConceptCodeSequence && strcmp(ConceptCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Macro_CompositeObjectReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CompositeObjectReferenceMacro>\n";

	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Macro_ImageReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ImageReferenceMacro>\n";

	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

				Attribute *ReferencedFrameNumber = (*list)[TagFromName(ReferencedFrameNumber)];
				stream << "\t";
				if (ReferencedFrameNumber) {
					stream << "\t\t";
					ReferencedFrameNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedFrameNumber> not present\n";

				Attribute *ReferencedSegmentNumber = (*list)[TagFromName(ReferencedSegmentNumber)];
				stream << "\t";
				if (ReferencedSegmentNumber) {
					stream << "\t\t";
					ReferencedSegmentNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedSegmentNumber> not present\n";

	Attribute *ReferencedSOPSequence = (*list)[TagFromName(ReferencedSOPSequence)];
				stream << "\t";
				if (ReferencedSOPSequence)
					stream << "\t\tSequence <ReferencedSOPSequence>\n";
				else
					stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
				if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedRealWorldValueMappingInstanceSequence = (*list)[TagFromName(ReferencedRealWorldValueMappingInstanceSequence)];
				stream << "\t";
				if (ReferencedRealWorldValueMappingInstanceSequence)
					stream << "\t\tSequence <ReferencedRealWorldValueMappingInstanceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedRealWorldValueMappingInstanceSequence> not present\n";
				if (ReferencedRealWorldValueMappingInstanceSequence && strcmp(ReferencedRealWorldValueMappingInstanceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedRealWorldValueMappingInstanceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *IconImageSequence = (*list)[TagFromName(IconImageSequence)];
				stream << "\t";
				if (IconImageSequence)
					stream << "\t\tSequence <IconImageSequence>\n";
				else
					stream << "\t\tSequence <IconImageSequence> not present\n";
				if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IconImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_WaveformReferenceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <WaveformReferenceMacro>\n";

	if (ReferencedSOPSequence)
		stream << "\t\tSequence <ReferencedSOPSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSOPSequence> not present\n";
	if (ReferencedSOPSequence && strcmp(ReferencedSOPSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSOPSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

				Attribute *ReferencedWaveformChannels = (*list)[TagFromName(ReferencedWaveformChannels)];
				stream << "\t";
				if (ReferencedWaveformChannels) {
					stream << "\t\t";
					ReferencedWaveformChannels->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedWaveformChannels> not present\n";

			}
		}
	}
}

void
Macro_SpatialCoordinatesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SpatialCoordinatesMacro>\n";

	if (GraphicData) {
		stream << "\t\t";
		GraphicData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GraphicData> not present\n";

	if (GraphicType) {
		stream << "\t\t";
		GraphicType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GraphicType> not present\n";

	if (PixelOriginInterpretation) {
		stream << "\t\t";
		PixelOriginInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelOriginInterpretation> not present\n";

	if (FiducialUID) {
		stream << "\t\t";
		FiducialUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FiducialUID> not present\n";

}

void
Macro_SpatialCoordinates3DMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <SpatialCoordinates3DMacro>\n";

	if (ReferencedFrameOfReferenceUID) {
		stream << "\t\t";
		ReferencedFrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedFrameOfReferenceUID> not present\n";

	if (GraphicData) {
		stream << "\t\t";
		GraphicData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GraphicData> not present\n";

	if (GraphicType) {
		stream << "\t\t";
		GraphicType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GraphicType> not present\n";

	if (FiducialUID) {
		stream << "\t\t";
		FiducialUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FiducialUID> not present\n";

}

void
Macro_TemporalCoordinatesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <TemporalCoordinatesMacro>\n";

	if (TemporalRangeType) {
		stream << "\t\t";
		TemporalRangeType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TemporalRangeType> not present\n";

	if (ReferencedSamplePositions) {
		stream << "\t\t";
		ReferencedSamplePositions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedSamplePositions> not present\n";

	if (ReferencedTimeOffsets) {
		stream << "\t\t";
		ReferencedTimeOffsets->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedTimeOffsets> not present\n";

	if (ReferencedDateTime) {
		stream << "\t\t";
		ReferencedDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ReferencedDateTime> not present\n";

}

void
Macro_ContainerMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ContainerMacro>\n";

	if (ContinuityOfContent) {
		stream << "\t\t";
		ContinuityOfContent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContinuityOfContent> not present\n";

	if (ContentTemplateSequence)
		stream << "\t\tSequence <ContentTemplateSequence>\n";
	else
		stream << "\t\tSequence <ContentTemplateSequence> not present\n";
	if (ContentTemplateSequence && strcmp(ContentTemplateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContentTemplateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MappingResource = (*list)[TagFromName(MappingResource)];
				stream << "\t";
				if (MappingResource) {
					stream << "\t\t";
					MappingResource->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MappingResource> not present\n";

				Attribute *MappingResourceUID = (*list)[TagFromName(MappingResourceUID)];
				stream << "\t";
				if (MappingResourceUID) {
					stream << "\t\t";
					MappingResourceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MappingResourceUID> not present\n";

				Attribute *TemplateIdentifier = (*list)[TagFromName(TemplateIdentifier)];
				stream << "\t";
				if (TemplateIdentifier) {
					stream << "\t\t";
					TemplateIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemplateIdentifier> not present\n";

			}
		}
	}
}

void
Macro_DocumentContentMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DocumentContentMacro>\n";

	if (ValueType) {
		stream << "\t\t";
		ValueType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ValueType> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (TextValue) {
		stream << "\t\t";
		TextValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TextValue> not present\n";

	if (DateTime) {
		stream << "\t\t";
		DateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DateTime> not present\n";

	if (Date) {
		stream << "\t\t";
		Date->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Date> not present\n";

	if (Time) {
		stream << "\t\t";
		Time->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Time> not present\n";

	if (PersonName) {
		stream << "\t\t";
		PersonName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PersonName> not present\n";

	if (UID) {
		stream << "\t\t";
		UID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UID> not present\n";

				stream << "\t";
	Macro_NumericMeasurementMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <NumericMeasurementMacro>\n";

				stream << "\t";
	Macro_CodeMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CodeMacro>\n";

				stream << "\t";
	Macro_CompositeObjectReferenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CompositeObjectReferenceMacro>\n";

				stream << "\t";
	Macro_ImageReferenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ImageReferenceMacro>\n";

				stream << "\t";
	Macro_WaveformReferenceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <WaveformReferenceMacro>\n";

				stream << "\t";
	Macro_SpatialCoordinatesMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <SpatialCoordinatesMacro>\n";

				stream << "\t";
	Macro_SpatialCoordinates3DMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <SpatialCoordinates3DMacro>\n";

				stream << "\t";
	Macro_ContainerMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContainerMacro>\n";

}

void
Macro_DocumentRelationshipMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <DocumentRelationshipMacro>\n";

	if (ObservationDateTime) {
		stream << "\t\t";
		ObservationDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ObservationDateTime> not present\n";

	if (ObservationUID) {
		stream << "\t\t";
		ObservationUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ObservationUID> not present\n";

	if (ContentSequence)
		stream << "\t\tSequence <ContentSequence>\n";
	else
		stream << "\t\tSequence <ContentSequence> not present\n";
	if (ContentSequence && strcmp(ContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RelationshipType = (*list)[TagFromName(RelationshipType)];
				stream << "\t";
				if (RelationshipType) {
					stream << "\t\t";
					RelationshipType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RelationshipType> not present\n";

							stream << "\t\t";
	Macro_DocumentRelationshipMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DocumentRelationshipMacro>\n";

							stream << "\t\t";
	Macro_DocumentContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DocumentContentMacro>\n";

				Attribute *ReferencedContentItemIdentifier = (*list)[TagFromName(ReferencedContentItemIdentifier)];
				stream << "\t";
				if (ReferencedContentItemIdentifier) {
					stream << "\t\t";
					ReferencedContentItemIdentifier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedContentItemIdentifier> not present\n";

			}
		}
	}
}

void
Module_SRDocumentSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SRDocumentSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (SeriesDate) {
		stream << "\t\t";
		SeriesDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDate> not present\n";

	if (SeriesTime) {
		stream << "\t\t";
		SeriesTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesTime> not present\n";

	if (ProtocolName) {
		stream << "\t\t";
		ProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProtocolName> not present\n";

	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (SeriesDescriptionCodeSequence)
		stream << "\t\tSequence <SeriesDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <SeriesDescriptionCodeSequence> not present\n";
	if (SeriesDescriptionCodeSequence && strcmp(SeriesDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SeriesDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_SRDocumentGeneral::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SRDocumentGeneral>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (PreliminaryFlag) {
		stream << "\t\t";
		PreliminaryFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PreliminaryFlag> not present\n";

	if (CompletionFlag) {
		stream << "\t\t";
		CompletionFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CompletionFlag> not present\n";

	if (CompletionFlagDescription) {
		stream << "\t\t";
		CompletionFlagDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CompletionFlagDescription> not present\n";

	if (VerificationFlag) {
		stream << "\t\t";
		VerificationFlag->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VerificationFlag> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (VerifyingObserverSequence)
		stream << "\t\tSequence <VerifyingObserverSequence>\n";
	else
		stream << "\t\tSequence <VerifyingObserverSequence> not present\n";
	if (VerifyingObserverSequence && strcmp(VerifyingObserverSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VerifyingObserverSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *VerifyingObserverName = (*list)[TagFromName(VerifyingObserverName)];
				stream << "\t";
				if (VerifyingObserverName) {
					stream << "\t\t";
					VerifyingObserverName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerifyingObserverName> not present\n";

	Attribute *VerifyingObserverIdentificationCodeSequence = (*list)[TagFromName(VerifyingObserverIdentificationCodeSequence)];
				stream << "\t";
				if (VerifyingObserverIdentificationCodeSequence)
					stream << "\t\tSequence <VerifyingObserverIdentificationCodeSequence>\n";
				else
					stream << "\t\tSequence <VerifyingObserverIdentificationCodeSequence> not present\n";
				if (VerifyingObserverIdentificationCodeSequence && strcmp(VerifyingObserverIdentificationCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=VerifyingObserverIdentificationCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *VerifyingOrganization = (*list)[TagFromName(VerifyingOrganization)];
				stream << "\t";
				if (VerifyingOrganization) {
					stream << "\t\t";
					VerifyingOrganization->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerifyingOrganization> not present\n";

				Attribute *VerificationDateTime = (*list)[TagFromName(VerificationDateTime)];
				stream << "\t";
				if (VerificationDateTime) {
					stream << "\t\t";
					VerificationDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerificationDateTime> not present\n";

			}
		}
	}
	if (AuthorObserverSequence)
		stream << "\t\tSequence <AuthorObserverSequence>\n";
	else
		stream << "\t\tSequence <AuthorObserverSequence> not present\n";
	if (AuthorObserverSequence && strcmp(AuthorObserverSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AuthorObserverSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IdentifiedPersonOrDeviceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentifiedPersonOrDeviceMacro>\n";

			}
		}
	}
	if (ParticipantSequence)
		stream << "\t\tSequence <ParticipantSequence>\n";
	else
		stream << "\t\tSequence <ParticipantSequence> not present\n";
	if (ParticipantSequence && strcmp(ParticipantSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ParticipantSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ParticipationType = (*list)[TagFromName(ParticipationType)];
				stream << "\t";
				if (ParticipationType) {
					stream << "\t\t";
					ParticipationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParticipationType> not present\n";

				Attribute *ParticipationDateTime = (*list)[TagFromName(ParticipationDateTime)];
				stream << "\t";
				if (ParticipationDateTime) {
					stream << "\t\t";
					ParticipationDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParticipationDateTime> not present\n";

							stream << "\t\t";
	Macro_IdentifiedPersonOrDeviceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IdentifiedPersonOrDeviceMacro>\n";

			}
		}
	}
	if (CustodialOrganizationSequence)
		stream << "\t\tSequence <CustodialOrganizationSequence>\n";
	else
		stream << "\t\tSequence <CustodialOrganizationSequence> not present\n";
	if (CustodialOrganizationSequence && strcmp(CustodialOrganizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CustodialOrganizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *InstitutionName = (*list)[TagFromName(InstitutionName)];
				stream << "\t";
				if (InstitutionName) {
					stream << "\t\t";
					InstitutionName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InstitutionName> not present\n";

	Attribute *InstitutionCodeSequence = (*list)[TagFromName(InstitutionCodeSequence)];
				stream << "\t";
				if (InstitutionCodeSequence)
					stream << "\t\tSequence <InstitutionCodeSequence>\n";
				else
					stream << "\t\tSequence <InstitutionCodeSequence> not present\n";
				if (InstitutionCodeSequence && strcmp(InstitutionCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InstitutionCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ResponsibleGroupCodeSequence = (*list)[TagFromName(ResponsibleGroupCodeSequence)];
				stream << "\t";
				if (ResponsibleGroupCodeSequence)
					stream << "\t\tSequence <ResponsibleGroupCodeSequence>\n";
				else
					stream << "\t\tSequence <ResponsibleGroupCodeSequence> not present\n";
				if (ResponsibleGroupCodeSequence && strcmp(ResponsibleGroupCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ResponsibleGroupCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PredecessorDocumentsSequence)
		stream << "\t\tSequence <PredecessorDocumentsSequence>\n";
	else
		stream << "\t\tSequence <PredecessorDocumentsSequence> not present\n";
	if (PredecessorDocumentsSequence && strcmp(PredecessorDocumentsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PredecessorDocumentsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (IdenticalDocumentsSequence)
		stream << "\t\tSequence <IdenticalDocumentsSequence>\n";
	else
		stream << "\t\tSequence <IdenticalDocumentsSequence> not present\n";
	if (IdenticalDocumentsSequence && strcmp(IdenticalDocumentsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IdenticalDocumentsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedRequestSequence)
		stream << "\t\tSequence <ReferencedRequestSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRequestSequence> not present\n";
	if (ReferencedRequestSequence && strcmp(ReferencedRequestSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRequestSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

	Attribute *ReferencedStudySequence = (*list)[TagFromName(ReferencedStudySequence)];
				stream << "\t";
				if (ReferencedStudySequence)
					stream << "\t\tSequence <ReferencedStudySequence>\n";
				else
					stream << "\t\tSequence <ReferencedStudySequence> not present\n";
				if (ReferencedStudySequence && strcmp(ReferencedStudySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedStudySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *AccessionNumber = (*list)[TagFromName(AccessionNumber)];
				stream << "\t";
				if (AccessionNumber) {
					stream << "\t\t";
					AccessionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AccessionNumber> not present\n";

	Attribute *IssuerOfAccessionNumberSequence = (*list)[TagFromName(IssuerOfAccessionNumberSequence)];
				stream << "\t";
				if (IssuerOfAccessionNumberSequence)
					stream << "\t\tSequence <IssuerOfAccessionNumberSequence>\n";
				else
					stream << "\t\tSequence <IssuerOfAccessionNumberSequence> not present\n";
				if (IssuerOfAccessionNumberSequence && strcmp(IssuerOfAccessionNumberSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IssuerOfAccessionNumberSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *PlacerOrderNumberImagingServiceRequest = (*list)[TagFromName(PlacerOrderNumberImagingServiceRequest)];
				stream << "\t";
				if (PlacerOrderNumberImagingServiceRequest) {
					stream << "\t\t";
					PlacerOrderNumberImagingServiceRequest->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PlacerOrderNumberImagingServiceRequest> not present\n";

	Attribute *OrderPlacerIdentifierSequence = (*list)[TagFromName(OrderPlacerIdentifierSequence)];
				stream << "\t";
				if (OrderPlacerIdentifierSequence)
					stream << "\t\tSequence <OrderPlacerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <OrderPlacerIdentifierSequence> not present\n";
				if (OrderPlacerIdentifierSequence && strcmp(OrderPlacerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OrderPlacerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *FillerOrderNumberImagingServiceRequest = (*list)[TagFromName(FillerOrderNumberImagingServiceRequest)];
				stream << "\t";
				if (FillerOrderNumberImagingServiceRequest) {
					stream << "\t\t";
					FillerOrderNumberImagingServiceRequest->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FillerOrderNumberImagingServiceRequest> not present\n";

	Attribute *OrderFillerIdentifierSequence = (*list)[TagFromName(OrderFillerIdentifierSequence)];
				stream << "\t";
				if (OrderFillerIdentifierSequence)
					stream << "\t\tSequence <OrderFillerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <OrderFillerIdentifierSequence> not present\n";
				if (OrderFillerIdentifierSequence && strcmp(OrderFillerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OrderFillerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *RequestedProcedureID = (*list)[TagFromName(RequestedProcedureID)];
				stream << "\t";
				if (RequestedProcedureID) {
					stream << "\t\t";
					RequestedProcedureID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RequestedProcedureID> not present\n";

				Attribute *RequestedProcedureDescription = (*list)[TagFromName(RequestedProcedureDescription)];
				stream << "\t";
				if (RequestedProcedureDescription) {
					stream << "\t\t";
					RequestedProcedureDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RequestedProcedureDescription> not present\n";

	Attribute *RequestedProcedureCodeSequence = (*list)[TagFromName(RequestedProcedureCodeSequence)];
				stream << "\t";
				if (RequestedProcedureCodeSequence)
					stream << "\t\tSequence <RequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <RequestedProcedureCodeSequence> not present\n";
				if (RequestedProcedureCodeSequence && strcmp(RequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ReasonForTheRequestedProcedure = (*list)[TagFromName(ReasonForTheRequestedProcedure)];
				stream << "\t";
				if (ReasonForTheRequestedProcedure) {
					stream << "\t\t";
					ReasonForTheRequestedProcedure->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReasonForTheRequestedProcedure> not present\n";

	Attribute *ReasonForRequestedProcedureCodeSequence = (*list)[TagFromName(ReasonForRequestedProcedureCodeSequence)];
				stream << "\t";
				if (ReasonForRequestedProcedureCodeSequence)
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence> not present\n";
				if (ReasonForRequestedProcedureCodeSequence && strcmp(ReasonForRequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReasonForRequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PerformedProcedureCodeSequence)
		stream << "\t\tSequence <PerformedProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <PerformedProcedureCodeSequence> not present\n";
	if (PerformedProcedureCodeSequence && strcmp(PerformedProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformedProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (CurrentRequestedProcedureEvidenceSequence)
		stream << "\t\tSequence <CurrentRequestedProcedureEvidenceSequence>\n";
	else
		stream << "\t\tSequence <CurrentRequestedProcedureEvidenceSequence> not present\n";
	if (CurrentRequestedProcedureEvidenceSequence && strcmp(CurrentRequestedProcedureEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CurrentRequestedProcedureEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (PertinentOtherEvidenceSequence)
		stream << "\t\tSequence <PertinentOtherEvidenceSequence>\n";
	else
		stream << "\t\tSequence <PertinentOtherEvidenceSequence> not present\n";
	if (PertinentOtherEvidenceSequence && strcmp(PertinentOtherEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PertinentOtherEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_SRDocumentContent::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SRDocumentContent>\n";

				stream << "\t";
	Macro_DocumentContentMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DocumentContentMacro>\n";

				stream << "\t";
	Macro_DocumentRelationshipMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DocumentRelationshipMacro>\n";

}

void
Module_KeyObjectDocumentSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <KeyObjectDocumentSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesInstanceUID) {
		stream << "\t\t";
		SeriesInstanceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesInstanceUID> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (SeriesDate) {
		stream << "\t\t";
		SeriesDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDate> not present\n";

	if (SeriesTime) {
		stream << "\t\t";
		SeriesTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesTime> not present\n";

	if (ProtocolName) {
		stream << "\t\t";
		ProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProtocolName> not present\n";

	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (SeriesDescriptionCodeSequence)
		stream << "\t\tSequence <SeriesDescriptionCodeSequence>\n";
	else
		stream << "\t\tSequence <SeriesDescriptionCodeSequence> not present\n";
	if (SeriesDescriptionCodeSequence && strcmp(SeriesDescriptionCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SeriesDescriptionCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_KeyObjectDocument::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <KeyObjectDocument>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (ReferencedRequestSequence)
		stream << "\t\tSequence <ReferencedRequestSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRequestSequence> not present\n";
	if (ReferencedRequestSequence && strcmp(ReferencedRequestSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRequestSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

	Attribute *ReferencedStudySequence = (*list)[TagFromName(ReferencedStudySequence)];
				stream << "\t";
				if (ReferencedStudySequence)
					stream << "\t\tSequence <ReferencedStudySequence>\n";
				else
					stream << "\t\tSequence <ReferencedStudySequence> not present\n";
				if (ReferencedStudySequence && strcmp(ReferencedStudySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedStudySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *AccessionNumber = (*list)[TagFromName(AccessionNumber)];
				stream << "\t";
				if (AccessionNumber) {
					stream << "\t\t";
					AccessionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AccessionNumber> not present\n";

	Attribute *IssuerOfAccessionNumberSequence = (*list)[TagFromName(IssuerOfAccessionNumberSequence)];
				stream << "\t";
				if (IssuerOfAccessionNumberSequence)
					stream << "\t\tSequence <IssuerOfAccessionNumberSequence>\n";
				else
					stream << "\t\tSequence <IssuerOfAccessionNumberSequence> not present\n";
				if (IssuerOfAccessionNumberSequence && strcmp(IssuerOfAccessionNumberSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IssuerOfAccessionNumberSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *PlacerOrderNumberImagingServiceRequest = (*list)[TagFromName(PlacerOrderNumberImagingServiceRequest)];
				stream << "\t";
				if (PlacerOrderNumberImagingServiceRequest) {
					stream << "\t\t";
					PlacerOrderNumberImagingServiceRequest->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PlacerOrderNumberImagingServiceRequest> not present\n";

	Attribute *OrderPlacerIdentifierSequence = (*list)[TagFromName(OrderPlacerIdentifierSequence)];
				stream << "\t";
				if (OrderPlacerIdentifierSequence)
					stream << "\t\tSequence <OrderPlacerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <OrderPlacerIdentifierSequence> not present\n";
				if (OrderPlacerIdentifierSequence && strcmp(OrderPlacerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OrderPlacerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *FillerOrderNumberImagingServiceRequest = (*list)[TagFromName(FillerOrderNumberImagingServiceRequest)];
				stream << "\t";
				if (FillerOrderNumberImagingServiceRequest) {
					stream << "\t\t";
					FillerOrderNumberImagingServiceRequest->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FillerOrderNumberImagingServiceRequest> not present\n";

	Attribute *OrderFillerIdentifierSequence = (*list)[TagFromName(OrderFillerIdentifierSequence)];
				stream << "\t";
				if (OrderFillerIdentifierSequence)
					stream << "\t\tSequence <OrderFillerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <OrderFillerIdentifierSequence> not present\n";
				if (OrderFillerIdentifierSequence && strcmp(OrderFillerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OrderFillerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *RequestedProcedureID = (*list)[TagFromName(RequestedProcedureID)];
				stream << "\t";
				if (RequestedProcedureID) {
					stream << "\t\t";
					RequestedProcedureID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RequestedProcedureID> not present\n";

				Attribute *RequestedProcedureDescription = (*list)[TagFromName(RequestedProcedureDescription)];
				stream << "\t";
				if (RequestedProcedureDescription) {
					stream << "\t\t";
					RequestedProcedureDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RequestedProcedureDescription> not present\n";

	Attribute *RequestedProcedureCodeSequence = (*list)[TagFromName(RequestedProcedureCodeSequence)];
				stream << "\t";
				if (RequestedProcedureCodeSequence)
					stream << "\t\tSequence <RequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <RequestedProcedureCodeSequence> not present\n";
				if (RequestedProcedureCodeSequence && strcmp(RequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ReasonForTheRequestedProcedure = (*list)[TagFromName(ReasonForTheRequestedProcedure)];
				stream << "\t";
				if (ReasonForTheRequestedProcedure) {
					stream << "\t\t";
					ReasonForTheRequestedProcedure->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReasonForTheRequestedProcedure> not present\n";

	Attribute *ReasonForRequestedProcedureCodeSequence = (*list)[TagFromName(ReasonForRequestedProcedureCodeSequence)];
				stream << "\t";
				if (ReasonForRequestedProcedureCodeSequence)
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence> not present\n";
				if (ReasonForRequestedProcedureCodeSequence && strcmp(ReasonForRequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReasonForRequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (CurrentRequestedProcedureEvidenceSequence)
		stream << "\t\tSequence <CurrentRequestedProcedureEvidenceSequence>\n";
	else
		stream << "\t\tSequence <CurrentRequestedProcedureEvidenceSequence> not present\n";
	if (CurrentRequestedProcedureEvidenceSequence && strcmp(CurrentRequestedProcedureEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CurrentRequestedProcedureEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (IdenticalDocumentsSequence)
		stream << "\t\tSequence <IdenticalDocumentsSequence>\n";
	else
		stream << "\t\tSequence <IdenticalDocumentsSequence> not present\n";
	if (IdenticalDocumentsSequence && strcmp(IdenticalDocumentsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IdenticalDocumentsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_IHEXDSIManifestProfile::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEXDSIManifestProfile>\n";

	if (CurrentRequestedProcedureEvidenceSequence)
		stream << "\t\tSequence <CurrentRequestedProcedureEvidenceSequence>\n";
	else
		stream << "\t\tSequence <CurrentRequestedProcedureEvidenceSequence> not present\n";
	if (CurrentRequestedProcedureEvidenceSequence && strcmp(CurrentRequestedProcedureEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CurrentRequestedProcedureEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro>\n";

			}
		}
	}
}

void
Module_IHEREMProfile::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IHEREMProfile>\n";

	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (PerformedProcedureCodeSequence)
		stream << "\t\tSequence <PerformedProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <PerformedProcedureCodeSequence> not present\n";
	if (PerformedProcedureCodeSequence && strcmp(PerformedProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformedProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ReferencedRequestSequence)
		stream << "\t\tSequence <ReferencedRequestSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRequestSequence> not present\n";
	if (ReferencedRequestSequence && strcmp(ReferencedRequestSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRequestSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

	Attribute *ReferencedStudySequence = (*list)[TagFromName(ReferencedStudySequence)];
				stream << "\t";
				if (ReferencedStudySequence)
					stream << "\t\tSequence <ReferencedStudySequence>\n";
				else
					stream << "\t\tSequence <ReferencedStudySequence> not present\n";
				if (ReferencedStudySequence && strcmp(ReferencedStudySequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedStudySequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *AccessionNumber = (*list)[TagFromName(AccessionNumber)];
				stream << "\t";
				if (AccessionNumber) {
					stream << "\t\t";
					AccessionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AccessionNumber> not present\n";

	Attribute *IssuerOfAccessionNumberSequence = (*list)[TagFromName(IssuerOfAccessionNumberSequence)];
				stream << "\t";
				if (IssuerOfAccessionNumberSequence)
					stream << "\t\tSequence <IssuerOfAccessionNumberSequence>\n";
				else
					stream << "\t\tSequence <IssuerOfAccessionNumberSequence> not present\n";
				if (IssuerOfAccessionNumberSequence && strcmp(IssuerOfAccessionNumberSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=IssuerOfAccessionNumberSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *PlacerOrderNumberImagingServiceRequest = (*list)[TagFromName(PlacerOrderNumberImagingServiceRequest)];
				stream << "\t";
				if (PlacerOrderNumberImagingServiceRequest) {
					stream << "\t\t";
					PlacerOrderNumberImagingServiceRequest->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PlacerOrderNumberImagingServiceRequest> not present\n";

	Attribute *OrderPlacerIdentifierSequence = (*list)[TagFromName(OrderPlacerIdentifierSequence)];
				stream << "\t";
				if (OrderPlacerIdentifierSequence)
					stream << "\t\tSequence <OrderPlacerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <OrderPlacerIdentifierSequence> not present\n";
				if (OrderPlacerIdentifierSequence && strcmp(OrderPlacerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OrderPlacerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *FillerOrderNumberImagingServiceRequest = (*list)[TagFromName(FillerOrderNumberImagingServiceRequest)];
				stream << "\t";
				if (FillerOrderNumberImagingServiceRequest) {
					stream << "\t\t";
					FillerOrderNumberImagingServiceRequest->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FillerOrderNumberImagingServiceRequest> not present\n";

	Attribute *OrderFillerIdentifierSequence = (*list)[TagFromName(OrderFillerIdentifierSequence)];
				stream << "\t";
				if (OrderFillerIdentifierSequence)
					stream << "\t\tSequence <OrderFillerIdentifierSequence>\n";
				else
					stream << "\t\tSequence <OrderFillerIdentifierSequence> not present\n";
				if (OrderFillerIdentifierSequence && strcmp(OrderFillerIdentifierSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OrderFillerIdentifierSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_HL7v2HierarchicDesignatorMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HL7v2HierarchicDesignatorMacro>\n";

						}
					}
				}
				Attribute *RequestedProcedureID = (*list)[TagFromName(RequestedProcedureID)];
				stream << "\t";
				if (RequestedProcedureID) {
					stream << "\t\t";
					RequestedProcedureID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RequestedProcedureID> not present\n";

				Attribute *RequestedProcedureDescription = (*list)[TagFromName(RequestedProcedureDescription)];
				stream << "\t";
				if (RequestedProcedureDescription) {
					stream << "\t\t";
					RequestedProcedureDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RequestedProcedureDescription> not present\n";

	Attribute *RequestedProcedureCodeSequence = (*list)[TagFromName(RequestedProcedureCodeSequence)];
				stream << "\t";
				if (RequestedProcedureCodeSequence)
					stream << "\t\tSequence <RequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <RequestedProcedureCodeSequence> not present\n";
				if (RequestedProcedureCodeSequence && strcmp(RequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=RequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ReasonForTheRequestedProcedure = (*list)[TagFromName(ReasonForTheRequestedProcedure)];
				stream << "\t";
				if (ReasonForTheRequestedProcedure) {
					stream << "\t\t";
					ReasonForTheRequestedProcedure->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReasonForTheRequestedProcedure> not present\n";

	Attribute *ReasonForRequestedProcedureCodeSequence = (*list)[TagFromName(ReasonForRequestedProcedureCodeSequence)];
				stream << "\t";
				if (ReasonForRequestedProcedureCodeSequence)
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence> not present\n";
				if (ReasonForRequestedProcedureCodeSequence && strcmp(ReasonForRequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReasonForRequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (AdmittingDiagnosesDescription) {
		stream << "\t\t";
		AdmittingDiagnosesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AdmittingDiagnosesDescription> not present\n";

	if (AdmittingDiagnosesCodeSequence)
		stream << "\t\tSequence <AdmittingDiagnosesCodeSequence>\n";
	else
		stream << "\t\tSequence <AdmittingDiagnosesCodeSequence> not present\n";
	if (AdmittingDiagnosesCodeSequence && strcmp(AdmittingDiagnosesCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AdmittingDiagnosesCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (PatientWeight) {
		stream << "\t\t";
		PatientWeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientWeight> not present\n";

	if (PatientSize) {
		stream << "\t\t";
		PatientSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSize> not present\n";

	if (PatientAge) {
		stream << "\t\t";
		PatientAge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientAge> not present\n";

	if (PatientSex) {
		stream << "\t\t";
		PatientSex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSex> not present\n";

}

void
Module_BitmapDisplayShutter::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <BitmapDisplayShutter>\n";

	if (ShutterShape) {
		stream << "\t\t";
		ShutterShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterShape> not present\n";

	if (ShutterOverlayGroup) {
		stream << "\t\t";
		ShutterOverlayGroup->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterOverlayGroup> not present\n";

	if (ShutterPresentationValue) {
		stream << "\t\t";
		ShutterPresentationValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterPresentationValue> not present\n";

	if (ShutterPresentationColorCIELabValue) {
		stream << "\t\t";
		ShutterPresentationColorCIELabValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterPresentationColorCIELabValue> not present\n";

}

void
Module_DisplayedArea::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DisplayedArea>\n";

	if (DisplayedAreaSelectionSequence)
		stream << "\t\tSequence <DisplayedAreaSelectionSequence>\n";
	else
		stream << "\t\tSequence <DisplayedAreaSelectionSequence> not present\n";
	if (DisplayedAreaSelectionSequence && strcmp(DisplayedAreaSelectionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DisplayedAreaSelectionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *PixelOriginInterpretation = (*list)[TagFromName(PixelOriginInterpretation)];
				stream << "\t";
				if (PixelOriginInterpretation) {
					stream << "\t\t";
					PixelOriginInterpretation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelOriginInterpretation> not present\n";

				Attribute *DisplayedAreaTopLeftHandCorner = (*list)[TagFromName(DisplayedAreaTopLeftHandCorner)];
				stream << "\t";
				if (DisplayedAreaTopLeftHandCorner) {
					stream << "\t\t";
					DisplayedAreaTopLeftHandCorner->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplayedAreaTopLeftHandCorner> not present\n";

				Attribute *DisplayedAreaBottomRightHandCorner = (*list)[TagFromName(DisplayedAreaBottomRightHandCorner)];
				stream << "\t";
				if (DisplayedAreaBottomRightHandCorner) {
					stream << "\t\t";
					DisplayedAreaBottomRightHandCorner->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplayedAreaBottomRightHandCorner> not present\n";

				Attribute *PresentationSizeMode = (*list)[TagFromName(PresentationSizeMode)];
				stream << "\t";
				if (PresentationSizeMode) {
					stream << "\t\t";
					PresentationSizeMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PresentationSizeMode> not present\n";

				Attribute *PresentationPixelSpacing = (*list)[TagFromName(PresentationPixelSpacing)];
				stream << "\t";
				if (PresentationPixelSpacing) {
					stream << "\t\t";
					PresentationPixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PresentationPixelSpacing> not present\n";

				Attribute *PresentationPixelAspectRatio = (*list)[TagFromName(PresentationPixelAspectRatio)];
				stream << "\t";
				if (PresentationPixelAspectRatio) {
					stream << "\t\t";
					PresentationPixelAspectRatio->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PresentationPixelAspectRatio> not present\n";

				Attribute *PresentationPixelMagnificationRatio = (*list)[TagFromName(PresentationPixelMagnificationRatio)];
				stream << "\t";
				if (PresentationPixelMagnificationRatio) {
					stream << "\t\t";
					PresentationPixelMagnificationRatio->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PresentationPixelMagnificationRatio> not present\n";

			}
		}
	}
}

void
Module_GraphicAnnotation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GraphicAnnotation>\n";

	if (GraphicAnnotationSequence)
		stream << "\t\tSequence <GraphicAnnotationSequence>\n";
	else
		stream << "\t\tSequence <GraphicAnnotationSequence> not present\n";
	if (GraphicAnnotationSequence && strcmp(GraphicAnnotationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=GraphicAnnotationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
				Attribute *GraphicLayer = (*list)[TagFromName(GraphicLayer)];
				stream << "\t";
				if (GraphicLayer) {
					stream << "\t\t";
					GraphicLayer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayer> not present\n";

	Attribute *TextObjectSequence = (*list)[TagFromName(TextObjectSequence)];
				stream << "\t";
				if (TextObjectSequence)
					stream << "\t\tSequence <TextObjectSequence>\n";
				else
					stream << "\t\tSequence <TextObjectSequence> not present\n";
				if (TextObjectSequence && strcmp(TextObjectSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TextObjectSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *BoundingBoxAnnotationUnits = (*list)[TagFromName(BoundingBoxAnnotationUnits)];
							stream << "\t\t";
							if (BoundingBoxAnnotationUnits) {
								stream << "\t\t";
								BoundingBoxAnnotationUnits->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BoundingBoxAnnotationUnits> not present\n";

							Attribute *AnchorPointAnnotationUnits = (*list)[TagFromName(AnchorPointAnnotationUnits)];
							stream << "\t\t";
							if (AnchorPointAnnotationUnits) {
								stream << "\t\t";
								AnchorPointAnnotationUnits->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AnchorPointAnnotationUnits> not present\n";

							Attribute *UnformattedTextValue = (*list)[TagFromName(UnformattedTextValue)];
							stream << "\t\t";
							if (UnformattedTextValue) {
								stream << "\t\t";
								UnformattedTextValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <UnformattedTextValue> not present\n";

							Attribute *BoundingBoxTopLeftHandCorner = (*list)[TagFromName(BoundingBoxTopLeftHandCorner)];
							stream << "\t\t";
							if (BoundingBoxTopLeftHandCorner) {
								stream << "\t\t";
								BoundingBoxTopLeftHandCorner->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BoundingBoxTopLeftHandCorner> not present\n";

							Attribute *BoundingBoxBottomRightHandCorner = (*list)[TagFromName(BoundingBoxBottomRightHandCorner)];
							stream << "\t\t";
							if (BoundingBoxBottomRightHandCorner) {
								stream << "\t\t";
								BoundingBoxBottomRightHandCorner->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BoundingBoxBottomRightHandCorner> not present\n";

							Attribute *BoundingBoxTextHorizontalJustification = (*list)[TagFromName(BoundingBoxTextHorizontalJustification)];
							stream << "\t\t";
							if (BoundingBoxTextHorizontalJustification) {
								stream << "\t\t";
								BoundingBoxTextHorizontalJustification->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <BoundingBoxTextHorizontalJustification> not present\n";

							Attribute *AnchorPoint = (*list)[TagFromName(AnchorPoint)];
							stream << "\t\t";
							if (AnchorPoint) {
								stream << "\t\t";
								AnchorPoint->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AnchorPoint> not present\n";

							Attribute *AnchorPointVisibility = (*list)[TagFromName(AnchorPointVisibility)];
							stream << "\t\t";
							if (AnchorPointVisibility) {
								stream << "\t\t";
								AnchorPointVisibility->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AnchorPointVisibility> not present\n";

							Attribute *TrackingID = (*list)[TagFromName(TrackingID)];
							stream << "\t\t";
							if (TrackingID) {
								stream << "\t\t";
								TrackingID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrackingID> not present\n";

							Attribute *TrackingUID = (*list)[TagFromName(TrackingUID)];
							stream << "\t\t";
							if (TrackingUID) {
								stream << "\t\t";
								TrackingUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrackingUID> not present\n";

						}
					}
				}
	Attribute *GraphicObjectSequence = (*list)[TagFromName(GraphicObjectSequence)];
				stream << "\t";
				if (GraphicObjectSequence)
					stream << "\t\tSequence <GraphicObjectSequence>\n";
				else
					stream << "\t\tSequence <GraphicObjectSequence> not present\n";
				if (GraphicObjectSequence && strcmp(GraphicObjectSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=GraphicObjectSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *GraphicAnnotationUnits = (*list)[TagFromName(GraphicAnnotationUnits)];
							stream << "\t\t";
							if (GraphicAnnotationUnits) {
								stream << "\t\t";
								GraphicAnnotationUnits->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GraphicAnnotationUnits> not present\n";

							Attribute *GraphicDimensions = (*list)[TagFromName(GraphicDimensions)];
							stream << "\t\t";
							if (GraphicDimensions) {
								stream << "\t\t";
								GraphicDimensions->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GraphicDimensions> not present\n";

							Attribute *NumberOfGraphicPoints = (*list)[TagFromName(NumberOfGraphicPoints)];
							stream << "\t\t";
							if (NumberOfGraphicPoints) {
								stream << "\t\t";
								NumberOfGraphicPoints->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <NumberOfGraphicPoints> not present\n";

							Attribute *GraphicData = (*list)[TagFromName(GraphicData)];
							stream << "\t\t";
							if (GraphicData) {
								stream << "\t\t";
								GraphicData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GraphicData> not present\n";

							Attribute *GraphicType = (*list)[TagFromName(GraphicType)];
							stream << "\t\t";
							if (GraphicType) {
								stream << "\t\t";
								GraphicType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GraphicType> not present\n";

							Attribute *GraphicFilled = (*list)[TagFromName(GraphicFilled)];
							stream << "\t\t";
							if (GraphicFilled) {
								stream << "\t\t";
								GraphicFilled->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <GraphicFilled> not present\n";

							Attribute *TrackingID = (*list)[TagFromName(TrackingID)];
							stream << "\t\t";
							if (TrackingID) {
								stream << "\t\t";
								TrackingID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrackingID> not present\n";

							Attribute *TrackingUID = (*list)[TagFromName(TrackingUID)];
							stream << "\t\t";
							if (TrackingUID) {
								stream << "\t\t";
								TrackingUID->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <TrackingUID> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_SpatialTransformation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SpatialTransformation>\n";

	if (ImageRotation) {
		stream << "\t\t";
		ImageRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageRotation> not present\n";

	if (ImageHorizontalFlip) {
		stream << "\t\t";
		ImageHorizontalFlip->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageHorizontalFlip> not present\n";

}

void
Module_GraphicLayer::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <GraphicLayer>\n";

	if (GraphicLayerSequence)
		stream << "\t\tSequence <GraphicLayerSequence>\n";
	else
		stream << "\t\tSequence <GraphicLayerSequence> not present\n";
	if (GraphicLayerSequence && strcmp(GraphicLayerSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=GraphicLayerSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *GraphicLayer = (*list)[TagFromName(GraphicLayer)];
				stream << "\t";
				if (GraphicLayer) {
					stream << "\t\t";
					GraphicLayer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayer> not present\n";

				Attribute *GraphicLayerOrder = (*list)[TagFromName(GraphicLayerOrder)];
				stream << "\t";
				if (GraphicLayerOrder) {
					stream << "\t\t";
					GraphicLayerOrder->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayerOrder> not present\n";

				Attribute *GraphicLayerRecommendedDisplayGrayscaleValue = (*list)[TagFromName(GraphicLayerRecommendedDisplayGrayscaleValue)];
				stream << "\t";
				if (GraphicLayerRecommendedDisplayGrayscaleValue) {
					stream << "\t\t";
					GraphicLayerRecommendedDisplayGrayscaleValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayerRecommendedDisplayGrayscaleValue> not present\n";

				Attribute *GraphicLayerRecommendedDisplayCIELabValue = (*list)[TagFromName(GraphicLayerRecommendedDisplayCIELabValue)];
				stream << "\t";
				if (GraphicLayerRecommendedDisplayCIELabValue) {
					stream << "\t\t";
					GraphicLayerRecommendedDisplayCIELabValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayerRecommendedDisplayCIELabValue> not present\n";

				Attribute *GraphicLayerDescription = (*list)[TagFromName(GraphicLayerDescription)];
				stream << "\t";
				if (GraphicLayerDescription) {
					stream << "\t\t";
					GraphicLayerDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayerDescription> not present\n";

			}
		}
	}
}

void
Module_SoftcopyPresentationLUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SoftcopyPresentationLUT>\n";

	if (PresentationLUTSequence)
		stream << "\t\tSequence <PresentationLUTSequence>\n";
	else
		stream << "\t\tSequence <PresentationLUTSequence> not present\n";
	if (PresentationLUTSequence && strcmp(PresentationLUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PresentationLUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *LUTDescriptor = (*list)[TagFromName(LUTDescriptor)];
				stream << "\t";
				if (LUTDescriptor) {
					stream << "\t\t";
					LUTDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTDescriptor> not present\n";

				Attribute *LUTExplanation = (*list)[TagFromName(LUTExplanation)];
				stream << "\t";
				if (LUTExplanation) {
					stream << "\t\t";
					LUTExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTExplanation> not present\n";

				Attribute *LUTData = (*list)[TagFromName(LUTData)];
				stream << "\t";
				if (LUTData) {
					stream << "\t\t";
					LUTData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <LUTData> not present\n";

			}
		}
	}
	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

}

void
Module_OverlayActivation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <OverlayActivation>\n";

	if (OverlayActivationLayer) {
		stream << "\t\t";
		OverlayActivationLayer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OverlayActivationLayer> not present\n";

}

void
Module_SoftcopyVOILUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <SoftcopyVOILUT>\n";

	if (SoftcopyVOILUTSequence)
		stream << "\t\tSequence <SoftcopyVOILUTSequence>\n";
	else
		stream << "\t\tSequence <SoftcopyVOILUTSequence> not present\n";
	if (SoftcopyVOILUTSequence && strcmp(SoftcopyVOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SoftcopyVOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
							stream << "\t\t";
	Macro_VOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VOILUTMacro>\n";

			}
		}
	}
}

void
Module_PresentationSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PresentationSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

}

void
Module_PresentationStateIdentification::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PresentationStateIdentification>\n";

	if (PresentationCreationDate) {
		stream << "\t\t";
		PresentationCreationDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationCreationDate> not present\n";

	if (PresentationCreationTime) {
		stream << "\t\t";
		PresentationCreationTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationCreationTime> not present\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Macro_PresentationStateRelationshipMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PresentationStateRelationshipMacro>\n";

	if (ReferencedSeriesSequence)
		stream << "\t\tSequence <ReferencedSeriesSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSeriesSequence> not present\n";
	if (ReferencedSeriesSequence && strcmp(ReferencedSeriesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSeriesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SeriesInstanceUID = (*list)[TagFromName(SeriesInstanceUID)];
				stream << "\t";
				if (SeriesInstanceUID) {
					stream << "\t\t";
					SeriesInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SeriesInstanceUID> not present\n";

	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_PresentationStateRelationship::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PresentationStateRelationship>\n";

				stream << "\t";
	Macro_PresentationStateRelationshipMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <PresentationStateRelationshipMacro>\n";

}

void
Module_PresentationStateShutter::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PresentationStateShutter>\n";

	if (ShutterPresentationValue) {
		stream << "\t\t";
		ShutterPresentationValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterPresentationValue> not present\n";

	if (ShutterPresentationColorCIELabValue) {
		stream << "\t\t";
		ShutterPresentationColorCIELabValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ShutterPresentationColorCIELabValue> not present\n";

}

void
Module_PresentationStateMask::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PresentationStateMask>\n";

	if (MaskSubtractionSequence)
		stream << "\t\tSequence <MaskSubtractionSequence>\n";
	else
		stream << "\t\tSequence <MaskSubtractionSequence> not present\n";
	if (MaskSubtractionSequence && strcmp(MaskSubtractionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MaskSubtractionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MaskOperation = (*list)[TagFromName(MaskOperation)];
				stream << "\t";
				if (MaskOperation) {
					stream << "\t\t";
					MaskOperation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskOperation> not present\n";

				Attribute *ContrastFrameAveraging = (*list)[TagFromName(ContrastFrameAveraging)];
				stream << "\t";
				if (ContrastFrameAveraging) {
					stream << "\t\t";
					ContrastFrameAveraging->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastFrameAveraging> not present\n";

			}
		}
	}
	if (RecommendedViewingMode) {
		stream << "\t\t";
		RecommendedViewingMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecommendedViewingMode> not present\n";

}

void
Module_PresentationStateBlending::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <PresentationStateBlending>\n";

	if (BlendingSequence)
		stream << "\t\tSequence <BlendingSequence>\n";
	else
		stream << "\t\tSequence <BlendingSequence> not present\n";
	if (BlendingSequence && strcmp(BlendingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BlendingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *BlendingPosition = (*list)[TagFromName(BlendingPosition)];
				stream << "\t";
				if (BlendingPosition) {
					stream << "\t\t";
					BlendingPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingPosition> not present\n";

				Attribute *StudyInstanceUID = (*list)[TagFromName(StudyInstanceUID)];
				stream << "\t";
				if (StudyInstanceUID) {
					stream << "\t\t";
					StudyInstanceUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StudyInstanceUID> not present\n";

							stream << "\t\t";
	Macro_PresentationStateRelationshipMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PresentationStateRelationshipMacro>\n";

							stream << "\t\t";
	Macro_ModalityLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ModalityLUTMacro>\n";

	Attribute *SoftcopyVOILUTSequence = (*list)[TagFromName(SoftcopyVOILUTSequence)];
				stream << "\t";
				if (SoftcopyVOILUTSequence)
					stream << "\t\tSequence <SoftcopyVOILUTSequence>\n";
				else
					stream << "\t\tSequence <SoftcopyVOILUTSequence> not present\n";
				if (SoftcopyVOILUTSequence && strcmp(SoftcopyVOILUTSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SoftcopyVOILUTSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
							stream << "\t\t";
							if (ReferencedImageSequence)
								stream << "\t\tSequence <ReferencedImageSequence>\n";
							else
								stream << "\t\tSequence <ReferencedImageSequence> not present\n";
							if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

									}
								}
							}
										stream << "\t\t\t";
	Macro_VOILUTMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <VOILUTMacro>\n";

						}
					}
				}
			}
		}
	}
	if (RelativeOpacity) {
		stream << "\t\t";
		RelativeOpacity->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RelativeOpacity> not present\n";

	if (ReferencedSpatialRegistrationSequence)
		stream << "\t\tSequence <ReferencedSpatialRegistrationSequence>\n";
	else
		stream << "\t\tSequence <ReferencedSpatialRegistrationSequence> not present\n";
	if (ReferencedSpatialRegistrationSequence && strcmp(ReferencedSpatialRegistrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedSpatialRegistrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_ICCProfile::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ICCProfile>\n";

	if (ICCProfile) {
		stream << "\t\t";
		ICCProfile->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ICCProfile> not present\n";

	if (ColorSpace) {
		stream << "\t\t";
		ColorSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColorSpace> not present\n";

}

void
Macro_HangingProtocolSelectorAttributeContextMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HangingProtocolSelectorAttributeContextMacro>\n";

	if (SelectorSequencePointer) {
		stream << "\t\t";
		SelectorSequencePointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSequencePointer> not present\n";

	if (FunctionalGroupPointer) {
		stream << "\t\t";
		FunctionalGroupPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FunctionalGroupPointer> not present\n";

	if (SelectorSequencePointerPrivateCreator) {
		stream << "\t\t";
		SelectorSequencePointerPrivateCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSequencePointerPrivateCreator> not present\n";

	if (FunctionalGroupPrivateCreator) {
		stream << "\t\t";
		FunctionalGroupPrivateCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FunctionalGroupPrivateCreator> not present\n";

	if (SelectorAttributePrivateCreator) {
		stream << "\t\t";
		SelectorAttributePrivateCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorAttributePrivateCreator> not present\n";

}

void
Macro_HangingProtocolSelectorAttributeValueMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <HangingProtocolSelectorAttributeValueMacro>\n";

	if (SelectorATValue) {
		stream << "\t\t";
		SelectorATValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorATValue> not present\n";

	if (SelectorCSValue) {
		stream << "\t\t";
		SelectorCSValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorCSValue> not present\n";

	if (SelectorISValue) {
		stream << "\t\t";
		SelectorISValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorISValue> not present\n";

	if (SelectorLOValue) {
		stream << "\t\t";
		SelectorLOValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorLOValue> not present\n";

	if (SelectorLTValue) {
		stream << "\t\t";
		SelectorLTValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorLTValue> not present\n";

	if (SelectorPNValue) {
		stream << "\t\t";
		SelectorPNValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorPNValue> not present\n";

	if (SelectorSHValue) {
		stream << "\t\t";
		SelectorSHValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSHValue> not present\n";

	if (SelectorSTValue) {
		stream << "\t\t";
		SelectorSTValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSTValue> not present\n";

	if (SelectorUTValue) {
		stream << "\t\t";
		SelectorUTValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorUTValue> not present\n";

	if (SelectorDSValue) {
		stream << "\t\t";
		SelectorDSValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorDSValue> not present\n";

	if (SelectorFDValue) {
		stream << "\t\t";
		SelectorFDValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorFDValue> not present\n";

	if (SelectorFLValue) {
		stream << "\t\t";
		SelectorFLValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorFLValue> not present\n";

	if (SelectorULValue) {
		stream << "\t\t";
		SelectorULValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorULValue> not present\n";

	if (SelectorUSValue) {
		stream << "\t\t";
		SelectorUSValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorUSValue> not present\n";

	if (SelectorSLValue) {
		stream << "\t\t";
		SelectorSLValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSLValue> not present\n";

	if (SelectorSSValue) {
		stream << "\t\t";
		SelectorSSValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SelectorSSValue> not present\n";

	if (SelectorCodeSequenceValue)
		stream << "\t\tSequence <SelectorCodeSequenceValue>\n";
	else
		stream << "\t\tSequence <SelectorCodeSequenceValue> not present\n";
	if (SelectorCodeSequenceValue && strcmp(SelectorCodeSequenceValue->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SelectorCodeSequenceValue->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
}

void
Module_HangingProtocolDefinition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <HangingProtocolDefinition>\n";

	if (HangingProtocolName) {
		stream << "\t\t";
		HangingProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolName> not present\n";

	if (HangingProtocolDescription) {
		stream << "\t\t";
		HangingProtocolDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolDescription> not present\n";

	if (HangingProtocolLevel) {
		stream << "\t\t";
		HangingProtocolLevel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolLevel> not present\n";

	if (HangingProtocolCreator) {
		stream << "\t\t";
		HangingProtocolCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolCreator> not present\n";

	if (HangingProtocolCreationDateTime) {
		stream << "\t\t";
		HangingProtocolCreationDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolCreationDateTime> not present\n";

	if (HangingProtocolDefinitionSequence)
		stream << "\t\tSequence <HangingProtocolDefinitionSequence>\n";
	else
		stream << "\t\tSequence <HangingProtocolDefinitionSequence> not present\n";
	if (HangingProtocolDefinitionSequence && strcmp(HangingProtocolDefinitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HangingProtocolDefinitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *Modality = (*list)[TagFromName(Modality)];
				stream << "\t";
				if (Modality) {
					stream << "\t\t";
					Modality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Modality> not present\n";

	Attribute *AnatomicRegionSequence = (*list)[TagFromName(AnatomicRegionSequence)];
				stream << "\t";
				if (AnatomicRegionSequence)
					stream << "\t\tSequence <AnatomicRegionSequence>\n";
				else
					stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
				if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *Laterality = (*list)[TagFromName(Laterality)];
				stream << "\t";
				if (Laterality) {
					stream << "\t\t";
					Laterality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Laterality> not present\n";

	Attribute *ProcedureCodeSequence = (*list)[TagFromName(ProcedureCodeSequence)];
				stream << "\t";
				if (ProcedureCodeSequence)
					stream << "\t\tSequence <ProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ProcedureCodeSequence> not present\n";
				if (ProcedureCodeSequence && strcmp(ProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ReasonForRequestedProcedureCodeSequence = (*list)[TagFromName(ReasonForRequestedProcedureCodeSequence)];
				stream << "\t";
				if (ReasonForRequestedProcedureCodeSequence)
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence>\n";
				else
					stream << "\t\tSequence <ReasonForRequestedProcedureCodeSequence> not present\n";
				if (ReasonForRequestedProcedureCodeSequence && strcmp(ReasonForRequestedProcedureCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReasonForRequestedProcedureCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (NumberOfPriorsReferenced) {
		stream << "\t\t";
		NumberOfPriorsReferenced->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfPriorsReferenced> not present\n";

	if (ImageSetsSequence)
		stream << "\t\tSequence <ImageSetsSequence>\n";
	else
		stream << "\t\tSequence <ImageSetsSequence> not present\n";
	if (ImageSetsSequence && strcmp(ImageSetsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ImageSetsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *ImageSetSelectorSequence = (*list)[TagFromName(ImageSetSelectorSequence)];
				stream << "\t";
				if (ImageSetSelectorSequence)
					stream << "\t\tSequence <ImageSetSelectorSequence>\n";
				else
					stream << "\t\tSequence <ImageSetSelectorSequence> not present\n";
				if (ImageSetSelectorSequence && strcmp(ImageSetSelectorSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ImageSetSelectorSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ImageSetSelectorUsageFlag = (*list)[TagFromName(ImageSetSelectorUsageFlag)];
							stream << "\t\t";
							if (ImageSetSelectorUsageFlag) {
								stream << "\t\t";
								ImageSetSelectorUsageFlag->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageSetSelectorUsageFlag> not present\n";

							Attribute *SelectorAttribute = (*list)[TagFromName(SelectorAttribute)];
							stream << "\t\t";
							if (SelectorAttribute) {
								stream << "\t\t";
								SelectorAttribute->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorAttribute> not present\n";

							Attribute *SelectorAttributeVR = (*list)[TagFromName(SelectorAttributeVR)];
							stream << "\t\t";
							if (SelectorAttributeVR) {
								stream << "\t\t";
								SelectorAttributeVR->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorAttributeVR> not present\n";

										stream << "\t\t\t";
	Macro_HangingProtocolSelectorAttributeContextMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HangingProtocolSelectorAttributeContextMacro>\n";

										stream << "\t\t\t";
	Macro_HangingProtocolSelectorAttributeValueMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HangingProtocolSelectorAttributeValueMacro>\n";

							Attribute *SelectorValueNumber = (*list)[TagFromName(SelectorValueNumber)];
							stream << "\t\t";
							if (SelectorValueNumber) {
								stream << "\t\t";
								SelectorValueNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorValueNumber> not present\n";

						}
					}
				}
	Attribute *TimeBasedImageSetsSequence = (*list)[TagFromName(TimeBasedImageSetsSequence)];
				stream << "\t";
				if (TimeBasedImageSetsSequence)
					stream << "\t\tSequence <TimeBasedImageSetsSequence>\n";
				else
					stream << "\t\tSequence <TimeBasedImageSetsSequence> not present\n";
				if (TimeBasedImageSetsSequence && strcmp(TimeBasedImageSetsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TimeBasedImageSetsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ImageSetNumber = (*list)[TagFromName(ImageSetNumber)];
							stream << "\t\t";
							if (ImageSetNumber) {
								stream << "\t\t";
								ImageSetNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageSetNumber> not present\n";

							Attribute *ImageSetSelectorCategory = (*list)[TagFromName(ImageSetSelectorCategory)];
							stream << "\t\t";
							if (ImageSetSelectorCategory) {
								stream << "\t\t";
								ImageSetSelectorCategory->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageSetSelectorCategory> not present\n";

							Attribute *RelativeTime = (*list)[TagFromName(RelativeTime)];
							stream << "\t\t";
							if (RelativeTime) {
								stream << "\t\t";
								RelativeTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RelativeTime> not present\n";

							Attribute *RelativeTimeUnits = (*list)[TagFromName(RelativeTimeUnits)];
							stream << "\t\t";
							if (RelativeTimeUnits) {
								stream << "\t\t";
								RelativeTimeUnits->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RelativeTimeUnits> not present\n";

							Attribute *AbstractPriorValue = (*list)[TagFromName(AbstractPriorValue)];
							stream << "\t\t";
							if (AbstractPriorValue) {
								stream << "\t\t";
								AbstractPriorValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <AbstractPriorValue> not present\n";

	Attribute *AbstractPriorCodeSequence = (*list)[TagFromName(AbstractPriorCodeSequence)];
							stream << "\t\t";
							if (AbstractPriorCodeSequence)
								stream << "\t\tSequence <AbstractPriorCodeSequence>\n";
							else
								stream << "\t\tSequence <AbstractPriorCodeSequence> not present\n";
							if (AbstractPriorCodeSequence && strcmp(AbstractPriorCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=AbstractPriorCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
							Attribute *ImageSetLabel = (*list)[TagFromName(ImageSetLabel)];
							stream << "\t\t";
							if (ImageSetLabel) {
								stream << "\t\t";
								ImageSetLabel->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageSetLabel> not present\n";

						}
					}
				}
			}
		}
	}
	if (HangingProtocolUserIdentificationCodeSequence)
		stream << "\t\tSequence <HangingProtocolUserIdentificationCodeSequence>\n";
	else
		stream << "\t\tSequence <HangingProtocolUserIdentificationCodeSequence> not present\n";
	if (HangingProtocolUserIdentificationCodeSequence && strcmp(HangingProtocolUserIdentificationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=HangingProtocolUserIdentificationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (HangingProtocolUserGroupName) {
		stream << "\t\t";
		HangingProtocolUserGroupName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolUserGroupName> not present\n";

	if (SourceHangingProtocolSequence)
		stream << "\t\tSequence <SourceHangingProtocolSequence>\n";
	else
		stream << "\t\tSequence <SourceHangingProtocolSequence> not present\n";
	if (SourceHangingProtocolSequence && strcmp(SourceHangingProtocolSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceHangingProtocolSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_HangingProtocolEnvironment::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <HangingProtocolEnvironment>\n";

	if (NumberOfScreens) {
		stream << "\t\t";
		NumberOfScreens->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfScreens> not present\n";

	if (NominalScreenDefinitionSequence)
		stream << "\t\tSequence <NominalScreenDefinitionSequence>\n";
	else
		stream << "\t\tSequence <NominalScreenDefinitionSequence> not present\n";
	if (NominalScreenDefinitionSequence && strcmp(NominalScreenDefinitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=NominalScreenDefinitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ScreenSpecificationsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ScreenSpecificationsMacro>\n";

			}
		}
	}
}

void
Macro_ScreenSpecificationsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ScreenSpecificationsMacro>\n";

	if (NumberOfVerticalPixels) {
		stream << "\t\t";
		NumberOfVerticalPixels->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfVerticalPixels> not present\n";

	if (NumberOfHorizontalPixels) {
		stream << "\t\t";
		NumberOfHorizontalPixels->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfHorizontalPixels> not present\n";

	if (DisplayEnvironmentSpatialPosition) {
		stream << "\t\t";
		DisplayEnvironmentSpatialPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DisplayEnvironmentSpatialPosition> not present\n";

	if (ScreenMinimumGrayscaleBitDepth) {
		stream << "\t\t";
		ScreenMinimumGrayscaleBitDepth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScreenMinimumGrayscaleBitDepth> not present\n";

	if (ScreenMinimumColorBitDepth) {
		stream << "\t\t";
		ScreenMinimumColorBitDepth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScreenMinimumColorBitDepth> not present\n";

	if (ApplicationMaximumRepaintTime) {
		stream << "\t\t";
		ApplicationMaximumRepaintTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ApplicationMaximumRepaintTime> not present\n";

}

void
Module_HangingProtocolDisplay::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <HangingProtocolDisplay>\n";

	if (DisplaySetsSequence)
		stream << "\t\tSequence <DisplaySetsSequence>\n";
	else
		stream << "\t\tSequence <DisplaySetsSequence> not present\n";
	if (DisplaySetsSequence && strcmp(DisplaySetsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DisplaySetsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DisplaySetNumber = (*list)[TagFromName(DisplaySetNumber)];
				stream << "\t";
				if (DisplaySetNumber) {
					stream << "\t\t";
					DisplaySetNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetNumber> not present\n";

				Attribute *DisplaySetLabel = (*list)[TagFromName(DisplaySetLabel)];
				stream << "\t";
				if (DisplaySetLabel) {
					stream << "\t\t";
					DisplaySetLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetLabel> not present\n";

				Attribute *DisplaySetPresentationGroup = (*list)[TagFromName(DisplaySetPresentationGroup)];
				stream << "\t";
				if (DisplaySetPresentationGroup) {
					stream << "\t\t";
					DisplaySetPresentationGroup->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetPresentationGroup> not present\n";

				Attribute *ImageSetNumber = (*list)[TagFromName(ImageSetNumber)];
				stream << "\t";
				if (ImageSetNumber) {
					stream << "\t\t";
					ImageSetNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageSetNumber> not present\n";

	Attribute *ImageBoxesSequence = (*list)[TagFromName(ImageBoxesSequence)];
				stream << "\t";
				if (ImageBoxesSequence)
					stream << "\t\tSequence <ImageBoxesSequence>\n";
				else
					stream << "\t\tSequence <ImageBoxesSequence> not present\n";
				if (ImageBoxesSequence && strcmp(ImageBoxesSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ImageBoxesSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ImageBoxNumber = (*list)[TagFromName(ImageBoxNumber)];
							stream << "\t\t";
							if (ImageBoxNumber) {
								stream << "\t\t";
								ImageBoxNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxNumber> not present\n";

							Attribute *DisplayEnvironmentSpatialPosition = (*list)[TagFromName(DisplayEnvironmentSpatialPosition)];
							stream << "\t\t";
							if (DisplayEnvironmentSpatialPosition) {
								stream << "\t\t";
								DisplayEnvironmentSpatialPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DisplayEnvironmentSpatialPosition> not present\n";

							Attribute *ImageBoxLayoutType = (*list)[TagFromName(ImageBoxLayoutType)];
							stream << "\t\t";
							if (ImageBoxLayoutType) {
								stream << "\t\t";
								ImageBoxLayoutType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxLayoutType> not present\n";

							Attribute *ImageBoxTileHorizontalDimension = (*list)[TagFromName(ImageBoxTileHorizontalDimension)];
							stream << "\t\t";
							if (ImageBoxTileHorizontalDimension) {
								stream << "\t\t";
								ImageBoxTileHorizontalDimension->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxTileHorizontalDimension> not present\n";

							Attribute *ImageBoxTileVerticalDimension = (*list)[TagFromName(ImageBoxTileVerticalDimension)];
							stream << "\t\t";
							if (ImageBoxTileVerticalDimension) {
								stream << "\t\t";
								ImageBoxTileVerticalDimension->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxTileVerticalDimension> not present\n";

							Attribute *ImageBoxScrollDirection = (*list)[TagFromName(ImageBoxScrollDirection)];
							stream << "\t\t";
							if (ImageBoxScrollDirection) {
								stream << "\t\t";
								ImageBoxScrollDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxScrollDirection> not present\n";

							Attribute *ImageBoxSmallScrollType = (*list)[TagFromName(ImageBoxSmallScrollType)];
							stream << "\t\t";
							if (ImageBoxSmallScrollType) {
								stream << "\t\t";
								ImageBoxSmallScrollType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxSmallScrollType> not present\n";

							Attribute *ImageBoxSmallScrollAmount = (*list)[TagFromName(ImageBoxSmallScrollAmount)];
							stream << "\t\t";
							if (ImageBoxSmallScrollAmount) {
								stream << "\t\t";
								ImageBoxSmallScrollAmount->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxSmallScrollAmount> not present\n";

							Attribute *ImageBoxLargeScrollType = (*list)[TagFromName(ImageBoxLargeScrollType)];
							stream << "\t\t";
							if (ImageBoxLargeScrollType) {
								stream << "\t\t";
								ImageBoxLargeScrollType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxLargeScrollType> not present\n";

							Attribute *ImageBoxLargeScrollAmount = (*list)[TagFromName(ImageBoxLargeScrollAmount)];
							stream << "\t\t";
							if (ImageBoxLargeScrollAmount) {
								stream << "\t\t";
								ImageBoxLargeScrollAmount->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxLargeScrollAmount> not present\n";

							Attribute *ImageBoxOverlapPriority = (*list)[TagFromName(ImageBoxOverlapPriority)];
							stream << "\t\t";
							if (ImageBoxOverlapPriority) {
								stream << "\t\t";
								ImageBoxOverlapPriority->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageBoxOverlapPriority> not present\n";

							Attribute *PreferredPlaybackSequencing = (*list)[TagFromName(PreferredPlaybackSequencing)];
							stream << "\t\t";
							if (PreferredPlaybackSequencing) {
								stream << "\t\t";
								PreferredPlaybackSequencing->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PreferredPlaybackSequencing> not present\n";

							Attribute *RecommendedDisplayFrameRate = (*list)[TagFromName(RecommendedDisplayFrameRate)];
							stream << "\t\t";
							if (RecommendedDisplayFrameRate) {
								stream << "\t\t";
								RecommendedDisplayFrameRate->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RecommendedDisplayFrameRate> not present\n";

							Attribute *CineRelativeToRealTime = (*list)[TagFromName(CineRelativeToRealTime)];
							stream << "\t\t";
							if (CineRelativeToRealTime) {
								stream << "\t\t";
								CineRelativeToRealTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <CineRelativeToRealTime> not present\n";

						}
					}
				}
	Attribute *FilterOperationsSequence = (*list)[TagFromName(FilterOperationsSequence)];
				stream << "\t";
				if (FilterOperationsSequence)
					stream << "\t\tSequence <FilterOperationsSequence>\n";
				else
					stream << "\t\tSequence <FilterOperationsSequence> not present\n";
				if (FilterOperationsSequence && strcmp(FilterOperationsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=FilterOperationsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *FilterByCategory = (*list)[TagFromName(FilterByCategory)];
							stream << "\t\t";
							if (FilterByCategory) {
								stream << "\t\t";
								FilterByCategory->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FilterByCategory> not present\n";

							Attribute *FilterByAttributePresence = (*list)[TagFromName(FilterByAttributePresence)];
							stream << "\t\t";
							if (FilterByAttributePresence) {
								stream << "\t\t";
								FilterByAttributePresence->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FilterByAttributePresence> not present\n";

							Attribute *SelectorAttribute = (*list)[TagFromName(SelectorAttribute)];
							stream << "\t\t";
							if (SelectorAttribute) {
								stream << "\t\t";
								SelectorAttribute->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorAttribute> not present\n";

							Attribute *SelectorAttributeVR = (*list)[TagFromName(SelectorAttributeVR)];
							stream << "\t\t";
							if (SelectorAttributeVR) {
								stream << "\t\t";
								SelectorAttributeVR->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorAttributeVR> not present\n";

										stream << "\t\t\t";
	Macro_HangingProtocolSelectorAttributeContextMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HangingProtocolSelectorAttributeContextMacro>\n";

										stream << "\t\t\t";
	Macro_HangingProtocolSelectorAttributeValueMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HangingProtocolSelectorAttributeValueMacro>\n";

							Attribute *SelectorValueNumber = (*list)[TagFromName(SelectorValueNumber)];
							stream << "\t\t";
							if (SelectorValueNumber) {
								stream << "\t\t";
								SelectorValueNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorValueNumber> not present\n";

							Attribute *FilterByOperator = (*list)[TagFromName(FilterByOperator)];
							stream << "\t\t";
							if (FilterByOperator) {
								stream << "\t\t";
								FilterByOperator->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FilterByOperator> not present\n";

							Attribute *ImageSetSelectorUsageFlag = (*list)[TagFromName(ImageSetSelectorUsageFlag)];
							stream << "\t\t";
							if (ImageSetSelectorUsageFlag) {
								stream << "\t\t";
								ImageSetSelectorUsageFlag->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ImageSetSelectorUsageFlag> not present\n";

						}
					}
				}
	Attribute *SortingOperationsSequence = (*list)[TagFromName(SortingOperationsSequence)];
				stream << "\t";
				if (SortingOperationsSequence)
					stream << "\t\tSequence <SortingOperationsSequence>\n";
				else
					stream << "\t\tSequence <SortingOperationsSequence> not present\n";
				if (SortingOperationsSequence && strcmp(SortingOperationsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SortingOperationsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SelectorAttribute = (*list)[TagFromName(SelectorAttribute)];
							stream << "\t\t";
							if (SelectorAttribute) {
								stream << "\t\t";
								SelectorAttribute->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorAttribute> not present\n";

										stream << "\t\t\t";
	Macro_HangingProtocolSelectorAttributeContextMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <HangingProtocolSelectorAttributeContextMacro>\n";

							Attribute *SelectorValueNumber = (*list)[TagFromName(SelectorValueNumber)];
							stream << "\t\t";
							if (SelectorValueNumber) {
								stream << "\t\t";
								SelectorValueNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SelectorValueNumber> not present\n";

							Attribute *SortByCategory = (*list)[TagFromName(SortByCategory)];
							stream << "\t\t";
							if (SortByCategory) {
								stream << "\t\t";
								SortByCategory->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SortByCategory> not present\n";

							Attribute *SortingDirection = (*list)[TagFromName(SortingDirection)];
							stream << "\t\t";
							if (SortingDirection) {
								stream << "\t\t";
								SortingDirection->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SortingDirection> not present\n";

						}
					}
				}
				Attribute *BlendingOperationType = (*list)[TagFromName(BlendingOperationType)];
				stream << "\t";
				if (BlendingOperationType) {
					stream << "\t\t";
					BlendingOperationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingOperationType> not present\n";

				Attribute *ReformattingOperationType = (*list)[TagFromName(ReformattingOperationType)];
				stream << "\t";
				if (ReformattingOperationType) {
					stream << "\t\t";
					ReformattingOperationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReformattingOperationType> not present\n";

				Attribute *ReformattingThickness = (*list)[TagFromName(ReformattingThickness)];
				stream << "\t";
				if (ReformattingThickness) {
					stream << "\t\t";
					ReformattingThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReformattingThickness> not present\n";

				Attribute *ReformattingInterval = (*list)[TagFromName(ReformattingInterval)];
				stream << "\t";
				if (ReformattingInterval) {
					stream << "\t\t";
					ReformattingInterval->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReformattingInterval> not present\n";

				Attribute *ReformattingOperationInitialViewDirection = (*list)[TagFromName(ReformattingOperationInitialViewDirection)];
				stream << "\t";
				if (ReformattingOperationInitialViewDirection) {
					stream << "\t\t";
					ReformattingOperationInitialViewDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReformattingOperationInitialViewDirection> not present\n";

				Attribute *ThreeDRenderingType = (*list)[TagFromName(ThreeDRenderingType)];
				stream << "\t";
				if (ThreeDRenderingType) {
					stream << "\t\t";
					ThreeDRenderingType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ThreeDRenderingType> not present\n";

				Attribute *DisplaySetPatientOrientation = (*list)[TagFromName(DisplaySetPatientOrientation)];
				stream << "\t";
				if (DisplaySetPatientOrientation) {
					stream << "\t\t";
					DisplaySetPatientOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetPatientOrientation> not present\n";

				Attribute *DisplaySetHorizontalJustification = (*list)[TagFromName(DisplaySetHorizontalJustification)];
				stream << "\t";
				if (DisplaySetHorizontalJustification) {
					stream << "\t\t";
					DisplaySetHorizontalJustification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetHorizontalJustification> not present\n";

				Attribute *DisplaySetVerticalJustification = (*list)[TagFromName(DisplaySetVerticalJustification)];
				stream << "\t";
				if (DisplaySetVerticalJustification) {
					stream << "\t\t";
					DisplaySetVerticalJustification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetVerticalJustification> not present\n";

				Attribute *VOIType = (*list)[TagFromName(VOIType)];
				stream << "\t";
				if (VOIType) {
					stream << "\t\t";
					VOIType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VOIType> not present\n";

				Attribute *PseudoColorType = (*list)[TagFromName(PseudoColorType)];
				stream << "\t";
				if (PseudoColorType) {
					stream << "\t\t";
					PseudoColorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PseudoColorType> not present\n";

				Attribute *ShowGrayscaleInverted = (*list)[TagFromName(ShowGrayscaleInverted)];
				stream << "\t";
				if (ShowGrayscaleInverted) {
					stream << "\t\t";
					ShowGrayscaleInverted->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ShowGrayscaleInverted> not present\n";

				Attribute *ShowImageTrueSizeFlag = (*list)[TagFromName(ShowImageTrueSizeFlag)];
				stream << "\t";
				if (ShowImageTrueSizeFlag) {
					stream << "\t\t";
					ShowImageTrueSizeFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ShowImageTrueSizeFlag> not present\n";

				Attribute *ShowGraphicAnnotationFlag = (*list)[TagFromName(ShowGraphicAnnotationFlag)];
				stream << "\t";
				if (ShowGraphicAnnotationFlag) {
					stream << "\t\t";
					ShowGraphicAnnotationFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ShowGraphicAnnotationFlag> not present\n";

				Attribute *ShowPatientDemographicsFlag = (*list)[TagFromName(ShowPatientDemographicsFlag)];
				stream << "\t";
				if (ShowPatientDemographicsFlag) {
					stream << "\t\t";
					ShowPatientDemographicsFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ShowPatientDemographicsFlag> not present\n";

				Attribute *ShowAcquisitionTechniquesFlag = (*list)[TagFromName(ShowAcquisitionTechniquesFlag)];
				stream << "\t";
				if (ShowAcquisitionTechniquesFlag) {
					stream << "\t\t";
					ShowAcquisitionTechniquesFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ShowAcquisitionTechniquesFlag> not present\n";

				Attribute *DisplaySetPresentationGroupDescription = (*list)[TagFromName(DisplaySetPresentationGroupDescription)];
				stream << "\t";
				if (DisplaySetPresentationGroupDescription) {
					stream << "\t\t";
					DisplaySetPresentationGroupDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetPresentationGroupDescription> not present\n";

			}
		}
	}
	if (PartialDataDisplayHandling) {
		stream << "\t\t";
		PartialDataDisplayHandling->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PartialDataDisplayHandling> not present\n";

	if (SynchronizedScrollingSequence)
		stream << "\t\tSequence <SynchronizedScrollingSequence>\n";
	else
		stream << "\t\tSequence <SynchronizedScrollingSequence> not present\n";
	if (SynchronizedScrollingSequence && strcmp(SynchronizedScrollingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SynchronizedScrollingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DisplaySetScrollingGroup = (*list)[TagFromName(DisplaySetScrollingGroup)];
				stream << "\t";
				if (DisplaySetScrollingGroup) {
					stream << "\t\t";
					DisplaySetScrollingGroup->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetScrollingGroup> not present\n";

			}
		}
	}
	if (NavigationIndicatorSequence)
		stream << "\t\tSequence <NavigationIndicatorSequence>\n";
	else
		stream << "\t\tSequence <NavigationIndicatorSequence> not present\n";
	if (NavigationIndicatorSequence && strcmp(NavigationIndicatorSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=NavigationIndicatorSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *NavigationDisplaySet = (*list)[TagFromName(NavigationDisplaySet)];
				stream << "\t";
				if (NavigationDisplaySet) {
					stream << "\t\t";
					NavigationDisplaySet->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NavigationDisplaySet> not present\n";

				Attribute *ReferenceDisplaySets = (*list)[TagFromName(ReferenceDisplaySets)];
				stream << "\t";
				if (ReferenceDisplaySets) {
					stream << "\t\t";
					ReferenceDisplaySets->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferenceDisplaySets> not present\n";

			}
		}
	}
}

void
Module_ColorPaletteDefinition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ColorPaletteDefinition>\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

}

void
Module_StructuredDisplay::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <StructuredDisplay>\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (PresentationCreationDate) {
		stream << "\t\t";
		PresentationCreationDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationCreationDate> not present\n";

	if (PresentationCreationTime) {
		stream << "\t\t";
		PresentationCreationTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationCreationTime> not present\n";

	if (NumberOfScreens) {
		stream << "\t\t";
		NumberOfScreens->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfScreens> not present\n";

	if (NominalScreenDefinitionSequence)
		stream << "\t\tSequence <NominalScreenDefinitionSequence>\n";
	else
		stream << "\t\tSequence <NominalScreenDefinitionSequence> not present\n";
	if (NominalScreenDefinitionSequence && strcmp(NominalScreenDefinitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=NominalScreenDefinitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ScreenSpecificationsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ScreenSpecificationsMacro>\n";

			}
		}
	}
	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (StructuredDisplayBackgroundCIELabValue) {
		stream << "\t\t";
		StructuredDisplayBackgroundCIELabValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StructuredDisplayBackgroundCIELabValue> not present\n";

	if (EmptyImageBoxCIELabValue) {
		stream << "\t\t";
		EmptyImageBoxCIELabValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EmptyImageBoxCIELabValue> not present\n";

	if (HangingProtocolName) {
		stream << "\t\t";
		HangingProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolName> not present\n";

	if (HangingProtocolCreator) {
		stream << "\t\t";
		HangingProtocolCreator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HangingProtocolCreator> not present\n";

}

void
Module_StructuredDisplayImageBox::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <StructuredDisplayImageBox>\n";

	if (StructuredDisplayImageBoxSequence)
		stream << "\t\tSequence <StructuredDisplayImageBoxSequence>\n";
	else
		stream << "\t\tSequence <StructuredDisplayImageBoxSequence> not present\n";
	if (StructuredDisplayImageBoxSequence && strcmp(StructuredDisplayImageBoxSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StructuredDisplayImageBoxSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DisplayEnvironmentSpatialPosition = (*list)[TagFromName(DisplayEnvironmentSpatialPosition)];
				stream << "\t";
				if (DisplayEnvironmentSpatialPosition) {
					stream << "\t\t";
					DisplayEnvironmentSpatialPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplayEnvironmentSpatialPosition> not present\n";

				Attribute *ImageBoxNumber = (*list)[TagFromName(ImageBoxNumber)];
				stream << "\t";
				if (ImageBoxNumber) {
					stream << "\t\t";
					ImageBoxNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageBoxNumber> not present\n";

				Attribute *ImageBoxLayoutType = (*list)[TagFromName(ImageBoxLayoutType)];
				stream << "\t";
				if (ImageBoxLayoutType) {
					stream << "\t\t";
					ImageBoxLayoutType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageBoxLayoutType> not present\n";

				Attribute *ImageBoxOverlapPriority = (*list)[TagFromName(ImageBoxOverlapPriority)];
				stream << "\t";
				if (ImageBoxOverlapPriority) {
					stream << "\t\t";
					ImageBoxOverlapPriority->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageBoxOverlapPriority> not present\n";

				Attribute *DisplaySetHorizontalJustification = (*list)[TagFromName(DisplaySetHorizontalJustification)];
				stream << "\t";
				if (DisplaySetHorizontalJustification) {
					stream << "\t\t";
					DisplaySetHorizontalJustification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetHorizontalJustification> not present\n";

				Attribute *DisplaySetVerticalJustification = (*list)[TagFromName(DisplaySetVerticalJustification)];
				stream << "\t";
				if (DisplaySetVerticalJustification) {
					stream << "\t\t";
					DisplaySetVerticalJustification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplaySetVerticalJustification> not present\n";

				Attribute *PreferredPlaybackSequencing = (*list)[TagFromName(PreferredPlaybackSequencing)];
				stream << "\t";
				if (PreferredPlaybackSequencing) {
					stream << "\t\t";
					PreferredPlaybackSequencing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PreferredPlaybackSequencing> not present\n";

				Attribute *RecommendedDisplayFrameRate = (*list)[TagFromName(RecommendedDisplayFrameRate)];
				stream << "\t";
				if (RecommendedDisplayFrameRate) {
					stream << "\t\t";
					RecommendedDisplayFrameRate->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayFrameRate> not present\n";

				Attribute *CineRelativeToRealTime = (*list)[TagFromName(CineRelativeToRealTime)];
				stream << "\t";
				if (CineRelativeToRealTime) {
					stream << "\t\t";
					CineRelativeToRealTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CineRelativeToRealTime> not present\n";

				Attribute *InitialCineRunState = (*list)[TagFromName(InitialCineRunState)];
				stream << "\t";
				if (InitialCineRunState) {
					stream << "\t\t";
					InitialCineRunState->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InitialCineRunState> not present\n";

				Attribute *StartTrim = (*list)[TagFromName(StartTrim)];
				stream << "\t";
				if (StartTrim) {
					stream << "\t\t";
					StartTrim->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StartTrim> not present\n";

				Attribute *StopTrim = (*list)[TagFromName(StopTrim)];
				stream << "\t";
				if (StopTrim) {
					stream << "\t\t";
					StopTrim->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StopTrim> not present\n";

	Attribute *ReferencedFirstFrameSequence = (*list)[TagFromName(ReferencedFirstFrameSequence)];
				stream << "\t";
				if (ReferencedFirstFrameSequence)
					stream << "\t\tSequence <ReferencedFirstFrameSequence>\n";
				else
					stream << "\t\tSequence <ReferencedFirstFrameSequence> not present\n";
				if (ReferencedFirstFrameSequence && strcmp(ReferencedFirstFrameSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedFirstFrameSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedImageSequence = (*list)[TagFromName(ReferencedImageSequence)];
				stream << "\t";
				if (ReferencedImageSequence)
					stream << "\t\tSequence <ReferencedImageSequence>\n";
				else
					stream << "\t\tSequence <ReferencedImageSequence> not present\n";
				if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *ReferencedPresentationStateSequence = (*list)[TagFromName(ReferencedPresentationStateSequence)];
							stream << "\t\t";
							if (ReferencedPresentationStateSequence)
								stream << "\t\tSequence <ReferencedPresentationStateSequence>\n";
							else
								stream << "\t\tSequence <ReferencedPresentationStateSequence> not present\n";
							if (ReferencedPresentationStateSequence && strcmp(ReferencedPresentationStateSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ReferencedPresentationStateSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

									}
								}
							}
						}
					}
				}
	Attribute *ReferencedPresentationStateSequence = (*list)[TagFromName(ReferencedPresentationStateSequence)];
				stream << "\t";
				if (ReferencedPresentationStateSequence)
					stream << "\t\tSequence <ReferencedPresentationStateSequence>\n";
				else
					stream << "\t\tSequence <ReferencedPresentationStateSequence> not present\n";
				if (ReferencedPresentationStateSequence && strcmp(ReferencedPresentationStateSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedPresentationStateSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedInstanceSequence = (*list)[TagFromName(ReferencedInstanceSequence)];
				stream << "\t";
				if (ReferencedInstanceSequence)
					stream << "\t\tSequence <ReferencedInstanceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
				if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
	Attribute *ReferencedStereometricInstanceSequence = (*list)[TagFromName(ReferencedStereometricInstanceSequence)];
				stream << "\t";
				if (ReferencedStereometricInstanceSequence)
					stream << "\t\tSequence <ReferencedStereometricInstanceSequence>\n";
				else
					stream << "\t\tSequence <ReferencedStereometricInstanceSequence> not present\n";
				if (ReferencedStereometricInstanceSequence && strcmp(ReferencedStereometricInstanceSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ReferencedStereometricInstanceSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ImageBoxSynchronizationSequence)
		stream << "\t\tSequence <ImageBoxSynchronizationSequence>\n";
	else
		stream << "\t\tSequence <ImageBoxSynchronizationSequence> not present\n";
	if (ImageBoxSynchronizationSequence && strcmp(ImageBoxSynchronizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ImageBoxSynchronizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SynchronizedImageBoxList = (*list)[TagFromName(SynchronizedImageBoxList)];
				stream << "\t";
				if (SynchronizedImageBoxList) {
					stream << "\t\t";
					SynchronizedImageBoxList->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SynchronizedImageBoxList> not present\n";

				Attribute *TypeOfSynchronization = (*list)[TagFromName(TypeOfSynchronization)];
				stream << "\t";
				if (TypeOfSynchronization) {
					stream << "\t\t";
					TypeOfSynchronization->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TypeOfSynchronization> not present\n";

			}
		}
	}
}

void
Module_StructuredDisplayAnnotation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <StructuredDisplayAnnotation>\n";

	if (StructuredDisplayTextBoxSequence)
		stream << "\t\tSequence <StructuredDisplayTextBoxSequence>\n";
	else
		stream << "\t\tSequence <StructuredDisplayTextBoxSequence> not present\n";
	if (StructuredDisplayTextBoxSequence && strcmp(StructuredDisplayTextBoxSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StructuredDisplayTextBoxSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *UnformattedTextValue = (*list)[TagFromName(UnformattedTextValue)];
				stream << "\t";
				if (UnformattedTextValue) {
					stream << "\t\t";
					UnformattedTextValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <UnformattedTextValue> not present\n";

				Attribute *DisplayEnvironmentSpatialPosition = (*list)[TagFromName(DisplayEnvironmentSpatialPosition)];
				stream << "\t";
				if (DisplayEnvironmentSpatialPosition) {
					stream << "\t\t";
					DisplayEnvironmentSpatialPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplayEnvironmentSpatialPosition> not present\n";

				Attribute *BoundingBoxTextHorizontalJustification = (*list)[TagFromName(BoundingBoxTextHorizontalJustification)];
				stream << "\t";
				if (BoundingBoxTextHorizontalJustification) {
					stream << "\t\t";
					BoundingBoxTextHorizontalJustification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BoundingBoxTextHorizontalJustification> not present\n";

				Attribute *GraphicLayerRecommendedDisplayCIELabValue = (*list)[TagFromName(GraphicLayerRecommendedDisplayCIELabValue)];
				stream << "\t";
				if (GraphicLayerRecommendedDisplayCIELabValue) {
					stream << "\t\t";
					GraphicLayerRecommendedDisplayCIELabValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GraphicLayerRecommendedDisplayCIELabValue> not present\n";

			}
		}
	}
}

void
Macro_CommonCTMRImageDescriptionImageLevelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CommonCTMRImageDescriptionImageLevelMacro>\n";

	if (PixelPresentation) {
		stream << "\t\t";
		PixelPresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPresentation> not present\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (VolumeBasedCalculationTechnique) {
		stream << "\t\t";
		VolumeBasedCalculationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

}

void
Macro_CommonCTMRImageDescriptionFrameLevelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CommonCTMRImageDescriptionFrameLevelMacro>\n";

	if (PixelPresentation) {
		stream << "\t\t";
		PixelPresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPresentation> not present\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (VolumeBasedCalculationTechnique) {
		stream << "\t\t";
		VolumeBasedCalculationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

}

void
Macro_MRImageDescriptionImageLevelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRImageDescriptionImageLevelMacro>\n";

	if (ComplexImageComponent) {
		stream << "\t\t";
		ComplexImageComponent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ComplexImageComponent> not present\n";

	if (AcquisitionContrast) {
		stream << "\t\t";
		AcquisitionContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionContrast> not present\n";

}

void
Macro_MRImageDescriptionFrameLevelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRImageDescriptionFrameLevelMacro>\n";

	if (ComplexImageComponent) {
		stream << "\t\t";
		ComplexImageComponent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ComplexImageComponent> not present\n";

	if (AcquisitionContrast) {
		stream << "\t\t";
		AcquisitionContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionContrast> not present\n";

}

void
Macro_MRSpectroscopyDescriptionImageLevelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRSpectroscopyDescriptionImageLevelMacro>\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (VolumeBasedCalculationTechnique) {
		stream << "\t\t";
		VolumeBasedCalculationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

	if (ComplexImageComponent) {
		stream << "\t\t";
		ComplexImageComponent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ComplexImageComponent> not present\n";

	if (AcquisitionContrast) {
		stream << "\t\t";
		AcquisitionContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionContrast> not present\n";

}

void
Macro_MRSpectroscopyDescriptionFrameLevelMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRSpectroscopyDescriptionFrameLevelMacro>\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (VolumeBasedCalculationTechnique) {
		stream << "\t\t";
		VolumeBasedCalculationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

	if (ComplexImageComponent) {
		stream << "\t\t";
		ComplexImageComponent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ComplexImageComponent> not present\n";

	if (AcquisitionContrast) {
		stream << "\t\t";
		AcquisitionContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionContrast> not present\n";

}

void
Macro_MRImageFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRImageFrameTypeMacro>\n";

	if (MRImageFrameTypeSequence)
		stream << "\t\tSequence <MRImageFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <MRImageFrameTypeSequence> not present\n";
	if (MRImageFrameTypeSequence && strcmp(MRImageFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRImageFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

							stream << "\t\t";
	Macro_CommonCTMRImageDescriptionFrameLevelMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionFrameLevelMacro>\n";

							stream << "\t\t";
	Macro_MRImageDescriptionFrameLevelMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageDescriptionFrameLevelMacro>\n";

			}
		}
	}
}

void
Macro_MRTimingAndRelatedParametersMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRTimingAndRelatedParametersMacro>\n";

	if (MRTimingAndRelatedParametersSequence)
		stream << "\t\tSequence <MRTimingAndRelatedParametersSequence>\n";
	else
		stream << "\t\tSequence <MRTimingAndRelatedParametersSequence> not present\n";
	if (MRTimingAndRelatedParametersSequence && strcmp(MRTimingAndRelatedParametersSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRTimingAndRelatedParametersSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RepetitionTime = (*list)[TagFromName(RepetitionTime)];
				stream << "\t";
				if (RepetitionTime) {
					stream << "\t\t";
					RepetitionTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RepetitionTime> not present\n";

				Attribute *FlipAngle = (*list)[TagFromName(FlipAngle)];
				stream << "\t";
				if (FlipAngle) {
					stream << "\t\t";
					FlipAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FlipAngle> not present\n";

				Attribute *EchoTrainLength = (*list)[TagFromName(EchoTrainLength)];
				stream << "\t";
				if (EchoTrainLength) {
					stream << "\t\t";
					EchoTrainLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EchoTrainLength> not present\n";

				Attribute *RFEchoTrainLength = (*list)[TagFromName(RFEchoTrainLength)];
				stream << "\t";
				if (RFEchoTrainLength) {
					stream << "\t\t";
					RFEchoTrainLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RFEchoTrainLength> not present\n";

				Attribute *GradientEchoTrainLength = (*list)[TagFromName(GradientEchoTrainLength)];
				stream << "\t";
				if (GradientEchoTrainLength) {
					stream << "\t\t";
					GradientEchoTrainLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GradientEchoTrainLength> not present\n";

	Attribute *SpecificAbsorptionRateSequence = (*list)[TagFromName(SpecificAbsorptionRateSequence)];
				stream << "\t";
				if (SpecificAbsorptionRateSequence)
					stream << "\t\tSequence <SpecificAbsorptionRateSequence>\n";
				else
					stream << "\t\tSequence <SpecificAbsorptionRateSequence> not present\n";
				if (SpecificAbsorptionRateSequence && strcmp(SpecificAbsorptionRateSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=SpecificAbsorptionRateSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *SpecificAbsorptionRateDefinition = (*list)[TagFromName(SpecificAbsorptionRateDefinition)];
							stream << "\t\t";
							if (SpecificAbsorptionRateDefinition) {
								stream << "\t\t";
								SpecificAbsorptionRateDefinition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecificAbsorptionRateDefinition> not present\n";

							Attribute *SpecificAbsorptionRateValue = (*list)[TagFromName(SpecificAbsorptionRateValue)];
							stream << "\t\t";
							if (SpecificAbsorptionRateValue) {
								stream << "\t\t";
								SpecificAbsorptionRateValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <SpecificAbsorptionRateValue> not present\n";

						}
					}
				}
				Attribute *GradientOutputType = (*list)[TagFromName(GradientOutputType)];
				stream << "\t";
				if (GradientOutputType) {
					stream << "\t\t";
					GradientOutputType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GradientOutputType> not present\n";

				Attribute *GradientOutput = (*list)[TagFromName(GradientOutput)];
				stream << "\t";
				if (GradientOutput) {
					stream << "\t\t";
					GradientOutput->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GradientOutput> not present\n";

	Attribute *OperatingModeSequence = (*list)[TagFromName(OperatingModeSequence)];
				stream << "\t";
				if (OperatingModeSequence)
					stream << "\t\tSequence <OperatingModeSequence>\n";
				else
					stream << "\t\tSequence <OperatingModeSequence> not present\n";
				if (OperatingModeSequence && strcmp(OperatingModeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=OperatingModeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *OperatingModeType = (*list)[TagFromName(OperatingModeType)];
							stream << "\t\t";
							if (OperatingModeType) {
								stream << "\t\t";
								OperatingModeType->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OperatingModeType> not present\n";

							Attribute *OperatingMode = (*list)[TagFromName(OperatingMode)];
							stream << "\t\t";
							if (OperatingMode) {
								stream << "\t\t";
								OperatingMode->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <OperatingMode> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_MRFOVGeometryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRFOVGeometryMacro>\n";

	if (MRFOVGeometrySequence)
		stream << "\t\tSequence <MRFOVGeometrySequence>\n";
	else
		stream << "\t\tSequence <MRFOVGeometrySequence> not present\n";
	if (MRFOVGeometrySequence && strcmp(MRFOVGeometrySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRFOVGeometrySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *InPlanePhaseEncodingDirection = (*list)[TagFromName(InPlanePhaseEncodingDirection)];
				stream << "\t";
				if (InPlanePhaseEncodingDirection) {
					stream << "\t\t";
					InPlanePhaseEncodingDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InPlanePhaseEncodingDirection> not present\n";

				Attribute *MRAcquisitionFrequencyEncodingSteps = (*list)[TagFromName(MRAcquisitionFrequencyEncodingSteps)];
				stream << "\t";
				if (MRAcquisitionFrequencyEncodingSteps) {
					stream << "\t\t";
					MRAcquisitionFrequencyEncodingSteps->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MRAcquisitionFrequencyEncodingSteps> not present\n";

				Attribute *MRAcquisitionPhaseEncodingStepsInPlane = (*list)[TagFromName(MRAcquisitionPhaseEncodingStepsInPlane)];
				stream << "\t";
				if (MRAcquisitionPhaseEncodingStepsInPlane) {
					stream << "\t\t";
					MRAcquisitionPhaseEncodingStepsInPlane->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MRAcquisitionPhaseEncodingStepsInPlane> not present\n";

				Attribute *MRAcquisitionPhaseEncodingStepsOutOfPlane = (*list)[TagFromName(MRAcquisitionPhaseEncodingStepsOutOfPlane)];
				stream << "\t";
				if (MRAcquisitionPhaseEncodingStepsOutOfPlane) {
					stream << "\t\t";
					MRAcquisitionPhaseEncodingStepsOutOfPlane->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MRAcquisitionPhaseEncodingStepsOutOfPlane> not present\n";

				Attribute *PercentSampling = (*list)[TagFromName(PercentSampling)];
				stream << "\t";
				if (PercentSampling) {
					stream << "\t\t";
					PercentSampling->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PercentSampling> not present\n";

				Attribute *PercentPhaseFieldOfView = (*list)[TagFromName(PercentPhaseFieldOfView)];
				stream << "\t";
				if (PercentPhaseFieldOfView) {
					stream << "\t\t";
					PercentPhaseFieldOfView->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PercentPhaseFieldOfView> not present\n";

			}
		}
	}
}

void
Macro_MREchoMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MREchoMacro>\n";

	if (MREchoSequence)
		stream << "\t\tSequence <MREchoSequence>\n";
	else
		stream << "\t\tSequence <MREchoSequence> not present\n";
	if (MREchoSequence && strcmp(MREchoSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MREchoSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *EffectiveEchoTime = (*list)[TagFromName(EffectiveEchoTime)];
				stream << "\t";
				if (EffectiveEchoTime) {
					stream << "\t\t";
					EffectiveEchoTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EffectiveEchoTime> not present\n";

			}
		}
	}
}

void
Macro_MRModifierMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRModifierMacro>\n";

	if (MRModifierSequence)
		stream << "\t\tSequence <MRModifierSequence>\n";
	else
		stream << "\t\tSequence <MRModifierSequence> not present\n";
	if (MRModifierSequence && strcmp(MRModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *InversionRecovery = (*list)[TagFromName(InversionRecovery)];
				stream << "\t";
				if (InversionRecovery) {
					stream << "\t\t";
					InversionRecovery->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InversionRecovery> not present\n";

				Attribute *InversionTimes = (*list)[TagFromName(InversionTimes)];
				stream << "\t";
				if (InversionTimes) {
					stream << "\t\t";
					InversionTimes->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InversionTimes> not present\n";

				Attribute *FlowCompensation = (*list)[TagFromName(FlowCompensation)];
				stream << "\t";
				if (FlowCompensation) {
					stream << "\t\t";
					FlowCompensation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FlowCompensation> not present\n";

				Attribute *FlowCompensationDirection = (*list)[TagFromName(FlowCompensationDirection)];
				stream << "\t";
				if (FlowCompensationDirection) {
					stream << "\t\t";
					FlowCompensationDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FlowCompensationDirection> not present\n";

				Attribute *Spoiling = (*list)[TagFromName(Spoiling)];
				stream << "\t";
				if (Spoiling) {
					stream << "\t\t";
					Spoiling->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Spoiling> not present\n";

				Attribute *T2Preparation = (*list)[TagFromName(T2Preparation)];
				stream << "\t";
				if (T2Preparation) {
					stream << "\t\t";
					T2Preparation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <T2Preparation> not present\n";

				Attribute *SpectrallySelectedExcitation = (*list)[TagFromName(SpectrallySelectedExcitation)];
				stream << "\t";
				if (SpectrallySelectedExcitation) {
					stream << "\t\t";
					SpectrallySelectedExcitation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpectrallySelectedExcitation> not present\n";

				Attribute *SpatialPresaturation = (*list)[TagFromName(SpatialPresaturation)];
				stream << "\t";
				if (SpatialPresaturation) {
					stream << "\t\t";
					SpatialPresaturation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpatialPresaturation> not present\n";

				Attribute *PartialFourier = (*list)[TagFromName(PartialFourier)];
				stream << "\t";
				if (PartialFourier) {
					stream << "\t\t";
					PartialFourier->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PartialFourier> not present\n";

				Attribute *PartialFourierDirection = (*list)[TagFromName(PartialFourierDirection)];
				stream << "\t";
				if (PartialFourierDirection) {
					stream << "\t\t";
					PartialFourierDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PartialFourierDirection> not present\n";

				Attribute *ParallelAcquisition = (*list)[TagFromName(ParallelAcquisition)];
				stream << "\t";
				if (ParallelAcquisition) {
					stream << "\t\t";
					ParallelAcquisition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParallelAcquisition> not present\n";

				Attribute *ParallelAcquisitionTechnique = (*list)[TagFromName(ParallelAcquisitionTechnique)];
				stream << "\t";
				if (ParallelAcquisitionTechnique) {
					stream << "\t\t";
					ParallelAcquisitionTechnique->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParallelAcquisitionTechnique> not present\n";

				Attribute *ParallelReductionFactorInPlane = (*list)[TagFromName(ParallelReductionFactorInPlane)];
				stream << "\t";
				if (ParallelReductionFactorInPlane) {
					stream << "\t\t";
					ParallelReductionFactorInPlane->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParallelReductionFactorInPlane> not present\n";

				Attribute *ParallelReductionFactorOutOfPlane = (*list)[TagFromName(ParallelReductionFactorOutOfPlane)];
				stream << "\t";
				if (ParallelReductionFactorOutOfPlane) {
					stream << "\t\t";
					ParallelReductionFactorOutOfPlane->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParallelReductionFactorOutOfPlane> not present\n";

				Attribute *ParallelReductionFactorSecondInPlane = (*list)[TagFromName(ParallelReductionFactorSecondInPlane)];
				stream << "\t";
				if (ParallelReductionFactorSecondInPlane) {
					stream << "\t\t";
					ParallelReductionFactorSecondInPlane->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ParallelReductionFactorSecondInPlane> not present\n";

			}
		}
	}
}

void
Macro_MRImagingModifierMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRImagingModifierMacro>\n";

	if (MRImagingModifierSequence)
		stream << "\t\tSequence <MRImagingModifierSequence>\n";
	else
		stream << "\t\tSequence <MRImagingModifierSequence> not present\n";
	if (MRImagingModifierSequence && strcmp(MRImagingModifierSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRImagingModifierSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MagnetizationTransfer = (*list)[TagFromName(MagnetizationTransfer)];
				stream << "\t";
				if (MagnetizationTransfer) {
					stream << "\t\t";
					MagnetizationTransfer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MagnetizationTransfer> not present\n";

				Attribute *BloodSignalNulling = (*list)[TagFromName(BloodSignalNulling)];
				stream << "\t";
				if (BloodSignalNulling) {
					stream << "\t\t";
					BloodSignalNulling->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BloodSignalNulling> not present\n";

				Attribute *Tagging = (*list)[TagFromName(Tagging)];
				stream << "\t";
				if (Tagging) {
					stream << "\t\t";
					Tagging->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Tagging> not present\n";

				Attribute *TagSpacingFirstDimension = (*list)[TagFromName(TagSpacingFirstDimension)];
				stream << "\t";
				if (TagSpacingFirstDimension) {
					stream << "\t\t";
					TagSpacingFirstDimension->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TagSpacingFirstDimension> not present\n";

				Attribute *TagSpacingSecondDimension = (*list)[TagFromName(TagSpacingSecondDimension)];
				stream << "\t";
				if (TagSpacingSecondDimension) {
					stream << "\t\t";
					TagSpacingSecondDimension->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TagSpacingSecondDimension> not present\n";

				Attribute *TagAngleFirstAxis = (*list)[TagFromName(TagAngleFirstAxis)];
				stream << "\t";
				if (TagAngleFirstAxis) {
					stream << "\t\t";
					TagAngleFirstAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TagAngleFirstAxis> not present\n";

				Attribute *TagAngleSecondAxis = (*list)[TagFromName(TagAngleSecondAxis)];
				stream << "\t";
				if (TagAngleSecondAxis) {
					stream << "\t\t";
					TagAngleSecondAxis->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TagAngleSecondAxis> not present\n";

				Attribute *TagThickness = (*list)[TagFromName(TagThickness)];
				stream << "\t";
				if (TagThickness) {
					stream << "\t\t";
					TagThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TagThickness> not present\n";

				Attribute *TaggingDelay = (*list)[TagFromName(TaggingDelay)];
				stream << "\t";
				if (TaggingDelay) {
					stream << "\t\t";
					TaggingDelay->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TaggingDelay> not present\n";

				Attribute *TransmitterFrequency = (*list)[TagFromName(TransmitterFrequency)];
				stream << "\t";
				if (TransmitterFrequency) {
					stream << "\t\t";
					TransmitterFrequency->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TransmitterFrequency> not present\n";

				Attribute *PixelBandwidth = (*list)[TagFromName(PixelBandwidth)];
				stream << "\t";
				if (PixelBandwidth) {
					stream << "\t\t";
					PixelBandwidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelBandwidth> not present\n";

			}
		}
	}
}

void
Macro_MRReceiveCoilMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRReceiveCoilMacro>\n";

	if (MRReceiveCoilSequence)
		stream << "\t\tSequence <MRReceiveCoilSequence>\n";
	else
		stream << "\t\tSequence <MRReceiveCoilSequence> not present\n";
	if (MRReceiveCoilSequence && strcmp(MRReceiveCoilSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRReceiveCoilSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReceiveCoilName = (*list)[TagFromName(ReceiveCoilName)];
				stream << "\t";
				if (ReceiveCoilName) {
					stream << "\t\t";
					ReceiveCoilName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReceiveCoilName> not present\n";

				Attribute *ReceiveCoilManufacturerName = (*list)[TagFromName(ReceiveCoilManufacturerName)];
				stream << "\t";
				if (ReceiveCoilManufacturerName) {
					stream << "\t\t";
					ReceiveCoilManufacturerName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReceiveCoilManufacturerName> not present\n";

				Attribute *ReceiveCoilType = (*list)[TagFromName(ReceiveCoilType)];
				stream << "\t";
				if (ReceiveCoilType) {
					stream << "\t\t";
					ReceiveCoilType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReceiveCoilType> not present\n";

				Attribute *QuadratureReceiveCoil = (*list)[TagFromName(QuadratureReceiveCoil)];
				stream << "\t";
				if (QuadratureReceiveCoil) {
					stream << "\t\t";
					QuadratureReceiveCoil->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <QuadratureReceiveCoil> not present\n";

	Attribute *MultiCoilDefinitionSequence = (*list)[TagFromName(MultiCoilDefinitionSequence)];
				stream << "\t";
				if (MultiCoilDefinitionSequence)
					stream << "\t\tSequence <MultiCoilDefinitionSequence>\n";
				else
					stream << "\t\tSequence <MultiCoilDefinitionSequence> not present\n";
				if (MultiCoilDefinitionSequence && strcmp(MultiCoilDefinitionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MultiCoilDefinitionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *MultiCoilElementName = (*list)[TagFromName(MultiCoilElementName)];
							stream << "\t\t";
							if (MultiCoilElementName) {
								stream << "\t\t";
								MultiCoilElementName->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MultiCoilElementName> not present\n";

							Attribute *MultiCoilElementUsed = (*list)[TagFromName(MultiCoilElementUsed)];
							stream << "\t\t";
							if (MultiCoilElementUsed) {
								stream << "\t\t";
								MultiCoilElementUsed->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <MultiCoilElementUsed> not present\n";

						}
					}
				}
				Attribute *MultiCoilConfiguration = (*list)[TagFromName(MultiCoilConfiguration)];
				stream << "\t";
				if (MultiCoilConfiguration) {
					stream << "\t\t";
					MultiCoilConfiguration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultiCoilConfiguration> not present\n";

			}
		}
	}
}

void
Macro_MRTransmitCoilMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRTransmitCoilMacro>\n";

	if (MRTransmitCoilSequence)
		stream << "\t\tSequence <MRTransmitCoilSequence>\n";
	else
		stream << "\t\tSequence <MRTransmitCoilSequence> not present\n";
	if (MRTransmitCoilSequence && strcmp(MRTransmitCoilSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRTransmitCoilSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TransmitCoilName = (*list)[TagFromName(TransmitCoilName)];
				stream << "\t";
				if (TransmitCoilName) {
					stream << "\t\t";
					TransmitCoilName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TransmitCoilName> not present\n";

				Attribute *TransmitCoilManufacturerName = (*list)[TagFromName(TransmitCoilManufacturerName)];
				stream << "\t";
				if (TransmitCoilManufacturerName) {
					stream << "\t\t";
					TransmitCoilManufacturerName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TransmitCoilManufacturerName> not present\n";

				Attribute *TransmitCoilType = (*list)[TagFromName(TransmitCoilType)];
				stream << "\t";
				if (TransmitCoilType) {
					stream << "\t\t";
					TransmitCoilType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TransmitCoilType> not present\n";

			}
		}
	}
}

void
Macro_MRDiffusionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRDiffusionMacro>\n";

	if (MRDiffusionSequence)
		stream << "\t\tSequence <MRDiffusionSequence>\n";
	else
		stream << "\t\tSequence <MRDiffusionSequence> not present\n";
	if (MRDiffusionSequence && strcmp(MRDiffusionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRDiffusionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DiffusionBValue = (*list)[TagFromName(DiffusionBValue)];
				stream << "\t";
				if (DiffusionBValue) {
					stream << "\t\t";
					DiffusionBValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DiffusionBValue> not present\n";

				Attribute *DiffusionDirectionality = (*list)[TagFromName(DiffusionDirectionality)];
				stream << "\t";
				if (DiffusionDirectionality) {
					stream << "\t\t";
					DiffusionDirectionality->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DiffusionDirectionality> not present\n";

	Attribute *DiffusionGradientDirectionSequence = (*list)[TagFromName(DiffusionGradientDirectionSequence)];
				stream << "\t";
				if (DiffusionGradientDirectionSequence)
					stream << "\t\tSequence <DiffusionGradientDirectionSequence>\n";
				else
					stream << "\t\tSequence <DiffusionGradientDirectionSequence> not present\n";
				if (DiffusionGradientDirectionSequence && strcmp(DiffusionGradientDirectionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DiffusionGradientDirectionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *DiffusionGradientOrientation = (*list)[TagFromName(DiffusionGradientOrientation)];
							stream << "\t\t";
							if (DiffusionGradientOrientation) {
								stream << "\t\t";
								DiffusionGradientOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionGradientOrientation> not present\n";

						}
					}
				}
	Attribute *DiffusionBMatrixSequence = (*list)[TagFromName(DiffusionBMatrixSequence)];
				stream << "\t";
				if (DiffusionBMatrixSequence)
					stream << "\t\tSequence <DiffusionBMatrixSequence>\n";
				else
					stream << "\t\tSequence <DiffusionBMatrixSequence> not present\n";
				if (DiffusionBMatrixSequence && strcmp(DiffusionBMatrixSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DiffusionBMatrixSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *DiffusionBValueXX = (*list)[TagFromName(DiffusionBValueXX)];
							stream << "\t\t";
							if (DiffusionBValueXX) {
								stream << "\t\t";
								DiffusionBValueXX->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionBValueXX> not present\n";

							Attribute *DiffusionBValueXY = (*list)[TagFromName(DiffusionBValueXY)];
							stream << "\t\t";
							if (DiffusionBValueXY) {
								stream << "\t\t";
								DiffusionBValueXY->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionBValueXY> not present\n";

							Attribute *DiffusionBValueXZ = (*list)[TagFromName(DiffusionBValueXZ)];
							stream << "\t\t";
							if (DiffusionBValueXZ) {
								stream << "\t\t";
								DiffusionBValueXZ->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionBValueXZ> not present\n";

							Attribute *DiffusionBValueYY = (*list)[TagFromName(DiffusionBValueYY)];
							stream << "\t\t";
							if (DiffusionBValueYY) {
								stream << "\t\t";
								DiffusionBValueYY->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionBValueYY> not present\n";

							Attribute *DiffusionBValueYZ = (*list)[TagFromName(DiffusionBValueYZ)];
							stream << "\t\t";
							if (DiffusionBValueYZ) {
								stream << "\t\t";
								DiffusionBValueYZ->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionBValueYZ> not present\n";

							Attribute *DiffusionBValueZZ = (*list)[TagFromName(DiffusionBValueZZ)];
							stream << "\t\t";
							if (DiffusionBValueZZ) {
								stream << "\t\t";
								DiffusionBValueZZ->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <DiffusionBValueZZ> not present\n";

						}
					}
				}
				Attribute *DiffusionAnisotropyType = (*list)[TagFromName(DiffusionAnisotropyType)];
				stream << "\t";
				if (DiffusionAnisotropyType) {
					stream << "\t\t";
					DiffusionAnisotropyType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DiffusionAnisotropyType> not present\n";

			}
		}
	}
}

void
Macro_MRAveragesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRAveragesMacro>\n";

	if (MRAveragesSequence)
		stream << "\t\tSequence <MRAveragesSequence>\n";
	else
		stream << "\t\tSequence <MRAveragesSequence> not present\n";
	if (MRAveragesSequence && strcmp(MRAveragesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRAveragesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *NumberOfAverages = (*list)[TagFromName(NumberOfAverages)];
				stream << "\t";
				if (NumberOfAverages) {
					stream << "\t\t";
					NumberOfAverages->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NumberOfAverages> not present\n";

			}
		}
	}
}

void
Macro_MRSpatialSaturationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRSpatialSaturationMacro>\n";

	if (MRSpatialSaturationSequence)
		stream << "\t\tSequence <MRSpatialSaturationSequence>\n";
	else
		stream << "\t\tSequence <MRSpatialSaturationSequence> not present\n";
	if (MRSpatialSaturationSequence && strcmp(MRSpatialSaturationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRSpatialSaturationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SlabThickness = (*list)[TagFromName(SlabThickness)];
				stream << "\t";
				if (SlabThickness) {
					stream << "\t\t";
					SlabThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SlabThickness> not present\n";

				Attribute *SlabOrientation = (*list)[TagFromName(SlabOrientation)];
				stream << "\t";
				if (SlabOrientation) {
					stream << "\t\t";
					SlabOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SlabOrientation> not present\n";

				Attribute *MidSlabPosition = (*list)[TagFromName(MidSlabPosition)];
				stream << "\t";
				if (MidSlabPosition) {
					stream << "\t\t";
					MidSlabPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MidSlabPosition> not present\n";

			}
		}
	}
}

void
Macro_MRMetaboliteMapMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRMetaboliteMapMacro>\n";

	if (MRMetaboliteMapSequence)
		stream << "\t\tSequence <MRMetaboliteMapSequence>\n";
	else
		stream << "\t\tSequence <MRMetaboliteMapSequence> not present\n";
	if (MRMetaboliteMapSequence && strcmp(MRMetaboliteMapSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRMetaboliteMapSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MetaboliteMapDescription = (*list)[TagFromName(MetaboliteMapDescription)];
				stream << "\t";
				if (MetaboliteMapDescription) {
					stream << "\t\t";
					MetaboliteMapDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MetaboliteMapDescription> not present\n";

	Attribute *MetaboliteMapCodeSequence = (*list)[TagFromName(MetaboliteMapCodeSequence)];
				stream << "\t";
				if (MetaboliteMapCodeSequence)
					stream << "\t\tSequence <MetaboliteMapCodeSequence>\n";
				else
					stream << "\t\tSequence <MetaboliteMapCodeSequence> not present\n";
				if (MetaboliteMapCodeSequence && strcmp(MetaboliteMapCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MetaboliteMapCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *ChemicalShiftSequence = (*list)[TagFromName(ChemicalShiftSequence)];
				stream << "\t";
				if (ChemicalShiftSequence)
					stream << "\t\tSequence <ChemicalShiftSequence>\n";
				else
					stream << "\t\tSequence <ChemicalShiftSequence> not present\n";
				if (ChemicalShiftSequence && strcmp(ChemicalShiftSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ChemicalShiftSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ChemicalShiftMinimumIntegrationLimitInppm = (*list)[TagFromName(ChemicalShiftMinimumIntegrationLimitInppm)];
							stream << "\t\t";
							if (ChemicalShiftMinimumIntegrationLimitInppm) {
								stream << "\t\t";
								ChemicalShiftMinimumIntegrationLimitInppm->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChemicalShiftMinimumIntegrationLimitInppm> not present\n";

							Attribute *ChemicalShiftMaximumIntegrationLimitInppm = (*list)[TagFromName(ChemicalShiftMaximumIntegrationLimitInppm)];
							stream << "\t\t";
							if (ChemicalShiftMaximumIntegrationLimitInppm) {
								stream << "\t\t";
								ChemicalShiftMaximumIntegrationLimitInppm->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ChemicalShiftMaximumIntegrationLimitInppm> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_MRVelocityEncodingMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRVelocityEncodingMacro>\n";

	if (MRVelocityEncodingSequence)
		stream << "\t\tSequence <MRVelocityEncodingSequence>\n";
	else
		stream << "\t\tSequence <MRVelocityEncodingSequence> not present\n";
	if (MRVelocityEncodingSequence && strcmp(MRVelocityEncodingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRVelocityEncodingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *VelocityEncodingDirection = (*list)[TagFromName(VelocityEncodingDirection)];
				stream << "\t";
				if (VelocityEncodingDirection) {
					stream << "\t\t";
					VelocityEncodingDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VelocityEncodingDirection> not present\n";

				Attribute *VelocityEncodingMinimumValue = (*list)[TagFromName(VelocityEncodingMinimumValue)];
				stream << "\t";
				if (VelocityEncodingMinimumValue) {
					stream << "\t\t";
					VelocityEncodingMinimumValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VelocityEncodingMinimumValue> not present\n";

				Attribute *VelocityEncodingMaximumValue = (*list)[TagFromName(VelocityEncodingMaximumValue)];
				stream << "\t";
				if (VelocityEncodingMaximumValue) {
					stream << "\t\t";
					VelocityEncodingMaximumValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VelocityEncodingMaximumValue> not present\n";

			}
		}
	}
}

void
Macro_MRArterialSpinLabelingMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRArterialSpinLabelingMacro>\n";

	if (MRArterialSpinLabelingSequence)
		stream << "\t\tSequence <MRArterialSpinLabelingSequence>\n";
	else
		stream << "\t\tSequence <MRArterialSpinLabelingSequence> not present\n";
	if (MRArterialSpinLabelingSequence && strcmp(MRArterialSpinLabelingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRArterialSpinLabelingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ASLTechniqueDescription = (*list)[TagFromName(ASLTechniqueDescription)];
				stream << "\t";
				if (ASLTechniqueDescription) {
					stream << "\t\t";
					ASLTechniqueDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ASLTechniqueDescription> not present\n";

				Attribute *ASLContext = (*list)[TagFromName(ASLContext)];
				stream << "\t";
				if (ASLContext) {
					stream << "\t\t";
					ASLContext->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ASLContext> not present\n";

	Attribute *ASLSlabSequence = (*list)[TagFromName(ASLSlabSequence)];
				stream << "\t";
				if (ASLSlabSequence)
					stream << "\t\tSequence <ASLSlabSequence>\n";
				else
					stream << "\t\tSequence <ASLSlabSequence> not present\n";
				if (ASLSlabSequence && strcmp(ASLSlabSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ASLSlabSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ASLSlabNumber = (*list)[TagFromName(ASLSlabNumber)];
							stream << "\t\t";
							if (ASLSlabNumber) {
								stream << "\t\t";
								ASLSlabNumber->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLSlabNumber> not present\n";

										stream << "\t\t\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

							Attribute *ASLSlabThickness = (*list)[TagFromName(ASLSlabThickness)];
							stream << "\t\t";
							if (ASLSlabThickness) {
								stream << "\t\t";
								ASLSlabThickness->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLSlabThickness> not present\n";

							Attribute *ASLSlabOrientation = (*list)[TagFromName(ASLSlabOrientation)];
							stream << "\t\t";
							if (ASLSlabOrientation) {
								stream << "\t\t";
								ASLSlabOrientation->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLSlabOrientation> not present\n";

							Attribute *ASLMidSlabPosition = (*list)[TagFromName(ASLMidSlabPosition)];
							stream << "\t\t";
							if (ASLMidSlabPosition) {
								stream << "\t\t";
								ASLMidSlabPosition->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLMidSlabPosition> not present\n";

							Attribute *ASLPulseTrainDuration = (*list)[TagFromName(ASLPulseTrainDuration)];
							stream << "\t\t";
							if (ASLPulseTrainDuration) {
								stream << "\t\t";
								ASLPulseTrainDuration->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLPulseTrainDuration> not present\n";

						}
					}
				}
				Attribute *ASLCrusherFlag = (*list)[TagFromName(ASLCrusherFlag)];
				stream << "\t";
				if (ASLCrusherFlag) {
					stream << "\t\t";
					ASLCrusherFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ASLCrusherFlag> not present\n";

				Attribute *ASLCrusherFlowLimit = (*list)[TagFromName(ASLCrusherFlowLimit)];
				stream << "\t";
				if (ASLCrusherFlowLimit) {
					stream << "\t\t";
					ASLCrusherFlowLimit->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ASLCrusherFlowLimit> not present\n";

				Attribute *ASLCrusherDescription = (*list)[TagFromName(ASLCrusherDescription)];
				stream << "\t";
				if (ASLCrusherDescription) {
					stream << "\t\t";
					ASLCrusherDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ASLCrusherDescription> not present\n";

				Attribute *ASLBolusCutoffFlag = (*list)[TagFromName(ASLBolusCutoffFlag)];
				stream << "\t";
				if (ASLBolusCutoffFlag) {
					stream << "\t\t";
					ASLBolusCutoffFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ASLBolusCutoffFlag> not present\n";

	Attribute *ASLBolusCutoffTimingSequence = (*list)[TagFromName(ASLBolusCutoffTimingSequence)];
				stream << "\t";
				if (ASLBolusCutoffTimingSequence)
					stream << "\t\tSequence <ASLBolusCutoffTimingSequence>\n";
				else
					stream << "\t\tSequence <ASLBolusCutoffTimingSequence> not present\n";
				if (ASLBolusCutoffTimingSequence && strcmp(ASLBolusCutoffTimingSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ASLBolusCutoffTimingSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *ASLBolusCutoffDelayTime = (*list)[TagFromName(ASLBolusCutoffDelayTime)];
							stream << "\t\t";
							if (ASLBolusCutoffDelayTime) {
								stream << "\t\t";
								ASLBolusCutoffDelayTime->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLBolusCutoffDelayTime> not present\n";

							Attribute *ASLBolusCutoffTechnique = (*list)[TagFromName(ASLBolusCutoffTechnique)];
							stream << "\t\t";
							if (ASLBolusCutoffTechnique) {
								stream << "\t\t";
								ASLBolusCutoffTechnique->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <ASLBolusCutoffTechnique> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Macro_MRImageAndSpectroscopyInstanceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRImageAndSpectroscopyInstanceMacro>\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (ReferencedRawDataSequence)
		stream << "\t\tSequence <ReferencedRawDataSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRawDataSequence> not present\n";
	if (ReferencedRawDataSequence && strcmp(ReferencedRawDataSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRawDataSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedWaveformSequence)
		stream << "\t\tSequence <ReferencedWaveformSequence>\n";
	else
		stream << "\t\tSequence <ReferencedWaveformSequence> not present\n";
	if (ReferencedWaveformSequence && strcmp(ReferencedWaveformSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedWaveformSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedImageEvidenceSequence)
		stream << "\t\tSequence <ReferencedImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageEvidenceSequence> not present\n";
	if (ReferencedImageEvidenceSequence && strcmp(ReferencedImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SourceImageEvidenceSequence)
		stream << "\t\tSequence <SourceImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <SourceImageEvidenceSequence> not present\n";
	if (SourceImageEvidenceSequence && strcmp(SourceImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedPresentationStateSequence)
		stream << "\t\tSequence <ReferencedPresentationStateSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPresentationStateSequence> not present\n";
	if (ReferencedPresentationStateSequence && strcmp(ReferencedPresentationStateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPresentationStateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (ResonantNucleus) {
		stream << "\t\t";
		ResonantNucleus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ResonantNucleus> not present\n";

	if (KSpaceFiltering) {
		stream << "\t\t";
		KSpaceFiltering->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KSpaceFiltering> not present\n";

	if (MagneticFieldStrength) {
		stream << "\t\t";
		MagneticFieldStrength->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MagneticFieldStrength> not present\n";

	if (ApplicableSafetyStandardAgency) {
		stream << "\t\t";
		ApplicableSafetyStandardAgency->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ApplicableSafetyStandardAgency> not present\n";

	if (ApplicableSafetyStandardDescription) {
		stream << "\t\t";
		ApplicableSafetyStandardDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ApplicableSafetyStandardDescription> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

	if (B1rms) {
		stream << "\t\t";
		B1rms->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <B1rms> not present\n";

}

void
Module_MultiFrameFunctionalGroupsForEnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedMRImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_MRTimingAndRelatedParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTimingAndRelatedParametersMacro>\n";

							stream << "\t\t";
	Macro_MRFOVGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRFOVGeometryMacro>\n";

							stream << "\t\t";
	Macro_MREchoMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MREchoMacro>\n";

							stream << "\t\t";
	Macro_MRModifierMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRModifierMacro>\n";

							stream << "\t\t";
	Macro_MRImagingModifierMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImagingModifierMacro>\n";

							stream << "\t\t";
	Macro_MRReceiveCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRReceiveCoilMacro>\n";

							stream << "\t\t";
	Macro_MRTransmitCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTransmitCoilMacro>\n";

							stream << "\t\t";
	Macro_MRDiffusionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRDiffusionMacro>\n";

							stream << "\t\t";
	Macro_MRAveragesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRAveragesMacro>\n";

							stream << "\t\t";
	Macro_MRSpatialSaturationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpatialSaturationMacro>\n";

							stream << "\t\t";
	Macro_MRMetaboliteMapMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRMetaboliteMapMacro>\n";

							stream << "\t\t";
	Macro_MRVelocityEncodingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRVelocityEncodingMacro>\n";

							stream << "\t\t";
	Macro_MRArterialSpinLabelingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRArterialSpinLabelingMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_MRTimingAndRelatedParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTimingAndRelatedParametersMacro>\n";

							stream << "\t\t";
	Macro_MRFOVGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRFOVGeometryMacro>\n";

							stream << "\t\t";
	Macro_MREchoMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MREchoMacro>\n";

							stream << "\t\t";
	Macro_MRModifierMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRModifierMacro>\n";

							stream << "\t\t";
	Macro_MRImagingModifierMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImagingModifierMacro>\n";

							stream << "\t\t";
	Macro_MRReceiveCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRReceiveCoilMacro>\n";

							stream << "\t\t";
	Macro_MRTransmitCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTransmitCoilMacro>\n";

							stream << "\t\t";
	Macro_MRDiffusionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRDiffusionMacro>\n";

							stream << "\t\t";
	Macro_MRAveragesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRAveragesMacro>\n";

							stream << "\t\t";
	Macro_MRSpatialSaturationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpatialSaturationMacro>\n";

							stream << "\t\t";
	Macro_MRMetaboliteMapMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRMetaboliteMapMacro>\n";

							stream << "\t\t";
	Macro_MRVelocityEncodingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRVelocityEncodingMacro>\n";

							stream << "\t\t";
	Macro_MRArterialSpinLabelingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRArterialSpinLabelingMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
}

void
Macro_MRSpectroscopyFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRSpectroscopyFrameTypeMacro>\n";

	if (MRSpectroscopyFrameTypeSequence)
		stream << "\t\tSequence <MRSpectroscopyFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <MRSpectroscopyFrameTypeSequence> not present\n";
	if (MRSpectroscopyFrameTypeSequence && strcmp(MRSpectroscopyFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRSpectroscopyFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

							stream << "\t\t";
	Macro_MRSpectroscopyDescriptionFrameLevelMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpectroscopyDescriptionFrameLevelMacro>\n";

			}
		}
	}
}

void
Macro_MRSpectroscopyFOVGeometryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MRSpectroscopyFOVGeometryMacro>\n";

	if (MRSpectroscopyFOVGeometrySequence)
		stream << "\t\tSequence <MRSpectroscopyFOVGeometrySequence>\n";
	else
		stream << "\t\tSequence <MRSpectroscopyFOVGeometrySequence> not present\n";
	if (MRSpectroscopyFOVGeometrySequence && strcmp(MRSpectroscopyFOVGeometrySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MRSpectroscopyFOVGeometrySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SpectroscopyAcquisitionDataColumns = (*list)[TagFromName(SpectroscopyAcquisitionDataColumns)];
				stream << "\t";
				if (SpectroscopyAcquisitionDataColumns) {
					stream << "\t\t";
					SpectroscopyAcquisitionDataColumns->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpectroscopyAcquisitionDataColumns> not present\n";

				Attribute *SpectroscopyAcquisitionPhaseRows = (*list)[TagFromName(SpectroscopyAcquisitionPhaseRows)];
				stream << "\t";
				if (SpectroscopyAcquisitionPhaseRows) {
					stream << "\t\t";
					SpectroscopyAcquisitionPhaseRows->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpectroscopyAcquisitionPhaseRows> not present\n";

				Attribute *SpectroscopyAcquisitionPhaseColumns = (*list)[TagFromName(SpectroscopyAcquisitionPhaseColumns)];
				stream << "\t";
				if (SpectroscopyAcquisitionPhaseColumns) {
					stream << "\t\t";
					SpectroscopyAcquisitionPhaseColumns->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpectroscopyAcquisitionPhaseColumns> not present\n";

				Attribute *SpectroscopyAcquisitionOutOfPlanePhaseSteps = (*list)[TagFromName(SpectroscopyAcquisitionOutOfPlanePhaseSteps)];
				stream << "\t";
				if (SpectroscopyAcquisitionOutOfPlanePhaseSteps) {
					stream << "\t\t";
					SpectroscopyAcquisitionOutOfPlanePhaseSteps->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpectroscopyAcquisitionOutOfPlanePhaseSteps> not present\n";

				Attribute *PercentSampling = (*list)[TagFromName(PercentSampling)];
				stream << "\t";
				if (PercentSampling) {
					stream << "\t\t";
					PercentSampling->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PercentSampling> not present\n";

				Attribute *PercentPhaseFieldOfView = (*list)[TagFromName(PercentPhaseFieldOfView)];
				stream << "\t";
				if (PercentPhaseFieldOfView) {
					stream << "\t\t";
					PercentPhaseFieldOfView->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PercentPhaseFieldOfView> not present\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForMRSpectroscopy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForMRSpectroscopy>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRSpectroscopyFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpectroscopyFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_MRTimingAndRelatedParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTimingAndRelatedParametersMacro>\n";

							stream << "\t\t";
	Macro_MRSpectroscopyFOVGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpectroscopyFOVGeometryMacro>\n";

							stream << "\t\t";
	Macro_MREchoMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MREchoMacro>\n";

							stream << "\t\t";
	Macro_MRModifierMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRModifierMacro>\n";

							stream << "\t\t";
	Macro_MRReceiveCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRReceiveCoilMacro>\n";

							stream << "\t\t";
	Macro_MRTransmitCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTransmitCoilMacro>\n";

							stream << "\t\t";
	Macro_MRDiffusionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRDiffusionMacro>\n";

							stream << "\t\t";
	Macro_MRAveragesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRAveragesMacro>\n";

							stream << "\t\t";
	Macro_MRSpatialSaturationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpatialSaturationMacro>\n";

							stream << "\t\t";
	Macro_MRVelocityEncodingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRVelocityEncodingMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRSpectroscopyFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpectroscopyFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_MRTimingAndRelatedParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTimingAndRelatedParametersMacro>\n";

							stream << "\t\t";
	Macro_MRSpectroscopyFOVGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpectroscopyFOVGeometryMacro>\n";

							stream << "\t\t";
	Macro_MREchoMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MREchoMacro>\n";

							stream << "\t\t";
	Macro_MRModifierMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRModifierMacro>\n";

							stream << "\t\t";
	Macro_MRReceiveCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRReceiveCoilMacro>\n";

							stream << "\t\t";
	Macro_MRTransmitCoilMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRTransmitCoilMacro>\n";

							stream << "\t\t";
	Macro_MRDiffusionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRDiffusionMacro>\n";

							stream << "\t\t";
	Macro_MRAveragesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRAveragesMacro>\n";

							stream << "\t\t";
	Macro_MRSpatialSaturationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRSpatialSaturationMacro>\n";

							stream << "\t\t";
	Macro_MRVelocityEncodingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRVelocityEncodingMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
}

void
Module_EnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedMRImage>\n";

				stream << "\t";
	Macro_MRImageAndSpectroscopyInstanceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MRImageAndSpectroscopyInstanceMacro>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

				stream << "\t";
	Macro_CommonCTMRImageDescriptionImageLevelMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionImageLevelMacro>\n";

				stream << "\t";
	Macro_MRImageDescriptionImageLevelMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MRImageDescriptionImageLevelMacro>\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PlanarConfiguration) {
		stream << "\t\t";
		PlanarConfiguration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanarConfiguration> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

}

void
Module_MRPulseSequence::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MRPulseSequence>\n";

	if (PulseSequenceName) {
		stream << "\t\t";
		PulseSequenceName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PulseSequenceName> not present\n";

	if (MRAcquisitionType) {
		stream << "\t\t";
		MRAcquisitionType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MRAcquisitionType> not present\n";

	if (EchoPulseSequence) {
		stream << "\t\t";
		EchoPulseSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoPulseSequence> not present\n";

	if (MultipleSpinEcho) {
		stream << "\t\t";
		MultipleSpinEcho->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MultipleSpinEcho> not present\n";

	if (MultiPlanarExcitation) {
		stream << "\t\t";
		MultiPlanarExcitation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MultiPlanarExcitation> not present\n";

	if (PhaseContrast) {
		stream << "\t\t";
		PhaseContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhaseContrast> not present\n";

	if (VelocityEncodingAcquisitionSequence)
		stream << "\t\tSequence <VelocityEncodingAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <VelocityEncodingAcquisitionSequence> not present\n";
	if (VelocityEncodingAcquisitionSequence && strcmp(VelocityEncodingAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VelocityEncodingAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *VelocityEncodingDirection = (*list)[TagFromName(VelocityEncodingDirection)];
				stream << "\t";
				if (VelocityEncodingDirection) {
					stream << "\t\t";
					VelocityEncodingDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VelocityEncodingDirection> not present\n";

			}
		}
	}
	if (TimeOfFlightContrast) {
		stream << "\t\t";
		TimeOfFlightContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeOfFlightContrast> not present\n";

	if (ArterialSpinLabelingContrast) {
		stream << "\t\t";
		ArterialSpinLabelingContrast->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ArterialSpinLabelingContrast> not present\n";

	if (SteadyStatePulseSequence) {
		stream << "\t\t";
		SteadyStatePulseSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SteadyStatePulseSequence> not present\n";

	if (EchoPlanarPulseSequence) {
		stream << "\t\t";
		EchoPlanarPulseSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoPlanarPulseSequence> not present\n";

	if (SaturationRecovery) {
		stream << "\t\t";
		SaturationRecovery->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SaturationRecovery> not present\n";

	if (SpectrallySelectedSuppression) {
		stream << "\t\t";
		SpectrallySelectedSuppression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpectrallySelectedSuppression> not present\n";

	if (OversamplingPhase) {
		stream << "\t\t";
		OversamplingPhase->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OversamplingPhase> not present\n";

	if (GeometryOfKSpaceTraversal) {
		stream << "\t\t";
		GeometryOfKSpaceTraversal->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GeometryOfKSpaceTraversal> not present\n";

	if (RectilinearPhaseEncodeReordering) {
		stream << "\t\t";
		RectilinearPhaseEncodeReordering->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RectilinearPhaseEncodeReordering> not present\n";

	if (SegmentedKSpaceTraversal) {
		stream << "\t\t";
		SegmentedKSpaceTraversal->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentedKSpaceTraversal> not present\n";

	if (CoverageOfKSpace) {
		stream << "\t\t";
		CoverageOfKSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CoverageOfKSpace> not present\n";

	if (NumberOfKSpaceTrajectories) {
		stream << "\t\t";
		NumberOfKSpaceTrajectories->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfKSpaceTrajectories> not present\n";

}

void
Module_MRSpectroscopy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MRSpectroscopy>\n";

				stream << "\t";
	Macro_MRImageAndSpectroscopyInstanceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MRImageAndSpectroscopyInstanceMacro>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

				stream << "\t";
	Macro_MRSpectroscopyDescriptionImageLevelMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MRSpectroscopyDescriptionImageLevelMacro>\n";

	if (TransmitterFrequency) {
		stream << "\t\t";
		TransmitterFrequency->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransmitterFrequency> not present\n";

	if (SpectralWidth) {
		stream << "\t\t";
		SpectralWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpectralWidth> not present\n";

	if (ChemicalShiftReference) {
		stream << "\t\t";
		ChemicalShiftReference->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ChemicalShiftReference> not present\n";

	if (VolumeLocalizationTechnique) {
		stream << "\t\t";
		VolumeLocalizationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeLocalizationTechnique> not present\n";

	if (VolumeLocalizationSequence)
		stream << "\t\tSequence <VolumeLocalizationSequence>\n";
	else
		stream << "\t\tSequence <VolumeLocalizationSequence> not present\n";
	if (VolumeLocalizationSequence && strcmp(VolumeLocalizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=VolumeLocalizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *SlabThickness = (*list)[TagFromName(SlabThickness)];
				stream << "\t";
				if (SlabThickness) {
					stream << "\t\t";
					SlabThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SlabThickness> not present\n";

				Attribute *SlabOrientation = (*list)[TagFromName(SlabOrientation)];
				stream << "\t";
				if (SlabOrientation) {
					stream << "\t\t";
					SlabOrientation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SlabOrientation> not present\n";

				Attribute *MidSlabPosition = (*list)[TagFromName(MidSlabPosition)];
				stream << "\t";
				if (MidSlabPosition) {
					stream << "\t\t";
					MidSlabPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MidSlabPosition> not present\n";

			}
		}
	}
	if (Decoupling) {
		stream << "\t\t";
		Decoupling->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Decoupling> not present\n";

	if (DecoupledNucleus) {
		stream << "\t\t";
		DecoupledNucleus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecoupledNucleus> not present\n";

	if (DecouplingFrequency) {
		stream << "\t\t";
		DecouplingFrequency->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecouplingFrequency> not present\n";

	if (DecouplingMethod) {
		stream << "\t\t";
		DecouplingMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecouplingMethod> not present\n";

	if (DecouplingChemicalShiftReference) {
		stream << "\t\t";
		DecouplingChemicalShiftReference->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecouplingChemicalShiftReference> not present\n";

	if (TimeDomainFiltering) {
		stream << "\t\t";
		TimeDomainFiltering->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimeDomainFiltering> not present\n";

	if (NumberOfZeroFills) {
		stream << "\t\t";
		NumberOfZeroFills->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfZeroFills> not present\n";

	if (BaselineCorrection) {
		stream << "\t\t";
		BaselineCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BaselineCorrection> not present\n";

	if (FrequencyCorrection) {
		stream << "\t\t";
		FrequencyCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrequencyCorrection> not present\n";

	if (FirstOrderPhaseCorrection) {
		stream << "\t\t";
		FirstOrderPhaseCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FirstOrderPhaseCorrection> not present\n";

	if (WaterReferencedPhaseCorrection) {
		stream << "\t\t";
		WaterReferencedPhaseCorrection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <WaterReferencedPhaseCorrection> not present\n";

}

void
Module_MRSpectroscopyPulseSequence::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MRSpectroscopyPulseSequence>\n";

	if (PulseSequenceName) {
		stream << "\t\t";
		PulseSequenceName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PulseSequenceName> not present\n";

	if (MRSpectroscopyAcquisitionType) {
		stream << "\t\t";
		MRSpectroscopyAcquisitionType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MRSpectroscopyAcquisitionType> not present\n";

	if (EchoPulseSequence) {
		stream << "\t\t";
		EchoPulseSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoPulseSequence> not present\n";

	if (MultipleSpinEcho) {
		stream << "\t\t";
		MultipleSpinEcho->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MultipleSpinEcho> not present\n";

	if (MultiPlanarExcitation) {
		stream << "\t\t";
		MultiPlanarExcitation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MultiPlanarExcitation> not present\n";

	if (SteadyStatePulseSequence) {
		stream << "\t\t";
		SteadyStatePulseSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SteadyStatePulseSequence> not present\n";

	if (EchoPlanarPulseSequence) {
		stream << "\t\t";
		EchoPlanarPulseSequence->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EchoPlanarPulseSequence> not present\n";

	if (SpectrallySelectedSuppression) {
		stream << "\t\t";
		SpectrallySelectedSuppression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpectrallySelectedSuppression> not present\n";

	if (GeometryOfKSpaceTraversal) {
		stream << "\t\t";
		GeometryOfKSpaceTraversal->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <GeometryOfKSpaceTraversal> not present\n";

	if (RectilinearPhaseEncodeReordering) {
		stream << "\t\t";
		RectilinearPhaseEncodeReordering->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RectilinearPhaseEncodeReordering> not present\n";

	if (SegmentedKSpaceTraversal) {
		stream << "\t\t";
		SegmentedKSpaceTraversal->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SegmentedKSpaceTraversal> not present\n";

	if (CoverageOfKSpace) {
		stream << "\t\t";
		CoverageOfKSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CoverageOfKSpace> not present\n";

	if (NumberOfKSpaceTrajectories) {
		stream << "\t\t";
		NumberOfKSpaceTrajectories->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfKSpaceTrajectories> not present\n";

}

void
Module_MRSpectroscopyData::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MRSpectroscopyData>\n";

	if (Rows) {
		stream << "\t\t";
		Rows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Rows> not present\n";

	if (Columns) {
		stream << "\t\t";
		Columns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Columns> not present\n";

	if (DataPointRows) {
		stream << "\t\t";
		DataPointRows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataPointRows> not present\n";

	if (DataPointColumns) {
		stream << "\t\t";
		DataPointColumns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataPointColumns> not present\n";

	if (DataRepresentation) {
		stream << "\t\t";
		DataRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DataRepresentation> not present\n";

	if (SignalDomainColumns) {
		stream << "\t\t";
		SignalDomainColumns->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SignalDomainColumns> not present\n";

	if (SignalDomainRows) {
		stream << "\t\t";
		SignalDomainRows->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SignalDomainRows> not present\n";

	if (FirstOrderPhaseCorrectionAngle) {
		stream << "\t\t";
		FirstOrderPhaseCorrectionAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FirstOrderPhaseCorrectionAngle> not present\n";

	if (SpectroscopyData) {
		stream << "\t\t";
		SpectroscopyData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpectroscopyData> not present\n";

}

void
Module_RawData::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <RawData>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (ContentLabel) {
		stream << "\t\t";
		ContentLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentLabel> not present\n";

	if (ContentDescription) {
		stream << "\t\t";
		ContentDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDescription> not present\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ImageLaterality) {
		stream << "\t\t";
		ImageLaterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageLaterality> not present\n";

	if (CreatorVersionUID) {
		stream << "\t\t";
		CreatorVersionUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CreatorVersionUID> not present\n";

	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_MRSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MRSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_MRImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MRImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
}

void
Module_TractographyResultsSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <TractographyResultsSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_TractographyResults::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <TractographyResults>\n";

				stream << "\t";
	Macro_ContentIdentificationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <ContentIdentificationMacro>\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (TrackSetSequence)
		stream << "\t\tSequence <TrackSetSequence>\n";
	else
		stream << "\t\tSequence <TrackSetSequence> not present\n";
	if (TrackSetSequence && strcmp(TrackSetSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TrackSetSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TrackSetNumber = (*list)[TagFromName(TrackSetNumber)];
				stream << "\t";
				if (TrackSetNumber) {
					stream << "\t\t";
					TrackSetNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TrackSetNumber> not present\n";

				Attribute *TrackSetLabel = (*list)[TagFromName(TrackSetLabel)];
				stream << "\t";
				if (TrackSetLabel) {
					stream << "\t\t";
					TrackSetLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TrackSetLabel> not present\n";

				Attribute *TrackSetDescription = (*list)[TagFromName(TrackSetDescription)];
				stream << "\t";
				if (TrackSetDescription) {
					stream << "\t\t";
					TrackSetDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TrackSetDescription> not present\n";

	Attribute *TrackSetAnatomicalTypeCodeSequence = (*list)[TagFromName(TrackSetAnatomicalTypeCodeSequence)];
				stream << "\t";
				if (TrackSetAnatomicalTypeCodeSequence)
					stream << "\t\tSequence <TrackSetAnatomicalTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <TrackSetAnatomicalTypeCodeSequence> not present\n";
				if (TrackSetAnatomicalTypeCodeSequence && strcmp(TrackSetAnatomicalTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TrackSetAnatomicalTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ModifierCodeSequence = (*list)[TagFromName(ModifierCodeSequence)];
							stream << "\t\t";
							if (ModifierCodeSequence)
								stream << "\t\tSequence <ModifierCodeSequence>\n";
							else
								stream << "\t\tSequence <ModifierCodeSequence> not present\n";
							if (ModifierCodeSequence && strcmp(ModifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ModifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
						}
					}
				}
	Attribute *TrackSequence = (*list)[TagFromName(TrackSequence)];
				stream << "\t";
				if (TrackSequence)
					stream << "\t\tSequence <TrackSequence>\n";
				else
					stream << "\t\tSequence <TrackSequence> not present\n";
				if (TrackSequence && strcmp(TrackSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TrackSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *PointCoordinatesData = (*list)[TagFromName(PointCoordinatesData)];
							stream << "\t\t";
							if (PointCoordinatesData) {
								stream << "\t\t";
								PointCoordinatesData->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PointCoordinatesData> not present\n";

							Attribute *RecommendedDisplayCIELabValueList = (*list)[TagFromName(RecommendedDisplayCIELabValueList)];
							stream << "\t\t";
							if (RecommendedDisplayCIELabValueList) {
								stream << "\t\t";
								RecommendedDisplayCIELabValueList->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RecommendedDisplayCIELabValueList> not present\n";

							Attribute *RecommendedDisplayCIELabValue = (*list)[TagFromName(RecommendedDisplayCIELabValue)];
							stream << "\t\t";
							if (RecommendedDisplayCIELabValue) {
								stream << "\t\t";
								RecommendedDisplayCIELabValue->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <RecommendedDisplayCIELabValue> not present\n";

						}
					}
				}
				Attribute *RecommendedDisplayCIELabValue = (*list)[TagFromName(RecommendedDisplayCIELabValue)];
				stream << "\t";
				if (RecommendedDisplayCIELabValue) {
					stream << "\t\t";
					RecommendedDisplayCIELabValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayCIELabValue> not present\n";

				Attribute *RecommendedLineThickness = (*list)[TagFromName(RecommendedLineThickness)];
				stream << "\t";
				if (RecommendedLineThickness) {
					stream << "\t\t";
					RecommendedLineThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedLineThickness> not present\n";

	Attribute *MeasurementsSequence = (*list)[TagFromName(MeasurementsSequence)];
				stream << "\t";
				if (MeasurementsSequence)
					stream << "\t\tSequence <MeasurementsSequence>\n";
				else
					stream << "\t\tSequence <MeasurementsSequence> not present\n";
				if (MeasurementsSequence && strcmp(MeasurementsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MeasurementsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
							stream << "\t\t";
							if (ConceptNameCodeSequence)
								stream << "\t\tSequence <ConceptNameCodeSequence>\n";
							else
								stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
							if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
							stream << "\t\t";
							if (MeasurementUnitsCodeSequence)
								stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
							else
								stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
							if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *MeasurementValuesSequence = (*list)[TagFromName(MeasurementValuesSequence)];
							stream << "\t\t";
							if (MeasurementValuesSequence)
								stream << "\t\tSequence <MeasurementValuesSequence>\n";
							else
								stream << "\t\tSequence <MeasurementValuesSequence> not present\n";
							if (MeasurementValuesSequence && strcmp(MeasurementValuesSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=MeasurementValuesSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
										Attribute *FloatingPointValues = (*list)[TagFromName(FloatingPointValues)];
										stream << "\t\t\t";
										if (FloatingPointValues) {
											stream << "\t\t";
											FloatingPointValues->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <FloatingPointValues> not present\n";

										Attribute *TrackPointIndexList = (*list)[TagFromName(TrackPointIndexList)];
										stream << "\t\t\t";
										if (TrackPointIndexList) {
											stream << "\t\t";
											TrackPointIndexList->write(stream,dict);
											stream << "\n";
										}
										else
											stream << "\t\tElement <TrackPointIndexList> not present\n";

									}
								}
							}
						}
					}
				}
	Attribute *TrackStatisticsSequence = (*list)[TagFromName(TrackStatisticsSequence)];
				stream << "\t";
				if (TrackStatisticsSequence)
					stream << "\t\tSequence <TrackStatisticsSequence>\n";
				else
					stream << "\t\tSequence <TrackStatisticsSequence> not present\n";
				if (TrackStatisticsSequence && strcmp(TrackStatisticsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TrackStatisticsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
	Attribute *ConceptNameCodeSequence = (*list)[TagFromName(ConceptNameCodeSequence)];
							stream << "\t\t";
							if (ConceptNameCodeSequence)
								stream << "\t\tSequence <ConceptNameCodeSequence>\n";
							else
								stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
							if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *ModifierCodeSequence = (*list)[TagFromName(ModifierCodeSequence)];
							stream << "\t\t";
							if (ModifierCodeSequence)
								stream << "\t\tSequence <ModifierCodeSequence>\n";
							else
								stream << "\t\tSequence <ModifierCodeSequence> not present\n";
							if (ModifierCodeSequence && strcmp(ModifierCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ModifierCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
	Attribute *MeasurementUnitsCodeSequence = (*list)[TagFromName(MeasurementUnitsCodeSequence)];
							stream << "\t\t";
							if (MeasurementUnitsCodeSequence)
								stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
							else
								stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
							if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

									}
								}
							}
							Attribute *FloatingPointValues = (*list)[TagFromName(FloatingPointValues)];
							stream << "\t\t";
							if (FloatingPointValues) {
								stream << "\t\t";
								FloatingPointValues->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <FloatingPointValues> not present\n";

						}
					}
				}
	Attribute *TrackSetStatisticsSequence = (*list)[TagFromName(TrackSetStatisticsSequence)];
				stream << "\t";
				if (TrackSetStatisticsSequence)
					stream << "\t\tSequence <TrackSetStatisticsSequence>\n";
				else
					stream << "\t\tSequence <TrackSetStatisticsSequence> not present\n";
				if (TrackSetStatisticsSequence && strcmp(TrackSetStatisticsSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TrackSetStatisticsSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_TableSummaryStatisticsMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <TableSummaryStatisticsMacro>\n";

						}
					}
				}
	Attribute *DiffusionAcquisitionCodeSequence = (*list)[TagFromName(DiffusionAcquisitionCodeSequence)];
				stream << "\t";
				if (DiffusionAcquisitionCodeSequence)
					stream << "\t\tSequence <DiffusionAcquisitionCodeSequence>\n";
				else
					stream << "\t\tSequence <DiffusionAcquisitionCodeSequence> not present\n";
				if (DiffusionAcquisitionCodeSequence && strcmp(DiffusionAcquisitionCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DiffusionAcquisitionCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *DiffusionModelCodeSequence = (*list)[TagFromName(DiffusionModelCodeSequence)];
				stream << "\t";
				if (DiffusionModelCodeSequence)
					stream << "\t\tSequence <DiffusionModelCodeSequence>\n";
				else
					stream << "\t\tSequence <DiffusionModelCodeSequence> not present\n";
				if (DiffusionModelCodeSequence && strcmp(DiffusionModelCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DiffusionModelCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *TrackingAlgorithmIdentificationSequence = (*list)[TagFromName(TrackingAlgorithmIdentificationSequence)];
				stream << "\t";
				if (TrackingAlgorithmIdentificationSequence)
					stream << "\t\tSequence <TrackingAlgorithmIdentificationSequence>\n";
				else
					stream << "\t\tSequence <TrackingAlgorithmIdentificationSequence> not present\n";
				if (TrackingAlgorithmIdentificationSequence && strcmp(TrackingAlgorithmIdentificationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=TrackingAlgorithmIdentificationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Macro_TableSummaryStatisticsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <TableSummaryStatisticsMacro>\n";

	if (ConceptNameCodeSequence)
		stream << "\t\tSequence <ConceptNameCodeSequence>\n";
	else
		stream << "\t\tSequence <ConceptNameCodeSequence> not present\n";
	if (ConceptNameCodeSequence && strcmp(ConceptNameCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConceptNameCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ModifierCodeSequence)
		stream << "\t\tSequence <ModifierCodeSequence>\n";
	else
		stream << "\t\tSequence <ModifierCodeSequence> not present\n";
	if (ModifierCodeSequence && strcmp(ModifierCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ModifierCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (MeasurementUnitsCodeSequence)
		stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
	else
		stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
	if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (FloatingPointValue) {
		stream << "\t\t";
		FloatingPointValue->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FloatingPointValue> not present\n";

}

void
Macro_CTFrameVOILUTMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTFrameVOILUTMacro>\n";

	if (FrameVOILUTSequence)
		stream << "\t\tSequence <FrameVOILUTSequence>\n";
	else
		stream << "\t\tSequence <FrameVOILUTSequence> not present\n";
	if (FrameVOILUTSequence && strcmp(FrameVOILUTSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameVOILUTSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *WindowCenter = (*list)[TagFromName(WindowCenter)];
				stream << "\t";
				if (WindowCenter) {
					stream << "\t\t";
					WindowCenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WindowCenter> not present\n";

				Attribute *WindowWidth = (*list)[TagFromName(WindowWidth)];
				stream << "\t";
				if (WindowWidth) {
					stream << "\t\t";
					WindowWidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WindowWidth> not present\n";

				Attribute *WindowCenterWidthExplanation = (*list)[TagFromName(WindowCenterWidthExplanation)];
				stream << "\t";
				if (WindowCenterWidthExplanation) {
					stream << "\t\t";
					WindowCenterWidthExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WindowCenterWidthExplanation> not present\n";

				Attribute *VOILUTFunction = (*list)[TagFromName(VOILUTFunction)];
				stream << "\t";
				if (VOILUTFunction) {
					stream << "\t\t";
					VOILUTFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VOILUTFunction> not present\n";

			}
		}
	}
}

void
Module_CTSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <CTSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_EnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedCTImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (MultienergyCTAcquisition) {
		stream << "\t\t";
		MultienergyCTAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MultienergyCTAcquisition> not present\n";

				stream << "\t";
	Macro_CommonCTMRImageDescriptionImageLevelMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionImageLevelMacro>\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (ReferencedRawDataSequence)
		stream << "\t\tSequence <ReferencedRawDataSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRawDataSequence> not present\n";
	if (ReferencedRawDataSequence && strcmp(ReferencedRawDataSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRawDataSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedWaveformSequence)
		stream << "\t\tSequence <ReferencedWaveformSequence>\n";
	else
		stream << "\t\tSequence <ReferencedWaveformSequence> not present\n";
	if (ReferencedWaveformSequence && strcmp(ReferencedWaveformSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedWaveformSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedImageEvidenceSequence)
		stream << "\t\tSequence <ReferencedImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageEvidenceSequence> not present\n";
	if (ReferencedImageEvidenceSequence && strcmp(ReferencedImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SourceImageEvidenceSequence)
		stream << "\t\tSequence <SourceImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <SourceImageEvidenceSequence> not present\n";
	if (SourceImageEvidenceSequence && strcmp(SourceImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedPresentationStateSequence)
		stream << "\t\tSequence <ReferencedPresentationStateSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPresentationStateSequence> not present\n";
	if (ReferencedPresentationStateSequence && strcmp(ReferencedPresentationStateSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPresentationStateSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_OptionalViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <OptionalViewAndSliceProgressionDirectionMacro>\n";

	if (IsocenterPosition) {
		stream << "\t\t";
		IsocenterPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IsocenterPosition> not present\n";

				stream << "\t";
	Macro_RTEquipmentCorrelationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <RTEquipmentCorrelationMacro>\n";

}

void
Macro_CTImageFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTImageFrameTypeMacro>\n";

	if (CTImageFrameTypeSequence)
		stream << "\t\tSequence <CTImageFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <CTImageFrameTypeSequence> not present\n";
	if (CTImageFrameTypeSequence && strcmp(CTImageFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTImageFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

							stream << "\t\t";
	Macro_CommonCTMRImageDescriptionFrameLevelMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionFrameLevelMacro>\n";

			}
		}
	}
}

void
Macro_CTAcquisitionTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTAcquisitionTypeMacro>\n";

	if (CTAcquisitionTypeSequence)
		stream << "\t\tSequence <CTAcquisitionTypeSequence>\n";
	else
		stream << "\t\tSequence <CTAcquisitionTypeSequence> not present\n";
	if (CTAcquisitionTypeSequence && strcmp(CTAcquisitionTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTAcquisitionTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *AcquisitionType = (*list)[TagFromName(AcquisitionType)];
				stream << "\t";
				if (AcquisitionType) {
					stream << "\t\t";
					AcquisitionType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionType> not present\n";

				Attribute *TubeAngle = (*list)[TagFromName(TubeAngle)];
				stream << "\t";
				if (TubeAngle) {
					stream << "\t\t";
					TubeAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TubeAngle> not present\n";

				Attribute *ConstantVolumeFlag = (*list)[TagFromName(ConstantVolumeFlag)];
				stream << "\t";
				if (ConstantVolumeFlag) {
					stream << "\t\t";
					ConstantVolumeFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ConstantVolumeFlag> not present\n";

				Attribute *FluoroscopyFlag = (*list)[TagFromName(FluoroscopyFlag)];
				stream << "\t";
				if (FluoroscopyFlag) {
					stream << "\t\t";
					FluoroscopyFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FluoroscopyFlag> not present\n";

			}
		}
	}
}

void
Macro_CTAcquisitionDetailsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTAcquisitionDetailsMacro>\n";

	if (CTAcquisitionDetailsSequence)
		stream << "\t\tSequence <CTAcquisitionDetailsSequence>\n";
	else
		stream << "\t\tSequence <CTAcquisitionDetailsSequence> not present\n";
	if (CTAcquisitionDetailsSequence && strcmp(CTAcquisitionDetailsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTAcquisitionDetailsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedPathIndex = (*list)[TagFromName(ReferencedPathIndex)];
				stream << "\t";
				if (ReferencedPathIndex) {
					stream << "\t\t";
					ReferencedPathIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPathIndex> not present\n";

				Attribute *RotationDirection = (*list)[TagFromName(RotationDirection)];
				stream << "\t";
				if (RotationDirection) {
					stream << "\t\t";
					RotationDirection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RotationDirection> not present\n";

				Attribute *RevolutionTime = (*list)[TagFromName(RevolutionTime)];
				stream << "\t";
				if (RevolutionTime) {
					stream << "\t\t";
					RevolutionTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RevolutionTime> not present\n";

				Attribute *SingleCollimationWidth = (*list)[TagFromName(SingleCollimationWidth)];
				stream << "\t";
				if (SingleCollimationWidth) {
					stream << "\t\t";
					SingleCollimationWidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SingleCollimationWidth> not present\n";

				Attribute *TotalCollimationWidth = (*list)[TagFromName(TotalCollimationWidth)];
				stream << "\t";
				if (TotalCollimationWidth) {
					stream << "\t\t";
					TotalCollimationWidth->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TotalCollimationWidth> not present\n";

				Attribute *TableHeight = (*list)[TagFromName(TableHeight)];
				stream << "\t";
				if (TableHeight) {
					stream << "\t\t";
					TableHeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHeight> not present\n";

				Attribute *GantryDetectorTilt = (*list)[TagFromName(GantryDetectorTilt)];
				stream << "\t";
				if (GantryDetectorTilt) {
					stream << "\t\t";
					GantryDetectorTilt->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GantryDetectorTilt> not present\n";

				Attribute *DataCollectionDiameter = (*list)[TagFromName(DataCollectionDiameter)];
				stream << "\t";
				if (DataCollectionDiameter) {
					stream << "\t\t";
					DataCollectionDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataCollectionDiameter> not present\n";

			}
		}
	}
}

void
Macro_CTTableDynamicsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTTableDynamicsMacro>\n";

	if (CTTableDynamicsSequence)
		stream << "\t\tSequence <CTTableDynamicsSequence>\n";
	else
		stream << "\t\tSequence <CTTableDynamicsSequence> not present\n";
	if (CTTableDynamicsSequence && strcmp(CTTableDynamicsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTTableDynamicsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TableSpeed = (*list)[TagFromName(TableSpeed)];
				stream << "\t";
				if (TableSpeed) {
					stream << "\t\t";
					TableSpeed->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableSpeed> not present\n";

				Attribute *TableFeedPerRotation = (*list)[TagFromName(TableFeedPerRotation)];
				stream << "\t";
				if (TableFeedPerRotation) {
					stream << "\t\t";
					TableFeedPerRotation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableFeedPerRotation> not present\n";

				Attribute *SpiralPitchFactor = (*list)[TagFromName(SpiralPitchFactor)];
				stream << "\t";
				if (SpiralPitchFactor) {
					stream << "\t\t";
					SpiralPitchFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpiralPitchFactor> not present\n";

			}
		}
	}
}

void
Macro_CTPositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTPositionMacro>\n";

	if (CTPositionSequence)
		stream << "\t\tSequence <CTPositionSequence>\n";
	else
		stream << "\t\tSequence <CTPositionSequence> not present\n";
	if (CTPositionSequence && strcmp(CTPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TablePosition = (*list)[TagFromName(TablePosition)];
				stream << "\t";
				if (TablePosition) {
					stream << "\t\t";
					TablePosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TablePosition> not present\n";

				Attribute *DataCollectionCenterPatient = (*list)[TagFromName(DataCollectionCenterPatient)];
				stream << "\t";
				if (DataCollectionCenterPatient) {
					stream << "\t\t";
					DataCollectionCenterPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataCollectionCenterPatient> not present\n";

				Attribute *ReconstructionTargetCenterPatient = (*list)[TagFromName(ReconstructionTargetCenterPatient)];
				stream << "\t";
				if (ReconstructionTargetCenterPatient) {
					stream << "\t\t";
					ReconstructionTargetCenterPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionTargetCenterPatient> not present\n";

			}
		}
	}
}

void
Macro_CTGeometryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTGeometryMacro>\n";

	if (CTGeometrySequence)
		stream << "\t\tSequence <CTGeometrySequence>\n";
	else
		stream << "\t\tSequence <CTGeometrySequence> not present\n";
	if (CTGeometrySequence && strcmp(CTGeometrySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTGeometrySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedPathIndex = (*list)[TagFromName(ReferencedPathIndex)];
				stream << "\t";
				if (ReferencedPathIndex) {
					stream << "\t\t";
					ReferencedPathIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPathIndex> not present\n";

				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

				Attribute *DistanceSourceToDataCollectionCenter = (*list)[TagFromName(DistanceSourceToDataCollectionCenter)];
				stream << "\t";
				if (DistanceSourceToDataCollectionCenter) {
					stream << "\t\t";
					DistanceSourceToDataCollectionCenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDataCollectionCenter> not present\n";

			}
		}
	}
}

void
Macro_CTReconstructionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTReconstructionMacro>\n";

	if (CTReconstructionSequence)
		stream << "\t\tSequence <CTReconstructionSequence>\n";
	else
		stream << "\t\tSequence <CTReconstructionSequence> not present\n";
	if (CTReconstructionSequence && strcmp(CTReconstructionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTReconstructionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReconstructionAlgorithm = (*list)[TagFromName(ReconstructionAlgorithm)];
				stream << "\t";
				if (ReconstructionAlgorithm) {
					stream << "\t\t";
					ReconstructionAlgorithm->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionAlgorithm> not present\n";

				Attribute *ConvolutionKernel = (*list)[TagFromName(ConvolutionKernel)];
				stream << "\t";
				if (ConvolutionKernel) {
					stream << "\t\t";
					ConvolutionKernel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ConvolutionKernel> not present\n";

				Attribute *ConvolutionKernelGroup = (*list)[TagFromName(ConvolutionKernelGroup)];
				stream << "\t";
				if (ConvolutionKernelGroup) {
					stream << "\t\t";
					ConvolutionKernelGroup->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ConvolutionKernelGroup> not present\n";

				Attribute *ReconstructionDiameter = (*list)[TagFromName(ReconstructionDiameter)];
				stream << "\t";
				if (ReconstructionDiameter) {
					stream << "\t\t";
					ReconstructionDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionDiameter> not present\n";

				Attribute *ReconstructionFieldOfView = (*list)[TagFromName(ReconstructionFieldOfView)];
				stream << "\t";
				if (ReconstructionFieldOfView) {
					stream << "\t\t";
					ReconstructionFieldOfView->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionFieldOfView> not present\n";

				Attribute *ReconstructionPixelSpacing = (*list)[TagFromName(ReconstructionPixelSpacing)];
				stream << "\t";
				if (ReconstructionPixelSpacing) {
					stream << "\t\t";
					ReconstructionPixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionPixelSpacing> not present\n";

				Attribute *ReconstructionAngle = (*list)[TagFromName(ReconstructionAngle)];
				stream << "\t";
				if (ReconstructionAngle) {
					stream << "\t\t";
					ReconstructionAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionAngle> not present\n";

				Attribute *ImageFilter = (*list)[TagFromName(ImageFilter)];
				stream << "\t";
				if (ImageFilter) {
					stream << "\t\t";
					ImageFilter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageFilter> not present\n";

			}
		}
	}
}

void
Macro_CTExposureMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTExposureMacro>\n";

	if (CTExposureSequence)
		stream << "\t\tSequence <CTExposureSequence>\n";
	else
		stream << "\t\tSequence <CTExposureSequence> not present\n";
	if (CTExposureSequence && strcmp(CTExposureSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTExposureSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReferencedPathIndex = (*list)[TagFromName(ReferencedPathIndex)];
				stream << "\t";
				if (ReferencedPathIndex) {
					stream << "\t\t";
					ReferencedPathIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedPathIndex> not present\n";

				Attribute *ExposureTimeInms = (*list)[TagFromName(ExposureTimeInms)];
				stream << "\t";
				if (ExposureTimeInms) {
					stream << "\t\t";
					ExposureTimeInms->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureTimeInms> not present\n";

				Attribute *XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
				stream << "\t";
				if (XRayTubeCurrentInmA) {
					stream << "\t\t";
					XRayTubeCurrentInmA->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

				Attribute *ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
				stream << "\t";
				if (ExposureInmAs) {
					stream << "\t\t";
					ExposureInmAs->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureInmAs> not present\n";

				Attribute *ExposureModulationType = (*list)[TagFromName(ExposureModulationType)];
				stream << "\t";
				if (ExposureModulationType) {
					stream << "\t\t";
					ExposureModulationType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureModulationType> not present\n";

				Attribute *EstimatedDoseSaving = (*list)[TagFromName(EstimatedDoseSaving)];
				stream << "\t";
				if (EstimatedDoseSaving) {
					stream << "\t\t";
					EstimatedDoseSaving->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EstimatedDoseSaving> not present\n";

				Attribute *CTDIvol = (*list)[TagFromName(CTDIvol)];
				stream << "\t";
				if (CTDIvol) {
					stream << "\t\t";
					CTDIvol->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CTDIvol> not present\n";

	Attribute *CTDIPhantomTypeCodeSequence = (*list)[TagFromName(CTDIPhantomTypeCodeSequence)];
				stream << "\t";
				if (CTDIPhantomTypeCodeSequence)
					stream << "\t\tSequence <CTDIPhantomTypeCodeSequence>\n";
				else
					stream << "\t\tSequence <CTDIPhantomTypeCodeSequence> not present\n";
				if (CTDIPhantomTypeCodeSequence && strcmp(CTDIPhantomTypeCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=CTDIPhantomTypeCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *WaterEquivalentDiameter = (*list)[TagFromName(WaterEquivalentDiameter)];
				stream << "\t";
				if (WaterEquivalentDiameter) {
					stream << "\t\t";
					WaterEquivalentDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <WaterEquivalentDiameter> not present\n";

	Attribute *WaterEquivalentDiameterCalculationMethodCodeSequence = (*list)[TagFromName(WaterEquivalentDiameterCalculationMethodCodeSequence)];
				stream << "\t";
				if (WaterEquivalentDiameterCalculationMethodCodeSequence)
					stream << "\t\tSequence <WaterEquivalentDiameterCalculationMethodCodeSequence>\n";
				else
					stream << "\t\tSequence <WaterEquivalentDiameterCalculationMethodCodeSequence> not present\n";
				if (WaterEquivalentDiameterCalculationMethodCodeSequence && strcmp(WaterEquivalentDiameterCalculationMethodCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=WaterEquivalentDiameterCalculationMethodCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *ImageAndFluoroscopyAreaDoseProduct = (*list)[TagFromName(ImageAndFluoroscopyAreaDoseProduct)];
				stream << "\t";
				if (ImageAndFluoroscopyAreaDoseProduct) {
					stream << "\t\t";
					ImageAndFluoroscopyAreaDoseProduct->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageAndFluoroscopyAreaDoseProduct> not present\n";

			}
		}
	}
}

void
Macro_CTXRayDetailsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTXRayDetailsMacro>\n";

	if (CTXRayDetailsSequence)
		stream << "\t\tSequence <CTXRayDetailsSequence>\n";
	else
		stream << "\t\tSequence <CTXRayDetailsSequence> not present\n";
	if (CTXRayDetailsSequence && strcmp(CTXRayDetailsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTXRayDetailsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *KVP = (*list)[TagFromName(KVP)];
				stream << "\t";
				if (KVP) {
					stream << "\t\t";
					KVP->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KVP> not present\n";

				Attribute *FocalSpots = (*list)[TagFromName(FocalSpots)];
				stream << "\t";
				if (FocalSpots) {
					stream << "\t\t";
					FocalSpots->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FocalSpots> not present\n";

				Attribute *FilterType = (*list)[TagFromName(FilterType)];
				stream << "\t";
				if (FilterType) {
					stream << "\t\t";
					FilterType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterType> not present\n";

				Attribute *FilterMaterial = (*list)[TagFromName(FilterMaterial)];
				stream << "\t";
				if (FilterMaterial) {
					stream << "\t\t";
					FilterMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterMaterial> not present\n";

				Attribute *CalciumScoringMassFactorPatient = (*list)[TagFromName(CalciumScoringMassFactorPatient)];
				stream << "\t";
				if (CalciumScoringMassFactorPatient) {
					stream << "\t\t";
					CalciumScoringMassFactorPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalciumScoringMassFactorPatient> not present\n";

				Attribute *CalciumScoringMassFactorDevice = (*list)[TagFromName(CalciumScoringMassFactorDevice)];
				stream << "\t";
				if (CalciumScoringMassFactorDevice) {
					stream << "\t\t";
					CalciumScoringMassFactorDevice->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalciumScoringMassFactorDevice> not present\n";

				Attribute *EnergyWeightingFactor = (*list)[TagFromName(EnergyWeightingFactor)];
				stream << "\t";
				if (EnergyWeightingFactor) {
					stream << "\t\t";
					EnergyWeightingFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWeightingFactor> not present\n";

			}
		}
	}
}

void
Macro_CTPixelValueTransformationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTPixelValueTransformationMacro>\n";

	if (PixelValueTransformationSequence)
		stream << "\t\tSequence <PixelValueTransformationSequence>\n";
	else
		stream << "\t\tSequence <PixelValueTransformationSequence> not present\n";
	if (PixelValueTransformationSequence && strcmp(PixelValueTransformationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PixelValueTransformationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *RescaleIntercept = (*list)[TagFromName(RescaleIntercept)];
				stream << "\t";
				if (RescaleIntercept) {
					stream << "\t\t";
					RescaleIntercept->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleIntercept> not present\n";

				Attribute *RescaleSlope = (*list)[TagFromName(RescaleSlope)];
				stream << "\t";
				if (RescaleSlope) {
					stream << "\t\t";
					RescaleSlope->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleSlope> not present\n";

				Attribute *RescaleType = (*list)[TagFromName(RescaleType)];
				stream << "\t";
				if (RescaleType) {
					stream << "\t\t";
					RescaleType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RescaleType> not present\n";

			}
		}
	}
}

void
Macro_CTAdditionalXRaySourceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CTAdditionalXRaySourceMacro>\n";

	if (CTAdditionalXRaySourceSequence)
		stream << "\t\tSequence <CTAdditionalXRaySourceSequence>\n";
	else
		stream << "\t\tSequence <CTAdditionalXRaySourceSequence> not present\n";
	if (CTAdditionalXRaySourceSequence && strcmp(CTAdditionalXRaySourceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CTAdditionalXRaySourceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *KVP = (*list)[TagFromName(KVP)];
				stream << "\t";
				if (KVP) {
					stream << "\t\t";
					KVP->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KVP> not present\n";

				Attribute *XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
				stream << "\t";
				if (XRayTubeCurrentInmA) {
					stream << "\t\t";
					XRayTubeCurrentInmA->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

				Attribute *DataCollectionDiameter = (*list)[TagFromName(DataCollectionDiameter)];
				stream << "\t";
				if (DataCollectionDiameter) {
					stream << "\t\t";
					DataCollectionDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataCollectionDiameter> not present\n";

				Attribute *FocalSpots = (*list)[TagFromName(FocalSpots)];
				stream << "\t";
				if (FocalSpots) {
					stream << "\t\t";
					FocalSpots->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FocalSpots> not present\n";

				Attribute *FilterType = (*list)[TagFromName(FilterType)];
				stream << "\t";
				if (FilterType) {
					stream << "\t\t";
					FilterType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterType> not present\n";

				Attribute *FilterMaterial = (*list)[TagFromName(FilterMaterial)];
				stream << "\t";
				if (FilterMaterial) {
					stream << "\t\t";
					FilterMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterMaterial> not present\n";

				Attribute *ExposureInmAs = (*list)[TagFromName(ExposureInmAs)];
				stream << "\t";
				if (ExposureInmAs) {
					stream << "\t\t";
					ExposureInmAs->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureInmAs> not present\n";

				Attribute *EnergyWeightingFactor = (*list)[TagFromName(EnergyWeightingFactor)];
				stream << "\t";
				if (EnergyWeightingFactor) {
					stream << "\t\t";
					EnergyWeightingFactor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EnergyWeightingFactor> not present\n";

			}
		}
	}
}

void
Macro_UnassignedSharedConvertedAttributesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <UnassignedSharedConvertedAttributesMacro>\n";

	if (UnassignedSharedConvertedAttributesSequence)
		stream << "\t\tSequence <UnassignedSharedConvertedAttributesSequence>\n";
	else
		stream << "\t\tSequence <UnassignedSharedConvertedAttributesSequence> not present\n";
	if (UnassignedSharedConvertedAttributesSequence && strcmp(UnassignedSharedConvertedAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=UnassignedSharedConvertedAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Macro_UnassignedPerFrameConvertedAttributesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

	if (UnassignedPerFrameConvertedAttributesSequence)
		stream << "\t\tSequence <UnassignedPerFrameConvertedAttributesSequence>\n";
	else
		stream << "\t\tSequence <UnassignedPerFrameConvertedAttributesSequence> not present\n";
	if (UnassignedPerFrameConvertedAttributesSequence && strcmp(UnassignedPerFrameConvertedAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=UnassignedPerFrameConvertedAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
			}
		}
	}
}

void
Macro_ImageFrameConversionSourceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ImageFrameConversionSourceMacro>\n";

	if (ConversionSourceAttributesSequence)
		stream << "\t\tSequence <ConversionSourceAttributesSequence>\n";
	else
		stream << "\t\tSequence <ConversionSourceAttributesSequence> not present\n";
	if (ConversionSourceAttributesSequence && strcmp(ConversionSourceAttributesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ConversionSourceAttributesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForEnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedCTImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_CTFrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTFrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_CTImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_CTAcquisitionTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAcquisitionTypeMacro>\n";

							stream << "\t\t";
	Macro_CTAcquisitionDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAcquisitionDetailsMacro>\n";

							stream << "\t\t";
	Macro_CTTableDynamicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTTableDynamicsMacro>\n";

							stream << "\t\t";
	Macro_CTPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPositionMacro>\n";

							stream << "\t\t";
	Macro_CTGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTGeometryMacro>\n";

							stream << "\t\t";
	Macro_CTReconstructionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTReconstructionMacro>\n";

							stream << "\t\t";
	Macro_CTExposureMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTExposureMacro>\n";

							stream << "\t\t";
	Macro_CTXRayDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTXRayDetailsMacro>\n";

							stream << "\t\t";
	Macro_CTPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_CTAdditionalXRaySourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAdditionalXRaySourceMacro>\n";

							stream << "\t\t";
	Macro_MultienergyCTProcessingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTProcessingMacro>\n";

							stream << "\t\t";
	Macro_MultienergyCTCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_CTFrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTFrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_CTImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_CTAcquisitionTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAcquisitionTypeMacro>\n";

							stream << "\t\t";
	Macro_CTAcquisitionDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAcquisitionDetailsMacro>\n";

							stream << "\t\t";
	Macro_CTTableDynamicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTTableDynamicsMacro>\n";

							stream << "\t\t";
	Macro_CTPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPositionMacro>\n";

							stream << "\t\t";
	Macro_CTGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTGeometryMacro>\n";

							stream << "\t\t";
	Macro_CTReconstructionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTReconstructionMacro>\n";

							stream << "\t\t";
	Macro_CTExposureMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTExposureMacro>\n";

							stream << "\t\t";
	Macro_CTXRayDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTXRayDetailsMacro>\n";

							stream << "\t\t";
	Macro_CTPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_CTAdditionalXRaySourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAdditionalXRaySourceMacro>\n";

							stream << "\t\t";
	Macro_MultienergyCTProcessingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTProcessingMacro>\n";

							stream << "\t\t";
	Macro_MultienergyCTCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_CTImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_CTPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_CTImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_CTPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_CTFrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTFrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_CTImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_CTPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_UnassignedSharedConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedSharedConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_CTFrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTFrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_CTImageFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTImageFrameTypeMacro>\n";

							stream << "\t\t";
	Macro_CTPixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTPixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_UnassignedPerFrameConvertedAttributesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <UnassignedPerFrameConvertedAttributesMacro>\n";

							stream << "\t\t";
	Macro_ImageFrameConversionSourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageFrameConversionSourceMacro>\n";

			}
		}
	}
}

void
Module_MultienergyCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultienergyCTImage>\n";

	if (MultienergyCTAcquisitionSequence)
		stream << "\t\tSequence <MultienergyCTAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <MultienergyCTAcquisitionSequence> not present\n";
	if (MultienergyCTAcquisitionSequence && strcmp(MultienergyCTAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultienergyCTAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MultienergyAcquisitionDescription = (*list)[TagFromName(MultienergyAcquisitionDescription)];
				stream << "\t";
				if (MultienergyAcquisitionDescription) {
					stream << "\t\t";
					MultienergyAcquisitionDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultienergyAcquisitionDescription> not present\n";

							stream << "\t\t";
	Macro_MultienergyCTXRaySourceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTXRaySourceMacro>\n";

							stream << "\t\t";
	Macro_MultienergyCTXRayDetectorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTXRayDetectorMacro>\n";

							stream << "\t\t";
	Macro_MultienergyCTPathMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTPathMacro>\n";

							stream << "\t\t";
	Macro_CTExposureMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTExposureMacro>\n";

							stream << "\t\t";
	Macro_CTXRayDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTXRayDetailsMacro>\n";

							stream << "\t\t";
	Macro_CTAcquisitionDetailsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTAcquisitionDetailsMacro>\n";

							stream << "\t\t";
	Macro_CTGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CTGeometryMacro>\n";

			}
		}
	}
	if (MultienergyCTProcessingSequence)
		stream << "\t\tSequence <MultienergyCTProcessingSequence>\n";
	else
		stream << "\t\tSequence <MultienergyCTProcessingSequence> not present\n";
	if (MultienergyCTProcessingSequence && strcmp(MultienergyCTProcessingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultienergyCTProcessingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_MultienergyCTProcessingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTProcessingMacro>\n";

			}
		}
	}
	if (MultienergyCTCharacteristicsSequence)
		stream << "\t\tSequence <MultienergyCTCharacteristicsSequence>\n";
	else
		stream << "\t\tSequence <MultienergyCTCharacteristicsSequence> not present\n";
	if (MultienergyCTCharacteristicsSequence && strcmp(MultienergyCTCharacteristicsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultienergyCTCharacteristicsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_MultienergyCTCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <MultienergyCTCharacteristicsMacro>\n";

			}
		}
	}
}

void
Macro_MultienergyCTXRaySourceMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MultienergyCTXRaySourceMacro>\n";

	if (MultienergyCTXRaySourceSequence)
		stream << "\t\tSequence <MultienergyCTXRaySourceSequence>\n";
	else
		stream << "\t\tSequence <MultienergyCTXRaySourceSequence> not present\n";
	if (MultienergyCTXRaySourceSequence && strcmp(MultienergyCTXRaySourceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultienergyCTXRaySourceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *XRaySourceIndex = (*list)[TagFromName(XRaySourceIndex)];
				stream << "\t";
				if (XRaySourceIndex) {
					stream << "\t\t";
					XRaySourceIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRaySourceIndex> not present\n";

				Attribute *XRaySourceID = (*list)[TagFromName(XRaySourceID)];
				stream << "\t";
				if (XRaySourceID) {
					stream << "\t\t";
					XRaySourceID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRaySourceID> not present\n";

				Attribute *MultienergySourceTechnique = (*list)[TagFromName(MultienergySourceTechnique)];
				stream << "\t";
				if (MultienergySourceTechnique) {
					stream << "\t\t";
					MultienergySourceTechnique->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultienergySourceTechnique> not present\n";

				Attribute *SourceStartDateTime = (*list)[TagFromName(SourceStartDateTime)];
				stream << "\t";
				if (SourceStartDateTime) {
					stream << "\t\t";
					SourceStartDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceStartDateTime> not present\n";

				Attribute *SourceEndDateTime = (*list)[TagFromName(SourceEndDateTime)];
				stream << "\t";
				if (SourceEndDateTime) {
					stream << "\t\t";
					SourceEndDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SourceEndDateTime> not present\n";

				Attribute *SwitchingPhaseNumber = (*list)[TagFromName(SwitchingPhaseNumber)];
				stream << "\t";
				if (SwitchingPhaseNumber) {
					stream << "\t\t";
					SwitchingPhaseNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SwitchingPhaseNumber> not present\n";

				Attribute *SwitchingPhaseNominalDuration = (*list)[TagFromName(SwitchingPhaseNominalDuration)];
				stream << "\t";
				if (SwitchingPhaseNominalDuration) {
					stream << "\t\t";
					SwitchingPhaseNominalDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SwitchingPhaseNominalDuration> not present\n";

				Attribute *SwitchingPhaseTransitionDuration = (*list)[TagFromName(SwitchingPhaseTransitionDuration)];
				stream << "\t";
				if (SwitchingPhaseTransitionDuration) {
					stream << "\t\t";
					SwitchingPhaseTransitionDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SwitchingPhaseTransitionDuration> not present\n";

				Attribute *GeneratorPower = (*list)[TagFromName(GeneratorPower)];
				stream << "\t";
				if (GeneratorPower) {
					stream << "\t\t";
					GeneratorPower->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GeneratorPower> not present\n";

			}
		}
	}
}

void
Macro_MultienergyCTXRayDetectorMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MultienergyCTXRayDetectorMacro>\n";

	if (MultienergyCTXRayDetectorSequence)
		stream << "\t\tSequence <MultienergyCTXRayDetectorSequence>\n";
	else
		stream << "\t\tSequence <MultienergyCTXRayDetectorSequence> not present\n";
	if (MultienergyCTXRayDetectorSequence && strcmp(MultienergyCTXRayDetectorSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultienergyCTXRayDetectorSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *XRayDetectorIndex = (*list)[TagFromName(XRayDetectorIndex)];
				stream << "\t";
				if (XRayDetectorIndex) {
					stream << "\t\t";
					XRayDetectorIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayDetectorIndex> not present\n";

				Attribute *XRayDetectorID = (*list)[TagFromName(XRayDetectorID)];
				stream << "\t";
				if (XRayDetectorID) {
					stream << "\t\t";
					XRayDetectorID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayDetectorID> not present\n";

				Attribute *MultienergyDetectorType = (*list)[TagFromName(MultienergyDetectorType)];
				stream << "\t";
				if (MultienergyDetectorType) {
					stream << "\t\t";
					MultienergyDetectorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultienergyDetectorType> not present\n";

				Attribute *XRayDetectorLabel = (*list)[TagFromName(XRayDetectorLabel)];
				stream << "\t";
				if (XRayDetectorLabel) {
					stream << "\t\t";
					XRayDetectorLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayDetectorLabel> not present\n";

				Attribute *NominalMaxEnergy = (*list)[TagFromName(NominalMaxEnergy)];
				stream << "\t";
				if (NominalMaxEnergy) {
					stream << "\t\t";
					NominalMaxEnergy->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalMaxEnergy> not present\n";

				Attribute *NominalMinEnergy = (*list)[TagFromName(NominalMinEnergy)];
				stream << "\t";
				if (NominalMinEnergy) {
					stream << "\t\t";
					NominalMinEnergy->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <NominalMinEnergy> not present\n";

				Attribute *EffectiveBinEnergy = (*list)[TagFromName(EffectiveBinEnergy)];
				stream << "\t";
				if (EffectiveBinEnergy) {
					stream << "\t\t";
					EffectiveBinEnergy->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EffectiveBinEnergy> not present\n";

			}
		}
	}
}

void
Macro_MultienergyCTPathMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MultienergyCTPathMacro>\n";

	if (MultienergyCTPathSequence)
		stream << "\t\tSequence <MultienergyCTPathSequence>\n";
	else
		stream << "\t\tSequence <MultienergyCTPathSequence> not present\n";
	if (MultienergyCTPathSequence && strcmp(MultienergyCTPathSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MultienergyCTPathSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MultienergyCTPathIndex = (*list)[TagFromName(MultienergyCTPathIndex)];
				stream << "\t";
				if (MultienergyCTPathIndex) {
					stream << "\t\t";
					MultienergyCTPathIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MultienergyCTPathIndex> not present\n";

				Attribute *ReferencedXRaySourceIndex = (*list)[TagFromName(ReferencedXRaySourceIndex)];
				stream << "\t";
				if (ReferencedXRaySourceIndex) {
					stream << "\t\t";
					ReferencedXRaySourceIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedXRaySourceIndex> not present\n";

				Attribute *ReferencedXRayDetectorIndex = (*list)[TagFromName(ReferencedXRayDetectorIndex)];
				stream << "\t";
				if (ReferencedXRayDetectorIndex) {
					stream << "\t\t";
					ReferencedXRayDetectorIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReferencedXRayDetectorIndex> not present\n";

			}
		}
	}
}

void
Macro_MultienergyCTCharacteristicsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MultienergyCTCharacteristicsMacro>\n";

	if (MonoenergeticEnergyEquivalent) {
		stream << "\t\t";
		MonoenergeticEnergyEquivalent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MonoenergeticEnergyEquivalent> not present\n";

	if (DerivationAlgorithmSequence)
		stream << "\t\tSequence <DerivationAlgorithmSequence>\n";
	else
		stream << "\t\tSequence <DerivationAlgorithmSequence> not present\n";
	if (DerivationAlgorithmSequence && strcmp(DerivationAlgorithmSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DerivationAlgorithmSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

			}
		}
	}
	if (PerformedProcessingParametersSequence)
		stream << "\t\tSequence <PerformedProcessingParametersSequence>\n";
	else
		stream << "\t\tSequence <PerformedProcessingParametersSequence> not present\n";
	if (PerformedProcessingParametersSequence && strcmp(PerformedProcessingParametersSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformedProcessingParametersSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ContentItemWithModifiersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContentItemWithModifiersMacro>\n";

			}
		}
	}
}

void
Macro_MultienergyCTProcessingMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <MultienergyCTProcessingMacro>\n";

	if (DecompositionMethod) {
		stream << "\t\t";
		DecompositionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecompositionMethod> not present\n";

	if (DecompositionDescription) {
		stream << "\t\t";
		DecompositionDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DecompositionDescription> not present\n";

	if (DecompositionAlgorithmIdentificationSequence)
		stream << "\t\tSequence <DecompositionAlgorithmIdentificationSequence>\n";
	else
		stream << "\t\tSequence <DecompositionAlgorithmIdentificationSequence> not present\n";
	if (DecompositionAlgorithmIdentificationSequence && strcmp(DecompositionAlgorithmIdentificationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DecompositionAlgorithmIdentificationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_AlgorithmIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <AlgorithmIdentificationMacro>\n";

			}
		}
	}
	if (DecompositionMaterialSequence)
		stream << "\t\tSequence <DecompositionMaterialSequence>\n";
	else
		stream << "\t\tSequence <DecompositionMaterialSequence> not present\n";
	if (DecompositionMaterialSequence && strcmp(DecompositionMaterialSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DecompositionMaterialSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
	Attribute *MaterialCodeSequence = (*list)[TagFromName(MaterialCodeSequence)];
				stream << "\t";
				if (MaterialCodeSequence)
					stream << "\t\tSequence <MaterialCodeSequence>\n";
				else
					stream << "\t\tSequence <MaterialCodeSequence> not present\n";
				if (MaterialCodeSequence && strcmp(MaterialCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MaterialCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
	Attribute *MaterialAttenuationSequence = (*list)[TagFromName(MaterialAttenuationSequence)];
				stream << "\t";
				if (MaterialAttenuationSequence)
					stream << "\t\tSequence <MaterialAttenuationSequence>\n";
				else
					stream << "\t\tSequence <MaterialAttenuationSequence> not present\n";
				if (MaterialAttenuationSequence && strcmp(MaterialAttenuationSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=MaterialAttenuationSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
							Attribute *PhotonEnergy = (*list)[TagFromName(PhotonEnergy)];
							stream << "\t\t";
							if (PhotonEnergy) {
								stream << "\t\t";
								PhotonEnergy->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PhotonEnergy> not present\n";

							Attribute *XRayMassAttenuationCoefficient = (*list)[TagFromName(XRayMassAttenuationCoefficient)];
							stream << "\t\t";
							if (XRayMassAttenuationCoefficient) {
								stream << "\t\t";
								XRayMassAttenuationCoefficient->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <XRayMassAttenuationCoefficient> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_EnhancedMultienergyCTAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedMultienergyCTAcquisition>\n";

				stream << "\t";
	Macro_MultienergyCTXRaySourceMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MultienergyCTXRaySourceMacro>\n";

				stream << "\t";
	Macro_MultienergyCTXRayDetectorMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MultienergyCTXRayDetectorMacro>\n";

				stream << "\t";
	Macro_MultienergyCTPathMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MultienergyCTPathMacro>\n";

}

void
Module_FramePointers::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <FramePointers>\n";

	if (RepresentativeFrameNumber) {
		stream << "\t\t";
		RepresentativeFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RepresentativeFrameNumber> not present\n";

	if (FrameNumbersOfInterest) {
		stream << "\t\t";
		FrameNumbersOfInterest->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameNumbersOfInterest> not present\n";

	if (FrameOfInterestDescription) {
		stream << "\t\t";
		FrameOfInterestDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameOfInterestDescription> not present\n";

	if (FrameOfInterestType) {
		stream << "\t\t";
		FrameOfInterestType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameOfInterestType> not present\n";

}

void
Module_Mask::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Mask>\n";

	if (MaskSubtractionSequence)
		stream << "\t\tSequence <MaskSubtractionSequence>\n";
	else
		stream << "\t\tSequence <MaskSubtractionSequence> not present\n";
	if (MaskSubtractionSequence && strcmp(MaskSubtractionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MaskSubtractionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *MaskOperation = (*list)[TagFromName(MaskOperation)];
				stream << "\t";
				if (MaskOperation) {
					stream << "\t\t";
					MaskOperation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskOperation> not present\n";

				Attribute *SubtractionItemID = (*list)[TagFromName(SubtractionItemID)];
				stream << "\t";
				if (SubtractionItemID) {
					stream << "\t\t";
					SubtractionItemID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SubtractionItemID> not present\n";

				Attribute *ApplicableFrameRange = (*list)[TagFromName(ApplicableFrameRange)];
				stream << "\t";
				if (ApplicableFrameRange) {
					stream << "\t\t";
					ApplicableFrameRange->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicableFrameRange> not present\n";

				Attribute *MaskFrameNumbers = (*list)[TagFromName(MaskFrameNumbers)];
				stream << "\t";
				if (MaskFrameNumbers) {
					stream << "\t\t";
					MaskFrameNumbers->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskFrameNumbers> not present\n";

				Attribute *ContrastFrameAveraging = (*list)[TagFromName(ContrastFrameAveraging)];
				stream << "\t";
				if (ContrastFrameAveraging) {
					stream << "\t\t";
					ContrastFrameAveraging->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ContrastFrameAveraging> not present\n";

				Attribute *MaskSubPixelShift = (*list)[TagFromName(MaskSubPixelShift)];
				stream << "\t";
				if (MaskSubPixelShift) {
					stream << "\t\t";
					MaskSubPixelShift->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskSubPixelShift> not present\n";

				Attribute *TIDOffset = (*list)[TagFromName(TIDOffset)];
				stream << "\t";
				if (TIDOffset) {
					stream << "\t\t";
					TIDOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TIDOffset> not present\n";

				Attribute *MaskOperationExplanation = (*list)[TagFromName(MaskOperationExplanation)];
				stream << "\t";
				if (MaskOperationExplanation) {
					stream << "\t\t";
					MaskOperationExplanation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskOperationExplanation> not present\n";

				Attribute *MaskSelectionMode = (*list)[TagFromName(MaskSelectionMode)];
				stream << "\t";
				if (MaskSelectionMode) {
					stream << "\t\t";
					MaskSelectionMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskSelectionMode> not present\n";

			}
		}
	}
	if (RecommendedViewingMode) {
		stream << "\t\t";
		RecommendedViewingMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecommendedViewingMode> not present\n";

}

void
Module_DisplayShutter::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <DisplayShutter>\n";

				stream << "\t";
	Macro_DisplayShutterMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DisplayShutterMacro>\n";

}

void
Module_Device::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Device>\n";

	if (DeviceSequence)
		stream << "\t\tSequence <DeviceSequence>\n";
	else
		stream << "\t\tSequence <DeviceSequence> not present\n";
	if (DeviceSequence && strcmp(DeviceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DeviceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

				Attribute *Manufacturer = (*list)[TagFromName(Manufacturer)];
				stream << "\t";
				if (Manufacturer) {
					stream << "\t\t";
					Manufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <Manufacturer> not present\n";

				Attribute *ManufacturerModelName = (*list)[TagFromName(ManufacturerModelName)];
				stream << "\t";
				if (ManufacturerModelName) {
					stream << "\t\t";
					ManufacturerModelName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ManufacturerModelName> not present\n";

				Attribute *DeviceSerialNumber = (*list)[TagFromName(DeviceSerialNumber)];
				stream << "\t";
				if (DeviceSerialNumber) {
					stream << "\t\t";
					DeviceSerialNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceSerialNumber> not present\n";

				Attribute *DeviceID = (*list)[TagFromName(DeviceID)];
				stream << "\t";
				if (DeviceID) {
					stream << "\t\t";
					DeviceID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceID> not present\n";

				Attribute *DeviceLength = (*list)[TagFromName(DeviceLength)];
				stream << "\t";
				if (DeviceLength) {
					stream << "\t\t";
					DeviceLength->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceLength> not present\n";

				Attribute *DeviceDiameter = (*list)[TagFromName(DeviceDiameter)];
				stream << "\t";
				if (DeviceDiameter) {
					stream << "\t\t";
					DeviceDiameter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceDiameter> not present\n";

				Attribute *DeviceDiameterUnits = (*list)[TagFromName(DeviceDiameterUnits)];
				stream << "\t";
				if (DeviceDiameterUnits) {
					stream << "\t\t";
					DeviceDiameterUnits->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceDiameterUnits> not present\n";

				Attribute *DeviceVolume = (*list)[TagFromName(DeviceVolume)];
				stream << "\t";
				if (DeviceVolume) {
					stream << "\t\t";
					DeviceVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceVolume> not present\n";

				Attribute *InterMarkerDistance = (*list)[TagFromName(InterMarkerDistance)];
				stream << "\t";
				if (InterMarkerDistance) {
					stream << "\t\t";
					InterMarkerDistance->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterMarkerDistance> not present\n";

				Attribute *DeviceDescription = (*list)[TagFromName(DeviceDescription)];
				stream << "\t";
				if (DeviceDescription) {
					stream << "\t\t";
					DeviceDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DeviceDescription> not present\n";

			}
		}
	}
}

void
Module_Intervention::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <Intervention>\n";

	if (InterventionSequence)
		stream << "\t\tSequence <InterventionSequence>\n";
	else
		stream << "\t\tSequence <InterventionSequence> not present\n";
	if (InterventionSequence && strcmp(InterventionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=InterventionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

				Attribute *InterventionStatus = (*list)[TagFromName(InterventionStatus)];
				stream << "\t";
				if (InterventionStatus) {
					stream << "\t\t";
					InterventionStatus->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionStatus> not present\n";

	Attribute *InterventionDrugCodeSequence = (*list)[TagFromName(InterventionDrugCodeSequence)];
				stream << "\t";
				if (InterventionDrugCodeSequence)
					stream << "\t\tSequence <InterventionDrugCodeSequence>\n";
				else
					stream << "\t\tSequence <InterventionDrugCodeSequence> not present\n";
				if (InterventionDrugCodeSequence && strcmp(InterventionDrugCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=InterventionDrugCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *InterventionDrugStartTime = (*list)[TagFromName(InterventionDrugStartTime)];
				stream << "\t";
				if (InterventionDrugStartTime) {
					stream << "\t\t";
					InterventionDrugStartTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugStartTime> not present\n";

				Attribute *InterventionDrugStopTime = (*list)[TagFromName(InterventionDrugStopTime)];
				stream << "\t";
				if (InterventionDrugStopTime) {
					stream << "\t\t";
					InterventionDrugStopTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDrugStopTime> not present\n";

	Attribute *AdministrationRouteCodeSequence = (*list)[TagFromName(AdministrationRouteCodeSequence)];
				stream << "\t";
				if (AdministrationRouteCodeSequence)
					stream << "\t\tSequence <AdministrationRouteCodeSequence>\n";
				else
					stream << "\t\tSequence <AdministrationRouteCodeSequence> not present\n";
				if (AdministrationRouteCodeSequence && strcmp(AdministrationRouteCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=AdministrationRouteCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *InterventionDescription = (*list)[TagFromName(InterventionDescription)];
				stream << "\t";
				if (InterventionDescription) {
					stream << "\t\t";
					InterventionDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InterventionDescription> not present\n";

			}
		}
	}
}

void
Module_XRayImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayImage>\n";

	if (FrameIncrementPointer) {
		stream << "\t\t";
		FrameIncrementPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameIncrementPointer> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (PixelIntensityRelationship) {
		stream << "\t\t";
		PixelIntensityRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelIntensityRelationship> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (ScanOptions) {
		stream << "\t\t";
		ScanOptions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanOptions> not present\n";

				stream << "\t";
	Macro_GeneralAnatomyOptionalMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyOptionalMacro>\n";

	if (RWavePointer) {
		stream << "\t\t";
		RWavePointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RWavePointer> not present\n";

	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (DerivationDescription) {
		stream << "\t\t";
		DerivationDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DerivationDescription> not present\n";

	if (AcquisitionDeviceProcessingDescription) {
		stream << "\t\t";
		AcquisitionDeviceProcessingDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

	if (FrameLabelVector) {
		stream << "\t\t";
		FrameLabelVector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameLabelVector> not present\n";

	if (FrameDimensionPointer) {
		stream << "\t\t";
		FrameDimensionPointer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameDimensionPointer> not present\n";

	if (CalibrationImage) {
		stream << "\t\t";
		CalibrationImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CalibrationImage> not present\n";

}

void
Module_XRayAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayAcquisition>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (RadiationSetting) {
		stream << "\t\t";
		RadiationSetting->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationSetting> not present\n";

	if (XRayTubeCurrent) {
		stream << "\t\t";
		XRayTubeCurrent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrent> not present\n";

	if (XRayTubeCurrentInuA) {
		stream << "\t\t";
		XRayTubeCurrentInuA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInuA> not present\n";

	if (ExposureTime) {
		stream << "\t\t";
		ExposureTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTime> not present\n";

	if (ExposureTimeInuS) {
		stream << "\t\t";
		ExposureTimeInuS->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInuS> not present\n";

	if (Exposure) {
		stream << "\t\t";
		Exposure->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Exposure> not present\n";

	if (ExposureInuAs) {
		stream << "\t\t";
		ExposureInuAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInuAs> not present\n";

	if (Grid) {
		stream << "\t\t";
		Grid->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Grid> not present\n";

	if (AveragePulseWidth) {
		stream << "\t\t";
		AveragePulseWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AveragePulseWidth> not present\n";

	if (RadiationMode) {
		stream << "\t\t";
		RadiationMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationMode> not present\n";

	if (TypeOfFilters) {
		stream << "\t\t";
		TypeOfFilters->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TypeOfFilters> not present\n";

	if (IntensifierSize) {
		stream << "\t\t";
		IntensifierSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntensifierSize> not present\n";

	if (FieldOfViewShape) {
		stream << "\t\t";
		FieldOfViewShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewShape> not present\n";

	if (FieldOfViewDimensions) {
		stream << "\t\t";
		FieldOfViewDimensions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewDimensions> not present\n";

	if (ImagerPixelSpacing) {
		stream << "\t\t";
		ImagerPixelSpacing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImagerPixelSpacing> not present\n";

				stream << "\t";
	Macro_BasicPixelSpacingCalibrationMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <BasicPixelSpacingCalibrationMacro>\n";

	if (FocalSpots) {
		stream << "\t\t";
		FocalSpots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocalSpots> not present\n";

	if (ImageAndFluoroscopyAreaDoseProduct) {
		stream << "\t\t";
		ImageAndFluoroscopyAreaDoseProduct->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageAndFluoroscopyAreaDoseProduct> not present\n";

}

void
Macro_XRayCollimatorDimensionsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayCollimatorDimensionsMacro>\n";

	if (CollimatorLeftVerticalEdge) {
		stream << "\t\t";
		CollimatorLeftVerticalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorLeftVerticalEdge> not present\n";

	if (CollimatorRightVerticalEdge) {
		stream << "\t\t";
		CollimatorRightVerticalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorRightVerticalEdge> not present\n";

	if (CollimatorUpperHorizontalEdge) {
		stream << "\t\t";
		CollimatorUpperHorizontalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorUpperHorizontalEdge> not present\n";

	if (CollimatorLowerHorizontalEdge) {
		stream << "\t\t";
		CollimatorLowerHorizontalEdge->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorLowerHorizontalEdge> not present\n";

	if (CenterOfCircularCollimator) {
		stream << "\t\t";
		CenterOfCircularCollimator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CenterOfCircularCollimator> not present\n";

	if (RadiusOfCircularCollimator) {
		stream << "\t\t";
		RadiusOfCircularCollimator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiusOfCircularCollimator> not present\n";

	if (VerticesOfThePolygonalCollimator) {
		stream << "\t\t";
		VerticesOfThePolygonalCollimator->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VerticesOfThePolygonalCollimator> not present\n";

}

void
Module_XRayCollimator::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayCollimator>\n";

	if (CollimatorShape) {
		stream << "\t\t";
		CollimatorShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorShape> not present\n";

				stream << "\t";
	Macro_XRayCollimatorDimensionsMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <XRayCollimatorDimensionsMacro>\n";

}

void
Module_XRayTable::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayTable>\n";

	if (TableMotion) {
		stream << "\t\t";
		TableMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableMotion> not present\n";

	if (TableVerticalIncrement) {
		stream << "\t\t";
		TableVerticalIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableVerticalIncrement> not present\n";

	if (TableLongitudinalIncrement) {
		stream << "\t\t";
		TableLongitudinalIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableLongitudinalIncrement> not present\n";

	if (TableLateralIncrement) {
		stream << "\t\t";
		TableLateralIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableLateralIncrement> not present\n";

	if (TableAngle) {
		stream << "\t\t";
		TableAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableAngle> not present\n";

}

void
Module_XAPositioner::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XAPositioner>\n";

	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (EstimatedRadiographicMagnificationFactor) {
		stream << "\t\t";
		EstimatedRadiographicMagnificationFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EstimatedRadiographicMagnificationFactor> not present\n";

	if (PositionerMotion) {
		stream << "\t\t";
		PositionerMotion->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerMotion> not present\n";

	if (PositionerPrimaryAngle) {
		stream << "\t\t";
		PositionerPrimaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

	if (PositionerSecondaryAngle) {
		stream << "\t\t";
		PositionerSecondaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerSecondaryAngle> not present\n";

	if (PositionerPrimaryAngleIncrement) {
		stream << "\t\t";
		PositionerPrimaryAngleIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerPrimaryAngleIncrement> not present\n";

	if (PositionerSecondaryAngleIncrement) {
		stream << "\t\t";
		PositionerSecondaryAngleIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerSecondaryAngleIncrement> not present\n";

	if (DetectorPrimaryAngle) {
		stream << "\t\t";
		DetectorPrimaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorPrimaryAngle> not present\n";

	if (DetectorSecondaryAngle) {
		stream << "\t\t";
		DetectorSecondaryAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DetectorSecondaryAngle> not present\n";

}

void
Module_XRFPositioner::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRFPositioner>\n";

	if (DistanceSourceToDetector) {
		stream << "\t\t";
		DistanceSourceToDetector->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToDetector> not present\n";

	if (DistanceSourceToPatient) {
		stream << "\t\t";
		DistanceSourceToPatient->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceSourceToPatient> not present\n";

	if (EstimatedRadiographicMagnificationFactor) {
		stream << "\t\t";
		EstimatedRadiographicMagnificationFactor->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EstimatedRadiographicMagnificationFactor> not present\n";

	if (ColumnAngulation) {
		stream << "\t\t";
		ColumnAngulation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColumnAngulation> not present\n";

}

void
Module_XRayTomographyAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayTomographyAcquisition>\n";

	if (TomoLayerHeight) {
		stream << "\t\t";
		TomoLayerHeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TomoLayerHeight> not present\n";

	if (TomoAngle) {
		stream << "\t\t";
		TomoAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TomoAngle> not present\n";

	if (TomoTime) {
		stream << "\t\t";
		TomoTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TomoTime> not present\n";

	if (TomoType) {
		stream << "\t\t";
		TomoType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TomoType> not present\n";

	if (TomoClass) {
		stream << "\t\t";
		TomoClass->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TomoClass> not present\n";

	if (NumberOfTomosynthesisSourceImages) {
		stream << "\t\t";
		NumberOfTomosynthesisSourceImages->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfTomosynthesisSourceImages> not present\n";

}

void
Module_XAXRFSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XAXRFSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
}

void
Module_EnhancedXAXRFImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedXAXRFImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (PlanesInAcquisition) {
		stream << "\t\t";
		PlanesInAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlanesInAcquisition> not present\n";

	if (PlaneIdentification) {
		stream << "\t\t";
		PlaneIdentification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PlaneIdentification> not present\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (AcquisitionProtocolName) {
		stream << "\t\t";
		AcquisitionProtocolName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionProtocolName> not present\n";

	if (AcquisitionProtocolDescription) {
		stream << "\t\t";
		AcquisitionProtocolDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionProtocolDescription> not present\n";

	if (ScanOptions) {
		stream << "\t\t";
		ScanOptions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ScanOptions> not present\n";

	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (PatientOrientationCodeSequence)
		stream << "\t\tSequence <PatientOrientationCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientOrientationCodeSequence> not present\n";
	if (PatientOrientationCodeSequence && strcmp(PatientOrientationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientOrientationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *PatientOrientationModifierCodeSequence = (*list)[TagFromName(PatientOrientationModifierCodeSequence)];
				stream << "\t";
				if (PatientOrientationModifierCodeSequence)
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence>\n";
				else
					stream << "\t\tSequence <PatientOrientationModifierCodeSequence> not present\n";
				if (PatientOrientationModifierCodeSequence && strcmp(PatientOrientationModifierCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PatientOrientationModifierCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (PatientGantryRelationshipCodeSequence)
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence>\n";
	else
		stream << "\t\tSequence <PatientGantryRelationshipCodeSequence> not present\n";
	if (PatientGantryRelationshipCodeSequence && strcmp(PatientGantryRelationshipCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PatientGantryRelationshipCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ExaminedBodyThickness) {
		stream << "\t\t";
		ExaminedBodyThickness->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExaminedBodyThickness> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (ReferencedOtherPlaneSequence)
		stream << "\t\tSequence <ReferencedOtherPlaneSequence>\n";
	else
		stream << "\t\tSequence <ReferencedOtherPlaneSequence> not present\n";
	if (ReferencedOtherPlaneSequence && strcmp(ReferencedOtherPlaneSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedOtherPlaneSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedImageEvidenceSequence)
		stream << "\t\tSequence <ReferencedImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageEvidenceSequence> not present\n";
	if (ReferencedImageEvidenceSequence && strcmp(ReferencedImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (SourceImageEvidenceSequence)
		stream << "\t\tSequence <SourceImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <SourceImageEvidenceSequence> not present\n";
	if (SourceImageEvidenceSequence && strcmp(SourceImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (QualityControlImage) {
		stream << "\t\t";
		QualityControlImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <QualityControlImage> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

}

void
Module_XAXRFAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XAXRFAcquisition>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (RadiationSetting) {
		stream << "\t\t";
		RadiationSetting->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationSetting> not present\n";

	if (XRayTubeCurrentInmA) {
		stream << "\t\t";
		XRayTubeCurrentInmA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

	if (ExposureTimeInms) {
		stream << "\t\t";
		ExposureTimeInms->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInms> not present\n";

	if (ExposureInmAs) {
		stream << "\t\t";
		ExposureInmAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInmAs> not present\n";

	if (AveragePulseWidth) {
		stream << "\t\t";
		AveragePulseWidth->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AveragePulseWidth> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (RadiationMode) {
		stream << "\t\t";
		RadiationMode->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RadiationMode> not present\n";

	if (FocalSpots) {
		stream << "\t\t";
		FocalSpots->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FocalSpots> not present\n";

	if (AnodeTargetMaterial) {
		stream << "\t\t";
		AnodeTargetMaterial->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AnodeTargetMaterial> not present\n";

	if (RectificationType) {
		stream << "\t\t";
		RectificationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RectificationType> not present\n";

	if (XRayReceptorType) {
		stream << "\t\t";
		XRayReceptorType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayReceptorType> not present\n";

	if (DistanceReceptorPlaneToDetectorHousing) {
		stream << "\t\t";
		DistanceReceptorPlaneToDetectorHousing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DistanceReceptorPlaneToDetectorHousing> not present\n";

	if (PositionerType) {
		stream << "\t\t";
		PositionerType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionerType> not present\n";

	if (CArmPositionerTabletopRelationship) {
		stream << "\t\t";
		CArmPositionerTabletopRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CArmPositionerTabletopRelationship> not present\n";

	if (AcquiredImageAreaDoseProduct) {
		stream << "\t\t";
		AcquiredImageAreaDoseProduct->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquiredImageAreaDoseProduct> not present\n";

}

void
Module_XRayImageIntensifier::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayImageIntensifier>\n";

	if (IntensifierSize) {
		stream << "\t\t";
		IntensifierSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntensifierSize> not present\n";

	if (IntensifierActiveShape) {
		stream << "\t\t";
		IntensifierActiveShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntensifierActiveShape> not present\n";

	if (IntensifierActiveDimensions) {
		stream << "\t\t";
		IntensifierActiveDimensions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IntensifierActiveDimensions> not present\n";

}

void
Module_XRayDetector::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRayDetector>\n";

				stream << "\t";
	Macro_DigitalXRayDetectorMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <DigitalXRayDetectorMacro>\n";

	if (PhysicalDetectorSize) {
		stream << "\t\t";
		PhysicalDetectorSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhysicalDetectorSize> not present\n";

	if (PositionOfIsocenterProjection) {
		stream << "\t\t";
		PositionOfIsocenterProjection->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionOfIsocenterProjection> not present\n";

}

void
Macro_XRayFrameCharacteristicsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFrameCharacteristicsMacro>\n";

	if (XAXRFFrameCharacteristicsSequence)
		stream << "\t\tSequence <XAXRFFrameCharacteristicsSequence>\n";
	else
		stream << "\t\tSequence <XAXRFFrameCharacteristicsSequence> not present\n";
	if (XAXRFFrameCharacteristicsSequence && strcmp(XAXRFFrameCharacteristicsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XAXRFFrameCharacteristicsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DerivationDescription = (*list)[TagFromName(DerivationDescription)];
				stream << "\t";
				if (DerivationDescription) {
					stream << "\t\t";
					DerivationDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DerivationDescription> not present\n";

	Attribute *DerivationCodeSequence = (*list)[TagFromName(DerivationCodeSequence)];
				stream << "\t";
				if (DerivationCodeSequence)
					stream << "\t\tSequence <DerivationCodeSequence>\n";
				else
					stream << "\t\tSequence <DerivationCodeSequence> not present\n";
				if (DerivationCodeSequence && strcmp(DerivationCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=DerivationCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
				stream << "\t";
				if (AcquisitionDeviceProcessingDescription) {
					stream << "\t\t";
					AcquisitionDeviceProcessingDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

				Attribute *AcquisitionDeviceProcessingCode = (*list)[TagFromName(AcquisitionDeviceProcessingCode)];
				stream << "\t";
				if (AcquisitionDeviceProcessingCode) {
					stream << "\t\t";
					AcquisitionDeviceProcessingCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDeviceProcessingCode> not present\n";

			}
		}
	}
}

void
Macro_XRayFieldOfViewMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFieldOfViewMacro>\n";

	if (FieldOfViewSequence)
		stream << "\t\tSequence <FieldOfViewSequence>\n";
	else
		stream << "\t\tSequence <FieldOfViewSequence> not present\n";
	if (FieldOfViewSequence && strcmp(FieldOfViewSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FieldOfViewSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
				stream << "\t";
				if (FieldOfViewShape) {
					stream << "\t\t";
					FieldOfViewShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewShape> not present\n";

				Attribute *FieldOfViewDimensionsInFloat = (*list)[TagFromName(FieldOfViewDimensionsInFloat)];
				stream << "\t";
				if (FieldOfViewDimensionsInFloat) {
					stream << "\t\t";
					FieldOfViewDimensionsInFloat->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewDimensionsInFloat> not present\n";

				Attribute *FieldOfViewOrigin = (*list)[TagFromName(FieldOfViewOrigin)];
				stream << "\t";
				if (FieldOfViewOrigin) {
					stream << "\t\t";
					FieldOfViewOrigin->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewOrigin> not present\n";

				Attribute *FieldOfViewRotation = (*list)[TagFromName(FieldOfViewRotation)];
				stream << "\t";
				if (FieldOfViewRotation) {
					stream << "\t\t";
					FieldOfViewRotation->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewRotation> not present\n";

				Attribute *FieldOfViewHorizontalFlip = (*list)[TagFromName(FieldOfViewHorizontalFlip)];
				stream << "\t";
				if (FieldOfViewHorizontalFlip) {
					stream << "\t\t";
					FieldOfViewHorizontalFlip->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewHorizontalFlip> not present\n";

				Attribute *FieldOfViewDescription = (*list)[TagFromName(FieldOfViewDescription)];
				stream << "\t";
				if (FieldOfViewDescription) {
					stream << "\t\t";
					FieldOfViewDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewDescription> not present\n";

			}
		}
	}
}

void
Macro_XRayExposureControlSensingRegionsMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayExposureControlSensingRegionsMacro>\n";

	if (ExposureControlSensingRegionsSequence)
		stream << "\t\tSequence <ExposureControlSensingRegionsSequence>\n";
	else
		stream << "\t\tSequence <ExposureControlSensingRegionsSequence> not present\n";
	if (ExposureControlSensingRegionsSequence && strcmp(ExposureControlSensingRegionsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ExposureControlSensingRegionsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ExposureControlSensingRegionShape = (*list)[TagFromName(ExposureControlSensingRegionShape)];
				stream << "\t";
				if (ExposureControlSensingRegionShape) {
					stream << "\t\t";
					ExposureControlSensingRegionShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlSensingRegionShape> not present\n";

				Attribute *ExposureControlSensingRegionLeftVerticalEdge = (*list)[TagFromName(ExposureControlSensingRegionLeftVerticalEdge)];
				stream << "\t";
				if (ExposureControlSensingRegionLeftVerticalEdge) {
					stream << "\t\t";
					ExposureControlSensingRegionLeftVerticalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlSensingRegionLeftVerticalEdge> not present\n";

				Attribute *ExposureControlSensingRegionRightVerticalEdge = (*list)[TagFromName(ExposureControlSensingRegionRightVerticalEdge)];
				stream << "\t";
				if (ExposureControlSensingRegionRightVerticalEdge) {
					stream << "\t\t";
					ExposureControlSensingRegionRightVerticalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlSensingRegionRightVerticalEdge> not present\n";

				Attribute *ExposureControlSensingRegionUpperHorizontalEdge = (*list)[TagFromName(ExposureControlSensingRegionUpperHorizontalEdge)];
				stream << "\t";
				if (ExposureControlSensingRegionUpperHorizontalEdge) {
					stream << "\t\t";
					ExposureControlSensingRegionUpperHorizontalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlSensingRegionUpperHorizontalEdge> not present\n";

				Attribute *ExposureControlSensingRegionLowerHorizontalEdge = (*list)[TagFromName(ExposureControlSensingRegionLowerHorizontalEdge)];
				stream << "\t";
				if (ExposureControlSensingRegionLowerHorizontalEdge) {
					stream << "\t\t";
					ExposureControlSensingRegionLowerHorizontalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExposureControlSensingRegionLowerHorizontalEdge> not present\n";

				Attribute *CenterOfCircularExposureControlSensingRegion = (*list)[TagFromName(CenterOfCircularExposureControlSensingRegion)];
				stream << "\t";
				if (CenterOfCircularExposureControlSensingRegion) {
					stream << "\t\t";
					CenterOfCircularExposureControlSensingRegion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CenterOfCircularExposureControlSensingRegion> not present\n";

				Attribute *RadiusOfCircularExposureControlSensingRegion = (*list)[TagFromName(RadiusOfCircularExposureControlSensingRegion)];
				stream << "\t";
				if (RadiusOfCircularExposureControlSensingRegion) {
					stream << "\t\t";
					RadiusOfCircularExposureControlSensingRegion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiusOfCircularExposureControlSensingRegion> not present\n";

				Attribute *VerticesOfThePolygonalExposureControlSensingRegion = (*list)[TagFromName(VerticesOfThePolygonalExposureControlSensingRegion)];
				stream << "\t";
				if (VerticesOfThePolygonalExposureControlSensingRegion) {
					stream << "\t\t";
					VerticesOfThePolygonalExposureControlSensingRegion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerticesOfThePolygonalExposureControlSensingRegion> not present\n";

			}
		}
	}
}

void
Macro_XRayFramePixelDataPropertiesMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFramePixelDataPropertiesMacro>\n";

	if (FramePixelDataPropertiesSequence)
		stream << "\t\tSequence <FramePixelDataPropertiesSequence>\n";
	else
		stream << "\t\tSequence <FramePixelDataPropertiesSequence> not present\n";
	if (FramePixelDataPropertiesSequence && strcmp(FramePixelDataPropertiesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FramePixelDataPropertiesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

				Attribute *PixelIntensityRelationship = (*list)[TagFromName(PixelIntensityRelationship)];
				stream << "\t";
				if (PixelIntensityRelationship) {
					stream << "\t\t";
					PixelIntensityRelationship->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelIntensityRelationship> not present\n";

				Attribute *PixelIntensityRelationshipSign = (*list)[TagFromName(PixelIntensityRelationshipSign)];
				stream << "\t";
				if (PixelIntensityRelationshipSign) {
					stream << "\t\t";
					PixelIntensityRelationshipSign->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelIntensityRelationshipSign> not present\n";

				Attribute *ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
				stream << "\t";
				if (ImagerPixelSpacing) {
					stream << "\t\t";
					ImagerPixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagerPixelSpacing> not present\n";

				Attribute *GeometricalProperties = (*list)[TagFromName(GeometricalProperties)];
				stream << "\t";
				if (GeometricalProperties) {
					stream << "\t\t";
					GeometricalProperties->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GeometricalProperties> not present\n";

				Attribute *GeometricMaximumDistortion = (*list)[TagFromName(GeometricMaximumDistortion)];
				stream << "\t";
				if (GeometricMaximumDistortion) {
					stream << "\t\t";
					GeometricMaximumDistortion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GeometricMaximumDistortion> not present\n";

				Attribute *ImageProcessingApplied = (*list)[TagFromName(ImageProcessingApplied)];
				stream << "\t";
				if (ImageProcessingApplied) {
					stream << "\t\t";
					ImageProcessingApplied->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageProcessingApplied> not present\n";

			}
		}
	}
}

void
Macro_XRayFrameDetectorParametersMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFrameDetectorParametersMacro>\n";

	if (FrameDetectorParametersSequence)
		stream << "\t\tSequence <FrameDetectorParametersSequence>\n";
	else
		stream << "\t\tSequence <FrameDetectorParametersSequence> not present\n";
	if (FrameDetectorParametersSequence && strcmp(FrameDetectorParametersSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameDetectorParametersSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DetectorActiveTime = (*list)[TagFromName(DetectorActiveTime)];
				stream << "\t";
				if (DetectorActiveTime) {
					stream << "\t\t";
					DetectorActiveTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorActiveTime> not present\n";

				Attribute *DetectorActivationOffsetFromExposure = (*list)[TagFromName(DetectorActivationOffsetFromExposure)];
				stream << "\t";
				if (DetectorActivationOffsetFromExposure) {
					stream << "\t\t";
					DetectorActivationOffsetFromExposure->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DetectorActivationOffsetFromExposure> not present\n";

			}
		}
	}
}

void
Macro_XRayCalibrationDeviceUsageMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayCalibrationDeviceUsageMacro>\n";

	if (CalibrationSequence)
		stream << "\t\tSequence <CalibrationSequence>\n";
	else
		stream << "\t\tSequence <CalibrationSequence> not present\n";
	if (CalibrationSequence && strcmp(CalibrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CalibrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CalibrationImage = (*list)[TagFromName(CalibrationImage)];
				stream << "\t";
				if (CalibrationImage) {
					stream << "\t\t";
					CalibrationImage->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalibrationImage> not present\n";

			}
		}
	}
}

void
Macro_XRayObjectThicknessMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayObjectThicknessMacro>\n";

	if (ObjectThicknessSequence)
		stream << "\t\tSequence <ObjectThicknessSequence>\n";
	else
		stream << "\t\tSequence <ObjectThicknessSequence> not present\n";
	if (ObjectThicknessSequence && strcmp(ObjectThicknessSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ObjectThicknessSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CalculatedAnatomyThickness = (*list)[TagFromName(CalculatedAnatomyThickness)];
				stream << "\t";
				if (CalculatedAnatomyThickness) {
					stream << "\t\t";
					CalculatedAnatomyThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CalculatedAnatomyThickness> not present\n";

			}
		}
	}
}

void
Macro_XRayFrameAcquisitionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayFrameAcquisitionMacro>\n";

	if (FrameAcquisitionSequence)
		stream << "\t\tSequence <FrameAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <FrameAcquisitionSequence> not present\n";
	if (FrameAcquisitionSequence && strcmp(FrameAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *KVP = (*list)[TagFromName(KVP)];
				stream << "\t";
				if (KVP) {
					stream << "\t\t";
					KVP->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <KVP> not present\n";

				Attribute *XRayTubeCurrentInmA = (*list)[TagFromName(XRayTubeCurrentInmA)];
				stream << "\t";
				if (XRayTubeCurrentInmA) {
					stream << "\t\t";
					XRayTubeCurrentInmA->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

			}
		}
	}
}

void
Macro_XRayProjectionPixelCalibrationMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayProjectionPixelCalibrationMacro>\n";

	if (ProjectionPixelCalibrationSequence)
		stream << "\t\tSequence <ProjectionPixelCalibrationSequence>\n";
	else
		stream << "\t\tSequence <ProjectionPixelCalibrationSequence> not present\n";
	if (ProjectionPixelCalibrationSequence && strcmp(ProjectionPixelCalibrationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ProjectionPixelCalibrationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DistanceObjectToTableTop = (*list)[TagFromName(DistanceObjectToTableTop)];
				stream << "\t";
				if (DistanceObjectToTableTop) {
					stream << "\t\t";
					DistanceObjectToTableTop->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceObjectToTableTop> not present\n";

				Attribute *ObjectPixelSpacingInCenterOfBeam = (*list)[TagFromName(ObjectPixelSpacingInCenterOfBeam)];
				stream << "\t";
				if (ObjectPixelSpacingInCenterOfBeam) {
					stream << "\t\t";
					ObjectPixelSpacingInCenterOfBeam->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ObjectPixelSpacingInCenterOfBeam> not present\n";

				Attribute *TableHeight = (*list)[TagFromName(TableHeight)];
				stream << "\t";
				if (TableHeight) {
					stream << "\t\t";
					TableHeight->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHeight> not present\n";

				Attribute *BeamAngle = (*list)[TagFromName(BeamAngle)];
				stream << "\t";
				if (BeamAngle) {
					stream << "\t\t";
					BeamAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BeamAngle> not present\n";

			}
		}
	}
}

void
Macro_XRayPositionerMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayPositionerMacro>\n";

	if (PositionerPositionSequence)
		stream << "\t\tSequence <PositionerPositionSequence>\n";
	else
		stream << "\t\tSequence <PositionerPositionSequence> not present\n";
	if (PositionerPositionSequence && strcmp(PositionerPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PositionerPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PositionerPrimaryAngle = (*list)[TagFromName(PositionerPrimaryAngle)];
				stream << "\t";
				if (PositionerPrimaryAngle) {
					stream << "\t\t";
					PositionerPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerPrimaryAngle> not present\n";

				Attribute *PositionerSecondaryAngle = (*list)[TagFromName(PositionerSecondaryAngle)];
				stream << "\t";
				if (PositionerSecondaryAngle) {
					stream << "\t\t";
					PositionerSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerSecondaryAngle> not present\n";

				Attribute *ColumnAngulationPatient = (*list)[TagFromName(ColumnAngulationPatient)];
				stream << "\t";
				if (ColumnAngulationPatient) {
					stream << "\t\t";
					ColumnAngulationPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ColumnAngulationPatient> not present\n";

			}
		}
	}
}

void
Macro_XRayTablePositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayTablePositionMacro>\n";

	if (TablePositionSequence)
		stream << "\t\tSequence <TablePositionSequence>\n";
	else
		stream << "\t\tSequence <TablePositionSequence> not present\n";
	if (TablePositionSequence && strcmp(TablePositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TablePositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TableTopVerticalPosition = (*list)[TagFromName(TableTopVerticalPosition)];
				stream << "\t";
				if (TableTopVerticalPosition) {
					stream << "\t\t";
					TableTopVerticalPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopVerticalPosition> not present\n";

				Attribute *TableTopLongitudinalPosition = (*list)[TagFromName(TableTopLongitudinalPosition)];
				stream << "\t";
				if (TableTopLongitudinalPosition) {
					stream << "\t\t";
					TableTopLongitudinalPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLongitudinalPosition> not present\n";

				Attribute *TableTopLateralPosition = (*list)[TagFromName(TableTopLateralPosition)];
				stream << "\t";
				if (TableTopLateralPosition) {
					stream << "\t\t";
					TableTopLateralPosition->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableTopLateralPosition> not present\n";

				Attribute *TableHorizontalRotationAngle = (*list)[TagFromName(TableHorizontalRotationAngle)];
				stream << "\t";
				if (TableHorizontalRotationAngle) {
					stream << "\t\t";
					TableHorizontalRotationAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHorizontalRotationAngle> not present\n";

				Attribute *TableHeadTiltAngle = (*list)[TagFromName(TableHeadTiltAngle)];
				stream << "\t";
				if (TableHeadTiltAngle) {
					stream << "\t\t";
					TableHeadTiltAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHeadTiltAngle> not present\n";

				Attribute *TableCradleTiltAngle = (*list)[TagFromName(TableCradleTiltAngle)];
				stream << "\t";
				if (TableCradleTiltAngle) {
					stream << "\t\t";
					TableCradleTiltAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableCradleTiltAngle> not present\n";

			}
		}
	}
}

void
Macro_XRayCollimatorMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayCollimatorMacro>\n";

	if (CollimatorShapeSequence)
		stream << "\t\tSequence <CollimatorShapeSequence>\n";
	else
		stream << "\t\tSequence <CollimatorShapeSequence> not present\n";
	if (CollimatorShapeSequence && strcmp(CollimatorShapeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=CollimatorShapeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CollimatorShape = (*list)[TagFromName(CollimatorShape)];
				stream << "\t";
				if (CollimatorShape) {
					stream << "\t\t";
					CollimatorShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorShape> not present\n";

				Attribute *CollimatorLeftVerticalEdge = (*list)[TagFromName(CollimatorLeftVerticalEdge)];
				stream << "\t";
				if (CollimatorLeftVerticalEdge) {
					stream << "\t\t";
					CollimatorLeftVerticalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorLeftVerticalEdge> not present\n";

				Attribute *CollimatorRightVerticalEdge = (*list)[TagFromName(CollimatorRightVerticalEdge)];
				stream << "\t";
				if (CollimatorRightVerticalEdge) {
					stream << "\t\t";
					CollimatorRightVerticalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorRightVerticalEdge> not present\n";

				Attribute *CollimatorUpperHorizontalEdge = (*list)[TagFromName(CollimatorUpperHorizontalEdge)];
				stream << "\t";
				if (CollimatorUpperHorizontalEdge) {
					stream << "\t\t";
					CollimatorUpperHorizontalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorUpperHorizontalEdge> not present\n";

				Attribute *CollimatorLowerHorizontalEdge = (*list)[TagFromName(CollimatorLowerHorizontalEdge)];
				stream << "\t";
				if (CollimatorLowerHorizontalEdge) {
					stream << "\t\t";
					CollimatorLowerHorizontalEdge->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CollimatorLowerHorizontalEdge> not present\n";

				Attribute *CenterOfCircularCollimator = (*list)[TagFromName(CenterOfCircularCollimator)];
				stream << "\t";
				if (CenterOfCircularCollimator) {
					stream << "\t\t";
					CenterOfCircularCollimator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CenterOfCircularCollimator> not present\n";

				Attribute *RadiusOfCircularCollimator = (*list)[TagFromName(RadiusOfCircularCollimator)];
				stream << "\t";
				if (RadiusOfCircularCollimator) {
					stream << "\t\t";
					RadiusOfCircularCollimator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RadiusOfCircularCollimator> not present\n";

				Attribute *VerticesOfThePolygonalCollimator = (*list)[TagFromName(VerticesOfThePolygonalCollimator)];
				stream << "\t";
				if (VerticesOfThePolygonalCollimator) {
					stream << "\t\t";
					VerticesOfThePolygonalCollimator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VerticesOfThePolygonalCollimator> not present\n";

			}
		}
	}
}

void
Macro_XRayIsocenterReferenceSystemMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayIsocenterReferenceSystemMacro>\n";

	if (IsocenterReferenceSystemSequence)
		stream << "\t\tSequence <IsocenterReferenceSystemSequence>\n";
	else
		stream << "\t\tSequence <IsocenterReferenceSystemSequence> not present\n";
	if (IsocenterReferenceSystemSequence && strcmp(IsocenterReferenceSystemSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IsocenterReferenceSystemSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PositionerIsocenterPrimaryAngle = (*list)[TagFromName(PositionerIsocenterPrimaryAngle)];
				stream << "\t";
				if (PositionerIsocenterPrimaryAngle) {
					stream << "\t\t";
					PositionerIsocenterPrimaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerIsocenterPrimaryAngle> not present\n";

				Attribute *PositionerIsocenterSecondaryAngle = (*list)[TagFromName(PositionerIsocenterSecondaryAngle)];
				stream << "\t";
				if (PositionerIsocenterSecondaryAngle) {
					stream << "\t\t";
					PositionerIsocenterSecondaryAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerIsocenterSecondaryAngle> not present\n";

				Attribute *PositionerIsocenterDetectorRotationAngle = (*list)[TagFromName(PositionerIsocenterDetectorRotationAngle)];
				stream << "\t";
				if (PositionerIsocenterDetectorRotationAngle) {
					stream << "\t\t";
					PositionerIsocenterDetectorRotationAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionerIsocenterDetectorRotationAngle> not present\n";

				Attribute *TableXPositionToIsocenter = (*list)[TagFromName(TableXPositionToIsocenter)];
				stream << "\t";
				if (TableXPositionToIsocenter) {
					stream << "\t\t";
					TableXPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableXPositionToIsocenter> not present\n";

				Attribute *TableYPositionToIsocenter = (*list)[TagFromName(TableYPositionToIsocenter)];
				stream << "\t";
				if (TableYPositionToIsocenter) {
					stream << "\t\t";
					TableYPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableYPositionToIsocenter> not present\n";

				Attribute *TableZPositionToIsocenter = (*list)[TagFromName(TableZPositionToIsocenter)];
				stream << "\t";
				if (TableZPositionToIsocenter) {
					stream << "\t\t";
					TableZPositionToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableZPositionToIsocenter> not present\n";

				Attribute *TableHorizontalRotationAngle = (*list)[TagFromName(TableHorizontalRotationAngle)];
				stream << "\t";
				if (TableHorizontalRotationAngle) {
					stream << "\t\t";
					TableHorizontalRotationAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHorizontalRotationAngle> not present\n";

				Attribute *TableHeadTiltAngle = (*list)[TagFromName(TableHeadTiltAngle)];
				stream << "\t";
				if (TableHeadTiltAngle) {
					stream << "\t\t";
					TableHeadTiltAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableHeadTiltAngle> not present\n";

				Attribute *TableCradleTiltAngle = (*list)[TagFromName(TableCradleTiltAngle)];
				stream << "\t";
				if (TableCradleTiltAngle) {
					stream << "\t\t";
					TableCradleTiltAngle->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TableCradleTiltAngle> not present\n";

			}
		}
	}
}

void
Macro_XRayGeometryMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRayGeometryMacro>\n";

	if (XRayGeometrySequence)
		stream << "\t\tSequence <XRayGeometrySequence>\n";
	else
		stream << "\t\tSequence <XRayGeometrySequence> not present\n";
	if (XRayGeometrySequence && strcmp(XRayGeometrySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRayGeometrySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DistanceSourceToIsocenter = (*list)[TagFromName(DistanceSourceToIsocenter)];
				stream << "\t";
				if (DistanceSourceToIsocenter) {
					stream << "\t\t";
					DistanceSourceToIsocenter->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToIsocenter> not present\n";

				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

			}
		}
	}
}

void
Module_XAXRFMultiFramePresentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XAXRFMultiFramePresentation>\n";

	if (PreferredPlaybackSequencing) {
		stream << "\t\t";
		PreferredPlaybackSequencing->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PreferredPlaybackSequencing> not present\n";

	if (FrameDisplaySequence)
		stream << "\t\tSequence <FrameDisplaySequence>\n";
	else
		stream << "\t\tSequence <FrameDisplaySequence> not present\n";
	if (FrameDisplaySequence && strcmp(FrameDisplaySequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameDisplaySequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *StartTrim = (*list)[TagFromName(StartTrim)];
				stream << "\t";
				if (StartTrim) {
					stream << "\t\t";
					StartTrim->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StartTrim> not present\n";

				Attribute *StopTrim = (*list)[TagFromName(StopTrim)];
				stream << "\t";
				if (StopTrim) {
					stream << "\t\t";
					StopTrim->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StopTrim> not present\n";

				Attribute *SkipFrameRangeFlag = (*list)[TagFromName(SkipFrameRangeFlag)];
				stream << "\t";
				if (SkipFrameRangeFlag) {
					stream << "\t\t";
					SkipFrameRangeFlag->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SkipFrameRangeFlag> not present\n";

				Attribute *RecommendedDisplayFrameRateInFloat = (*list)[TagFromName(RecommendedDisplayFrameRateInFloat)];
				stream << "\t";
				if (RecommendedDisplayFrameRateInFloat) {
					stream << "\t\t";
					RecommendedDisplayFrameRateInFloat->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedDisplayFrameRateInFloat> not present\n";

				Attribute *RecommendedViewingMode = (*list)[TagFromName(RecommendedViewingMode)];
				stream << "\t";
				if (RecommendedViewingMode) {
					stream << "\t\t";
					RecommendedViewingMode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RecommendedViewingMode> not present\n";

				Attribute *DisplayFilterPercentage = (*list)[TagFromName(DisplayFilterPercentage)];
				stream << "\t";
				if (DisplayFilterPercentage) {
					stream << "\t\t";
					DisplayFilterPercentage->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DisplayFilterPercentage> not present\n";

				Attribute *MaskVisibilityPercentage = (*list)[TagFromName(MaskVisibilityPercentage)];
				stream << "\t";
				if (MaskVisibilityPercentage) {
					stream << "\t\t";
					MaskVisibilityPercentage->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <MaskVisibilityPercentage> not present\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForEnhancedXAImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedXAImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_FramePixelShiftMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FramePixelShiftMacro>\n";

							stream << "\t\t";
	Macro_PatientOrientationInFrameMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientOrientationInFrameMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_XRayFieldOfViewMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFieldOfViewMacro>\n";

							stream << "\t\t";
	Macro_XRayExposureControlSensingRegionsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayExposureControlSensingRegionsMacro>\n";

							stream << "\t\t";
	Macro_XRayFramePixelDataPropertiesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFramePixelDataPropertiesMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameDetectorParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameDetectorParametersMacro>\n";

							stream << "\t\t";
	Macro_XRayCalibrationDeviceUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCalibrationDeviceUsageMacro>\n";

							stream << "\t\t";
	Macro_XRayObjectThicknessMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayObjectThicknessMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRayProjectionPixelCalibrationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayProjectionPixelCalibrationMacro>\n";

							stream << "\t\t";
	Macro_XRayPositionerMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayPositionerMacro>\n";

							stream << "\t\t";
	Macro_XRayTablePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayTablePositionMacro>\n";

							stream << "\t\t";
	Macro_XRayCollimatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCollimatorMacro>\n";

							stream << "\t\t";
	Macro_XRayIsocenterReferenceSystemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayIsocenterReferenceSystemMacro>\n";

							stream << "\t\t";
	Macro_XRayGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGeometryMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_FramePixelShiftMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FramePixelShiftMacro>\n";

							stream << "\t\t";
	Macro_PatientOrientationInFrameMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientOrientationInFrameMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_XRayFieldOfViewMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFieldOfViewMacro>\n";

							stream << "\t\t";
	Macro_XRayExposureControlSensingRegionsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayExposureControlSensingRegionsMacro>\n";

							stream << "\t\t";
	Macro_XRayFramePixelDataPropertiesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFramePixelDataPropertiesMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameDetectorParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameDetectorParametersMacro>\n";

							stream << "\t\t";
	Macro_XRayCalibrationDeviceUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCalibrationDeviceUsageMacro>\n";

							stream << "\t\t";
	Macro_XRayObjectThicknessMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayObjectThicknessMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRayProjectionPixelCalibrationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayProjectionPixelCalibrationMacro>\n";

							stream << "\t\t";
	Macro_XRayPositionerMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayPositionerMacro>\n";

							stream << "\t\t";
	Macro_XRayTablePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayTablePositionMacro>\n";

							stream << "\t\t";
	Macro_XRayCollimatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCollimatorMacro>\n";

							stream << "\t\t";
	Macro_XRayIsocenterReferenceSystemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayIsocenterReferenceSystemMacro>\n";

							stream << "\t\t";
	Macro_XRayGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGeometryMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForEnhancedXRFImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedXRFImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_FramePixelShiftMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FramePixelShiftMacro>\n";

							stream << "\t\t";
	Macro_PatientOrientationInFrameMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientOrientationInFrameMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_XRayFieldOfViewMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFieldOfViewMacro>\n";

							stream << "\t\t";
	Macro_XRayExposureControlSensingRegionsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayExposureControlSensingRegionsMacro>\n";

							stream << "\t\t";
	Macro_XRayFramePixelDataPropertiesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFramePixelDataPropertiesMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameDetectorParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameDetectorParametersMacro>\n";

							stream << "\t\t";
	Macro_XRayCalibrationDeviceUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCalibrationDeviceUsageMacro>\n";

							stream << "\t\t";
	Macro_XRayObjectThicknessMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayObjectThicknessMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRayPositionerMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayPositionerMacro>\n";

							stream << "\t\t";
	Macro_XRayTablePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayTablePositionMacro>\n";

							stream << "\t\t";
	Macro_XRayCollimatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCollimatorMacro>\n";

							stream << "\t\t";
	Macro_XRayGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGeometryMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_PixelIntensityRelationshipLUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelIntensityRelationshipLUTMacro>\n";

							stream << "\t\t";
	Macro_FramePixelShiftMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FramePixelShiftMacro>\n";

							stream << "\t\t";
	Macro_PatientOrientationInFrameMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientOrientationInFrameMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_IrradiationEventIdentificationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IrradiationEventIdentificationMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameCharacteristicsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameCharacteristicsMacro>\n";

							stream << "\t\t";
	Macro_XRayFieldOfViewMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFieldOfViewMacro>\n";

							stream << "\t\t";
	Macro_XRayExposureControlSensingRegionsMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayExposureControlSensingRegionsMacro>\n";

							stream << "\t\t";
	Macro_XRayFramePixelDataPropertiesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFramePixelDataPropertiesMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameDetectorParametersMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameDetectorParametersMacro>\n";

							stream << "\t\t";
	Macro_XRayCalibrationDeviceUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCalibrationDeviceUsageMacro>\n";

							stream << "\t\t";
	Macro_XRayObjectThicknessMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayObjectThicknessMacro>\n";

							stream << "\t\t";
	Macro_XRayFrameAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayFrameAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_XRayPositionerMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayPositionerMacro>\n";

							stream << "\t\t";
	Macro_XRayTablePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayTablePositionMacro>\n";

							stream << "\t\t";
	Macro_XRayCollimatorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayCollimatorMacro>\n";

							stream << "\t\t";
	Macro_XRayGeometryMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRayGeometryMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForXRay3DAngiographicImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_XRay3DFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DFrameTypeMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_XRay3DFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DFrameTypeMacro>\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForXRay3DCraniofacialImage>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_XRay3DFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DFrameTypeMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_FrameAnatomyMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameAnatomyMacro>\n";

							stream << "\t\t";
	Macro_PixelValueTransformationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelValueTransformationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_XRay3DFrameTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DFrameTypeMacro>\n";

			}
		}
	}
}

void
Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage>\n";

	if (PixelPresentation) {
		stream << "\t\t";
		PixelPresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPresentation> not present\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (VolumeBasedCalculationTechnique) {
		stream << "\t\t";
		VolumeBasedCalculationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

}

void
Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage>\n";

	if (PixelPresentation) {
		stream << "\t\t";
		PixelPresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelPresentation> not present\n";

	if (VolumetricProperties) {
		stream << "\t\t";
		VolumetricProperties->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumetricProperties> not present\n";

	if (VolumeBasedCalculationTechnique) {
		stream << "\t\t";
		VolumeBasedCalculationTechnique->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

}

void
Module_XRay3DImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRay3DImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

				stream << "\t";
	Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage>\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (ContentQualification) {
		stream << "\t\t";
		ContentQualification->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentQualification> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (ReferencedImageEvidenceSequence)
		stream << "\t\tSequence <ReferencedImageEvidenceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageEvidenceSequence> not present\n";
	if (ReferencedImageEvidenceSequence && strcmp(ReferencedImageEvidenceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageEvidenceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ImageComments) {
		stream << "\t\t";
		ImageComments->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageComments> not present\n";

	if (QualityControlImage) {
		stream << "\t\t";
		QualityControlImage->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <QualityControlImage> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (SourceIrradiationEventSequence)
		stream << "\t\tSequence <SourceIrradiationEventSequence>\n";
	else
		stream << "\t\tSequence <SourceIrradiationEventSequence> not present\n";
	if (SourceIrradiationEventSequence && strcmp(SourceIrradiationEventSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceIrradiationEventSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *IrradiationEventUID = (*list)[TagFromName(IrradiationEventUID)];
				stream << "\t";
				if (IrradiationEventUID) {
					stream << "\t\t";
					IrradiationEventUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <IrradiationEventUID> not present\n";

			}
		}
	}
}

void
Module_XRay3DAngiographicImageContributingSources::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRay3DAngiographicImageContributingSources>\n";

	if (ContributingSourcesSequence)
		stream << "\t\tSequence <ContributingSourcesSequence>\n";
	else
		stream << "\t\tSequence <ContributingSourcesSequence> not present\n";
	if (ContributingSourcesSequence && strcmp(ContributingSourcesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContributingSourcesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_GeneralContributingSourcesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <GeneralContributingSourcesMacro>\n";

							stream << "\t\t";
	Macro_ContributingImageSourcesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContributingImageSourcesMacro>\n";

				Attribute *AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
				stream << "\t";
				if (AcquisitionDeviceProcessingDescription) {
					stream << "\t\t";
					AcquisitionDeviceProcessingDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

				Attribute *AcquisitionDeviceProcessingCode = (*list)[TagFromName(AcquisitionDeviceProcessingCode)];
				stream << "\t";
				if (AcquisitionDeviceProcessingCode) {
					stream << "\t\t";
					AcquisitionDeviceProcessingCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDeviceProcessingCode> not present\n";

				Attribute *PlaneIdentification = (*list)[TagFromName(PlaneIdentification)];
				stream << "\t";
				if (PlaneIdentification) {
					stream << "\t\t";
					PlaneIdentification->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PlaneIdentification> not present\n";

				Attribute *ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
				stream << "\t";
				if (ImagerPixelSpacing) {
					stream << "\t\t";
					ImagerPixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagerPixelSpacing> not present\n";

			}
		}
	}
}

void
Module_XRay3DCraniofacialImageContributingSources::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRay3DCraniofacialImageContributingSources>\n";

	if (ContributingSourcesSequence)
		stream << "\t\tSequence <ContributingSourcesSequence>\n";
	else
		stream << "\t\tSequence <ContributingSourcesSequence> not present\n";
	if (ContributingSourcesSequence && strcmp(ContributingSourcesSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContributingSourcesSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_GeneralContributingSourcesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <GeneralContributingSourcesMacro>\n";

							stream << "\t\t";
	Macro_ContributingImageSourcesMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContributingImageSourcesMacro>\n";

				Attribute *AcquisitionDeviceProcessingDescription = (*list)[TagFromName(AcquisitionDeviceProcessingDescription)];
				stream << "\t";
				if (AcquisitionDeviceProcessingDescription) {
					stream << "\t\t";
					AcquisitionDeviceProcessingDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDeviceProcessingDescription> not present\n";

				Attribute *AcquisitionDeviceProcessingCode = (*list)[TagFromName(AcquisitionDeviceProcessingCode)];
				stream << "\t";
				if (AcquisitionDeviceProcessingCode) {
					stream << "\t\t";
					AcquisitionDeviceProcessingCode->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionDeviceProcessingCode> not present\n";

				Attribute *ImagerPixelSpacing = (*list)[TagFromName(ImagerPixelSpacing)];
				stream << "\t";
				if (ImagerPixelSpacing) {
					stream << "\t\t";
					ImagerPixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagerPixelSpacing> not present\n";

			}
		}
	}
}

void
Macro_XRay3DGeneralSharedAcquisitionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRay3DGeneralSharedAcquisitionMacro>\n";

	if (SourceImageSequence)
		stream << "\t\tSequence <SourceImageSequence>\n";
	else
		stream << "\t\tSequence <SourceImageSequence> not present\n";
	if (SourceImageSequence && strcmp(SourceImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (FieldOfViewDimensionsInFloat) {
		stream << "\t\t";
		FieldOfViewDimensionsInFloat->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewDimensionsInFloat> not present\n";

	if (FieldOfViewOrigin) {
		stream << "\t\t";
		FieldOfViewOrigin->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewOrigin> not present\n";

	if (FieldOfViewRotation) {
		stream << "\t\t";
		FieldOfViewRotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewRotation> not present\n";

	if (FieldOfViewHorizontalFlip) {
		stream << "\t\t";
		FieldOfViewHorizontalFlip->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FieldOfViewHorizontalFlip> not present\n";

	if (Grid) {
		stream << "\t\t";
		Grid->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Grid> not present\n";

				stream << "\t";
	Macro_XRayGridDescriptionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <XRayGridDescriptionMacro>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (XRayTubeCurrentInmA) {
		stream << "\t\t";
		XRayTubeCurrentInmA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

	if (ExposureTimeInms) {
		stream << "\t\t";
		ExposureTimeInms->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureTimeInms> not present\n";

	if (ExposureInmAs) {
		stream << "\t\t";
		ExposureInmAs->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ExposureInmAs> not present\n";

	if (ContrastBolusAgent) {
		stream << "\t\t";
		ContrastBolusAgent->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContrastBolusAgent> not present\n";

	if (ContrastBolusAgentSequence)
		stream << "\t\tSequence <ContrastBolusAgentSequence>\n";
	else
		stream << "\t\tSequence <ContrastBolusAgentSequence> not present\n";
	if (ContrastBolusAgentSequence && strcmp(ContrastBolusAgentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ContrastBolusAgentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (StartAcquisitionDateTime) {
		stream << "\t\t";
		StartAcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StartAcquisitionDateTime> not present\n";

	if (EndAcquisitionDateTime) {
		stream << "\t\t";
		EndAcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <EndAcquisitionDateTime> not present\n";

}

void
Macro_XRay3DGeneralPerProjectionAcquisitionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRay3DGeneralPerProjectionAcquisitionMacro>\n";

	if (KVP) {
		stream << "\t\t";
		KVP->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <KVP> not present\n";

	if (XRayTubeCurrentInmA) {
		stream << "\t\t";
		XRayTubeCurrentInmA->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <XRayTubeCurrentInmA> not present\n";

	if (FrameAcquisitionDuration) {
		stream << "\t\t";
		FrameAcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <FrameAcquisitionDuration> not present\n";

	if (CollimatorShape) {
		stream << "\t\t";
		CollimatorShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CollimatorShape> not present\n";

				stream << "\t";
	Macro_XRayCollimatorDimensionsMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <XRayCollimatorDimensionsMacro>\n";

}

void
Macro_XRay3DGeneralPositionerMovementMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRay3DGeneralPositionerMovementMacro>\n";

	if (PrimaryPositionerScanArc) {
		stream << "\t\t";
		PrimaryPositionerScanArc->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryPositionerScanArc> not present\n";

	if (PrimaryPositionerScanStartAngle) {
		stream << "\t\t";
		PrimaryPositionerScanStartAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryPositionerScanStartAngle> not present\n";

	if (PrimaryPositionerIncrement) {
		stream << "\t\t";
		PrimaryPositionerIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PrimaryPositionerIncrement> not present\n";

	if (SecondaryPositionerScanArc) {
		stream << "\t\t";
		SecondaryPositionerScanArc->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryPositionerScanArc> not present\n";

	if (SecondaryPositionerScanStartAngle) {
		stream << "\t\t";
		SecondaryPositionerScanStartAngle->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryPositionerScanStartAngle> not present\n";

	if (SecondaryPositionerIncrement) {
		stream << "\t\t";
		SecondaryPositionerIncrement->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SecondaryPositionerIncrement> not present\n";

}

void
Module_XRay3DAngiographicAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRay3DAngiographicAcquisition>\n";

	if (XRay3DAcquisitionSequence)
		stream << "\t\tSequence <XRay3DAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <XRay3DAcquisitionSequence> not present\n";
	if (XRay3DAcquisitionSequence && strcmp(XRay3DAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRay3DAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
				stream << "\t";
				if (FieldOfViewShape) {
					stream << "\t\t";
					FieldOfViewShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewShape> not present\n";

				Attribute *XRayReceptorType = (*list)[TagFromName(XRayReceptorType)];
				stream << "\t";
				if (XRayReceptorType) {
					stream << "\t\t";
					XRayReceptorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayReceptorType> not present\n";

							stream << "\t\t";
	Macro_XRay3DGeneralSharedAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DGeneralSharedAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_DigitalXRayDetectorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DigitalXRayDetectorMacro>\n";

				Attribute *PhysicalDetectorSize = (*list)[TagFromName(PhysicalDetectorSize)];
				stream << "\t";
				if (PhysicalDetectorSize) {
					stream << "\t\t";
					PhysicalDetectorSize->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PhysicalDetectorSize> not present\n";

				Attribute *PositionOfIsocenterProjection = (*list)[TagFromName(PositionOfIsocenterProjection)];
				stream << "\t";
				if (PositionOfIsocenterProjection) {
					stream << "\t\t";
					PositionOfIsocenterProjection->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PositionOfIsocenterProjection> not present\n";

				Attribute *DistanceSourceToPatient = (*list)[TagFromName(DistanceSourceToPatient)];
				stream << "\t";
				if (DistanceSourceToPatient) {
					stream << "\t\t";
					DistanceSourceToPatient->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToPatient> not present\n";

				Attribute *DistanceSourceToDetector = (*list)[TagFromName(DistanceSourceToDetector)];
				stream << "\t";
				if (DistanceSourceToDetector) {
					stream << "\t\t";
					DistanceSourceToDetector->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DistanceSourceToDetector> not present\n";

				Attribute *FocalSpots = (*list)[TagFromName(FocalSpots)];
				stream << "\t";
				if (FocalSpots) {
					stream << "\t\t";
					FocalSpots->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FocalSpots> not present\n";

				Attribute *FilterType = (*list)[TagFromName(FilterType)];
				stream << "\t";
				if (FilterType) {
					stream << "\t\t";
					FilterType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterType> not present\n";

				Attribute *FilterMaterial = (*list)[TagFromName(FilterMaterial)];
				stream << "\t";
				if (FilterMaterial) {
					stream << "\t\t";
					FilterMaterial->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterMaterial> not present\n";

				Attribute *FilterThicknessMaximum = (*list)[TagFromName(FilterThicknessMaximum)];
				stream << "\t";
				if (FilterThicknessMaximum) {
					stream << "\t\t";
					FilterThicknessMaximum->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterThicknessMaximum> not present\n";

				Attribute *FilterThicknessMinimum = (*list)[TagFromName(FilterThicknessMinimum)];
				stream << "\t";
				if (FilterThicknessMinimum) {
					stream << "\t\t";
					FilterThicknessMinimum->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FilterThicknessMinimum> not present\n";

							stream << "\t\t";
	Macro_XRay3DGeneralPositionerMovementMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DGeneralPositionerMovementMacro>\n";

	Attribute *PerProjectionAcquisitionSequence = (*list)[TagFromName(PerProjectionAcquisitionSequence)];
				stream << "\t";
				if (PerProjectionAcquisitionSequence)
					stream << "\t\tSequence <PerProjectionAcquisitionSequence>\n";
				else
					stream << "\t\tSequence <PerProjectionAcquisitionSequence> not present\n";
				if (PerProjectionAcquisitionSequence && strcmp(PerProjectionAcquisitionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PerProjectionAcquisitionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_XRay3DGeneralPerProjectionAcquisitionMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <XRay3DGeneralPerProjectionAcquisitionMacro>\n";

							Attribute *PositionerIsocenterPrimaryAngle = (*list)[TagFromName(PositionerIsocenterPrimaryAngle)];
							stream << "\t\t";
							if (PositionerIsocenterPrimaryAngle) {
								stream << "\t\t";
								PositionerIsocenterPrimaryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PositionerIsocenterPrimaryAngle> not present\n";

							Attribute *PositionerIsocenterSecondaryAngle = (*list)[TagFromName(PositionerIsocenterSecondaryAngle)];
							stream << "\t\t";
							if (PositionerIsocenterSecondaryAngle) {
								stream << "\t\t";
								PositionerIsocenterSecondaryAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PositionerIsocenterSecondaryAngle> not present\n";

							Attribute *PositionerIsocenterDetectorRotationAngle = (*list)[TagFromName(PositionerIsocenterDetectorRotationAngle)];
							stream << "\t\t";
							if (PositionerIsocenterDetectorRotationAngle) {
								stream << "\t\t";
								PositionerIsocenterDetectorRotationAngle->write(stream,dict);
								stream << "\n";
							}
							else
								stream << "\t\tElement <PositionerIsocenterDetectorRotationAngle> not present\n";

						}
					}
				}
			}
		}
	}
}

void
Module_XRay3DCraniofacialAcquisition::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRay3DCraniofacialAcquisition>\n";

	if (XRay3DAcquisitionSequence)
		stream << "\t\tSequence <XRay3DAcquisitionSequence>\n";
	else
		stream << "\t\tSequence <XRay3DAcquisitionSequence> not present\n";
	if (XRay3DAcquisitionSequence && strcmp(XRay3DAcquisitionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRay3DAcquisitionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FieldOfViewShape = (*list)[TagFromName(FieldOfViewShape)];
				stream << "\t";
				if (FieldOfViewShape) {
					stream << "\t\t";
					FieldOfViewShape->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FieldOfViewShape> not present\n";

				Attribute *XRayReceptorType = (*list)[TagFromName(XRayReceptorType)];
				stream << "\t";
				if (XRayReceptorType) {
					stream << "\t\t";
					XRayReceptorType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <XRayReceptorType> not present\n";

							stream << "\t\t";
	Macro_XRay3DGeneralSharedAcquisitionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <XRay3DGeneralSharedAcquisitionMacro>\n";

							stream << "\t\t";
	Macro_DigitalXRayDetectorMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DigitalXRayDetectorMacro>\n";

	Attribute *PerProjectionAcquisitionSequence = (*list)[TagFromName(PerProjectionAcquisitionSequence)];
				stream << "\t";
				if (PerProjectionAcquisitionSequence)
					stream << "\t\tSequence <PerProjectionAcquisitionSequence>\n";
				else
					stream << "\t\tSequence <PerProjectionAcquisitionSequence> not present\n";
				if (PerProjectionAcquisitionSequence && strcmp(PerProjectionAcquisitionSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PerProjectionAcquisitionSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_XRay3DGeneralPerProjectionAcquisitionMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <XRay3DGeneralPerProjectionAcquisitionMacro>\n";

						}
					}
				}
			}
		}
	}
}

void
Module_XRay3DReconstruction::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <XRay3DReconstruction>\n";

	if (XRay3DReconstructionSequence)
		stream << "\t\tSequence <XRay3DReconstructionSequence>\n";
	else
		stream << "\t\tSequence <XRay3DReconstructionSequence> not present\n";
	if (XRay3DReconstructionSequence && strcmp(XRay3DReconstructionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRay3DReconstructionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ReconstructionDescription = (*list)[TagFromName(ReconstructionDescription)];
				stream << "\t";
				if (ReconstructionDescription) {
					stream << "\t\t";
					ReconstructionDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionDescription> not present\n";

				Attribute *ApplicationName = (*list)[TagFromName(ApplicationName)];
				stream << "\t";
				if (ApplicationName) {
					stream << "\t\t";
					ApplicationName->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationName> not present\n";

				Attribute *ApplicationVersion = (*list)[TagFromName(ApplicationVersion)];
				stream << "\t";
				if (ApplicationVersion) {
					stream << "\t\t";
					ApplicationVersion->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationVersion> not present\n";

				Attribute *ApplicationManufacturer = (*list)[TagFromName(ApplicationManufacturer)];
				stream << "\t";
				if (ApplicationManufacturer) {
					stream << "\t\t";
					ApplicationManufacturer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ApplicationManufacturer> not present\n";

				Attribute *AlgorithmType = (*list)[TagFromName(AlgorithmType)];
				stream << "\t";
				if (AlgorithmType) {
					stream << "\t\t";
					AlgorithmType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AlgorithmType> not present\n";

				Attribute *AlgorithmDescription = (*list)[TagFromName(AlgorithmDescription)];
				stream << "\t";
				if (AlgorithmDescription) {
					stream << "\t\t";
					AlgorithmDescription->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AlgorithmDescription> not present\n";

				Attribute *AcquisitionIndex  = (*list)[TagFromName(AcquisitionIndex )];
				stream << "\t";
				if (AcquisitionIndex ) {
					stream << "\t\t";
					AcquisitionIndex ->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AcquisitionIndex > not present\n";

			}
		}
	}
}

void
Macro_XRay3DFrameTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <XRay3DFrameTypeMacro>\n";

	if (XRay3DFrameTypeSequence)
		stream << "\t\tSequence <XRay3DFrameTypeSequence>\n";
	else
		stream << "\t\tSequence <XRay3DFrameTypeSequence> not present\n";
	if (XRay3DFrameTypeSequence && strcmp(XRay3DFrameTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=XRay3DFrameTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

							stream << "\t\t";
	Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage>\n";

				Attribute *ReconstructionIndex = (*list)[TagFromName(ReconstructionIndex)];
				stream << "\t";
				if (ReconstructionIndex) {
					stream << "\t\t";
					ReconstructionIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ReconstructionIndex> not present\n";

			}
		}
	}
}

void
Module_EnhancedPaletteColorLookupTable::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedPaletteColorLookupTable>\n";

	if (DataFrameAssignmentSequence)
		stream << "\t\tSequence <DataFrameAssignmentSequence>\n";
	else
		stream << "\t\tSequence <DataFrameAssignmentSequence> not present\n";
	if (DataFrameAssignmentSequence && strcmp(DataFrameAssignmentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DataFrameAssignmentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DataType = (*list)[TagFromName(DataType)];
				stream << "\t";
				if (DataType) {
					stream << "\t\t";
					DataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataType> not present\n";

				Attribute *DataPathAssignment = (*list)[TagFromName(DataPathAssignment)];
				stream << "\t";
				if (DataPathAssignment) {
					stream << "\t\t";
					DataPathAssignment->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataPathAssignment> not present\n";

				Attribute *BitsMappedToColorLookupTable = (*list)[TagFromName(BitsMappedToColorLookupTable)];
				stream << "\t";
				if (BitsMappedToColorLookupTable) {
					stream << "\t\t";
					BitsMappedToColorLookupTable->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BitsMappedToColorLookupTable> not present\n";

							stream << "\t\t";
	Macro_VOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <VOILUTMacro>\n";

			}
		}
	}
	if (BlendingLUT1Sequence)
		stream << "\t\tSequence <BlendingLUT1Sequence>\n";
	else
		stream << "\t\tSequence <BlendingLUT1Sequence> not present\n";
	if (BlendingLUT1Sequence && strcmp(BlendingLUT1Sequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BlendingLUT1Sequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *BlendingLUT1TransferFunction = (*list)[TagFromName(BlendingLUT1TransferFunction)];
				stream << "\t";
				if (BlendingLUT1TransferFunction) {
					stream << "\t\t";
					BlendingLUT1TransferFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingLUT1TransferFunction> not present\n";

				Attribute *BlendingWeightConstant = (*list)[TagFromName(BlendingWeightConstant)];
				stream << "\t";
				if (BlendingWeightConstant) {
					stream << "\t\t";
					BlendingWeightConstant->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingWeightConstant> not present\n";

				Attribute *BlendingLookupTableDescriptor = (*list)[TagFromName(BlendingLookupTableDescriptor)];
				stream << "\t";
				if (BlendingLookupTableDescriptor) {
					stream << "\t\t";
					BlendingLookupTableDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingLookupTableDescriptor> not present\n";

				Attribute *BlendingLookupTableData = (*list)[TagFromName(BlendingLookupTableData)];
				stream << "\t";
				if (BlendingLookupTableData) {
					stream << "\t\t";
					BlendingLookupTableData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingLookupTableData> not present\n";

			}
		}
	}
	if (BlendingLUT2Sequence)
		stream << "\t\tSequence <BlendingLUT2Sequence>\n";
	else
		stream << "\t\tSequence <BlendingLUT2Sequence> not present\n";
	if (BlendingLUT2Sequence && strcmp(BlendingLUT2Sequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=BlendingLUT2Sequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *BlendingLUT2TransferFunction = (*list)[TagFromName(BlendingLUT2TransferFunction)];
				stream << "\t";
				if (BlendingLUT2TransferFunction) {
					stream << "\t\t";
					BlendingLUT2TransferFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingLUT2TransferFunction> not present\n";

				Attribute *BlendingWeightConstant = (*list)[TagFromName(BlendingWeightConstant)];
				stream << "\t";
				if (BlendingWeightConstant) {
					stream << "\t\t";
					BlendingWeightConstant->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingWeightConstant> not present\n";

				Attribute *BlendingLookupTableDescriptor = (*list)[TagFromName(BlendingLookupTableDescriptor)];
				stream << "\t";
				if (BlendingLookupTableDescriptor) {
					stream << "\t\t";
					BlendingLookupTableDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingLookupTableDescriptor> not present\n";

				Attribute *BlendingLookupTableData = (*list)[TagFromName(BlendingLookupTableData)];
				stream << "\t";
				if (BlendingLookupTableData) {
					stream << "\t\t";
					BlendingLookupTableData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BlendingLookupTableData> not present\n";

			}
		}
	}
	if (EnhancedPaletteColorLookupTableSequence)
		stream << "\t\tSequence <EnhancedPaletteColorLookupTableSequence>\n";
	else
		stream << "\t\tSequence <EnhancedPaletteColorLookupTableSequence> not present\n";
	if (EnhancedPaletteColorLookupTableSequence && strcmp(EnhancedPaletteColorLookupTableSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EnhancedPaletteColorLookupTableSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DataPathID = (*list)[TagFromName(DataPathID)];
				stream << "\t";
				if (DataPathID) {
					stream << "\t\t";
					DataPathID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataPathID> not present\n";

				Attribute *RGBLUTTransferFunction = (*list)[TagFromName(RGBLUTTransferFunction)];
				stream << "\t";
				if (RGBLUTTransferFunction) {
					stream << "\t\t";
					RGBLUTTransferFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RGBLUTTransferFunction> not present\n";

				Attribute *AlphaLUTTransferFunction = (*list)[TagFromName(AlphaLUTTransferFunction)];
				stream << "\t";
				if (AlphaLUTTransferFunction) {
					stream << "\t\t";
					AlphaLUTTransferFunction->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AlphaLUTTransferFunction> not present\n";

				Attribute *RedPaletteColorLookupTableDescriptor = (*list)[TagFromName(RedPaletteColorLookupTableDescriptor)];
				stream << "\t";
				if (RedPaletteColorLookupTableDescriptor) {
					stream << "\t\t";
					RedPaletteColorLookupTableDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RedPaletteColorLookupTableDescriptor> not present\n";

				Attribute *GreenPaletteColorLookupTableDescriptor = (*list)[TagFromName(GreenPaletteColorLookupTableDescriptor)];
				stream << "\t";
				if (GreenPaletteColorLookupTableDescriptor) {
					stream << "\t\t";
					GreenPaletteColorLookupTableDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GreenPaletteColorLookupTableDescriptor> not present\n";

				Attribute *BluePaletteColorLookupTableDescriptor = (*list)[TagFromName(BluePaletteColorLookupTableDescriptor)];
				stream << "\t";
				if (BluePaletteColorLookupTableDescriptor) {
					stream << "\t\t";
					BluePaletteColorLookupTableDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BluePaletteColorLookupTableDescriptor> not present\n";

				Attribute *AlphaPaletteColorLookupTableDescriptor = (*list)[TagFromName(AlphaPaletteColorLookupTableDescriptor)];
				stream << "\t";
				if (AlphaPaletteColorLookupTableDescriptor) {
					stream << "\t\t";
					AlphaPaletteColorLookupTableDescriptor->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AlphaPaletteColorLookupTableDescriptor> not present\n";

				Attribute *RedPaletteColorLookupTableData = (*list)[TagFromName(RedPaletteColorLookupTableData)];
				stream << "\t";
				if (RedPaletteColorLookupTableData) {
					stream << "\t\t";
					RedPaletteColorLookupTableData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <RedPaletteColorLookupTableData> not present\n";

				Attribute *GreenPaletteColorLookupTableData = (*list)[TagFromName(GreenPaletteColorLookupTableData)];
				stream << "\t";
				if (GreenPaletteColorLookupTableData) {
					stream << "\t\t";
					GreenPaletteColorLookupTableData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <GreenPaletteColorLookupTableData> not present\n";

				Attribute *BluePaletteColorLookupTableData = (*list)[TagFromName(BluePaletteColorLookupTableData)];
				stream << "\t";
				if (BluePaletteColorLookupTableData) {
					stream << "\t\t";
					BluePaletteColorLookupTableData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <BluePaletteColorLookupTableData> not present\n";

				Attribute *AlphaPaletteColorLookupTableData = (*list)[TagFromName(AlphaPaletteColorLookupTableData)];
				stream << "\t";
				if (AlphaPaletteColorLookupTableData) {
					stream << "\t\t";
					AlphaPaletteColorLookupTableData->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AlphaPaletteColorLookupTableData> not present\n";

			}
		}
	}
	if (ICCProfile) {
		stream << "\t\t";
		ICCProfile->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ICCProfile> not present\n";

	if (ColorSpace) {
		stream << "\t\t";
		ColorSpace->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ColorSpace> not present\n";

}

void
Macro_PlanePositionVolumeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PlanePositionVolumeMacro>\n";

	if (PlanePositionVolumeSequence)
		stream << "\t\tSequence <PlanePositionVolumeSequence>\n";
	else
		stream << "\t\tSequence <PlanePositionVolumeSequence> not present\n";
	if (PlanePositionVolumeSequence && strcmp(PlanePositionVolumeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PlanePositionVolumeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ImagePositionVolume = (*list)[TagFromName(ImagePositionVolume)];
				stream << "\t";
				if (ImagePositionVolume) {
					stream << "\t\t";
					ImagePositionVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImagePositionVolume> not present\n";

			}
		}
	}
}

void
Macro_PlaneOrientationVolumeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <PlaneOrientationVolumeMacro>\n";

	if (PlaneOrientationVolumeSequence)
		stream << "\t\tSequence <PlaneOrientationVolumeSequence>\n";
	else
		stream << "\t\tSequence <PlaneOrientationVolumeSequence> not present\n";
	if (PlaneOrientationVolumeSequence && strcmp(PlaneOrientationVolumeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PlaneOrientationVolumeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ImageOrientationVolume = (*list)[TagFromName(ImageOrientationVolume)];
				stream << "\t";
				if (ImageOrientationVolume) {
					stream << "\t\t";
					ImageOrientationVolume->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ImageOrientationVolume> not present\n";

			}
		}
	}
}

void
Macro_TemporalPositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <TemporalPositionMacro>\n";

	if (TemporalPositionSequence)
		stream << "\t\tSequence <TemporalPositionSequence>\n";
	else
		stream << "\t\tSequence <TemporalPositionSequence> not present\n";
	if (TemporalPositionSequence && strcmp(TemporalPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TemporalPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TemporalPositionTimeOffset = (*list)[TagFromName(TemporalPositionTimeOffset)];
				stream << "\t";
				if (TemporalPositionTimeOffset) {
					stream << "\t\t";
					TemporalPositionTimeOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemporalPositionTimeOffset> not present\n";

			}
		}
	}
}

void
Macro_ImageDataTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <ImageDataTypeMacro>\n";

	if (ImageDataTypeSequence)
		stream << "\t\tSequence <ImageDataTypeSequence>\n";
	else
		stream << "\t\tSequence <ImageDataTypeSequence> not present\n";
	if (ImageDataTypeSequence && strcmp(ImageDataTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ImageDataTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DataType = (*list)[TagFromName(DataType)];
				stream << "\t";
				if (DataType) {
					stream << "\t\t";
					DataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataType> not present\n";

				Attribute *AliasedDataType = (*list)[TagFromName(AliasedDataType)];
				stream << "\t";
				if (AliasedDataType) {
					stream << "\t\t";
					AliasedDataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AliasedDataType> not present\n";

				Attribute *ZeroVelocityPixelValue = (*list)[TagFromName(ZeroVelocityPixelValue)];
				stream << "\t";
				if (ZeroVelocityPixelValue) {
					stream << "\t\t";
					ZeroVelocityPixelValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZeroVelocityPixelValue> not present\n";

			}
		}
	}
}

void
Module_EnhancedUSSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedUSSeries>\n";

	if (Modality) {
		stream << "\t\t";
		Modality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Modality> not present\n";

	if (ReferencedPerformedProcedureStepSequence)
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence>\n";
	else
		stream << "\t\tSequence <ReferencedPerformedProcedureStepSequence> not present\n";
	if (ReferencedPerformedProcedureStepSequence && strcmp(ReferencedPerformedProcedureStepSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedPerformedProcedureStepSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (PerformedProtocolCodeSequence)
		stream << "\t\tSequence <PerformedProtocolCodeSequence>\n";
	else
		stream << "\t\tSequence <PerformedProtocolCodeSequence> not present\n";
	if (PerformedProtocolCodeSequence && strcmp(PerformedProtocolCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerformedProtocolCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

	Attribute *ProtocolContextSequence = (*list)[TagFromName(ProtocolContextSequence)];
				stream << "\t";
				if (ProtocolContextSequence)
					stream << "\t\tSequence <ProtocolContextSequence>\n";
				else
					stream << "\t\tSequence <ProtocolContextSequence> not present\n";
				if (ProtocolContextSequence && strcmp(ProtocolContextSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=ProtocolContextSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

	Attribute *ContentItemModifierSequence = (*list)[TagFromName(ContentItemModifierSequence)];
							stream << "\t\t";
							if (ContentItemModifierSequence)
								stream << "\t\tSequence <ContentItemModifierSequence>\n";
							else
								stream << "\t\tSequence <ContentItemModifierSequence> not present\n";
							if (ContentItemModifierSequence && strcmp(ContentItemModifierSequence->getVR(),"SQ") == 0) {
								AttributeList **array;
								int n;
								if ((n=ContentItemModifierSequence->getLists(&array)) > 0) {
									int i; for (i=0; i<n; ++i) {
										AttributeList *list=array[i];
							stream << "\t\t";
											stream << "\t\tItem" << endl;
													stream << "\t\t\t\t";
	Macro_ContentItemMacro(list,ie).write(stream,list,dict);
													stream << "\t\t\t\t";
	stream << "\tEndMacro <ContentItemMacro>\n";

									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (PerformedProtocolType) {
		stream << "\t\t";
		PerformedProtocolType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PerformedProtocolType> not present\n";

}

void
Module_UltrasoundFrameOfReference::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <UltrasoundFrameOfReference>\n";

	if (VolumeFrameOfReferenceUID) {
		stream << "\t\t";
		VolumeFrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeFrameOfReferenceUID> not present\n";

	if (UltrasoundAcquisitionGeometry) {
		stream << "\t\t";
		UltrasoundAcquisitionGeometry->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UltrasoundAcquisitionGeometry> not present\n";

	if (ApexPosition) {
		stream << "\t\t";
		ApexPosition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ApexPosition> not present\n";

	if (VolumeToTransducerRelationship) {
		stream << "\t\t";
		VolumeToTransducerRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeToTransducerRelationship> not present\n";

	if (VolumeToTransducerMappingMatrix) {
		stream << "\t\t";
		VolumeToTransducerMappingMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeToTransducerMappingMatrix> not present\n";

	if (PatientFrameOfReferenceSource) {
		stream << "\t\t";
		PatientFrameOfReferenceSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientFrameOfReferenceSource> not present\n";

	if (TableFrameOfReferenceUID) {
		stream << "\t\t";
		TableFrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableFrameOfReferenceUID> not present\n";

	if (VolumeToTableMappingMatrix) {
		stream << "\t\t";
		VolumeToTableMappingMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeToTableMappingMatrix> not present\n";

}

void
Module_EnhancedUSImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <EnhancedUSImage>\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (SamplesPerPixel) {
		stream << "\t\t";
		SamplesPerPixel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SamplesPerPixel> not present\n";

	if (PhotometricInterpretation) {
		stream << "\t\t";
		PhotometricInterpretation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PhotometricInterpretation> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (DimensionOrganizationType) {
		stream << "\t\t";
		DimensionOrganizationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DimensionOrganizationType> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (AcquisitionDuration) {
		stream << "\t\t";
		AcquisitionDuration->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDuration> not present\n";

	if (PositionMeasuringDeviceUsed) {
		stream << "\t\t";
		PositionMeasuringDeviceUsed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionMeasuringDeviceUsed> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (LossyImageCompressionRatio) {
		stream << "\t\t";
		LossyImageCompressionRatio->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionRatio> not present\n";

	if (LossyImageCompressionMethod) {
		stream << "\t\t";
		LossyImageCompressionMethod->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompressionMethod> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (RescaleIntercept) {
		stream << "\t\t";
		RescaleIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleIntercept> not present\n";

	if (RescaleSlope) {
		stream << "\t\t";
		RescaleSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RescaleSlope> not present\n";

	if (SourceImageSequence)
		stream << "\t\tSequence <SourceImageSequence>\n";
	else
		stream << "\t\tSequence <SourceImageSequence> not present\n";
	if (SourceImageSequence && strcmp(SourceImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SourceImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ReferencedImageSequence)
		stream << "\t\tSequence <ReferencedImageSequence>\n";
	else
		stream << "\t\tSequence <ReferencedImageSequence> not present\n";
	if (ReferencedImageSequence && strcmp(ReferencedImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_ImageSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageSOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (ReferencedRawDataSequence)
		stream << "\t\tSequence <ReferencedRawDataSequence>\n";
	else
		stream << "\t\tSequence <ReferencedRawDataSequence> not present\n";
	if (ReferencedRawDataSequence && strcmp(ReferencedRawDataSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedRawDataSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_HierarchicalSOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <HierarchicalSOPInstanceReferenceMacro>\n";

			}
		}
	}
	if (ReferencedInstanceSequence)
		stream << "\t\tSequence <ReferencedInstanceSequence>\n";
	else
		stream << "\t\tSequence <ReferencedInstanceSequence> not present\n";
	if (ReferencedInstanceSequence && strcmp(ReferencedInstanceSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ReferencedInstanceSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_SOPInstanceReferenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <SOPInstanceReferenceMacro>\n";

	Attribute *PurposeOfReferenceCodeSequence = (*list)[TagFromName(PurposeOfReferenceCodeSequence)];
				stream << "\t";
				if (PurposeOfReferenceCodeSequence)
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence>\n";
				else
					stream << "\t\tSequence <PurposeOfReferenceCodeSequence> not present\n";
				if (PurposeOfReferenceCodeSequence && strcmp(PurposeOfReferenceCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=PurposeOfReferenceCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
			}
		}
	}
	if (NumberOfStages) {
		stream << "\t\t";
		NumberOfStages->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <NumberOfStages> not present\n";

	if (StageNumber) {
		stream << "\t\t";
		StageNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StageNumber> not present\n";

	if (StageCodeSequence)
		stream << "\t\tSequence <StageCodeSequence>\n";
	else
		stream << "\t\tSequence <StageCodeSequence> not present\n";
	if (StageCodeSequence && strcmp(StageCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=StageCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
				stream << "\t";
	Macro_MandatoryViewAndSliceProgressionDirectionMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <MandatoryViewAndSliceProgressionDirectionMacro>\n";

	if (EventTimerSequence)
		stream << "\t\tSequence <EventTimerSequence>\n";
	else
		stream << "\t\tSequence <EventTimerSequence> not present\n";
	if (EventTimerSequence && strcmp(EventTimerSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=EventTimerSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *EventTimeOffset = (*list)[TagFromName(EventTimeOffset)];
				stream << "\t";
				if (EventTimeOffset) {
					stream << "\t\t";
					EventTimeOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EventTimeOffset> not present\n";

	Attribute *EventCodeSequence = (*list)[TagFromName(EventCodeSequence)];
				stream << "\t";
				if (EventCodeSequence)
					stream << "\t\tSequence <EventCodeSequence>\n";
				else
					stream << "\t\tSequence <EventCodeSequence> not present\n";
				if (EventCodeSequence && strcmp(EventCodeSequence->getVR(),"SQ") == 0) {
					AttributeList **array;
					int n;
					if ((n=EventCodeSequence->getLists(&array)) > 0) {
						int i; for (i=0; i<n; ++i) {
							AttributeList *list=array[i];
				stream << "\t";
								stream << "\t\tItem" << endl;
										stream << "\t\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
										stream << "\t\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

						}
					}
				}
				Attribute *EventTimerNames = (*list)[TagFromName(EventTimerNames)];
				stream << "\t";
				if (EventTimerNames) {
					stream << "\t\t";
					EventTimerNames->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <EventTimerNames> not present\n";

			}
		}
	}
				stream << "\t";
	Macro_GeneralAnatomyMandatoryMacro(list,ie).write(stream,list,dict);
				stream << "\t";
	stream << "\tEndMacro <GeneralAnatomyMandatoryMacro>\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (IconImageSequence)
		stream << "\t\tSequence <IconImageSequence>\n";
	else
		stream << "\t\tSequence <IconImageSequence> not present\n";
	if (IconImageSequence && strcmp(IconImageSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=IconImageSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_IconImageSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <IconImageSequenceMacro>\n";

			}
		}
	}
	if (TransducerData) {
		stream << "\t\t";
		TransducerData->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TransducerData> not present\n";

	if (TransducerScanPatternCodeSequence)
		stream << "\t\tSequence <TransducerScanPatternCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerScanPatternCodeSequence> not present\n";
	if (TransducerScanPatternCodeSequence && strcmp(TransducerScanPatternCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerScanPatternCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (TransducerGeometryCodeSequence)
		stream << "\t\tSequence <TransducerGeometryCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerGeometryCodeSequence> not present\n";
	if (TransducerGeometryCodeSequence && strcmp(TransducerGeometryCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerGeometryCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (TransducerBeamSteeringCodeSequence)
		stream << "\t\tSequence <TransducerBeamSteeringCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerBeamSteeringCodeSequence> not present\n";
	if (TransducerBeamSteeringCodeSequence && strcmp(TransducerBeamSteeringCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerBeamSteeringCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (TransducerApplicationCodeSequence)
		stream << "\t\tSequence <TransducerApplicationCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerApplicationCodeSequence> not present\n";
	if (TransducerApplicationCodeSequence && strcmp(TransducerApplicationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerApplicationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_CodeSequenceMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CodeSequenceMacro>\n";

			}
		}
	}
	if (ProcessingFunction) {
		stream << "\t\t";
		ProcessingFunction->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ProcessingFunction> not present\n";

	if (MechanicalIndex) {
		stream << "\t\t";
		MechanicalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <MechanicalIndex> not present\n";

	if (BoneThermalIndex) {
		stream << "\t\t";
		BoneThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BoneThermalIndex> not present\n";

	if (CranialThermalIndex) {
		stream << "\t\t";
		CranialThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <CranialThermalIndex> not present\n";

	if (SoftTissueThermalIndex) {
		stream << "\t\t";
		SoftTissueThermalIndex->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftTissueThermalIndex> not present\n";

	if (DepthsOfFocus) {
		stream << "\t\t";
		DepthsOfFocus->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DepthsOfFocus> not present\n";

	if (DepthOfScanField) {
		stream << "\t\t";
		DepthOfScanField->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DepthOfScanField> not present\n";

}

void
Module_IVUSImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <IVUSImage>\n";

	if (IVUSAcquisition) {
		stream << "\t\t";
		IVUSAcquisition->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSAcquisition> not present\n";

	if (IVUSPullbackRate) {
		stream << "\t\t";
		IVUSPullbackRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackRate> not present\n";

	if (IVUSGatedRate) {
		stream << "\t\t";
		IVUSGatedRate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSGatedRate> not present\n";

	if (IVUSPullbackStartFrameNumber) {
		stream << "\t\t";
		IVUSPullbackStartFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackStartFrameNumber> not present\n";

	if (IVUSPullbackStopFrameNumber) {
		stream << "\t\t";
		IVUSPullbackStopFrameNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IVUSPullbackStopFrameNumber> not present\n";

}

void
Module_ExcludedIntervals::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <ExcludedIntervals>\n";

	if (ExcludedIntervalsSequence)
		stream << "\t\tSequence <ExcludedIntervalsSequence>\n";
	else
		stream << "\t\tSequence <ExcludedIntervalsSequence> not present\n";
	if (ExcludedIntervalsSequence && strcmp(ExcludedIntervalsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ExcludedIntervalsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *ExclusionStartDateTime = (*list)[TagFromName(ExclusionStartDateTime)];
				stream << "\t";
				if (ExclusionStartDateTime) {
					stream << "\t\t";
					ExclusionStartDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExclusionStartDateTime> not present\n";

				Attribute *ExclusionDuration = (*list)[TagFromName(ExclusionDuration)];
				stream << "\t";
				if (ExclusionDuration) {
					stream << "\t\t";
					ExclusionDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ExclusionDuration> not present\n";

			}
		}
	}
}

void
Macro_USImageDescriptionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <USImageDescriptionMacro>\n";

	if (USImageDescriptionSequence)
		stream << "\t\tSequence <USImageDescriptionSequence>\n";
	else
		stream << "\t\tSequence <USImageDescriptionSequence> not present\n";
	if (USImageDescriptionSequence && strcmp(USImageDescriptionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=USImageDescriptionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

				Attribute *VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
				stream << "\t";
				if (VolumetricProperties) {
					stream << "\t\t";
					VolumetricProperties->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VolumetricProperties> not present\n";

				Attribute *VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
				stream << "\t";
				if (VolumeBasedCalculationTechnique) {
					stream << "\t\t";
					VolumeBasedCalculationTechnique->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

			}
		}
	}
}

void
Macro_USImageDescriptionMacroForEnhancedUSVolume::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <USImageDescriptionMacroForEnhancedUSVolume>\n";

	if (USImageDescriptionSequence)
		stream << "\t\tSequence <USImageDescriptionSequence>\n";
	else
		stream << "\t\tSequence <USImageDescriptionSequence> not present\n";
	if (USImageDescriptionSequence && strcmp(USImageDescriptionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=USImageDescriptionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *VolumetricProperties = (*list)[TagFromName(VolumetricProperties)];
				stream << "\t";
				if (VolumetricProperties) {
					stream << "\t\t";
					VolumetricProperties->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VolumetricProperties> not present\n";

				Attribute *VolumeBasedCalculationTechnique = (*list)[TagFromName(VolumeBasedCalculationTechnique)];
				stream << "\t";
				if (VolumeBasedCalculationTechnique) {
					stream << "\t\t";
					VolumeBasedCalculationTechnique->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <VolumeBasedCalculationTechnique> not present\n";

			}
		}
	}
}

void
Module_MultiFrameFunctionalGroupsForEnhancedUSVolume::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedUSVolume>\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_PatientOrientationInFrameMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientOrientationInFrameMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationVolumeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationVolumeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_ImageDataTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageDataTypeMacro>\n";

							stream << "\t\t";
	Macro_USImageDescriptionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <USImageDescriptionMacro>\n";

							stream << "\t\t";
	Macro_USImageDescriptionMacroForEnhancedUSVolume(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <USImageDescriptionMacroForEnhancedUSVolume>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_FrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameContentMacro>\n";

							stream << "\t\t";
	Macro_PixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_ReferencedImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ReferencedImageMacro>\n";

							stream << "\t\t";
	Macro_DerivationImageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <DerivationImageMacro>\n";

							stream << "\t\t";
	Macro_CardiacSynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <CardiacSynchronizationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_RealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_ContrastBolusUsageMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ContrastBolusUsageMacro>\n";

							stream << "\t\t";
	Macro_PatientOrientationInFrameMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PatientOrientationInFrameMacro>\n";

							stream << "\t\t";
	Macro_FrameDisplayShutterMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameDisplayShutterMacro>\n";

							stream << "\t\t";
	Macro_RespiratorySynchronizationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <RespiratorySynchronizationMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionVolumeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionVolumeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_ImageDataTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <ImageDataTypeMacro>\n";

			}
		}
	}
}

void
Module_QTUSEnhancedUltrasoundVolumeProfilePatient::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfilePatient>\n";

	if (IssuerOfPatientID) {
		stream << "\t\t";
		IssuerOfPatientID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <IssuerOfPatientID> not present\n";

}

void
Module_QTUSEnhancedUltrasoundVolumeProfileStudy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileStudy>\n";

	if (StudyDate) {
		stream << "\t\t";
		StudyDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyDate> not present\n";

	if (StudyTime) {
		stream << "\t\t";
		StudyTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyTime> not present\n";

	if (StudyID) {
		stream << "\t\t";
		StudyID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyID> not present\n";

	if (AccessionNumber) {
		stream << "\t\t";
		AccessionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AccessionNumber> not present\n";

	if (StudyDescription) {
		stream << "\t\t";
		StudyDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StudyDescription> not present\n";

	if (ProcedureCodeSequence)
		stream << "\t\tSequence <ProcedureCodeSequence>\n";
	else
		stream << "\t\tSequence <ProcedureCodeSequence> not present\n";
	if (ProcedureCodeSequence && strcmp(ProcedureCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ProcedureCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (PatientSize) {
		stream << "\t\t";
		PatientSize->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientSize> not present\n";

	if (PatientWeight) {
		stream << "\t\t";
		PatientWeight->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientWeight> not present\n";

}

void
Module_QTUSEnhancedUltrasoundVolumeProfileSeries::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileSeries>\n";

	if (SeriesNumber) {
		stream << "\t\t";
		SeriesNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesNumber> not present\n";

	if (Laterality) {
		stream << "\t\t";
		Laterality->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Laterality> not present\n";

	if (SeriesDate) {
		stream << "\t\t";
		SeriesDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDate> not present\n";

	if (SeriesTime) {
		stream << "\t\t";
		SeriesTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesTime> not present\n";

	if (SeriesDescription) {
		stream << "\t\t";
		SeriesDescription->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SeriesDescription> not present\n";

	if (OperatorsName) {
		stream << "\t\t";
		OperatorsName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <OperatorsName> not present\n";

	if (BodyPartExamined) {
		stream << "\t\t";
		BodyPartExamined->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BodyPartExamined> not present\n";

}

void
Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileFrameOfReference>\n";

	if (UltrasoundAcquisitionGeometry) {
		stream << "\t\t";
		UltrasoundAcquisitionGeometry->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <UltrasoundAcquisitionGeometry> not present\n";

	if (VolumeToTransducerRelationship) {
		stream << "\t\t";
		VolumeToTransducerRelationship->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeToTransducerRelationship> not present\n";

	if (VolumeToTransducerMappingMatrix) {
		stream << "\t\t";
		VolumeToTransducerMappingMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeToTransducerMappingMatrix> not present\n";

	if (PatientFrameOfReferenceSource) {
		stream << "\t\t";
		PatientFrameOfReferenceSource->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PatientFrameOfReferenceSource> not present\n";

	if (TableFrameOfReferenceUID) {
		stream << "\t\t";
		TableFrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TableFrameOfReferenceUID> not present\n";

	if (VolumeToTableMappingMatrix) {
		stream << "\t\t";
		VolumeToTableMappingMatrix->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <VolumeToTableMappingMatrix> not present\n";

	if (SynchronizationFrameOfReferenceUID) {
		stream << "\t\t";
		SynchronizationFrameOfReferenceUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SynchronizationFrameOfReferenceUID> not present\n";

	if (SynchronizationTrigger) {
		stream << "\t\t";
		SynchronizationTrigger->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SynchronizationTrigger> not present\n";

	if (AcquisitionTimeSynchronized) {
		stream << "\t\t";
		AcquisitionTimeSynchronized->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionTimeSynchronized> not present\n";

}

void
Module_QTUSEnhancedUltrasoundVolumeProfileEquipment::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileEquipment>\n";

	if (Manufacturer) {
		stream << "\t\t";
		Manufacturer->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <Manufacturer> not present\n";

	if (InstitutionName) {
		stream << "\t\t";
		InstitutionName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionName> not present\n";

	if (InstitutionAddress) {
		stream << "\t\t";
		InstitutionAddress->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionAddress> not present\n";

	if (StationName) {
		stream << "\t\t";
		StationName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <StationName> not present\n";

	if (InstitutionalDepartmentName) {
		stream << "\t\t";
		InstitutionalDepartmentName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstitutionalDepartmentName> not present\n";

	if (ManufacturerModelName) {
		stream << "\t\t";
		ManufacturerModelName->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ManufacturerModelName> not present\n";

	if (DeviceSerialNumber) {
		stream << "\t\t";
		DeviceSerialNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DeviceSerialNumber> not present\n";

	if (SoftwareVersions) {
		stream << "\t\t";
		SoftwareVersions->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SoftwareVersions> not present\n";

}

void
Module_QTUSEnhancedUltrasoundVolumeProfileInstance::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileInstance>\n";

	if (InstanceNumber) {
		stream << "\t\t";
		InstanceNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceNumber> not present\n";

	if (ContentDate) {
		stream << "\t\t";
		ContentDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentDate> not present\n";

	if (ContentTime) {
		stream << "\t\t";
		ContentTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ContentTime> not present\n";

	if (ImageType) {
		stream << "\t\t";
		ImageType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <ImageType> not present\n";

	if (AcquisitionNumber) {
		stream << "\t\t";
		AcquisitionNumber->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionNumber> not present\n";

	if (AcquisitionDateTime) {
		stream << "\t\t";
		AcquisitionDateTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <AcquisitionDateTime> not present\n";

	if (BurnedInAnnotation) {
		stream << "\t\t";
		BurnedInAnnotation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BurnedInAnnotation> not present\n";

	if (RecognizableVisualFeatures) {
		stream << "\t\t";
		RecognizableVisualFeatures->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RecognizableVisualFeatures> not present\n";

	if (LossyImageCompression) {
		stream << "\t\t";
		LossyImageCompression->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LossyImageCompression> not present\n";

	if (PresentationLUTShape) {
		stream << "\t\t";
		PresentationLUTShape->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PresentationLUTShape> not present\n";

	if (BitsAllocated) {
		stream << "\t\t";
		BitsAllocated->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsAllocated> not present\n";

	if (BitsStored) {
		stream << "\t\t";
		BitsStored->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <BitsStored> not present\n";

	if (HighBit) {
		stream << "\t\t";
		HighBit->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <HighBit> not present\n";

	if (PixelRepresentation) {
		stream << "\t\t";
		PixelRepresentation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PixelRepresentation> not present\n";

	if (PositionMeasuringDeviceUsed) {
		stream << "\t\t";
		PositionMeasuringDeviceUsed->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <PositionMeasuringDeviceUsed> not present\n";

	if (ViewCodeSequence)
		stream << "\t\tSequence <ViewCodeSequence>\n";
	else
		stream << "\t\tSequence <ViewCodeSequence> not present\n";
	if (ViewCodeSequence && strcmp(ViewCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ViewCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (AnatomicRegionSequence)
		stream << "\t\tSequence <AnatomicRegionSequence>\n";
	else
		stream << "\t\tSequence <AnatomicRegionSequence> not present\n";
	if (AnatomicRegionSequence && strcmp(AnatomicRegionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=AnatomicRegionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (TransducerScanPatternCodeSequence)
		stream << "\t\tSequence <TransducerScanPatternCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerScanPatternCodeSequence> not present\n";
	if (TransducerScanPatternCodeSequence && strcmp(TransducerScanPatternCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerScanPatternCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (TransducerGeometryCodeSequence)
		stream << "\t\tSequence <TransducerGeometryCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerGeometryCodeSequence> not present\n";
	if (TransducerGeometryCodeSequence && strcmp(TransducerGeometryCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerGeometryCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (TransducerBeamSteeringCodeSequence)
		stream << "\t\tSequence <TransducerBeamSteeringCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerBeamSteeringCodeSequence> not present\n";
	if (TransducerBeamSteeringCodeSequence && strcmp(TransducerBeamSteeringCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerBeamSteeringCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (TransducerApplicationCodeSequence)
		stream << "\t\tSequence <TransducerApplicationCodeSequence>\n";
	else
		stream << "\t\tSequence <TransducerApplicationCodeSequence> not present\n";
	if (TransducerApplicationCodeSequence && strcmp(TransducerApplicationCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TransducerApplicationCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
	if (DimensionOrganizationSequence)
		stream << "\t\tSequence <DimensionOrganizationSequence>\n";
	else
		stream << "\t\tSequence <DimensionOrganizationSequence> not present\n";
	if (DimensionOrganizationSequence && strcmp(DimensionOrganizationSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DimensionOrganizationSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DimensionOrganizationUID = (*list)[TagFromName(DimensionOrganizationUID)];
				stream << "\t";
				if (DimensionOrganizationUID) {
					stream << "\t\t";
					DimensionOrganizationUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionOrganizationUID> not present\n";

			}
		}
	}
	if (DimensionOrganizationType) {
		stream << "\t\t";
		DimensionOrganizationType->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <DimensionOrganizationType> not present\n";

	if (DimensionIndexSequence)
		stream << "\t\tSequence <DimensionIndexSequence>\n";
	else
		stream << "\t\tSequence <DimensionIndexSequence> not present\n";
	if (DimensionIndexSequence && strcmp(DimensionIndexSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=DimensionIndexSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DimensionIndexPointer = (*list)[TagFromName(DimensionIndexPointer)];
				stream << "\t";
				if (DimensionIndexPointer) {
					stream << "\t\t";
					DimensionIndexPointer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionIndexPointer> not present\n";

				Attribute *FunctionalGroupPointer = (*list)[TagFromName(FunctionalGroupPointer)];
				stream << "\t";
				if (FunctionalGroupPointer) {
					stream << "\t\t";
					FunctionalGroupPointer->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FunctionalGroupPointer> not present\n";

				Attribute *DimensionOrganizationUID = (*list)[TagFromName(DimensionOrganizationUID)];
				stream << "\t";
				if (DimensionOrganizationUID) {
					stream << "\t\t";
					DimensionOrganizationUID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionOrganizationUID> not present\n";

				Attribute *DimensionDescriptionLabel = (*list)[TagFromName(DimensionDescriptionLabel)];
				stream << "\t";
				if (DimensionDescriptionLabel) {
					stream << "\t\t";
					DimensionDescriptionLabel->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionDescriptionLabel> not present\n";

			}
		}
	}
	if (SpecificCharacterSet) {
		stream << "\t\t";
		SpecificCharacterSet->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <SpecificCharacterSet> not present\n";

	if (InstanceCreationDate) {
		stream << "\t\t";
		InstanceCreationDate->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCreationDate> not present\n";

	if (InstanceCreationTime) {
		stream << "\t\t";
		InstanceCreationTime->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCreationTime> not present\n";

	if (InstanceCreatorUID) {
		stream << "\t\t";
		InstanceCreatorUID->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <InstanceCreatorUID> not present\n";

	if (TimezoneOffsetFromUTC) {
		stream << "\t\t";
		TimezoneOffsetFromUTC->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <TimezoneOffsetFromUTC> not present\n";

	if (SharedFunctionalGroupsSequence)
		stream << "\t\tSequence <SharedFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <SharedFunctionalGroupsSequence> not present\n";
	if (SharedFunctionalGroupsSequence && strcmp(SharedFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=SharedFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_QTUSPixelMeasuresMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSPixelMeasuresMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationMacro>\n";

							stream << "\t\t";
	Macro_FrameVOILUTMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <FrameVOILUTMacro>\n";

							stream << "\t\t";
	Macro_QTUSRealWorldValueMappingMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSRealWorldValueMappingMacro>\n";

							stream << "\t\t";
	Macro_PlaneOrientationVolumeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlaneOrientationVolumeMacro>\n";

							stream << "\t\t";
	Macro_TemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <TemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_QTUSTemporalPositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSTemporalPositionMacro>\n";

							stream << "\t\t";
	Macro_QTUSImageDataTypeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSImageDataTypeMacro>\n";

							stream << "\t\t";
	Macro_QTUSUSImageDescriptionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSUSImageDescriptionMacro>\n";

			}
		}
	}
	if (PerFrameFunctionalGroupsSequence)
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence>\n";
	else
		stream << "\t\tSequence <PerFrameFunctionalGroupsSequence> not present\n";
	if (PerFrameFunctionalGroupsSequence && strcmp(PerFrameFunctionalGroupsSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PerFrameFunctionalGroupsSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_QTUSFrameContentMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSFrameContentMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionMacro>\n";

							stream << "\t\t";
	Macro_PlanePositionVolumeMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <PlanePositionVolumeMacro>\n";

			}
		}
	}
}

void
Macro_QTUSFrameContentMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSFrameContentMacro>\n";

	if (FrameContentSequence)
		stream << "\t\tSequence <FrameContentSequence>\n";
	else
		stream << "\t\tSequence <FrameContentSequence> not present\n";
	if (FrameContentSequence && strcmp(FrameContentSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=FrameContentSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameAcquisitionNumber = (*list)[TagFromName(FrameAcquisitionNumber)];
				stream << "\t";
				if (FrameAcquisitionNumber) {
					stream << "\t\t";
					FrameAcquisitionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameAcquisitionNumber> not present\n";

				Attribute *FrameReferenceDateTime = (*list)[TagFromName(FrameReferenceDateTime)];
				stream << "\t";
				if (FrameReferenceDateTime) {
					stream << "\t\t";
					FrameReferenceDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameReferenceDateTime> not present\n";

				Attribute *FrameAcquisitionDateTime = (*list)[TagFromName(FrameAcquisitionDateTime)];
				stream << "\t";
				if (FrameAcquisitionDateTime) {
					stream << "\t\t";
					FrameAcquisitionDateTime->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameAcquisitionDateTime> not present\n";

				Attribute *FrameAcquisitionDuration = (*list)[TagFromName(FrameAcquisitionDuration)];
				stream << "\t";
				if (FrameAcquisitionDuration) {
					stream << "\t\t";
					FrameAcquisitionDuration->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameAcquisitionDuration> not present\n";

				Attribute *DimensionIndexValues = (*list)[TagFromName(DimensionIndexValues)];
				stream << "\t";
				if (DimensionIndexValues) {
					stream << "\t\t";
					DimensionIndexValues->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DimensionIndexValues> not present\n";

				Attribute *TemporalPositionIndex = (*list)[TagFromName(TemporalPositionIndex)];
				stream << "\t";
				if (TemporalPositionIndex) {
					stream << "\t\t";
					TemporalPositionIndex->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemporalPositionIndex> not present\n";

				Attribute *StackID = (*list)[TagFromName(StackID)];
				stream << "\t";
				if (StackID) {
					stream << "\t\t";
					StackID->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <StackID> not present\n";

				Attribute *InStackPositionNumber = (*list)[TagFromName(InStackPositionNumber)];
				stream << "\t";
				if (InStackPositionNumber) {
					stream << "\t\t";
					InStackPositionNumber->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <InStackPositionNumber> not present\n";

			}
		}
	}
}

void
Macro_QTUSPixelMeasuresMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSPixelMeasuresMacro>\n";

	if (PixelMeasuresSequence)
		stream << "\t\tSequence <PixelMeasuresSequence>\n";
	else
		stream << "\t\tSequence <PixelMeasuresSequence> not present\n";
	if (PixelMeasuresSequence && strcmp(PixelMeasuresSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=PixelMeasuresSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *PixelSpacing = (*list)[TagFromName(PixelSpacing)];
				stream << "\t";
				if (PixelSpacing) {
					stream << "\t\t";
					PixelSpacing->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <PixelSpacing> not present\n";

				Attribute *SliceThickness = (*list)[TagFromName(SliceThickness)];
				stream << "\t";
				if (SliceThickness) {
					stream << "\t\t";
					SliceThickness->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SliceThickness> not present\n";

				Attribute *SpacingBetweenSlices = (*list)[TagFromName(SpacingBetweenSlices)];
				stream << "\t";
				if (SpacingBetweenSlices) {
					stream << "\t\t";
					SpacingBetweenSlices->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <SpacingBetweenSlices> not present\n";

			}
		}
	}
}

void
Macro_QTUSRealWorldValueMappingMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSRealWorldValueMappingMacro>\n";

	if (RealWorldValueMappingSequence)
		stream << "\t\tSequence <RealWorldValueMappingSequence>\n";
	else
		stream << "\t\tSequence <RealWorldValueMappingSequence> not present\n";
	if (RealWorldValueMappingSequence && strcmp(RealWorldValueMappingSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=RealWorldValueMappingSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
							stream << "\t\t";
	Macro_QTUSRealWorldValueMappingItemMacro(list,ie).write(stream,list,dict);
							stream << "\t\t";
	stream << "\tEndMacro <QTUSRealWorldValueMappingItemMacro>\n";

			}
		}
	}
}

void
Macro_QTUSRealWorldValueMappingItemMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSRealWorldValueMappingItemMacro>\n";

	if (RealWorldValueFirstValueMapped) {
		stream << "\t\t";
		RealWorldValueFirstValueMapped->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueFirstValueMapped> not present\n";

	if (RealWorldValueLastValueMapped) {
		stream << "\t\t";
		RealWorldValueLastValueMapped->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueLastValueMapped> not present\n";

	if (RealWorldValueIntercept) {
		stream << "\t\t";
		RealWorldValueIntercept->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueIntercept> not present\n";

	if (RealWorldValueSlope) {
		stream << "\t\t";
		RealWorldValueSlope->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <RealWorldValueSlope> not present\n";

	if (LUTExplanation) {
		stream << "\t\t";
		LUTExplanation->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LUTExplanation> not present\n";

	if (LUTLabel) {
		stream << "\t\t";
		LUTLabel->write(stream,dict);
		stream << "\n";
	}
	else
		stream << "\t\tElement <LUTLabel> not present\n";

	if (MeasurementUnitsCodeSequence)
		stream << "\t\tSequence <MeasurementUnitsCodeSequence>\n";
	else
		stream << "\t\tSequence <MeasurementUnitsCodeSequence> not present\n";
	if (MeasurementUnitsCodeSequence && strcmp(MeasurementUnitsCodeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=MeasurementUnitsCodeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *CodeValue = (*list)[TagFromName(CodeValue)];
				stream << "\t";
				if (CodeValue) {
					stream << "\t\t";
					CodeValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeValue> not present\n";

				Attribute *CodingSchemeDesignator = (*list)[TagFromName(CodingSchemeDesignator)];
				stream << "\t";
				if (CodingSchemeDesignator) {
					stream << "\t\t";
					CodingSchemeDesignator->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodingSchemeDesignator> not present\n";

				Attribute *CodeMeaning = (*list)[TagFromName(CodeMeaning)];
				stream << "\t";
				if (CodeMeaning) {
					stream << "\t\t";
					CodeMeaning->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <CodeMeaning> not present\n";

			}
		}
	}
}

void
Macro_QTUSImageDataTypeMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSImageDataTypeMacro>\n";

	if (ImageDataTypeSequence)
		stream << "\t\tSequence <ImageDataTypeSequence>\n";
	else
		stream << "\t\tSequence <ImageDataTypeSequence> not present\n";
	if (ImageDataTypeSequence && strcmp(ImageDataTypeSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=ImageDataTypeSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *DataType = (*list)[TagFromName(DataType)];
				stream << "\t";
				if (DataType) {
					stream << "\t\t";
					DataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <DataType> not present\n";

				Attribute *AliasedDataType = (*list)[TagFromName(AliasedDataType)];
				stream << "\t";
				if (AliasedDataType) {
					stream << "\t\t";
					AliasedDataType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <AliasedDataType> not present\n";

				Attribute *ZeroVelocityPixelValue = (*list)[TagFromName(ZeroVelocityPixelValue)];
				stream << "\t";
				if (ZeroVelocityPixelValue) {
					stream << "\t\t";
					ZeroVelocityPixelValue->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <ZeroVelocityPixelValue> not present\n";

			}
		}
	}
}

void
Macro_QTUSTemporalPositionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSTemporalPositionMacro>\n";

	if (TemporalPositionSequence)
		stream << "\t\tSequence <TemporalPositionSequence>\n";
	else
		stream << "\t\tSequence <TemporalPositionSequence> not present\n";
	if (TemporalPositionSequence && strcmp(TemporalPositionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=TemporalPositionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *TemporalPositionTimeOffset = (*list)[TagFromName(TemporalPositionTimeOffset)];
				stream << "\t";
				if (TemporalPositionTimeOffset) {
					stream << "\t\t";
					TemporalPositionTimeOffset->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <TemporalPositionTimeOffset> not present\n";

			}
		}
	}
}

void
Macro_QTUSUSImageDescriptionMacro::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tMacro <QTUSUSImageDescriptionMacro>\n";

	if (USImageDescriptionSequence)
		stream << "\t\tSequence <USImageDescriptionSequence>\n";
	else
		stream << "\t\tSequence <USImageDescriptionSequence> not present\n";
	if (USImageDescriptionSequence && strcmp(USImageDescriptionSequence->getVR(),"SQ") == 0) {
		AttributeList **array;
		int n;
		if ((n=USImageDescriptionSequence->getLists(&array)) > 0) {
			int i; for (i=0; i<n; ++i) {
				AttributeList *list=array[i];
					stream << "\t\tItem" << endl;
				Attribute *FrameType = (*list)[TagFromName(FrameType)];
				stream << "\t";
				if (FrameType) {
					stream << "\t\t";
					FrameType->write(stream,dict);
					stream << "\n";
				}
				else
					stream << "\t\tElement <FrameType> not present\n";

			}
		}
	}
}


#endif /* __Header_modulew__ */
