// Automatically generated from template - EDITS WILL BE LOST

// Generated by iodcomp.awk with options write iodcompw

#ifndef __Header_iodcompw__
#define __Header_iodcompw__

void
CompositeIOD_CRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <CRImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (CRSeries)
		CRSeries->write(stream,list,dict);
	else
		stream << "\tModule <CRSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (CRImage)
		CRImage->write(stream,list,dict);
	else
		stream << "\tModule <CRImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_CTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <CTImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePlane)
		ImagePlane->write(stream,list,dict);
	else
		stream << "\tModule <ImagePlane> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (CTImage)
		CTImage->write(stream,list,dict);
	else
		stream << "\tModule <CTImage> not present\n";

	if (MultienergyCTImage)
		MultienergyCTImage->write(stream,list,dict);
	else
		stream << "\tModule <MultienergyCTImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_MRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MRImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePlane)
		ImagePlane->write(stream,list,dict);
	else
		stream << "\tModule <ImagePlane> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (MRImage)
		MRImage->write(stream,list,dict);
	else
		stream << "\tModule <MRImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_NMImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <NMImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (NMPETPatientOrientation)
		NMPETPatientOrientation->write(stream,list,dict);
	else
		stream << "\tModule <NMPETPatientOrientation> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (NMImagePixel)
		NMImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <NMImagePixel> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (NMMultiFrame)
		NMMultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <NMMultiFrame> not present\n";

	if (NMImage)
		NMImage->write(stream,list,dict);
	else
		stream << "\tModule <NMImage> not present\n";

	if (NMIsotope)
		NMIsotope->write(stream,list,dict);
	else
		stream << "\tModule <NMIsotope> not present\n";

	if (NMDetector)
		NMDetector->write(stream,list,dict);
	else
		stream << "\tModule <NMDetector> not present\n";

	if (NMTomoAcquisition)
		NMTomoAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <NMTomoAcquisition> not present\n";

	if (NMMultiGatedAcquisition)
		NMMultiGatedAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <NMMultiGatedAcquisition> not present\n";

	if (NMPhase)
		NMPhase->write(stream,list,dict);
	else
		stream << "\tModule <NMPhase> not present\n";

	if (NMReconstruction)
		NMReconstruction->write(stream,list,dict);
	else
		stream << "\tModule <NMReconstruction> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (MultiFrameOverlay)
		MultiFrameOverlay->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameOverlay> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_USImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <USImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (PaletteColorLookupTable)
		PaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <PaletteColorLookupTable> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (USRegionCalibration)
		USRegionCalibration->write(stream,list,dict);
	else
		stream << "\tModule <USRegionCalibration> not present\n";

	if (USImage)
		USImage->write(stream,list,dict);
	else
		stream << "\tModule <USImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_USMultiFrameImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <USMultiFrameImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (PaletteColorLookupTable)
		PaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <PaletteColorLookupTable> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (USRegionCalibration)
		USRegionCalibration->write(stream,list,dict);
	else
		stream << "\tModule <USRegionCalibration> not present\n";

	if (USImage)
		USImage->write(stream,list,dict);
	else
		stream << "\tModule <USImage> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_SCImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <SCImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SCImage)
		SCImage->write(stream,list,dict);
	else
		stream << "\tModule <SCImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_MultiframeSingleBitSCImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MultiframeSingleBitSCImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SCImage)
		SCImage->write(stream,list,dict);
	else
		stream << "\tModule <SCImage> not present\n";

	if (SCMultiFrameImage)
		SCMultiFrameImage->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameImage> not present\n";

	if (SCMultiFrameVector)
		SCMultiFrameVector->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameVector> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

	if (MultiframeSingleBitSCImagePseudo)
		MultiframeSingleBitSCImagePseudo->write(stream,list,dict);
	else
		stream << "\tModule <MultiframeSingleBitSCImagePseudo> not present\n";

}

void
CompositeIOD_MultiframeGrayscaleByteSCImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MultiframeGrayscaleByteSCImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForMFSC)
		MultiFrameFunctionalGroupsForMFSC->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForMFSC> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SCImage)
		SCImage->write(stream,list,dict);
	else
		stream << "\tModule <SCImage> not present\n";

	if (SCMultiFrameImage)
		SCMultiFrameImage->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameImage> not present\n";

	if (SCMultiFrameVector)
		SCMultiFrameVector->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameVector> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

	if (MultiframeGrayscaleByteSCImagePseudo)
		MultiframeGrayscaleByteSCImagePseudo->write(stream,list,dict);
	else
		stream << "\tModule <MultiframeGrayscaleByteSCImagePseudo> not present\n";

}

void
CompositeIOD_MultiframeGrayscaleWordSCImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MultiframeGrayscaleWordSCImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForMFSC)
		MultiFrameFunctionalGroupsForMFSC->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForMFSC> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SCImage)
		SCImage->write(stream,list,dict);
	else
		stream << "\tModule <SCImage> not present\n";

	if (SCMultiFrameImage)
		SCMultiFrameImage->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameImage> not present\n";

	if (SCMultiFrameVector)
		SCMultiFrameVector->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameVector> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

	if (MultiframeGrayscaleWordSCImagePseudo)
		MultiframeGrayscaleWordSCImagePseudo->write(stream,list,dict);
	else
		stream << "\tModule <MultiframeGrayscaleWordSCImagePseudo> not present\n";

}

void
CompositeIOD_MultiframeTrueColorSCImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MultiframeTrueColorSCImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForMFSC)
		MultiFrameFunctionalGroupsForMFSC->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForMFSC> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SCImage)
		SCImage->write(stream,list,dict);
	else
		stream << "\tModule <SCImage> not present\n";

	if (SCMultiFrameImage)
		SCMultiFrameImage->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameImage> not present\n";

	if (SCMultiFrameVector)
		SCMultiFrameVector->write(stream,list,dict);
	else
		stream << "\tModule <SCMultiFrameVector> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

	if (MultiframeTrueColorSCImagePseudo)
		MultiframeTrueColorSCImagePseudo->write(stream,list,dict);
	else
		stream << "\tModule <MultiframeTrueColorSCImagePseudo> not present\n";

}

void
CompositeIOD_StandaloneOverlay::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <StandaloneOverlay>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (OverlayIdentification)
		OverlayIdentification->write(stream,list,dict);
	else
		stream << "\tModule <OverlayIdentification> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_StandaloneCurve::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <StandaloneCurve>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (CurveIdentification)
		CurveIdentification->write(stream,list,dict);
	else
		stream << "\tModule <CurveIdentification> not present\n";

	if (Curve)
		Curve->write(stream,list,dict);
	else
		stream << "\tModule <Curve> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_StandaloneModalityLUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <StandaloneModalityLUT>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (LUTIdentification)
		LUTIdentification->write(stream,list,dict);
	else
		stream << "\tModule <LUTIdentification> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_StandaloneVOILUT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <StandaloneVOILUT>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (LUTIdentification)
		LUTIdentification->write(stream,list,dict);
	else
		stream << "\tModule <LUTIdentification> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_Segmentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <Segmentation>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (SegmentationSeries)
		SegmentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <SegmentationSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (SegmentationImage)
		SegmentationImage->write(stream,list,dict);
	else
		stream << "\tModule <SegmentationImage> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForSegmentation)
		MultiFrameFunctionalGroupsForSegmentation->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForSegmentation> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_SurfaceSegmentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <SurfaceSegmentation>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (SegmentationSeries)
		SegmentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <SegmentationSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (SurfaceSegmentation)
		SurfaceSegmentation->write(stream,list,dict);
	else
		stream << "\tModule <SurfaceSegmentation> not present\n";

	if (SurfaceMesh)
		SurfaceMesh->write(stream,list,dict);
	else
		stream << "\tModule <SurfaceMesh> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_SpatialRegistration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <SpatialRegistration>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (SpatialRegistrationSeries)
		SpatialRegistrationSeries->write(stream,list,dict);
	else
		stream << "\tModule <SpatialRegistrationSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SpatialRegistration)
		SpatialRegistration->write(stream,list,dict);
	else
		stream << "\tModule <SpatialRegistration> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_DeformableSpatialRegistration::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <DeformableSpatialRegistration>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (SpatialRegistrationSeries)
		SpatialRegistrationSeries->write(stream,list,dict);
	else
		stream << "\tModule <SpatialRegistrationSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (DeformableSpatialRegistration)
		DeformableSpatialRegistration->write(stream,list,dict);
	else
		stream << "\tModule <DeformableSpatialRegistration> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_SpatialFiducials::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <SpatialFiducials>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (SpatialFiducialsSeries)
		SpatialFiducialsSeries->write(stream,list,dict);
	else
		stream << "\tModule <SpatialFiducialsSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SpatialFiducials)
		SpatialFiducials->write(stream,list,dict);
	else
		stream << "\tModule <SpatialFiducials> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_EncapsulatedPDF::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EncapsulatedPDF>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (EncapsulatedDocumentSeries)
		EncapsulatedDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (EncapsulatedDocument)
		EncapsulatedDocument->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocument> not present\n";

	if (EncapsulatedDocumentPDFPseudo)
		EncapsulatedDocumentPDFPseudo->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentPDFPseudo> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_EncapsulatedCDA::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EncapsulatedCDA>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (EncapsulatedDocumentSeries)
		EncapsulatedDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SCEquipment)
		SCEquipment->write(stream,list,dict);
	else
		stream << "\tModule <SCEquipment> not present\n";

	if (EncapsulatedDocument)
		EncapsulatedDocument->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocument> not present\n";

	if (EncapsulatedDocumentCDAPseudo)
		EncapsulatedDocumentCDAPseudo->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentCDAPseudo> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_EncapsulatedSTL::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EncapsulatedSTL>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (EncapsulatedDocumentSeries)
		EncapsulatedDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentSeries> not present\n";

	if (EncapsulatedDocumentSTLSeriesPseudo)
		EncapsulatedDocumentSTLSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentSTLSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (EncapsulatedDocument)
		EncapsulatedDocument->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocument> not present\n";

	if (EncapsulatedDocumentSTLPseudo)
		EncapsulatedDocumentSTLPseudo->write(stream,list,dict);
	else
		stream << "\tModule <EncapsulatedDocumentSTLPseudo> not present\n";

	if (Manufacturing3DModel)
		Manufacturing3DModel->write(stream,list,dict);
	else
		stream << "\tModule <Manufacturing3DModel> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RealWorldValueMapping::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RealWorldValueMapping>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (RealWorldValueMappingSeries)
		RealWorldValueMappingSeries->write(stream,list,dict);
	else
		stream << "\tModule <RealWorldValueMappingSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RealWorldValueMapping)
		RealWorldValueMapping->write(stream,list,dict);
	else
		stream << "\tModule <RealWorldValueMapping> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_IVOCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <IVOCTImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (IntravascularOCTSeries)
		IntravascularOCTSeries->write(stream,list,dict);
	else
		stream << "\tModule <IntravascularOCTSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (SupplementalPaletteColorLUT)
		SupplementalPaletteColorLUT->write(stream,list,dict);
	else
		stream << "\tModule <SupplementalPaletteColorLUT> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForIVOCTImageForPresentation)
		MultiFrameFunctionalGroupsForIVOCTImageForPresentation->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForIVOCTImageForPresentation> not present\n";

	if (MultiFrameFunctionalGroupsForIVOCTImageForProcessing)
		MultiFrameFunctionalGroupsForIVOCTImageForProcessing->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForIVOCTImageForProcessing> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (IntravascularOCTImage)
		IntravascularOCTImage->write(stream,list,dict);
	else
		stream << "\tModule <IntravascularOCTImage> not present\n";

	if (IntravascularOCTAcquisitionParameters)
		IntravascularOCTAcquisitionParameters->write(stream,list,dict);
	else
		stream << "\tModule <IntravascularOCTAcquisitionParameters> not present\n";

	if (IntravascularOCTProcessingParameters)
		IntravascularOCTProcessingParameters->write(stream,list,dict);
	else
		stream << "\tModule <IntravascularOCTProcessingParameters> not present\n";

	if (IntravascularImageAcquisitionParameters)
		IntravascularImageAcquisitionParameters->write(stream,list,dict);
	else
		stream << "\tModule <IntravascularImageAcquisitionParameters> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_ParametricMap::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <ParametricMap>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ParametricMapSeries)
		ParametricMapSeries->write(stream,list,dict);
	else
		stream << "\tModule <ParametricMapSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (FloatingPointImagePixel)
		FloatingPointImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <FloatingPointImagePixel> not present\n";

	if (DoubleFloatingPointImagePixel)
		DoubleFloatingPointImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <DoubleFloatingPointImagePixel> not present\n";

	if (ParametricMapImage)
		ParametricMapImage->write(stream,list,dict);
	else
		stream << "\tModule <ParametricMapImage> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForParametricMap)
		MultiFrameFunctionalGroupsForParametricMap->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForParametricMap> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (PaletteColorLookupTable)
		PaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <PaletteColorLookupTable> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (BulkMotionSynchronization)
		BulkMotionSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <BulkMotionSynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_BasicDirectory::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BasicDirectory>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (FileSetIdentification)
		FileSetIdentification->write(stream,list,dict);
	else
		stream << "\tModule <FileSetIdentification> not present\n";

	if (DirectoryInformation)
		DirectoryInformation->write(stream,list,dict);
	else
		stream << "\tModule <DirectoryInformation> not present\n";

}

void
CompositeIOD_BasicDirectoryDental::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BasicDirectoryDental>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (FileSetIdentification)
		FileSetIdentification->write(stream,list,dict);
	else
		stream << "\tModule <FileSetIdentification> not present\n";

	if (DirectoryInformation)
		DirectoryInformation->write(stream,list,dict);
	else
		stream << "\tModule <DirectoryInformation> not present\n";

	if (DirectoryInformationDental)
		DirectoryInformationDental->write(stream,list,dict);
	else
		stream << "\tModule <DirectoryInformationDental> not present\n";

}

void
CompositeIOD_XAImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <XAImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (Mask)
		Mask->write(stream,list,dict);
	else
		stream << "\tModule <Mask> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRayImage)
		XRayImage->write(stream,list,dict);
	else
		stream << "\tModule <XRayImage> not present\n";

	if (XRayAcquisition)
		XRayAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisition> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (XRayTable)
		XRayTable->write(stream,list,dict);
	else
		stream << "\tModule <XRayTable> not present\n";

	if (XAPositioner)
		XAPositioner->write(stream,list,dict);
	else
		stream << "\tModule <XAPositioner> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (MultiFrameOverlay)
		MultiFrameOverlay->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameOverlay> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_XRFImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <XRFImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (FramePointers)
		FramePointers->write(stream,list,dict);
	else
		stream << "\tModule <FramePointers> not present\n";

	if (Mask)
		Mask->write(stream,list,dict);
	else
		stream << "\tModule <Mask> not present\n";

	if (XRayImage)
		XRayImage->write(stream,list,dict);
	else
		stream << "\tModule <XRayImage> not present\n";

	if (XRayAcquisition)
		XRayAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisition> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRayTable)
		XRayTable->write(stream,list,dict);
	else
		stream << "\tModule <XRayTable> not present\n";

	if (XRFPositioner)
		XRFPositioner->write(stream,list,dict);
	else
		stream << "\tModule <XRFPositioner> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (MultiFrameOverlay)
		MultiFrameOverlay->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameOverlay> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_EnhancedXAImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedXAImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (XAXRFSeries)
		XAXRFSeries->write(stream,list,dict);
	else
		stream << "\tModule <XAXRFSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Mask)
		Mask->write(stream,list,dict);
	else
		stream << "\tModule <Mask> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedXAImage)
		MultiFrameFunctionalGroupsForEnhancedXAImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedXAImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (EnhancedXAXRFImage)
		EnhancedXAXRFImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedXAXRFImage> not present\n";

	if (XAXRFAcquisition)
		XAXRFAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XAXRFAcquisition> not present\n";

	if (XRayImageIntensifier)
		XRayImageIntensifier->write(stream,list,dict);
	else
		stream << "\tModule <XRayImageIntensifier> not present\n";

	if (XRayDetector)
		XRayDetector->write(stream,list,dict);
	else
		stream << "\tModule <XRayDetector> not present\n";

	if (XAXRFMultiFramePresentation)
		XAXRFMultiFramePresentation->write(stream,list,dict);
	else
		stream << "\tModule <XAXRFMultiFramePresentation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_EnhancedXRFImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedXRFImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (XAXRFSeries)
		XAXRFSeries->write(stream,list,dict);
	else
		stream << "\tModule <XAXRFSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Mask)
		Mask->write(stream,list,dict);
	else
		stream << "\tModule <Mask> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedXRFImage)
		MultiFrameFunctionalGroupsForEnhancedXRFImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedXRFImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (EnhancedXAXRFImage)
		EnhancedXAXRFImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedXAXRFImage> not present\n";

	if (XAXRFAcquisition)
		XAXRFAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XAXRFAcquisition> not present\n";

	if (XRayImageIntensifier)
		XRayImageIntensifier->write(stream,list,dict);
	else
		stream << "\tModule <XRayImageIntensifier> not present\n";

	if (XRayDetector)
		XRayDetector->write(stream,list,dict);
	else
		stream << "\tModule <XRayDetector> not present\n";

	if (XAXRFMultiFramePresentation)
		XAXRFMultiFramePresentation->write(stream,list,dict);
	else
		stream << "\tModule <XAXRFMultiFramePresentation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_XRay3DAngiographicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <XRay3DAngiographicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedSeries)
		EnhancedSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForXRay3DAngiographicImage)
		MultiFrameFunctionalGroupsForXRay3DAngiographicImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForXRay3DAngiographicImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (PatientOrientation)
		PatientOrientation->write(stream,list,dict);
	else
		stream << "\tModule <PatientOrientation> not present\n";

	if (ImageEquipmentCoordinateRelationship)
		ImageEquipmentCoordinateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <ImageEquipmentCoordinateRelationship> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRay3DImage)
		XRay3DImage->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DImage> not present\n";

	if (XRay3DAngiographicImageContributingSources)
		XRay3DAngiographicImageContributingSources->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DAngiographicImageContributingSources> not present\n";

	if (XRay3DAngiographicAcquisition)
		XRay3DAngiographicAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DAngiographicAcquisition> not present\n";

	if (XRay3DReconstruction)
		XRay3DReconstruction->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DReconstruction> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_XRay3DCraniofacialImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <XRay3DCraniofacialImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedSeries)
		EnhancedSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForXRay3DCraniofacialImage)
		MultiFrameFunctionalGroupsForXRay3DCraniofacialImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForXRay3DCraniofacialImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (PatientOrientation)
		PatientOrientation->write(stream,list,dict);
	else
		stream << "\tModule <PatientOrientation> not present\n";

	if (ImageEquipmentCoordinateRelationship)
		ImageEquipmentCoordinateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <ImageEquipmentCoordinateRelationship> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRay3DImage)
		XRay3DImage->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DImage> not present\n";

	if (XRay3DCraniofacialImageContributingSources)
		XRay3DCraniofacialImageContributingSources->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DCraniofacialImageContributingSources> not present\n";

	if (XRay3DCraniofacialAcquisition)
		XRay3DCraniofacialAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DCraniofacialAcquisition> not present\n";

	if (XRay3DReconstruction)
		XRay3DReconstruction->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DReconstruction> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_PETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <PETImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (PETSeries)
		PETSeries->write(stream,list,dict);
	else
		stream << "\tModule <PETSeries> not present\n";

	if (PETIsotope)
		PETIsotope->write(stream,list,dict);
	else
		stream << "\tModule <PETIsotope> not present\n";

	if (PETMultigatedAcquisition)
		PETMultigatedAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <PETMultigatedAcquisition> not present\n";

	if (NMPETPatientOrientation)
		NMPETPatientOrientation->write(stream,list,dict);
	else
		stream << "\tModule <NMPETPatientOrientation> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePlane)
		ImagePlane->write(stream,list,dict);
	else
		stream << "\tModule <ImagePlane> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (PETImage)
		PETImage->write(stream,list,dict);
	else
		stream << "\tModule <PETImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_EnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedPETImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedPETSeries)
		EnhancedPETSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedPETImage)
		MultiFrameFunctionalGroupsForEnhancedPETImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedPETImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedPETIsotope)
		EnhancedPETIsotope->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETIsotope> not present\n";

	if (EnhancedPETAcquisition)
		EnhancedPETAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETAcquisition> not present\n";

	if (EnhancedPETImage)
		EnhancedPETImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETImage> not present\n";

	if (EnhancedPETCorrections)
		EnhancedPETCorrections->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETCorrections> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_LegacyConvertedEnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <LegacyConvertedEnhancedPETImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedPETSeries)
		EnhancedPETSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage)
		MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedPETImage)
		EnhancedPETImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETImage> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedPETImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <PrivatePixelMedLegacyConvertedEnhancedPETImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedPETSeries)
		EnhancedPETSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage)
		MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedPETImage)
		EnhancedPETImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPETImage> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_RTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (RTImage)
		RTImage->write(stream,list,dict);
	else
		stream << "\tModule <RTImage> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (Approval)
		Approval->write(stream,list,dict);
	else
		stream << "\tModule <Approval> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_RTDose::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTDose>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePlane)
		ImagePlane->write(stream,list,dict);
	else
		stream << "\tModule <ImagePlane> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (MultiFrameOverlay)
		MultiFrameOverlay->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameOverlay> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (RTDose)
		RTDose->write(stream,list,dict);
	else
		stream << "\tModule <RTDose> not present\n";

	if (RTDVH)
		RTDVH->write(stream,list,dict);
	else
		stream << "\tModule <RTDVH> not present\n";

	if (StructureSet)
		StructureSet->write(stream,list,dict);
	else
		stream << "\tModule <StructureSet> not present\n";

	if (ROIContour)
		ROIContour->write(stream,list,dict);
	else
		stream << "\tModule <ROIContour> not present\n";

	if (RTDoseROI)
		RTDoseROI->write(stream,list,dict);
	else
		stream << "\tModule <RTDoseROI> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_RTStructureSet::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTStructureSet>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (StructureSet)
		StructureSet->write(stream,list,dict);
	else
		stream << "\tModule <StructureSet> not present\n";

	if (ROIContour)
		ROIContour->write(stream,list,dict);
	else
		stream << "\tModule <ROIContour> not present\n";

	if (RTROIObservations)
		RTROIObservations->write(stream,list,dict);
	else
		stream << "\tModule <RTROIObservations> not present\n";

	if (Approval)
		Approval->write(stream,list,dict);
	else
		stream << "\tModule <Approval> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RTPlan::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTPlan>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RTGeneralPlan)
		RTGeneralPlan->write(stream,list,dict);
	else
		stream << "\tModule <RTGeneralPlan> not present\n";

	if (RTPrescription)
		RTPrescription->write(stream,list,dict);
	else
		stream << "\tModule <RTPrescription> not present\n";

	if (RTToleranceTables)
		RTToleranceTables->write(stream,list,dict);
	else
		stream << "\tModule <RTToleranceTables> not present\n";

	if (RTPatientSetup)
		RTPatientSetup->write(stream,list,dict);
	else
		stream << "\tModule <RTPatientSetup> not present\n";

	if (RTFractionScheme)
		RTFractionScheme->write(stream,list,dict);
	else
		stream << "\tModule <RTFractionScheme> not present\n";

	if (RTBeams)
		RTBeams->write(stream,list,dict);
	else
		stream << "\tModule <RTBeams> not present\n";

	if (RTBrachyApplicationSetups)
		RTBrachyApplicationSetups->write(stream,list,dict);
	else
		stream << "\tModule <RTBrachyApplicationSetups> not present\n";

	if (Approval)
		Approval->write(stream,list,dict);
	else
		stream << "\tModule <Approval> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RTBeamsTreatmentRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTBeamsTreatmentRecord>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RTGeneralTreatmentRecord)
		RTGeneralTreatmentRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTGeneralTreatmentRecord> not present\n";

	if (RTPatientSetup)
		RTPatientSetup->write(stream,list,dict);
	else
		stream << "\tModule <RTPatientSetup> not present\n";

	if (RTTreatmentMachineRecord)
		RTTreatmentMachineRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentMachineRecord> not present\n";

	if (MeasuredDoseReferenceRecord)
		MeasuredDoseReferenceRecord->write(stream,list,dict);
	else
		stream << "\tModule <MeasuredDoseReferenceRecord> not present\n";

	if (CalculatedDoseReferenceRecord)
		CalculatedDoseReferenceRecord->write(stream,list,dict);
	else
		stream << "\tModule <CalculatedDoseReferenceRecord> not present\n";

	if (RTBeamsSessionRecord)
		RTBeamsSessionRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTBeamsSessionRecord> not present\n";

	if (RTTreatmentSummaryRecord)
		RTTreatmentSummaryRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentSummaryRecord> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RTBrachyTreatmentRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTBrachyTreatmentRecord>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RTGeneralTreatmentRecord)
		RTGeneralTreatmentRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTGeneralTreatmentRecord> not present\n";

	if (RTPatientSetup)
		RTPatientSetup->write(stream,list,dict);
	else
		stream << "\tModule <RTPatientSetup> not present\n";

	if (RTTreatmentMachineRecord)
		RTTreatmentMachineRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentMachineRecord> not present\n";

	if (MeasuredDoseReferenceRecord)
		MeasuredDoseReferenceRecord->write(stream,list,dict);
	else
		stream << "\tModule <MeasuredDoseReferenceRecord> not present\n";

	if (CalculatedDoseReferenceRecord)
		CalculatedDoseReferenceRecord->write(stream,list,dict);
	else
		stream << "\tModule <CalculatedDoseReferenceRecord> not present\n";

	if (RTBrachySessionRecord)
		RTBrachySessionRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTBrachySessionRecord> not present\n";

	if (RTTreatmentSummaryRecord)
		RTTreatmentSummaryRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentSummaryRecord> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RTTreatmentSummaryRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTTreatmentSummaryRecord>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RTGeneralTreatmentRecord)
		RTGeneralTreatmentRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTGeneralTreatmentRecord> not present\n";

	if (RTTreatmentSummaryRecord)
		RTTreatmentSummaryRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentSummaryRecord> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RTIonPlan::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTIonPlan>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RTGeneralPlan)
		RTGeneralPlan->write(stream,list,dict);
	else
		stream << "\tModule <RTGeneralPlan> not present\n";

	if (RTPrescription)
		RTPrescription->write(stream,list,dict);
	else
		stream << "\tModule <RTPrescription> not present\n";

	if (RTIonToleranceTables)
		RTIonToleranceTables->write(stream,list,dict);
	else
		stream << "\tModule <RTIonToleranceTables> not present\n";

	if (RTPatientSetup)
		RTPatientSetup->write(stream,list,dict);
	else
		stream << "\tModule <RTPatientSetup> not present\n";

	if (RTFractionScheme)
		RTFractionScheme->write(stream,list,dict);
	else
		stream << "\tModule <RTFractionScheme> not present\n";

	if (RTIonBeams)
		RTIonBeams->write(stream,list,dict);
	else
		stream << "\tModule <RTIonBeams> not present\n";

	if (Approval)
		Approval->write(stream,list,dict);
	else
		stream << "\tModule <Approval> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_RTIonBeamsTreatmentRecord::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RTIonBeamsTreatmentRecord>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (RTSeries)
		RTSeries->write(stream,list,dict);
	else
		stream << "\tModule <RTSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (RTGeneralTreatmentRecord)
		RTGeneralTreatmentRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTGeneralTreatmentRecord> not present\n";

	if (RTPatientSetup)
		RTPatientSetup->write(stream,list,dict);
	else
		stream << "\tModule <RTPatientSetup> not present\n";

	if (RTTreatmentMachineRecord)
		RTTreatmentMachineRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentMachineRecord> not present\n";

	if (MeasuredDoseReferenceRecord)
		MeasuredDoseReferenceRecord->write(stream,list,dict);
	else
		stream << "\tModule <MeasuredDoseReferenceRecord> not present\n";

	if (CalculatedDoseReferenceRecord)
		CalculatedDoseReferenceRecord->write(stream,list,dict);
	else
		stream << "\tModule <CalculatedDoseReferenceRecord> not present\n";

	if (RTIonBeamsSessionRecord)
		RTIonBeamsSessionRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTIonBeamsSessionRecord> not present\n";

	if (RTTreatmentSummaryRecord)
		RTTreatmentSummaryRecord->write(stream,list,dict);
	else
		stream << "\tModule <RTTreatmentSummaryRecord> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_DXImageForProcessing::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <DXImageForProcessing>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_DXImageForPresentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <DXImageForPresentation>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_MammographyImageForProcessing::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyImageForProcessing>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (MammographySeries)
		MammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <MammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (MammographyImage)
		MammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <MammographyImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_MammographyImageForPresentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyImageForPresentation>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (MammographySeries)
		MammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <MammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (MammographyImage)
		MammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <MammographyImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_MammographyImageForProcessingIHEMammo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyImageForProcessingIHEMammo>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (MammographySeries)
		MammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <MammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (MammographyImage)
		MammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <MammographyImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (IHEMammoProfile)
		IHEMammoProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfile> not present\n";

	if (IHEMammoProfileWithoutPartialViewOption)
		IHEMammoProfileWithoutPartialViewOption->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfileWithoutPartialViewOption> not present\n";

}

void
CompositeIOD_MammographyImageForProcessingIHEMammoPartialViewOption::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyImageForProcessingIHEMammoPartialViewOption>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (MammographySeries)
		MammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <MammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (MammographyImage)
		MammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <MammographyImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (IHEMammoProfile)
		IHEMammoProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfile> not present\n";

	if (IHEMammoProfileWithPartialViewOption)
		IHEMammoProfileWithPartialViewOption->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfileWithPartialViewOption> not present\n";

}

void
CompositeIOD_MammographyImageForPresentationIHEMammo::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyImageForPresentationIHEMammo>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (MammographySeries)
		MammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <MammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (MammographyImage)
		MammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <MammographyImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (IHEMammoProfile)
		IHEMammoProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfile> not present\n";

	if (IHEMammoProfileWithoutPartialViewOption)
		IHEMammoProfileWithoutPartialViewOption->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfileWithoutPartialViewOption> not present\n";

	if (IHEMammoProfileForPresentationOnly)
		IHEMammoProfileForPresentationOnly->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfileForPresentationOnly> not present\n";

}

void
CompositeIOD_MammographyImageForPresentationIHEMammoPartialViewOption::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyImageForPresentationIHEMammoPartialViewOption>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (MammographySeries)
		MammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <MammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (MammographyImage)
		MammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <MammographyImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (IHEMammoProfile)
		IHEMammoProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfile> not present\n";

	if (IHEMammoProfileWithPartialViewOption)
		IHEMammoProfileWithPartialViewOption->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfileWithPartialViewOption> not present\n";

	if (IHEMammoProfileForPresentationOnly)
		IHEMammoProfileForPresentationOnly->write(stream,list,dict);
	else
		stream << "\tModule <IHEMammoProfileForPresentationOnly> not present\n";

}

void
CompositeIOD_IntraoralImageForProcessing::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <IntraoralImageForProcessing>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (IntraoralSeries)
		IntraoralSeries->write(stream,list,dict);
	else
		stream << "\tModule <IntraoralSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (IntraoralImage)
		IntraoralImage->write(stream,list,dict);
	else
		stream << "\tModule <IntraoralImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_IntraoralImageForPresentation::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <IntraoralImageForPresentation>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (IntraoralSeries)
		IntraoralSeries->write(stream,list,dict);
	else
		stream << "\tModule <IntraoralSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (IntraoralImage)
		IntraoralImage->write(stream,list,dict);
	else
		stream << "\tModule <IntraoralImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

}

void
CompositeIOD_IntraoralImageForPresentationDentalMedia::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <IntraoralImageForPresentationDentalMedia>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (IntraoralSeries)
		IntraoralSeries->write(stream,list,dict);
	else
		stream << "\tModule <IntraoralSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (IntraoralImage)
		IntraoralImage->write(stream,list,dict);
	else
		stream << "\tModule <IntraoralImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (DentalImageOnMediaProfile)
		DentalImageOnMediaProfile->write(stream,list,dict);
	else
		stream << "\tModule <DentalImageOnMediaProfile> not present\n";

}

void
CompositeIOD_DXImageForPresentationDentalMedia::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <DXImageForPresentationDentalMedia>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (DXAnatomyImaged)
		DXAnatomyImaged->write(stream,list,dict);
	else
		stream << "\tModule <DXAnatomyImaged> not present\n";

	if (DXImage)
		DXImage->write(stream,list,dict);
	else
		stream << "\tModule <DXImage> not present\n";

	if (DXDetector)
		DXDetector->write(stream,list,dict);
	else
		stream << "\tModule <DXDetector> not present\n";

	if (XRayCollimator)
		XRayCollimator->write(stream,list,dict);
	else
		stream << "\tModule <XRayCollimator> not present\n";

	if (DXPositioning)
		DXPositioning->write(stream,list,dict);
	else
		stream << "\tModule <DXPositioning> not present\n";

	if (XRayTomographyAcquisition)
		XRayTomographyAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <XRayTomographyAcquisition> not present\n";

	if (XRayAcquisitionDose)
		XRayAcquisitionDose->write(stream,list,dict);
	else
		stream << "\tModule <XRayAcquisitionDose> not present\n";

	if (XRayGeneration)
		XRayGeneration->write(stream,list,dict);
	else
		stream << "\tModule <XRayGeneration> not present\n";

	if (XRayFiltration)
		XRayFiltration->write(stream,list,dict);
	else
		stream << "\tModule <XRayFiltration> not present\n";

	if (XRayGrid)
		XRayGrid->write(stream,list,dict);
	else
		stream << "\tModule <XRayGrid> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (VOILUT)
		VOILUT->write(stream,list,dict);
	else
		stream << "\tModule <VOILUT> not present\n";

	if (ImageHistogram)
		ImageHistogram->write(stream,list,dict);
	else
		stream << "\tModule <ImageHistogram> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (DentalImageOnMediaProfile)
		DentalImageOnMediaProfile->write(stream,list,dict);
	else
		stream << "\tModule <DentalImageOnMediaProfile> not present\n";

}

void
CompositeIOD_BreastTomosynthesisImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BreastTomosynthesisImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedMammographySeries)
		EnhancedMammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForBreastTomosynthesisImage)
		MultiFrameFunctionalGroupsForBreastTomosynthesisImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForBreastTomosynthesisImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (ImageEquipmentCoordinateRelationship)
		ImageEquipmentCoordinateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <ImageEquipmentCoordinateRelationship> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRay3DImage)
		XRay3DImage->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DImage> not present\n";

	if (BreastTomosynthesisContributingSources)
		BreastTomosynthesisContributingSources->write(stream,list,dict);
	else
		stream << "\tModule <BreastTomosynthesisContributingSources> not present\n";

	if (BreastTomosynthesisAcquisition)
		BreastTomosynthesisAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <BreastTomosynthesisAcquisition> not present\n";

	if (XRay3DReconstruction)
		XRay3DReconstruction->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DReconstruction> not present\n";

	if (BreastView)
		BreastView->write(stream,list,dict);
	else
		stream << "\tModule <BreastView> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_BreastTomosynthesisImageIHEDBT::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BreastTomosynthesisImageIHEDBT>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedMammographySeries)
		EnhancedMammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForBreastTomosynthesisImage)
		MultiFrameFunctionalGroupsForBreastTomosynthesisImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForBreastTomosynthesisImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (ImageEquipmentCoordinateRelationship)
		ImageEquipmentCoordinateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <ImageEquipmentCoordinateRelationship> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (XRay3DImage)
		XRay3DImage->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DImage> not present\n";

	if (BreastTomosynthesisContributingSources)
		BreastTomosynthesisContributingSources->write(stream,list,dict);
	else
		stream << "\tModule <BreastTomosynthesisContributingSources> not present\n";

	if (BreastTomosynthesisAcquisition)
		BreastTomosynthesisAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <BreastTomosynthesisAcquisition> not present\n";

	if (XRay3DReconstruction)
		XRay3DReconstruction->write(stream,list,dict);
	else
		stream << "\tModule <XRay3DReconstruction> not present\n";

	if (BreastView)
		BreastView->write(stream,list,dict);
	else
		stream << "\tModule <BreastView> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

	if (IHEDBTProfile)
		IHEDBTProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEDBTProfile> not present\n";

}

void
CompositeIOD_BreastProjectionXRayImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BreastProjectionXRayImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (DXSeries)
		DXSeries->write(stream,list,dict);
	else
		stream << "\tModule <DXSeries> not present\n";

	if (EnhancedMammographySeries)
		EnhancedMammographySeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMammographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (EnhancedMammographyImage)
		EnhancedMammographyImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMammographyImage> not present\n";

	if (BreastView)
		BreastView->write(stream,list,dict);
	else
		stream << "\tModule <BreastView> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Intervention)
		Intervention->write(stream,list,dict);
	else
		stream << "\tModule <Intervention> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForBreastProjectionXRayImage)
		MultiFrameFunctionalGroupsForBreastProjectionXRayImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForBreastProjectionXRayImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (PatientOrientation)
		PatientOrientation->write(stream,list,dict);
	else
		stream << "\tModule <PatientOrientation> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_VLEndoscopicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VLEndoscopicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLEndoscopicSeriesPseudo)
		VLEndoscopicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLEndoscopicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_VLMicroscopicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VLMicroscopicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLMicroscopicSeriesPseudo)
		VLMicroscopicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLMicroscopicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (OpticalPath)
		OpticalPath->write(stream,list,dict);
	else
		stream << "\tModule <OpticalPath> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_VLSlideCoordinatesMicroscopicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VLSlideCoordinatesMicroscopicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLSlideCoordinatesMicroscopicSeriesPseudo)
		VLSlideCoordinatesMicroscopicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLSlideCoordinatesMicroscopicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (SlideCoordinates)
		SlideCoordinates->write(stream,list,dict);
	else
		stream << "\tModule <SlideCoordinates> not present\n";

	if (OpticalPath)
		OpticalPath->write(stream,list,dict);
	else
		stream << "\tModule <OpticalPath> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_VLPhotographicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VLPhotographicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLPhotographicSeriesPseudo)
		VLPhotographicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLPhotographicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (CheckSingleFramePseudo)
		CheckSingleFramePseudo->write(stream,list,dict);
	else
		stream << "\tModule <CheckSingleFramePseudo> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

}

void
CompositeIOD_VideoEndoscopicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VideoEndoscopicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLEndoscopicSeriesPseudo)
		VLEndoscopicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLEndoscopicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_VideoMicroscopicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VideoMicroscopicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLMicroscopicSeriesPseudo)
		VLMicroscopicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLMicroscopicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_VideoPhotographicImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VideoPhotographicImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VLPhotographicSeriesPseudo)
		VLPhotographicSeriesPseudo->write(stream,list,dict);
	else
		stream << "\tModule <VLPhotographicSeriesPseudo> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (VLImage)
		VLImage->write(stream,list,dict);
	else
		stream << "\tModule <VLImage> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_OphthalmicPhotography8BitImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <OphthalmicPhotography8BitImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (OphthalmicPhotographySeries)
		OphthalmicPhotographySeries->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographySeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (OphthalmicPhotographyImage)
		OphthalmicPhotographyImage->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographyImage> not present\n";

	if (OphthalmicPhotography8BitImagePseudo)
		OphthalmicPhotography8BitImagePseudo->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotography8BitImagePseudo> not present\n";

	if (OcularRegionImaged)
		OcularRegionImaged->write(stream,list,dict);
	else
		stream << "\tModule <OcularRegionImaged> not present\n";

	if (OphthalmicPhotographyAcquisitionParameters)
		OphthalmicPhotographyAcquisitionParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographyAcquisitionParameters> not present\n";

	if (OphthalmicPhotographicParameters)
		OphthalmicPhotographicParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographicParameters> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_OphthalmicPhotography16BitImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <OphthalmicPhotography16BitImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (OphthalmicPhotographySeries)
		OphthalmicPhotographySeries->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographySeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (Cine)
		Cine->write(stream,list,dict);
	else
		stream << "\tModule <Cine> not present\n";

	if (MultiFrame)
		MultiFrame->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrame> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (OphthalmicPhotographyImage)
		OphthalmicPhotographyImage->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographyImage> not present\n";

	if (OphthalmicPhotography16BitImagePseudo)
		OphthalmicPhotography16BitImagePseudo->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotography16BitImagePseudo> not present\n";

	if (OcularRegionImaged)
		OcularRegionImaged->write(stream,list,dict);
	else
		stream << "\tModule <OcularRegionImaged> not present\n";

	if (OphthalmicPhotographyAcquisitionParameters)
		OphthalmicPhotographyAcquisitionParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographyAcquisitionParameters> not present\n";

	if (OphthalmicPhotographicParameters)
		OphthalmicPhotographicParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPhotographicParameters> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_StereometricRelationship::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <StereometricRelationship>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (StereometricSeries)
		StereometricSeries->write(stream,list,dict);
	else
		stream << "\tModule <StereometricSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (StereometricRelationship)
		StereometricRelationship->write(stream,list,dict);
	else
		stream << "\tModule <StereometricRelationship> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_OphthalmicTomographyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <OphthalmicTomographyImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (OphthalmicTomographySeries)
		OphthalmicTomographySeries->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicTomographySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForOphthalmicTomography)
		MultiFrameFunctionalGroupsForOphthalmicTomography->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForOphthalmicTomography> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (OphthalmicTomographyImage)
		OphthalmicTomographyImage->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicTomographyImage> not present\n";

	if (OphthalmicTomographyAcquisitionParameters)
		OphthalmicTomographyAcquisitionParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicTomographyAcquisitionParameters> not present\n";

	if (OphthalmicTomographyParameters)
		OphthalmicTomographyParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicTomographyParameters> not present\n";

	if (OcularRegionImaged)
		OcularRegionImaged->write(stream,list,dict);
	else
		stream << "\tModule <OcularRegionImaged> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_VLWholeSlideMicroscopyImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VLWholeSlideMicroscopyImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (WholeSlideMicroscopySeries)
		WholeSlideMicroscopySeries->write(stream,list,dict);
	else
		stream << "\tModule <WholeSlideMicroscopySeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForWholeSlideMicroscopy)
		MultiFrameFunctionalGroupsForWholeSlideMicroscopy->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForWholeSlideMicroscopy> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (WholeSlideMicroscopyImage)
		WholeSlideMicroscopyImage->write(stream,list,dict);
	else
		stream << "\tModule <WholeSlideMicroscopyImage> not present\n";

	if (OpticalPath)
		OpticalPath->write(stream,list,dict);
	else
		stream << "\tModule <OpticalPath> not present\n";

	if (MultiResolutionNavigation)
		MultiResolutionNavigation->write(stream,list,dict);
	else
		stream << "\tModule <MultiResolutionNavigation> not present\n";

	if (SlideLabel)
		SlideLabel->write(stream,list,dict);
	else
		stream << "\tModule <SlideLabel> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_LensometryMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <LensometryMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (LensometryMeasurementsSeries)
		LensometryMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <LensometryMeasurementsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (LensometryMeasurements)
		LensometryMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <LensometryMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_AutorefractionMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <AutorefractionMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (AutorefractionMeasurementsSeries)
		AutorefractionMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <AutorefractionMeasurementsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (AutorefractionMeasurements)
		AutorefractionMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <AutorefractionMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_KeratometryMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <KeratometryMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (KeratometryMeasurementsSeries)
		KeratometryMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <KeratometryMeasurementsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (KeratometryMeasurements)
		KeratometryMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <KeratometryMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_SubjectiveRefractionMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <SubjectiveRefractionMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (SubjectiveRefractionMeasurementsSeries)
		SubjectiveRefractionMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <SubjectiveRefractionMeasurementsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (SubjectiveRefractionMeasurements)
		SubjectiveRefractionMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <SubjectiveRefractionMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_VisualAcuityMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <VisualAcuityMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (VisualAcuityMeasurementsSeries)
		VisualAcuityMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <VisualAcuityMeasurementsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (VisualAcuityMeasurements)
		VisualAcuityMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <VisualAcuityMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_OphthalmicAxialMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <OphthalmicAxialMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (OphthalmicAxialMeasurementsSeries)
		OphthalmicAxialMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicAxialMeasurementsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (OphthalmicAxialMeasurements)
		OphthalmicAxialMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicAxialMeasurements> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_IntraocularLensCalculations::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <IntraocularLensCalculations>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (IntraocularLensCalculationsSeries)
		IntraocularLensCalculationsSeries->write(stream,list,dict);
	else
		stream << "\tModule <IntraocularLensCalculationsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (IntraocularLensCalculations)
		IntraocularLensCalculations->write(stream,list,dict);
	else
		stream << "\tModule <IntraocularLensCalculations> not present\n";

	if (GeneralOphthalmicRefractiveMeasurements)
		GeneralOphthalmicRefractiveMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <GeneralOphthalmicRefractiveMeasurements> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_OphthalmicVisualFieldStaticPerimetryMeasurements::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <OphthalmicVisualFieldStaticPerimetryMeasurements>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (VisualFieldStaticPerimetryMeasurementsSeries)
		VisualFieldStaticPerimetryMeasurementsSeries->write(stream,list,dict);
	else
		stream << "\tModule <VisualFieldStaticPerimetryMeasurementsSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (VisualFieldStaticPerimetryTestParameters)
		VisualFieldStaticPerimetryTestParameters->write(stream,list,dict);
	else
		stream << "\tModule <VisualFieldStaticPerimetryTestParameters> not present\n";

	if (VisualFieldStaticPerimetryTestReliability)
		VisualFieldStaticPerimetryTestReliability->write(stream,list,dict);
	else
		stream << "\tModule <VisualFieldStaticPerimetryTestReliability> not present\n";

	if (VisualFieldStaticPerimetryTestMeasurements)
		VisualFieldStaticPerimetryTestMeasurements->write(stream,list,dict);
	else
		stream << "\tModule <VisualFieldStaticPerimetryTestMeasurements> not present\n";

	if (VisualFieldStaticPerimetryTestResults)
		VisualFieldStaticPerimetryTestResults->write(stream,list,dict);
	else
		stream << "\tModule <VisualFieldStaticPerimetryTestResults> not present\n";

	if (OphthalmicPatientClinicalInformationandTestLensParameters)
		OphthalmicPatientClinicalInformationandTestLensParameters->write(stream,list,dict);
	else
		stream << "\tModule <OphthalmicPatientClinicalInformationandTestLensParameters> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_BasicVoice::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BasicVoice>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (WaveformIdentification)
		WaveformIdentification->write(stream,list,dict);
	else
		stream << "\tModule <WaveformIdentification> not present\n";

	if (Waveform)
		Waveform->write(stream,list,dict);
	else
		stream << "\tModule <Waveform> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (WaveformAnnotation)
		WaveformAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <WaveformAnnotation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_TwelveLeadECG::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <TwelveLeadECG>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (WaveformIdentification)
		WaveformIdentification->write(stream,list,dict);
	else
		stream << "\tModule <WaveformIdentification> not present\n";

	if (Waveform)
		Waveform->write(stream,list,dict);
	else
		stream << "\tModule <Waveform> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (WaveformAnnotation)
		WaveformAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <WaveformAnnotation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_GeneralECG::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <GeneralECG>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (WaveformIdentification)
		WaveformIdentification->write(stream,list,dict);
	else
		stream << "\tModule <WaveformIdentification> not present\n";

	if (Waveform)
		Waveform->write(stream,list,dict);
	else
		stream << "\tModule <Waveform> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (WaveformAnnotation)
		WaveformAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <WaveformAnnotation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_AmbulatoryECG::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <AmbulatoryECG>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (WaveformIdentification)
		WaveformIdentification->write(stream,list,dict);
	else
		stream << "\tModule <WaveformIdentification> not present\n";

	if (Waveform)
		Waveform->write(stream,list,dict);
	else
		stream << "\tModule <Waveform> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (WaveformAnnotation)
		WaveformAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <WaveformAnnotation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_HemodynamicWaveform::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <HemodynamicWaveform>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (WaveformIdentification)
		WaveformIdentification->write(stream,list,dict);
	else
		stream << "\tModule <WaveformIdentification> not present\n";

	if (Waveform)
		Waveform->write(stream,list,dict);
	else
		stream << "\tModule <Waveform> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (WaveformAnnotation)
		WaveformAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <WaveformAnnotation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_CardiacElectrophysiologyWaveform::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <CardiacElectrophysiologyWaveform>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (WaveformIdentification)
		WaveformIdentification->write(stream,list,dict);
	else
		stream << "\tModule <WaveformIdentification> not present\n";

	if (Waveform)
		Waveform->write(stream,list,dict);
	else
		stream << "\tModule <Waveform> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (WaveformAnnotation)
		WaveformAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <WaveformAnnotation> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_BasicTextSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BasicTextSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_EnhancedSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_ComprehensiveSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <ComprehensiveSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_Comprehensive3DSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <Comprehensive3DSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_KeyObjectSelectionDocument::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <KeyObjectSelectionDocument>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (KeyObjectDocumentSeries)
		KeyObjectDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <KeyObjectDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (KeyObjectDocument)
		KeyObjectDocument->write(stream,list,dict);
	else
		stream << "\tModule <KeyObjectDocument> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_KeyObjectSelectionDocumentIHEXDSIManifest::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <KeyObjectSelectionDocumentIHEXDSIManifest>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (KeyObjectDocumentSeries)
		KeyObjectDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <KeyObjectDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (KeyObjectDocument)
		KeyObjectDocument->write(stream,list,dict);
	else
		stream << "\tModule <KeyObjectDocument> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (IHEXDSIManifestProfile)
		IHEXDSIManifestProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEXDSIManifestProfile> not present\n";

}

void
CompositeIOD_MammographyCADSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MammographyCADSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_ChestCADSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <ChestCADSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_ProcedureLog::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <ProcedureLog>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_XRayRadiationDoseSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <XRayRadiationDoseSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_XRayRadiationDoseSRIHEREM::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <XRayRadiationDoseSRIHEREM>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (IHEREMProfile)
		IHEREMProfile->write(stream,list,dict);
	else
		stream << "\tModule <IHEREMProfile> not present\n";

}

void
CompositeIOD_RadiopharmaceuticalRadiationDoseSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RadiopharmaceuticalRadiationDoseSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_SpectaclePrescriptionReport::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <SpectaclePrescriptionReport>\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_AcquisitionContextSR::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <AcquisitionContextSR>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (SRDocumentSeries)
		SRDocumentSeries->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (SRDocumentGeneral)
		SRDocumentGeneral->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentGeneral> not present\n";

	if (SRDocumentContent)
		SRDocumentContent->write(stream,list,dict);
	else
		stream << "\tModule <SRDocumentContent> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_GrayscaleSoftcopyPresentationState::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <GrayscaleSoftcopyPresentationState>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (PresentationSeries)
		PresentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <PresentationSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (PresentationStateIdentification)
		PresentationStateIdentification->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateIdentification> not present\n";

	if (PresentationStateRelationship)
		PresentationStateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateRelationship> not present\n";

	if (PresentationStateShutter)
		PresentationStateShutter->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateShutter> not present\n";

	if (PresentationStateMask)
		PresentationStateMask->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateMask> not present\n";

	if (Mask)
		Mask->write(stream,list,dict);
	else
		stream << "\tModule <Mask> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (BitmapDisplayShutter)
		BitmapDisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <BitmapDisplayShutter> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (OverlayActivation)
		OverlayActivation->write(stream,list,dict);
	else
		stream << "\tModule <OverlayActivation> not present\n";

	if (DisplayedArea)
		DisplayedArea->write(stream,list,dict);
	else
		stream << "\tModule <DisplayedArea> not present\n";

	if (GraphicAnnotation)
		GraphicAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <GraphicAnnotation> not present\n";

	if (SpatialTransformation)
		SpatialTransformation->write(stream,list,dict);
	else
		stream << "\tModule <SpatialTransformation> not present\n";

	if (GraphicLayer)
		GraphicLayer->write(stream,list,dict);
	else
		stream << "\tModule <GraphicLayer> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (SoftcopyVOILUT)
		SoftcopyVOILUT->write(stream,list,dict);
	else
		stream << "\tModule <SoftcopyVOILUT> not present\n";

	if (SoftcopyPresentationLUT)
		SoftcopyPresentationLUT->write(stream,list,dict);
	else
		stream << "\tModule <SoftcopyPresentationLUT> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_ColorSoftcopyPresentationState::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <ColorSoftcopyPresentationState>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (PresentationSeries)
		PresentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <PresentationSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (PresentationStateIdentification)
		PresentationStateIdentification->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateIdentification> not present\n";

	if (PresentationStateRelationship)
		PresentationStateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateRelationship> not present\n";

	if (PresentationStateShutter)
		PresentationStateShutter->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateShutter> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (BitmapDisplayShutter)
		BitmapDisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <BitmapDisplayShutter> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (OverlayActivation)
		OverlayActivation->write(stream,list,dict);
	else
		stream << "\tModule <OverlayActivation> not present\n";

	if (DisplayedArea)
		DisplayedArea->write(stream,list,dict);
	else
		stream << "\tModule <DisplayedArea> not present\n";

	if (GraphicAnnotation)
		GraphicAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <GraphicAnnotation> not present\n";

	if (SpatialTransformation)
		SpatialTransformation->write(stream,list,dict);
	else
		stream << "\tModule <SpatialTransformation> not present\n";

	if (GraphicLayer)
		GraphicLayer->write(stream,list,dict);
	else
		stream << "\tModule <GraphicLayer> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_PseudoColorSoftcopyPresentationState::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <PseudoColorSoftcopyPresentationState>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (PresentationSeries)
		PresentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <PresentationSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (PresentationStateIdentification)
		PresentationStateIdentification->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateIdentification> not present\n";

	if (PresentationStateRelationship)
		PresentationStateRelationship->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateRelationship> not present\n";

	if (PresentationStateShutter)
		PresentationStateShutter->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateShutter> not present\n";

	if (PresentationStateMask)
		PresentationStateMask->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateMask> not present\n";

	if (Mask)
		Mask->write(stream,list,dict);
	else
		stream << "\tModule <Mask> not present\n";

	if (DisplayShutter)
		DisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <DisplayShutter> not present\n";

	if (BitmapDisplayShutter)
		BitmapDisplayShutter->write(stream,list,dict);
	else
		stream << "\tModule <BitmapDisplayShutter> not present\n";

	if (OverlayPlane)
		OverlayPlane->write(stream,list,dict);
	else
		stream << "\tModule <OverlayPlane> not present\n";

	if (OverlayActivation)
		OverlayActivation->write(stream,list,dict);
	else
		stream << "\tModule <OverlayActivation> not present\n";

	if (DisplayedArea)
		DisplayedArea->write(stream,list,dict);
	else
		stream << "\tModule <DisplayedArea> not present\n";

	if (GraphicAnnotation)
		GraphicAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <GraphicAnnotation> not present\n";

	if (SpatialTransformation)
		SpatialTransformation->write(stream,list,dict);
	else
		stream << "\tModule <SpatialTransformation> not present\n";

	if (GraphicLayer)
		GraphicLayer->write(stream,list,dict);
	else
		stream << "\tModule <GraphicLayer> not present\n";

	if (ModalityLUT)
		ModalityLUT->write(stream,list,dict);
	else
		stream << "\tModule <ModalityLUT> not present\n";

	if (SoftcopyVOILUT)
		SoftcopyVOILUT->write(stream,list,dict);
	else
		stream << "\tModule <SoftcopyVOILUT> not present\n";

	if (PaletteColorLookupTable)
		PaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <PaletteColorLookupTable> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_BlendingSoftcopyPresentationState::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BlendingSoftcopyPresentationState>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (PresentationSeries)
		PresentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <PresentationSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (PresentationStateIdentification)
		PresentationStateIdentification->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateIdentification> not present\n";

	if (PresentationStateBlending)
		PresentationStateBlending->write(stream,list,dict);
	else
		stream << "\tModule <PresentationStateBlending> not present\n";

	if (DisplayedArea)
		DisplayedArea->write(stream,list,dict);
	else
		stream << "\tModule <DisplayedArea> not present\n";

	if (GraphicAnnotation)
		GraphicAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <GraphicAnnotation> not present\n";

	if (SpatialTransformation)
		SpatialTransformation->write(stream,list,dict);
	else
		stream << "\tModule <SpatialTransformation> not present\n";

	if (GraphicLayer)
		GraphicLayer->write(stream,list,dict);
	else
		stream << "\tModule <GraphicLayer> not present\n";

	if (PaletteColorLookupTable)
		PaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <PaletteColorLookupTable> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_HangingProtocol::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <HangingProtocol>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (HangingProtocolDefinition)
		HangingProtocolDefinition->write(stream,list,dict);
	else
		stream << "\tModule <HangingProtocolDefinition> not present\n";

	if (HangingProtocolEnvironment)
		HangingProtocolEnvironment->write(stream,list,dict);
	else
		stream << "\tModule <HangingProtocolEnvironment> not present\n";

	if (HangingProtocolDisplay)
		HangingProtocolDisplay->write(stream,list,dict);
	else
		stream << "\tModule <HangingProtocolDisplay> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_ColorPalette::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <ColorPalette>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (ColorPaletteDefinition)
		ColorPaletteDefinition->write(stream,list,dict);
	else
		stream << "\tModule <ColorPaletteDefinition> not present\n";

	if (PaletteColorLookupTable)
		PaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <PaletteColorLookupTable> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_BasicStructuredDisplay::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <BasicStructuredDisplay>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (PresentationSeries)
		PresentationSeries->write(stream,list,dict);
	else
		stream << "\tModule <PresentationSeries> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (StructuredDisplay)
		StructuredDisplay->write(stream,list,dict);
	else
		stream << "\tModule <StructuredDisplay> not present\n";

	if (StructuredDisplayImageBox)
		StructuredDisplayImageBox->write(stream,list,dict);
	else
		stream << "\tModule <StructuredDisplayImageBox> not present\n";

	if (StructuredDisplayAnnotation)
		StructuredDisplayAnnotation->write(stream,list,dict);
	else
		stream << "\tModule <StructuredDisplayAnnotation> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_EnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedMRImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (MRSeries)
		MRSeries->write(stream,list,dict);
	else
		stream << "\tModule <MRSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedMRImage)
		MultiFrameFunctionalGroupsForEnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedMRImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (BulkMotionSynchronization)
		BulkMotionSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <BulkMotionSynchronization> not present\n";

	if (SupplementalPaletteColorLUT)
		SupplementalPaletteColorLUT->write(stream,list,dict);
	else
		stream << "\tModule <SupplementalPaletteColorLUT> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedMRImage)
		EnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMRImage> not present\n";

	if (MRPulseSequence)
		MRPulseSequence->write(stream,list,dict);
	else
		stream << "\tModule <MRPulseSequence> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_EnhancedMRColorImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedMRColorImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (MRSeries)
		MRSeries->write(stream,list,dict);
	else
		stream << "\tModule <MRSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedMRImage)
		MultiFrameFunctionalGroupsForEnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedMRImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (BulkMotionSynchronization)
		BulkMotionSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <BulkMotionSynchronization> not present\n";

	if (SupplementalPaletteColorLUT)
		SupplementalPaletteColorLUT->write(stream,list,dict);
	else
		stream << "\tModule <SupplementalPaletteColorLUT> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedMRImage)
		EnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMRImage> not present\n";

	if (MRPulseSequence)
		MRPulseSequence->write(stream,list,dict);
	else
		stream << "\tModule <MRPulseSequence> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_MRSpectroscopy::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <MRSpectroscopy>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (MRSeries)
		MRSeries->write(stream,list,dict);
	else
		stream << "\tModule <MRSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForMRSpectroscopy)
		MultiFrameFunctionalGroupsForMRSpectroscopy->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForMRSpectroscopy> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (BulkMotionSynchronization)
		BulkMotionSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <BulkMotionSynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (MRSpectroscopy)
		MRSpectroscopy->write(stream,list,dict);
	else
		stream << "\tModule <MRSpectroscopy> not present\n";

	if (MRSpectroscopyPulseSequence)
		MRSpectroscopyPulseSequence->write(stream,list,dict);
	else
		stream << "\tModule <MRSpectroscopyPulseSequence> not present\n";

	if (MRSpectroscopyData)
		MRSpectroscopyData->write(stream,list,dict);
	else
		stream << "\tModule <MRSpectroscopyData> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_RawData::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <RawData>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (RawData)
		RawData->write(stream,list,dict);
	else
		stream << "\tModule <RawData> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_LegacyConvertedEnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <LegacyConvertedEnhancedMRImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (MRSeries)
		MRSeries->write(stream,list,dict);
	else
		stream << "\tModule <MRSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage)
		MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (BulkMotionSynchronization)
		BulkMotionSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <BulkMotionSynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedMRImage)
		EnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMRImage> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedMRImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <PrivatePixelMedLegacyConvertedEnhancedMRImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (MRSeries)
		MRSeries->write(stream,list,dict);
	else
		stream << "\tModule <MRSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage)
		MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (BulkMotionSynchronization)
		BulkMotionSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <BulkMotionSynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedMRImage)
		EnhancedMRImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMRImage> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_TractographyResults::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <TractographyResults>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (TractographyResultsSeries)
		TractographyResultsSeries->write(stream,list,dict);
	else
		stream << "\tModule <TractographyResultsSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (TractographyResults)
		TractographyResults->write(stream,list,dict);
	else
		stream << "\tModule <TractographyResults> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

}

void
CompositeIOD_EnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedCTImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (CTSeries)
		CTSeries->write(stream,list,dict);
	else
		stream << "\tModule <CTSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedCTImage)
		MultiFrameFunctionalGroupsForEnhancedCTImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedCTImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (SupplementalPaletteColorLUT)
		SupplementalPaletteColorLUT->write(stream,list,dict);
	else
		stream << "\tModule <SupplementalPaletteColorLUT> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedCTImage)
		EnhancedCTImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedCTImage> not present\n";

	if (EnhancedMultienergyCTAcquisition)
		EnhancedMultienergyCTAcquisition->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedMultienergyCTAcquisition> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_LegacyConvertedEnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <LegacyConvertedEnhancedCTImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (CTSeries)
		CTSeries->write(stream,list,dict);
	else
		stream << "\tModule <CTSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage)
		MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedCTImage)
		EnhancedCTImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedCTImage> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedCTImage::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <PrivatePixelMedLegacyConvertedEnhancedCTImage>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (CTSeries)
		CTSeries->write(stream,list,dict);
	else
		stream << "\tModule <CTSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (ContrastBolus)
		ContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <ContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage)
		MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedCTImage)
		EnhancedCTImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedCTImage> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_EnhancedUltrasoundVolume::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedUltrasoundVolume>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedUSSeries)
		EnhancedUSSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedUSSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (UltrasoundFrameOfReference)
		UltrasoundFrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <UltrasoundFrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedUSVolume)
		MultiFrameFunctionalGroupsForEnhancedUSVolume->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedUSVolume> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedPaletteColorLookupTable)
		EnhancedPaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPaletteColorLookupTable> not present\n";

	if (EnhancedUSImage)
		EnhancedUSImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedUSImage> not present\n";

	if (IVUSImage)
		IVUSImage->write(stream,list,dict);
	else
		stream << "\tModule <IVUSImage> not present\n";

	if (ExcludedIntervals)
		ExcludedIntervals->write(stream,list,dict);
	else
		stream << "\tModule <ExcludedIntervals> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

}

void
CompositeIOD_EnhancedUltrasoundVolumeQTUS::write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const
{
	stream << "\tCompositeIOD <EnhancedUltrasoundVolumeQTUS>\n";

	if (FileMetaInformation)
		FileMetaInformation->write(stream,list,dict);
	else
		stream << "\tModule <FileMetaInformation> not present\n";

	if (Patient)
		Patient->write(stream,list,dict);
	else
		stream << "\tModule <Patient> not present\n";

	if (ClinicalTrialSubject)
		ClinicalTrialSubject->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSubject> not present\n";

	if (GeneralStudy)
		GeneralStudy->write(stream,list,dict);
	else
		stream << "\tModule <GeneralStudy> not present\n";

	if (PatientStudy)
		PatientStudy->write(stream,list,dict);
	else
		stream << "\tModule <PatientStudy> not present\n";

	if (ClinicalTrialStudy)
		ClinicalTrialStudy->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialStudy> not present\n";

	if (QTUSEnhancedUltrasoundVolumeProfileStudy)
		QTUSEnhancedUltrasoundVolumeProfileStudy->write(stream,list,dict);
	else
		stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileStudy> not present\n";

	if (GeneralSeries)
		GeneralSeries->write(stream,list,dict);
	else
		stream << "\tModule <GeneralSeries> not present\n";

	if (ClinicalTrialSeries)
		ClinicalTrialSeries->write(stream,list,dict);
	else
		stream << "\tModule <ClinicalTrialSeries> not present\n";

	if (EnhancedUSSeries)
		EnhancedUSSeries->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedUSSeries> not present\n";

	if (QTUSEnhancedUltrasoundVolumeProfileSeries)
		QTUSEnhancedUltrasoundVolumeProfileSeries->write(stream,list,dict);
	else
		stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileSeries> not present\n";

	if (FrameOfReference)
		FrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <FrameOfReference> not present\n";

	if (UltrasoundFrameOfReference)
		UltrasoundFrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <UltrasoundFrameOfReference> not present\n";

	if (Synchronization)
		Synchronization->write(stream,list,dict);
	else
		stream << "\tModule <Synchronization> not present\n";

	if (QTUSEnhancedUltrasoundVolumeProfileFrameOfReference)
		QTUSEnhancedUltrasoundVolumeProfileFrameOfReference->write(stream,list,dict);
	else
		stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileFrameOfReference> not present\n";

	if (GeneralEquipment)
		GeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <GeneralEquipment> not present\n";

	if (EnhancedGeneralEquipment)
		EnhancedGeneralEquipment->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedGeneralEquipment> not present\n";

	if (QTUSEnhancedUltrasoundVolumeProfileEquipment)
		QTUSEnhancedUltrasoundVolumeProfileEquipment->write(stream,list,dict);
	else
		stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileEquipment> not present\n";

	if (GeneralImage)
		GeneralImage->write(stream,list,dict);
	else
		stream << "\tModule <GeneralImage> not present\n";

	if (GeneralReference)
		GeneralReference->write(stream,list,dict);
	else
		stream << "\tModule <GeneralReference> not present\n";

	if (ImagePixel)
		ImagePixel->write(stream,list,dict);
	else
		stream << "\tModule <ImagePixel> not present\n";

	if (EnhancedContrastBolus)
		EnhancedContrastBolus->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedContrastBolus> not present\n";

	if (MultiFrameFunctionalGroupsCommon)
		MultiFrameFunctionalGroupsCommon->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsCommon> not present\n";

	if (MultiFrameFunctionalGroupsForEnhancedUSVolume)
		MultiFrameFunctionalGroupsForEnhancedUSVolume->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameFunctionalGroupsForEnhancedUSVolume> not present\n";

	if (MultiFrameDimension)
		MultiFrameDimension->write(stream,list,dict);
	else
		stream << "\tModule <MultiFrameDimension> not present\n";

	if (CardiacSynchronization)
		CardiacSynchronization->write(stream,list,dict);
	else
		stream << "\tModule <CardiacSynchronization> not present\n";

	if (RespiratorySynchronization)
		RespiratorySynchronization->write(stream,list,dict);
	else
		stream << "\tModule <RespiratorySynchronization> not present\n";

	if (Device)
		Device->write(stream,list,dict);
	else
		stream << "\tModule <Device> not present\n";

	if (AcquisitionContext)
		AcquisitionContext->write(stream,list,dict);
	else
		stream << "\tModule <AcquisitionContext> not present\n";

	if (Specimen)
		Specimen->write(stream,list,dict);
	else
		stream << "\tModule <Specimen> not present\n";

	if (EnhancedPaletteColorLookupTable)
		EnhancedPaletteColorLookupTable->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedPaletteColorLookupTable> not present\n";

	if (EnhancedUSImage)
		EnhancedUSImage->write(stream,list,dict);
	else
		stream << "\tModule <EnhancedUSImage> not present\n";

	if (IVUSImage)
		IVUSImage->write(stream,list,dict);
	else
		stream << "\tModule <IVUSImage> not present\n";

	if (ExcludedIntervals)
		ExcludedIntervals->write(stream,list,dict);
	else
		stream << "\tModule <ExcludedIntervals> not present\n";

	if (ICCProfile)
		ICCProfile->write(stream,list,dict);
	else
		stream << "\tModule <ICCProfile> not present\n";

	if (SOPCommon)
		SOPCommon->write(stream,list,dict);
	else
		stream << "\tModule <SOPCommon> not present\n";

	if (CommonInstanceReference)
		CommonInstanceReference->write(stream,list,dict);
	else
		stream << "\tModule <CommonInstanceReference> not present\n";

	if (FrameExtraction)
		FrameExtraction->write(stream,list,dict);
	else
		stream << "\tModule <FrameExtraction> not present\n";

	if (QTUSEnhancedUltrasoundVolumeProfileInstance)
		QTUSEnhancedUltrasoundVolumeProfileInstance->write(stream,list,dict);
	else
		stream << "\tModule <QTUSEnhancedUltrasoundVolumeProfileInstance> not present\n";

}


#endif /* __Header_iodcompw__ */
