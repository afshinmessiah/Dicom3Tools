// Automatically generated from template - EDITS WILL BE LOST

// Generated by condn.awk with options define condnd

#ifndef __Header_condnd__
#define __Header_condnd__

bool Condition_Never(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)  { (void)list; (void)parentlist; return false; }
bool Condition_Always(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist) { (void)list; (void)parentlist; return true; }

bool
Condition_TractographyResultsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,TractographyResultsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ParametricMapInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ParametricMapStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VLWholeSlideMicroscopyImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VLWholeSlideMicroscopyImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedUltrasoundVolumeInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedUSVolumeStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BasicStructuredDisplayInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BasicStructuredDisplayStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IVOCTImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,IVOCTImageStorageForProcessingSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,IVOCTImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BreastTomosynthesisInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BreastTomosynthesisImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotBreastTomosynthesisInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BreastTomosynthesisImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ColorPaletteInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ColorPaletteStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotColorPaletteInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ColorPaletteStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SurfaceSegmentationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SurfaceSegmentationStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedXAImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedXAImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedXRFImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedXRFImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RealWorldValueMappingStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EncapsulatedPDFInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EncapsulatedPDFStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EncapsulatedCDAInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EncapsulatedCDAStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EncapsulatedSTLInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EncapsulatedSTLStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicPhotography8BitImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicPhotography8BitImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicPhotography16BitImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicPhotography16BitImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StereometricRelationshipInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,StereometricRelationshipStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicTomographyImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicTomographyImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_HangingProtocolInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,HangingProtocolStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpatialFiducialsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SpatialFiducialsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpatialRegistrationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SpatialRegistrationStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DeformableSpatialRegistrationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DeformableSpatialRegistrationStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedCTImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedCTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotLegacyConvertedCTOrMROrPET(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LegacyConvertedEnhancedCTImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotLegacyConvertedCT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PrivatePixelMedLegacyConvertedEnhancedCTImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,PrivatePixelMedLegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RawDataInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RawDataStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRSpectroscopyInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MRSpectroscopyStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedMRImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedMRImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedMRColorImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedMRColorImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LegacyConvertedEnhancedMRImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotLegacyConvertedMR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PrivatePixelMedLegacyConvertedEnhancedMRImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,PrivatePixelMedLegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_KeyObjectSelectionDocumentStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,KeyObjectSelectionDocumentStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MammographyCADSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MammographyCADSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ChestCADSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ChestCADSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BasicTextSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BasicTextSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ComprehensiveSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ComprehensiveSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_Comprehensive3DSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,Comprehensive3DSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ProcedureLogStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ProcedureLogStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayRadiationDoseSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,XRayRadiationDoseSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RadiopharmaceuticalRadiationDoseSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RadiopharmaceuticalRadiationDoseSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpectaclePrescriptionReportInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SpectaclePrescriptionReportStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextSRStorageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,AcquisitionContextSRStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GrayscaleSoftcopyPresentationStateInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,GrayscaleSoftcopyPresentationStateStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ColorSoftcopyPresentationStateInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ColorSoftcopyPresentationStateStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PseudoColorSoftcopyPresentationStateInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,PseudoColorSoftcopyPresentationStateStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlendingSoftcopyPresentationStateInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BlendingSoftcopyPresentationStateStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsForProcessingSOPClass(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForProcessingSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsForPresentationSOPClass(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DXImageForProcessingInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForProcessingSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DXImageForPresentationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MammographyImageForProcessingInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForProcessingSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MammographyImageForPresentationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntraoralImageForProcessingInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForProcessingSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntraoralImageForPresentationInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MediaStorageDirectoryInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(MediaStorageSOPClassUID),-1,MediaStorageDirectoryStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,PETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedPETImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedPETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LegacyConvertedEnhancedPETImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotLegacyConvertedPET(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PrivatePixelMedLegacyConvertedEnhancedPETImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,PrivatePixelMedLegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StandalonePETCurveInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,StandalonePETCurveStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTDoseInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTDoseStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTStructureSetInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTStructureSetStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTPlanInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTPlanStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTIonPlanInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTIonPlanStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTBeamsTreatmentRecordInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTBeamsTreatmentRecordStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTIonBeamsTreatmentRecordInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTIonBeamsTreatmentRecordStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTBrachyTreatmentRecordInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTBrachyTreatmentRecordStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTTreatmentSummaryRecordInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTTreatmentSummaryRecordStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisibleLightEndoscopicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VisibleLightEndoscopicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VideoEndoscopicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VideoEndoscopicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisibleLightMicroscopicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VisibleLightMicroscopicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VideoMicroscopicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VideoMicroscopicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisibleLightSlideCoordinatesMicroscopicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VisibleLightSlideCoordinatesMicroscopicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisibleLightPhotographicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VisibleLightPhotographicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VideoPhotographicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VideoPhotographicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BasicVoiceInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BasicVoiceStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TwelveLeadECGInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,TwelveLeadECGStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GeneralECGInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,GeneralECGStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AmbulatoryECGInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,AmbulatoryECGStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_HemodynamicWaveformInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,HemodynamicWaveformStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacElectrophysiologyWaveformInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,CardiacElectrophysiologyWaveformStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratoryWaveformInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RespiratoryWaveformStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CRImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ComputedRadiographyImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,CTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MRImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NMImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,NuclearMedicineImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_USImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,UltrasoundImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_USMultiFrameImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,UltrasoundMultiframeImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SCImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SecondaryCaptureImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiframeSingleBitSCImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeSingleBitSecondaryCaptureImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiframeGrayscaleByteSCImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeGrayscaleByteSecondaryCaptureImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiframeGrayscaleWordSCImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeGrayscaleWordSecondaryCaptureImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiframeTrueColorSCImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeTrueColorSecondaryCaptureImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XAImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,XRayAngiographicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XABiplaneImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,XRayAngiographicBiplaneImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRFImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,XRayRadioFluoroscopicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRay3DAngiographicImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,XRay3DAngiographicImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRay3DCraniofacialImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,XRay3DCraniofacialImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StandaloneOverlayInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,StandaloneOverlayStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StandaloneCurveInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,StandaloneCurveStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StandaloneModalityLUTInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,StandaloneModalityLUTStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StandaloneVOILUTInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,StandaloneVOILUTStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LensometryMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LensometryMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AutorefractionMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,AutorefractionMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_KeratometryMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,KeratometryMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SubjectiveRefractionMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SubjectiveRefractionMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisualAcuityMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VisualAcuityMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicAxialMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntraocularLensCalculationsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,IntraocularLensCalculationsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicVisualFieldStaticPerimetryMeasurementsInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicVisualFieldStaticPerimetryMeasurementsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BreastProjectionXRayImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BreastProjectionXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BreastProjectionXRayImageStorageForProcessingSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleCommonInstanceReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedSeriesSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(StudiesContainingOtherReferencedInstancesSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleAcquisitionContext(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AcquisitionContextSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleContrastBolus(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContrastBolusAgent))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleCine(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FrameTime))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FrameTimeVector))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMultiFrame(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FrameIncrementPointer))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfFramesGreaterThanOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfFramesIsAbsentOrOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition0 |=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,Equals,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleNMMultiGatedAcquisitionImageRetired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FrameTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleNMSPECTAcquisitionImageRetired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AngularStep))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleUSFrameOfReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RegionLocationMinX0))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RegionLocationMinY0))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RegionLocationMaxX1))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RegionLocationMaxY1))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PhysicalUnitsXDirection))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PhysicalUnitsYDirection))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PhysicalDeltaX))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PhysicalDeltaY))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleOverlayPlane(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayRows),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayColumns),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayType),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlaySubtype),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayOrigin),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayBitsAllocated),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayBitPosition),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayData),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(ROIArea),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(ROIMean),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(ROIStandardDeviation),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayDescriptorGray),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayDescriptorRed),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayDescriptorGreen),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayDescriptorBlue),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayGray),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayRed),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayGreen),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayBlue),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayDescription),0xff00)?1:0);
	condition0 |=(ElementPresentMasked(list,TagFromName(OverlayLabel),0xff00)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleApproval(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ApprovalStatus))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ReviewDate))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ReviewTime))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ReviewerName))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleModalityLUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleIntercept))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RescaleSlope))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RescaleType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ModalityLUTSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleVOILUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(WindowCenter))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(WindowWidth))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(WindowCenterWidthExplanation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(VOILUTSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(VOILUTFunction))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleFrameOfReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FrameOfReferenceUID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PositionReferenceIndicator))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleFrameOfReferenceInVLI(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FrameOfReferenceUID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PositionReferenceIndicator))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleImagePlane(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelSpacing))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ImageOrientationPatient))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ImagePositionPatient))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMultiFrameOverlay(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfFramesInOverlay))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleGeneralReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedImageSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ReferencedInstanceSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DerivationDescription))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DerivationCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SourceImageSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SourceInstanceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleUSRegionCalibration(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SequenceOfUltrasoundRegions))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleGeneralEquipment(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(Manufacturer))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(InstitutionName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(InstitutionAddress))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(StationName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(InstitutionalDepartmentName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ManufacturerModelName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DeviceSerialNumber))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SoftwareVersions))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GantryID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SpatialResolution))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DateOfLastCalibration))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeOfLastCalibration))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelPaddingValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnhancedGeneralEquipmentIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(Manufacturer))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(ManufacturerModelName))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(DeviceSerialNumber))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(SoftwareVersions))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleNMTomoAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"GATED TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON GATED TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleNMMultiGatedAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"GATED TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON GATED TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleNMPhase(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"DYNAMIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleNMReconstruction(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON GATED TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleSpecimen(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContainerIdentifier))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(IssuerOfTheContainerIdentifierSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(AlternateContainerIdentifierSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ContainerTypeCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ContainerDescription))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ContainerComponentSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SpecimenDescriptionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleDXDetector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DetectorType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXAXRFMultiFramePresentation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PreferredPlaybackSequencing))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FrameDisplaySequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RecommendedViewingMode))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DisplayFilterPercentage))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RecommendedViewingModeIsSUB(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RecommendedViewingMode),-1,"SUB")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeVersionRequired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"BI")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SCPECG")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"BARI")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"NCDR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpecimenIsSlide(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"SM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsSM(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"SM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpecimenNeedsDescription(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;


	return (condition0 & 1) != 0;
}

bool
Condition_NeedMeasurementUnitsCodeSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(NumericValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MeasurementUnitsCodeSequencePresentAndNumericValueAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MeasurementUnitsCodeSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(NumericValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"NUMERIC")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FloatingPointValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RationalNumeratorValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RationalDenominatorValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(MeasurementUnitsCodeSequence))?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(Date))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUMERIC")?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(Time))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(Date))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsDate(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATE")?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TIME")?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(Date))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsPersonName(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"PNAME")?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(Date))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsTextValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TEXT")?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(Date))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionContextItemIsConceptCodeSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"CODE")?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(Date))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ConceptNameCodeSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ConceptNameCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnformattedTextValueNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(UnformattedTextValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ContextIdentifierIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContextIdentifier))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExtendedCodingScheme(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ContextGroupExtensionFlag),-1,"Y")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SamplesPerPixelGreaterThanOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationNeedsPalette(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"PALETTE COLOR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImagePixelMacroNeedsPaletteDescriptor(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"PALETTE COLOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"COLOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"MIXED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImagePixelMacroNeedsPaletteDescriptorAndNotSegmentedLegallyPresentInPaletteColorModule(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"PALETTE COLOR")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"COLOR")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"MIXED")?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(SegmentedRedPaletteColorLookupTableData))?1:0);
	condition1 &=(ElementPresent(list,TagFromName(SegmentedGreenPaletteColorLookupTableData))?1:0);
	condition1 &=(ElementPresent(list,TagFromName(SegmentedBluePaletteColorLookupTableData))?1:0);
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.6.1")?1:0);
	condition2 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.3.1")?1:0);
	condition1 &=condition2;
}
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NeedsNonSegmentedLookupTableData(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(SegmentedRedPaletteColorLookupTableData))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(SegmentedGreenPaletteColorLookupTableData))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(SegmentedBluePaletteColorLookupTableData))?1:0);
	condition0 |=condition1;
}
	condition0 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.11.3")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.11.4")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.39.1")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedsSegmentedLookupTableData(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RedPaletteColorLookupTableData))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(GreenPaletteColorLookupTableData))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(BluePaletteColorLookupTableData))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.11.3")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.11.4")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.39.1")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationIsPaletteColor(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"PALETTE COLOR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationIsMonochrome1(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME1")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationIsMonochrome(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME1")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationNeedsOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"PALETTE COLOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME1")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationIsGrayscaleOrAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PhotometricInterpretation))?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME1")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationIsColor(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME1")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhotometricInterpretationNeedsThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"RGB")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL_422")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_PARTIAL_422")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_PARTIAL_420")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_RCT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_ICT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SOPClassIsCTOrMR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedMRImageStorageSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedMRColorImageStorageSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MRSpectroscopyStorageSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MRImageStorageSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedCTImageStorageSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,CTImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsCTOrMR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"MR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"CT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientOrientationRequired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedMRImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedMRColorImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MRSpectroscopyStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MRImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,CTImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedCTImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,NuclearMedicineImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,NuclearMedicineImageStorageRetiredSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,PETImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,EnhancedPETImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,ParametricMapStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RTDoseStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VLWholeSlideMicroscopyImageStorageSOPClassUID)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 &=condition2;
}
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_DXPatientOrientationRequired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ViewCodeSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"SRT")?1:0);
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(ViewCodeSequence),-1,"G-8300")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(ViewCodeSequence),-1,"G-8310")?1:0);
	condition1 &=condition2;
}
	condition0 |=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MRIsNotEchoPlanarOrIsSegmentedKSpace(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(ScanningSequence),-1,"EP")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(SequenceVariant),-1,"SK")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRIsInversionRecovery(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ScanningSequence),-1,"IR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRIsCardiacOrPulseGated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ScanOptions),-1,"CG")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ScanOptions),-1,"PPG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NMIsWholeBody(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(NuclearMedicineSeriesType),-1,"WHOLE BODY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CurveDataDescriptorPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentMasked(list,TagFromName(CurveDataDescriptor),0xff00)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityLUTSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ModalityLUTSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleSlopePresentAndNotIdentity(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleSlope))?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(RescaleIntercept),-1,NotEquals,0)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(RescaleSlope),-1,NotEquals,1)?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleInterceptPresentAndNotIdentity(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleIntercept))?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(RescaleIntercept),-1,NotEquals,0)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(RescaleSlope),-1,NotEquals,1)?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleInterceptPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleIntercept))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleInterceptNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RescaleIntercept))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleTypeIsPresentAndNotHU(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleType))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RescaleType),-1,"HU")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergyAcquisitionOrRescaleTypeIsPresentAndNotHU(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RescaleType))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RescaleType),-1,"HU")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleTypeIsPresentAndNotHUAndImageIsOriginalNotLocalizerAndNotMultienergyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleType))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RescaleType),-1,"HU")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ImageType),2,"LOCALIZER")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RescaleTypeIsPresentAndIsHUAndImageIsOriginalLocalizerAndNotMultienergyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RescaleType))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(RescaleType),-1,"HU")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(ImageType),2,"LOCALIZER")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_KVPNotEmptyWhenAlsoPresentInMultienergyCTAcquisitionSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(KVP),-1,"")?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(KVP),TagFromName(MultienergyCTAcquisitionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WindowCenterPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(WindowCenter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WindowCenterNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(WindowCenter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MonochromeAndWindowCenterNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(WindowCenter))?1:0);
	condition0 &=(BinaryValueMatch(rootlist,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(RedPaletteColorLookupTableDescriptor))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VOILUTSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(VOILUTSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MonochromeAndVOILUTSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(VOILUTSequence))?1:0);
	condition0 &=(BinaryValueMatch(rootlist,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(RedPaletteColorLookupTableDescriptor))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfFramesPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3WholeBodyOrStatic(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"WHOLE BODY")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"STATIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3WholeBody(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"WHOLE BODY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Gated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"GATED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Dynamic(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"DYNAMIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Tomo(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3GatedTomo(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"GATED TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3ReconTomo(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3ReconGatedTomo(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON GATED TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3TomoFamily(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"GATED TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON TOMO")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RECON GATED TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue4TransmissionAndNotTomo(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"STATIC")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"WHOLE BODY")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(ImageType),3,"TRANSMISSION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue4Transmission(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),3,"TRANSMISSION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsEnergyWindowVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0010))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsDetectorVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0020))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsPhaseVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0030))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsRotationVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0050))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsRRIntervalVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0060))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsTimeSlotVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0070))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsSliceVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0080))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsAngularViewVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0090))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsTimeSliceVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0054,0x0100))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsInstanceNumber(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0020,0x0013))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsImageTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0008,0x0033))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TriggerVectorIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TriggerVector))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsFrameTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x1063))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsFrameTimeVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x1065))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3BiplaneAOrB(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"BIPLANE A")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"BIPLANE B")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OneOverlayForBothPlanesOfBiplane(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(OverlayPlanes),-1,Equals,1)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(ImageType),2,"BIPLANE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PositionerMotionDynamic(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PositionerMotion),-1,"DYNAMIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TableMotionDynamic(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TableMotion),-1,"DYNAMIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(Exposure))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayTubeCurrentAndExposureTimeNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(XRayTubeCurrent))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ExposureTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DeviceDiameterIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DeviceDiameter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShutterShapeIsAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ShutterShape))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShutterShapeIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ShutterShape))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShutterShapeIsRectangular(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ShutterShape),-1,"RECTANGULAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShutterShapeIsCircular(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ShutterShape),-1,"CIRCULAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShutterShapeIsPolygonal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ShutterShape),-1,"POLYGONAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CollimatorShapeIsRectangular(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CollimatorShape),-1,"RECTANGULAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CollimatorShapeIsCircular(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CollimatorShape),-1,"CIRCULAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CollimatorShapeIsPolygonal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CollimatorShape),-1,"POLYGONAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MaskOperationIsTID(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MaskOperation),-1,"TID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MaskOperationIsAvgSub(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MaskOperation),-1,"AVG_SUB")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleFramePointers(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RepresentativeFrameNumber))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FrameNumbersOfInterest))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FrameOfInterestDescription))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMask(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MaskSubtractionSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RecommendedViewingMode))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleDisplayShutter(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ShutterShape))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ShutterShape),-1,"BITMAP")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterLeftVerticalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterRightVerticalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterUpperHorizontalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterLowerHorizontalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(CenterOfCircularShutter))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RadiusOfCircularShutter))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(VerticesOfThePolygonalShutter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleDevice(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DeviceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleIntervention(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(InterventionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayCollimator(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CollimatorShape))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayTable(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TableMotion))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TableAngle))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayNeedModuleModalityLUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PixelIntensityRelationship),-1,"LOG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleBiplaneOverlay(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(OverlayPlanes))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(OverlayPlaneOrigin))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayTomographyAcquisitionBasedOnScanOptions(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ScanOptions),-1,"TOMO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedToCheckModuleXRayTomographyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TomoLayerHeight))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleFileMetaInformation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=GroupPresent(list,TagFromName(FileMetaInformationVersion))?1:0;

	return (condition0 & 1) != 0;
}

bool
Condition_PrivateInformationCreatorUIDPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PrivateInformationCreatorUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPixelComponentOrganization(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelComponentMask))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelComponentRangeStart))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelComponentRangeStop))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelComponentPhysicalUnits))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelComponentDataType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(NumberOfTableBreakPoints))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TableOfXBreakPoints))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TableOfYBreakPoints))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(NumberOfTableEntries))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TableOfPixelValues))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TableOfParameterValues))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelComponentOrganization))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationIs0Or1(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,0)?1:0);
	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationIs0(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationIs1(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationIs2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,2)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationIs3(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,3)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelComponentOrganizationIs2Or3(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,2)?1:0);
	condition0 |=(BinaryValueMatch(list,TagFromName(PixelComponentOrganization),-1,Equals,3)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_US8BitSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"RGB")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL_422")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_PARTIAL_422")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_US8Or16BitSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"PALETTE COLOR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_USNeedsColorByPlaneOrPixel(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"RGB")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_USNeedsColorByPlane(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_USNeedsColorByPixel(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL_422")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_PARTIAL_422")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectorySOPInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"IMAGE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"OVERLAY")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"MODALITY LUT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"VOI LUT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"CURVE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"VISIT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RESULTS")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"INTERPRETATION")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STUDY COMPONENT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"FILM SESSION")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"FILM BOX")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"IMAGE BOX")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STORED PRINT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT DOSE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT STRUCTURE SET")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT PLAN")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT TREAT RECORD")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"PRESENTATION")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"WAVEFORM")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"SR DOCUMENT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"KEY OBJECT DOC")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"SPECTROSCOPY")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RAW DATA")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"REGISTRATION")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"FIDUCIAL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"ENCAP DOC")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"HL7 STRUC DOC")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"HANGING PROTOCOL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"VALUE MAP")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STEREOMETRIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsPatient(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"PATIENT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsStudy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STUDY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsSeries(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"SERIES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"IMAGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsOverlay(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"OVERLAY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsModalityLUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"MODALITY LUT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsVOILUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"VOI LUT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsCurve(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"CURVE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsTopic(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"TOPIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsVisit(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"VISIT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsResults(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RESULTS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsInterpretation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"INTERPRETATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsStudyComponent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STUDY COMPONENT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsPrintQueue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"PRINT QUEUE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsFilmSession(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"FILM SESSION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsFilmBox(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"FILM BOX")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsImageBox(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"IMAGE BOX")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsStoredPrint(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STORED PRINT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRTDose(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT DOSE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRTStructureSet(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT STRUCTURE SET")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRTPlan(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT PLAN")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRTTreatmentRecord(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RT TREAT RECORD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsPresentation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"PRESENTATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsWaveform(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"WAVEFORM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsSRDocument(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"SR DOCUMENT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsKeyObjectDocument(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"KEY OBJECT DOC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsSpectroscopy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"SPECTROSCOPY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRawData(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"RAW DATA")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRegistration(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"REGISTRATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsFiducial(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"FIDUCIAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsEncapsulatedDocument(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"ENCAP DOC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsHL7StructuredDocument(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"HL7 STRUC DOC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsHangingProtocol(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"HANGING PROTOCOL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsRealWorldValueMapping(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"VALUE MAP")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsStereometricRelationship(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"STEREOMETRIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsSurface(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"SURFACE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsPrivate(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"PRIVATE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DirectoryRecordTypeIsMRDR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DirectoryRecordType),-1,"MRDR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSOPInstanceUIDInFileIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedSOPInstanceUIDInFile))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTPrescription(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PrescriptionDescription))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DoseReferenceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTToleranceTables(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ToleranceTableSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTIonToleranceTables(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(IonToleranceTableSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTPatientSetup(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PatientSetupSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTFractionScheme(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FractionGroupSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRTBeams(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FractionGroupSequence))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(NumberOfBeams))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBeams),-1,GreaterThan,0)?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BeamSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRTIonBeams(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FractionGroupSequence))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(NumberOfBeams))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBeams),-1,GreaterThan,0)?1:0);
	condition0 |=(ElementPresent(list,TagFromName(IonBeamSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRTBrachyApplicationSetups(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FractionGroupSequence))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(NumberOfBrachyApplicationSetups))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBrachyApplicationSetups),-1,GreaterThan,0)?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BrachyTreatmentTechnique))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BrachyTreatmentType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TreatmentMachineSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ApplicationSetupSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseDataGridbased(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(InstanceNumber))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelSpacing))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ImageOrientationPatient))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ImagePositionPatient))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SliceThickness))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SamplesPerPixel))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PhotometricInterpretation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(Rows))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(Columns))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BitsAllocated))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BitsStored))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(HighBit))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelRepresentation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PixelData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseDataGridbasedAndNeedModuleMultiFrame(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(InstanceNumber))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PixelSpacing))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ImageOrientationPatient))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ImagePositionPatient))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(SliceThickness))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(SamplesPerPixel))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PhotometricInterpretation))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Rows))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Columns))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BitsAllocated))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BitsStored))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(HighBit))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PixelRepresentation))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PixelData))?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition1 &=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,GreaterThan,1)?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_DoseDataPointsOrCurves(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(StructureSetLabel))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ROIContourSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RTDoseROISequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTDVH(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedStructureSetSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DVHNormalizationPoint))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DVHNormalizationDoseValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DVHSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3SimulatorOrPortal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"SIMULATOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"PORTAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3SimulatorOrPortalOrRadiograph(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"SIMULATOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"PORTAL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RADIOGRAPH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3SimulatorOrRadiograph(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"SIMULATOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"RADIOGRAPH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Portal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"PORTAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Fluence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"FLUENCE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTImagePlaneIsNonNormal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RTImagePlane),-1,"NON_NORMAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedExposureSequenceReferencedFrameNumber(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTBeamLimitingDeviceTypeMLCXOrMLCY(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RTBeamLimitingDeviceType),-1,"MLCX")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(RTBeamLimitingDeviceType),-1,"MLCY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfBlocksNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfBlocks))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBlocks),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfRangeShiftersNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfRangeShifters))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfRangeShifters),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfLateralSpreadingDevicesNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfLateralSpreadingDevices))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfLateralSpreadingDevices),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfRangeModulatorsNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfRangeModulators))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfRangeModulators),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfBeamsNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfBeams))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBeams),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfBrachyApplicationSetupsNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfBrachyApplicationSetups))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBrachyApplicationSetups),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfWedgesNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfWedges))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfWedges),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfCompensatorsNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfCompensators))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfCompensators),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedSourceToCompensatorDistance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MaterialID))?1:0);
	condition0 &=(ValuePresent(list,TagFromName(MaterialID),-1)?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CompensatorMountingPosition))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(CompensatorMountingPosition),-1,"DOUBLE_SIDED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedIsocenterToCompensatorDistance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MaterialID))?1:0);
	condition0 &=(ValuePresent(list,TagFromName(MaterialID),-1)?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CompensatorMountingPosition))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(CompensatorMountingPosition),-1,"DOUBLE_SIDED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NumberOfBoliNotZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfBoli))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(NumberOfBoli),-1,GreaterThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelDataPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FloatPixelDataPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FloatPixelData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoubleFloatPixelDataPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DoubleFloatPixelData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedReferencedRTPlanSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"PLAN")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"MULTI_PLAN")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"FRACTION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BEAM")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BRACHY")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"FRACTION_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BEAM_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BRACHY_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"CONTROL_POINT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedReferencedFractionGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"FRACTION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BEAM")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BRACHY")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"FRACTION_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BEAM_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BRACHY_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"CONTROL_POINT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedReferencedBeamSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BEAM")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BEAM_SESSION")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"CONTROL_POINT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseSummationTypeControlPoint(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"CONTROL_POINT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedReferencedBrachyApplicationSetupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BRACHY")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(DoseSummationType),-1,"BRACHY_SESSION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedGridFrameOffsetVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x3004,0x000C))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RTPlanGeometryIsPatient(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RTPlanGeometry),-1,"PATIENT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanIntentIsVerification(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PlanIntent),-1,"VERIFICATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseReferenceStructureTypePointOrVolume(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DoseReferenceStructureType),-1,"POINT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DoseReferenceStructureType),-1,"VOLUME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseReferenceStructureTypeCoordinates(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DoseReferenceStructureType),-1,"COORDINATES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientAdditionalPositionNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PatientAdditionalPosition))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientPositionNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PatientPosition))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BrachyTreatmentTypePDR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BrachyTreatmentType),-1,"PDR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SourceApplicatorNumberPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SourceApplicatorNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SourceMovementTypeStepwise(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SourceMovementType),-1,"STEPWISE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TransferTubeNumberNotNull(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TransferTubeNumber))?1:0);
	condition0 &=(ValuePresent(list,TagFromName(TransferTubeNumber),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ApprovalStatusApprovedOrRejected(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ApprovalStatus),-1,"APPROVED")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ApprovalStatus),-1,"REJECTED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedReferencedFrameNumberInContourImageSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;


	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRTTreatmentSummaryRecord(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CurrentTreatmentStatus))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleCalculatedDoseReferenceRecord(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CalculatedDoseReferenceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMeasuredDoseReferenceRecord(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MeasuredDoseReferenceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MeasuredDoseReferenceNumberNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(MeasuredDoseReferenceNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedMeasuredDoseReferenceNumberNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedMeasuredDoseReferenceNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedDoseReferenceNumberNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedDoseReferenceNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedCalculatedDoseReferenceNumberNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedCalculatedDoseReferenceNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CalculatedDoseReferenceNumberNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(CalculatedDoseReferenceNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NominalBeamEnergyIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NominalBeamEnergy))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BrachyTreatmentTypeIsPDR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BrachyTreatmentType),-1,"PDR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TransferTubeNumberIsNotEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ValuePresent(list,TagFromName(TransferTubeNumber),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SourceIsNotGammaEmitter(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(ReferenceAirKermaRate),-1,Equals,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModulePETMultigatedAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SeriesType),0,"GATED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETSeriesType2Reprojection(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SeriesType),1,"REPROJECTION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETSeriesType1Gated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SeriesType),0,"GATED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETSeriesType1Dynamic(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SeriesType),0,"DYNAMIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETSeriesType1GatedAndBeatRejection(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SeriesType),0,"DYNAMIC")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(BeatRejectionFlag))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(BeatRejectionFlag),-1,"Y")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DecayCorrectionNotNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DecayCorrection))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(DecayCorrection),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TypeOfDataIsBloodSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TypeOfData))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TypeOfData),-1,"BLDSMPL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AxisUnitsIncludesCounts(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TypeOfData),-1,"CNTS")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(TypeOfData),-1,"CPS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayAcquisitionDose(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(KVP))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrent))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrentInuA))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrentInmA))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureTime))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureTimeInuS))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureTimeInms))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(Exposure))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureInuAs))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureInmAs))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DistanceSourceToDetector))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DistanceSourceToPatient))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ImageAndFluoroscopyAreaDoseProduct))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BodyPartThickness))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(EntranceDose))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposedArea))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DistanceSourceToEntrance))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(CommentsOnRadiationDose))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayOutput))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(HalfValueLayer))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(OrganDose))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(OrganExposed))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(AnodeTargetMaterial))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterMaterial))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterThicknessMaximum))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterThicknessMinimum))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RectificationType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayGeneration(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(KVP))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrent))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrentInuA))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrentInmA))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureTime))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureTimeInuS))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureTimeInms))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(Exposure))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureInuAs))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureInmAs))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureControlMode))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureControlModeDescription))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ExposureStatus))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PhototimerSetting))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FocalSpots))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(AnodeTargetMaterial))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RectificationType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayTubeCurrentInmAIsPresentAndOthersAreNot(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(XRayTubeCurrentInmA))?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(XRayTubeCurrent),-1)?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(XRayTubeCurrentInuA),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureTimeInmsIsPresentAndOthersAreNot(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ExposureTimeInms))?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(ExposureTime),-1)?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(ExposureTimeInuS),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureInmAsIsPresentAndOthersAreNot(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ExposureInmAs))?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(Exposure),-1)?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(ExposureInuAs),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayFiltration(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FilterType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterMaterial))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterThicknessMaximum))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterThicknessMinimum))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleDXPositioning(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ProjectionEponymousNameCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PatientPosition))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ViewPosition))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ViewCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ViewModifierCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PatientOrientationCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(EstimatedRadiographicMagnificationFactor))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PositionerType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DetectorPrimaryAngle))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DetectorSecondaryAngle))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ColumnAngulation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TableAngle))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRayGrid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(Grid))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridAbsorbingMaterial))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridSpacingMaterial))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridThickness))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridPitch))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridAspectRatio))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridPeriod))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(GridFocalDistance))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DXNeedModuleVOILUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleImageHistogram(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(HistogramSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageLateralityNotSent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ImageLaterality))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SeriesNeedReferencedPerformedProcedureStepSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedPerformedProcedureStepSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorisSNM3(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SNM3")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ForPresentationAndWindowCenterNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WindowCenter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ForPresentationAndVOILUTSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(VOILUTSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewRotationOrFieldOfViewHorizontalFlipPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewRotation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewHorizontalFlip))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewRotationPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewRotation))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewHorizontalFlipPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewHorizontalFlip))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoPrimaryAnatomicStructureSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentAbove(parentlist,TagFromName(PrimaryAnatomicStructureSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoAnatomicRegionModifierSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentWithin(list,TagFromName(AnatomicRegionModifierSequence),TagFromName(AnatomicRegionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleSoftcopyVOILUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SoftcopyVOILUTSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RequireTextObjectSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TextObjectSequence))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(GraphicObjectSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RequireGraphicObjectSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(GraphicObjectSequence))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(TextObjectSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BoundingBoxTopLeftHandCornerPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(BoundingBoxTopLeftHandCorner))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BoundingBoxTopLeftHandCornerOrBottomRightHandCornerPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(BoundingBoxTopLeftHandCorner))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BoundingBoxBottomRightHandCorner))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BoundingBoxTopLeftHandCornerOrBottomRightHandCornerNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(BoundingBoxTopLeftHandCorner))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(BoundingBoxBottomRightHandCorner))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnchorPointNeeded(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(BoundingBoxTopLeftHandCorner))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(BoundingBoxBottomRightHandCorner))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnchorPointPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AnchorPoint))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnchorPointNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(AnchorPoint))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BoundingBoxNeeded(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(BoundingBoxTopLeftHandCorner))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BoundingBoxBottomRightHandCorner))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(AnchorPoint))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PresentationLUTShapeNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PresentationLUTShape))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PresentationLUTSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PresentationLUTSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DisplayOrBitmapDisplayShutterModulePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ShutterShape))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterLeftVerticalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterRightVerticalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterUpperHorizontalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterLowerHorizontalEdge))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(CenterOfCircularShutter))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RadiusOfCircularShutter))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(VerticesOfThePolygonalShutter))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterPresentationValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ShutterOverlayGroup))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DisplayOrBitmapDisplayShutterModulePresentAndNotGrayscaleSoftcopyPresentationState(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,GrayscaleSoftcopyPresentationStateStorageSOPClassUID)?1:0);
	condition0 &=(ElementPresent(list,TagFromName(ShutterShape))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MaskModulePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MaskSubtractionSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RecommendedViewingMode))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleBitmapDisplayShutter(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ShutterShape),-1,"BITMAP")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleOverlayActivation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(OverlayActivationLayer))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(CurveActivationLayer))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleGraphicAnnotation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(GraphicAnnotationSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleSpatialTransformation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ImageRotation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ImageHorizontalFlip))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleGraphicLayer(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(GraphicLayerSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3StereoLOrR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"STEREO L")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"STEREO R")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RequirePresentationPixelSpacing(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PresentationSizeMode),-1,"TRUE SIZE")?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(PresentationPixelAspectRatio))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RequirePresentationPixelAspectRatio(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PresentationPixelSpacing))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RequirePresentationPixelMagnificationRatio(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PresentationSizeMode),-1,"MAGNIFY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VerificationFlagIsVerified(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(VerificationFlag),-1,"VERIFIED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VerificationFlagIsVerifiedAndCompletionFlagIsNotComplete(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(CompletionFlag),-1,"COMPLETE")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(VerificationFlag),-1,"VERIFIED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TemplateExtensionFlagIsY(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TemplateExtensionFlag),-1,"Y")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsText(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TEXT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsNum(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"NUMERIC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsCode(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"CODE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsDateTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATETIME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsDate(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TIME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsPersonName(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"PNAME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsUID(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"UIDREF")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedConceptName(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TEXT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"CODE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATETIME")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TIME")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"PNAME")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"UIDREF")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsTextOrNumericOrCodeOrDateTimeOrDateOrTimeOrPersonNameOrUIDOrContainer(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TEXT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"CODE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATETIME")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"DATE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TIME")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"PNAME")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"UIDREF")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"CONTAINER")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"IMAGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsWaveform(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"WAVEFORM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsComposite(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"COMPOSITE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsCompositeOrImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"COMPOSITE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"IMAGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsCompositeOrImageOrWaveform(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"COMPOSITE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"IMAGE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"WAVEFORM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsSpatialCoordinates(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"SCOORD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsSpatialCoordinates3D(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"SCOORD3D")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsTemporalCoordinates(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"TCOORD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedDateTimeOrReferencedTimeOffsets(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedDateTime))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedTimeOffsets))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedDateTimeOrReferencedSamplePositions(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedSamplePositions))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedDateTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedTimeOffsetsOrReferencedSamplePositions(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedSamplePositions))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedTimeOffsets))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ValueTypeIsContainer(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ValueType),-1,"CONTAINER")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RelationshipByReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ValueType))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(ReferencedContentItemIdentifier))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RelationshipType),-1,"CONTAINS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RelationshipByValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ValueType))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedContentItemIdentifier))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleWaveformAnnotation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(WaveformAnnotationSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReallyNeedModuleSynchronization(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(WaveformOriginality),-1,"ORIGINAL")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationFrameOfReferenceUID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationTrigger))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TriggerSourceOrType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationChannel))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(AcquisitionTimeSynchronized))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeSource))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeDistributionProtocol))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleSynchronizationForIVUS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"IVUS")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationFrameOfReferenceUID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationTrigger))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TriggerSourceOrType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationChannel))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(AcquisitionTimeSynchronized))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeSource))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeDistributionProtocol))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedToCheckModuleSynchronization(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SynchronizationFrameOfReferenceUID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationTrigger))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TriggerSourceOrType))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(SynchronizationChannel))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(AcquisitionTimeSynchronized))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeSource))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(TimeDistributionProtocol))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTimeSynchronizedIsY(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTimeSynchronized),-1,"Y")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ChannelSensitivityIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ChannelSensitivity))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ChannelSampleSkewNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ChannelSampleSkew))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ChannelTimeSkewNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ChannelTimeSkew))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnnotationNeedsReferencedSamplePositions(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TemporalRangeType))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedTimeOffsets))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedDateTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnnotationNeedsReferencedTimeOffsets(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TemporalRangeType))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedSamplePositions))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedDateTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnnotationNeedsReferencedDateTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TemporalRangeType))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedSamplePositions))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedTimeOffsets))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleCineForSC(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x1063))?1:0);
	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x1065))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsPageNumberVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x2001))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsFrameLabelVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x2002))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsFramePrimaryAngleVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x2003))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsFrameSecondaryAngleVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x2004))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsSliceLocationVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x2005))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameIncrementPointerContainsDisplayWindowLabelVector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(FrameIncrementPointer),-1,Tag(0x0018,0x2006))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MonochromeNotBitmapPhotometricInterpretation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(BitsStored),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConversionTypeDigitizedFilm(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ConversionType),-1,"DF")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NotSCMultiFrameOrNumberOfFramesGreaterThanOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.7.1")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.7.2")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.7.3")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.7.4")?1:0);
	condition0 |=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsIVUS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"IVUS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IVUSAcquisitionIsMotor(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(IVUSAcquisition),-1,"MOTOR_PULLBACK")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IVUSAcquisitionIsGated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(IVUSAcquisition),-1,"GATED_PULLBACK")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IVUSAcquisitionIsMotorOrGated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(IVUSAcquisition),-1,"MOTOR_PULLBACK")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(IVUSAcquisition),-1,"GATED_PULLBACK")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CertifiedTimestampIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CertifiedTimestamp))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMRPulseSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PulseSequenceName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(MRAcquisitionType))?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),0,"ORIGINAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMRSpectroscopyPulseSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PulseSequenceName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(MRSpectroscopyAcquisitionType))?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),0,"ORIGINAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleCardiacSynchronization(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CardiacSynchronizationTechnique))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleRespiratorySynchronization(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleBulkMotion(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(BulkMotionCompensationTechnique))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleSupplementalPaletteColorLUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"COLOR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"MIXED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StackIDIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(StackID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRealWorldValueFirstValueMapped(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelData))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RealWorldValueLUTData))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(DoubleFloatRealWorldValueFirstValueMapped))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRealWorldValueLastValueMapped(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelData))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(RealWorldValueLUTData))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(DoubleFloatRealWorldValueLastValueMapped))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDoubleFloatRealWorldValueFirstValueMapped(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RealWorldValueFirstValueMapped))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDoubleFloatRealWorldValueLastValueMapped(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RealWorldValueLastValueMapped))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRealWorldValueSlopeAndIntercept(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FloatPixelData))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DoubleFloatPixelData))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(RealWorldValueLUTData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueLUTDataNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RealWorldValueLUTData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueInterceptNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RealWorldValueIntercept))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacSynchronizationTechniqueNotNoneAndOriginalOrMixed(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CardiacSynchronizationTechnique))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacSynchronizationTechniqueProspectiveOrRetrospective(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"PROSPECTIVE")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"RETROSPECTIVE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratoryMotionCompensationTechniqueNotNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratoryMotionCompensationTechniqueNotNoneOrRealTimeOrBreathHoldAndOriginalOrMixed(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RespiratoryMotionCompensationTechnique),-1,"BREATH_HOLD")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(RespiratoryMotionCompensationTechnique),-1,"REALTIME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BulkMotionCompensationTechniqueNotNoneAndOriginalOrMixed(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(BulkMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(BulkMotionCompensationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1Original(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1Derived(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1NotDerived(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixed(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"MIXED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedOrWholeSlide(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,VLWholeSlideMicroscopyImageStorageSOPClassUID)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"MIXED")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConverted(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"MIXED")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"MIXED")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedCT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"MIXED")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalAndNotLegacyConvertedPET(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndRectilinear(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(GeometryOfKSpaceTraversal),-1,"RECTILINEAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAnd3D(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(MRAcquisitionType),-1,"3D")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndSpectroscopyVolume(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(MRSpectroscopyAcquisitionType),-1,"VOLUME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1OriginalOrMixedAndEchoPulseSequenceNotGradient(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(EchoPulseSequence),-1,"GRADIENT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3ASL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"ASL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConcatenationUIDIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ConcatenationUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InConcatenationTotalNumberIsLessThanOrEqualToOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(InConcatenationTotalNumber),-1,LessThanOrEquals,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConcatenationAttributesArePresentAndTotalNumberIfPresentGreaterThanOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(ConcatenationFrameOffsetNumber))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ConcatenationUID))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(SOPInstanceUIDOfConcatenationSource))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(InConcatenationNumber))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(InConcatenationTotalNumber))?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(InConcatenationTotalNumber))?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(InConcatenationTotalNumber),-1,GreaterThan,1)?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedImageSequenceIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedImageSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedImageSequenceIsPresentInFunctionalGroups(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ReferencedImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SourceImageSequenceIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SourceImageSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SourceImageSequenceIsPresentInFunctionalGroups(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(SourceImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(SourceImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ImageType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameTypeNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(FrameType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GradientOutputIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(GradientOutput))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GradientOutputTypeIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(GradientOutputType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InversionRecoveryIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(InversionRecovery),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FlowCompensationNotNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(FlowCompensation),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EchoPulseSequenceGradientOrBoth(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(EchoPulseSequence),-1,"GRADIENT")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(EchoPulseSequence),-1,"BOTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PartialFourierIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PartialFourier),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ParallelAcquisitionIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ParallelAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TaggingIsGridOrLine(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Tagging),-1,"GRID")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(Tagging),-1,"LINE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TaggingIsGrid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Tagging),-1,"GRID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReceiveCoilTypeIsMultiCoil(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReceiveCoilType),-1,"MULTICOIL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DiffusionDirectionalityIsDirectional(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DiffusionDirectionality),-1,"DIRECTIONAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DiffusionDirectionalityIsBMatrix(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DiffusionDirectionality),-1,"BMATRIX")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDiffusionAnisotropyType(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),3,"DIFFUSION_ANISO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageFunctionalGroupPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageFunctionalGroupNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageFunctionalGroupNotPresentOrFrameOfReferenceUIDPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FrameOfReferenceUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RadiopharmaceuticalUsageSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RadiopharmaceuticalUsageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RadiopharmaceuticalUsageSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RadiopharmaceuticalUsageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentIdentificationSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(SegmentIdentificationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentIdentificationSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(SegmentIdentificationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequenceAndPlanePositionSequenceOrPlaneOrientationSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequenceAndPlanePositionSequenceOrPlaneOrientationSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlaneOrientationSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlaneOrientationSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlanePositionSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlanePositionSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageSequenceNotInSharedFunctionalGroupSequenceAndPixelMeasuresPlanePositionPlaneOrientationNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageSequenceNotInPerFrameFunctionalGroupSequenceAndPixelMeasuresPlanePositionPlaneOrientationNotPresentInEitherMBPO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition2 =0;
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition2 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameAnatomySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameAnatomySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameAnatomySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameAnatomySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameAnatomySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameAnatomySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRImageFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRImageFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRSpectroscopyFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRSpectroscopyFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MRSpectroscopyFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRSpectroscopyFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PETFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRealWorldValueMappingMacroInSharedFunctionalGroupSequenceIfMultienergy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRealWorldValueMappingMacroInPerFrameFunctionalGroupSequenceIfMultienergy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(rootlist,TagFromName(CardiacSynchronizationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(rootlist,TagFromName(CardiacSynchronizationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequenceRegardlessOfImageType(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(CardiacSynchronizationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequenceRegardlessOfImageType(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(CardiacSynchronizationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(rootlist,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"REALTIME")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"BREATH_HOLD")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(ElementPresent(rootlist,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"REALTIME")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"BREATH_HOLD")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequenceRegardlessOfImageType(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"REALTIME")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"BREATH_HOLD")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequenceRegardlessOfImageType(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(RespiratoryMotionCompensationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"REALTIME")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"BREATH_HOLD")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPatientPhysiologicalStateMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PatientPhysiologicalStateSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"REST")?1:0);
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"STRESS")?1:0);
	condition0 &=condition1;
}
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PatientPhysiologicalStateSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPatientPhysiologicalStateMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PatientPhysiologicalStateSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"REST")?1:0);
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"STRESS")?1:0);
	condition0 &=condition1;
}
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PatientPhysiologicalStateSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRTimingAndRelatedParametersMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRTimingAndRelatedParametersSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRTimingAndRelatedParametersSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRTimingAndRelatedParametersMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRTimingAndRelatedParametersSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRTimingAndRelatedParametersSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRFOVGeometryMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(GeometryOfKSpaceTraversal),-1,"RECTILINEAR")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRFOVGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRFOVGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRFOVGeometryMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(GeometryOfKSpaceTraversal),-1,"RECTILINEAR")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRFOVGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRFOVGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRSpectroscopyFOVGeometryMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(GeometryOfKSpaceTraversal),-1,"RECTILINEAR")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRSpectroscopyFOVGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRSpectroscopyFOVGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRSpectroscopyFOVGeometryMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(GeometryOfKSpaceTraversal),-1,"RECTILINEAR")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRSpectroscopyFOVGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRSpectroscopyFOVGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMREchoMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MREchoSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MREchoSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMREchoMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MREchoSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MREchoSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRModifierMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRModifierSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRModifierSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRModifierMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRModifierSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRModifierSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRImagingModifierMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRImagingModifierSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRImagingModifierSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRImagingModifierMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRImagingModifierSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRImagingModifierSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRReceiveCoilMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRReceiveCoilSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRReceiveCoilSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRReceiveCoilMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRReceiveCoilSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRReceiveCoilSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRTransmitCoilMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRTransmitCoilSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRTransmitCoilSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRTransmitCoilMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRTransmitCoilSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRTransmitCoilSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRDiffusionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(AcquisitionContrast),-1,"DIFFUSION")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRDiffusionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRDiffusionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRDiffusionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(AcquisitionContrast),-1,"DIFFUSION")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRDiffusionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRDiffusionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRSpatialSaturationMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(SpatialPresaturation),-1,"SLAB")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRSpatialSaturationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRSpatialSaturationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRSpatialSaturationMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(SpatialPresaturation),-1,"SLAB")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRSpatialSaturationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRSpatialSaturationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRAveragesMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRAveragesSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRAveragesSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRAveragesMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRAveragesSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRAveragesSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRMetaboliteMapMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"METABOLITE_MAP")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRMetaboliteMapSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRMetaboliteMapSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRMetaboliteMapMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"METABOLITE_MAP")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRMetaboliteMapSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRMetaboliteMapSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRVelocityEncodingMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhaseContrast),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRVelocityEncodingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRVelocityEncodingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRVelocityEncodingMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhaseContrast),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRVelocityEncodingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRVelocityEncodingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRArterialSpinLabelingMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"ASL")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRArterialSpinLabelingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(MRArterialSpinLabelingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedMRArterialSpinLabelingMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"ASL")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MRArterialSpinLabelingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MRArterialSpinLabelingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PhaseContrastIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PhaseContrast),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETFrameAcquisitionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETFrameAcquisitionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PETFrameAcquisitionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETFrameAcquisitionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETFrameAcquisitionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETFrameAcquisitionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETDetectorMotionDetailsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETDetectorMotionDetailsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 &=~(StringValueMatch(rootlist,TagFromName(TypeOfDetectorMotion),-1,"STATIONARY")?1:0);
	condition0 &=condition1;
}
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PETDetectorMotionDetailsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETDetectorMotionDetailsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETDetectorMotionDetailsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 &=~(StringValueMatch(rootlist,TagFromName(TypeOfDetectorMotion),-1,"STATIONARY")?1:0);
	condition0 &=condition1;
}
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETDetectorMotionDetailsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETPositionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PETPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETPositionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETFrameCorrectionFactorsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETFrameCorrectionFactorsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PETFrameCorrectionFactorsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETFrameCorrectionFactorsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETFrameCorrectionFactorsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETFrameCorrectionFactorsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETReconstructionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETReconstructionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PETReconstructionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETReconstructionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETReconstructionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETReconstructionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETTableDynamicsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETTableDynamicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 &=(StringValueMatch(rootlist,TagFromName(TableMotion),-1,"DYNAMIC")?1:0);
	condition0 &=condition1;
}
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PETTableDynamicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPETTableDynamicsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PETTableDynamicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition1 &=(StringValueMatch(rootlist,TagFromName(TableMotion),-1,"DYNAMIC")?1:0);
	condition0 &=condition1;
}
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PETTableDynamicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LossyImageCompressionIs01(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(LossyImageCompression),-1,"01")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VolumeLocalizationTechniqueNotNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(VolumeLocalizationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DecouplingIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Decoupling),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DataPointRowsGreaterThanOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(DataPointRows),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FirstOrderPhaseCorrectionIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(FirstOrderPhaseCorrection),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ClinicalTrialSubjectReadingIDAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ClinicalTrialSubjectReadingID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ClinicalTrialSubjectIDAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ClinicalTrialSubjectID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleClinicalTrialSubject(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSponsorName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialProtocolID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialProtocolName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSiteID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSiteName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSubjectID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSubjectReadingID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialProtocolEthicsCommitteeName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialProtocolEthicsCommitteeApprovalNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleClinicalTrialStudy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialTimePointID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialTimePointDescription))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ConsentForClinicalTrialUseSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleClinicalTrialSeries(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialCoordinatingCenterName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSeriesID))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialSeriesDescription))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleEnhancedContrastBolus(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContrastBolusAgentSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleMultiFrameDimension(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DimensionOrganizationSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(DimensionIndexSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiFrameFunctionalGroupsModuleIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(ContrastBolusAgentSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ContrastBolusUsageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ContrastBolusUsageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(ContrastBolusAgentSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ContrastBolusUsageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ContrastBolusUsageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ParametricMapFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ParametricMapFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ParametricMapFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ParametricMapFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTImageFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTImageFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTAcquisitionTypeMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTAcquisitionTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTAcquisitionTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTAcquisitionTypeMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTAcquisitionTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTAcquisitionTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTAcquisitionDetailsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTAcquisitionDetailsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTAcquisitionDetailsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTAcquisitionDetailsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTAcquisitionDetailsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTAcquisitionDetailsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTTableDynamicsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTTableDynamicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTTableDynamicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTTableDynamicsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTTableDynamicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTTableDynamicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTPositionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTPositionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTGeometryMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTGeometryMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTReconstructionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTReconstructionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTReconstructionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTReconstructionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTReconstructionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTReconstructionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTExposureMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTExposureSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTExposureSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTExposureMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTExposureSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTExposureSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTXRayDetailsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTXRayDetailsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTXRayDetailsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCTXRayDetailsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(AcquisitionType),-1,"CONSTANT_ANGLE")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTXRayDetailsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTXRayDetailsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTAdditionalXRaySourceMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTAdditionalXRaySourceSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(CTAdditionalXRaySourceSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTAdditionalXRaySourceMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CTAdditionalXRaySourceSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CTAdditionalXRaySourceSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergyCTProcessingMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MultienergyCTProcessingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(MultienergyCTProcessingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergyCTProcessingMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MultienergyCTProcessingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MultienergyCTProcessingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergyCTCharacteristicsMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MultienergyCTCharacteristicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(MultienergyCTCharacteristicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergyCTCharacteristicsMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(MultienergyCTCharacteristicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(MultienergyCTCharacteristicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTypeConstantAngle(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionType),-1,"CONSTANT_ANGLE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConvolutionKernelIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ConvolutionKernel))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReconstructionFieldOfViewAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReconstructionFieldOfView))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReconstructionDiameterAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReconstructionDiameter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureModulationTypeIsNotNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(ExposureModulationType),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiFrameIODAndNotSpecimen(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(SpecimenAccessionNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VOILUTSequenceLUTDescriptorRequiredToBe8Or16(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedImageSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedImageSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameOfReferenceUIDNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(FrameOfReferenceUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FiducialIdentifierNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(FiducialIdentifier))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ContourDataIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContourData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ContourDataNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ContourData))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameOfReferenceUIDIsPresentInParent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentAbove(parentlist,TagFromName(FrameOfReferenceUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGTransferSyntaxButNotYBR_FULL_422(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.50")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_FULL_422")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEG2000LosslessTransferSyntaxButNotYBR_RCT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.90")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_RCT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEG2000TransferSyntaxButNotYBR_RCTOrYBR_ICT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.91")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_RCT")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(PhotometricInterpretation),-1,"YBR_ICT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLossyTransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.50")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.51")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.52")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.53")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.54")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.55")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.56")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.59")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.60")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.61")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.62")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.63")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.64")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLossyTransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.50")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.51")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.52")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.53")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.54")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.55")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.56")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.59")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.60")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.61")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.62")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.63")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.64")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLosslessTransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.57")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.58")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.65")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.66")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.70")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLosslessTransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.57")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.58")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.65")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.66")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.70")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLSLosslessTransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.80")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLSLosslessTransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.80")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLSNearLosslessTransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.81")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEGLSNearLosslessTransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.81")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEG2000LosslessTransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.90")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEG2000LosslessTransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.90")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_JPEG2000TransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.90")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.91")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_JPEG2000TransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.90")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.91")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntax(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UncompressedTransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.1")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.2")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_UncompressedTransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.1")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.2")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RLETransferSyntaxAndOneSample(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,1)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.5")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RLETransferSyntaxAndThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.5")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntaxAndNotThreeSamples(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(BinaryValueMatch(list,TagFromName(SamplesPerPixel),-1,Equals,3)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntaxAndNotBitsAllocated8(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(BinaryValueMatch(list,TagFromName(BitsAllocated),-1,Equals,8)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntaxAndNotBitsStored8(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(BinaryValueMatch(list,TagFromName(BitsStored),-1,Equals,8)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntaxAndNotHighBit7(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(BinaryValueMatch(list,TagFromName(HighBit),-1,Equals,7)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntaxAndNotPixelRepresentation0(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(BinaryValueMatch(list,TagFromName(PixelRepresentation),-1,Equals,0)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2TransferSyntaxAndNotPlanarConfiguration0(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(BinaryValueMatch(list,TagFromName(PixelRepresentation),-1,Equals,0)?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPMLTransferSyntaxAndColumnsGreaterThan720(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(Columns),-1,GreaterThan,720)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPMLTransferSyntaxAndRowsGreaterThan480NTSCOr576PAL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(Rows),-1,GreaterThan,576)?1:0);
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(Rows),-1,GreaterThan,480)?1:0);
{
	int condition3 =0;
	condition3 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,NotEquals,40)?1:0);
{
	int condition4 =0;
	condition4 |=(ElementPresent(list,TagFromName(CineRate))?1:0);
	condition4 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,NotEquals,25)?1:0);
	condition3 |=condition4;
}
	condition2 &=condition3;
}
	condition1 |=condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPHLTransferSyntaxAndRowsNot720Or1080(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(Rows),-1,Equals,720)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(Rows),-1,Equals,1080)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPHLTransferSyntaxAndColumnsNot1280Or1920(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(Columns),-1,Equals,1280)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(Columns),-1,Equals,1920)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPHLTransferSyntaxAndColumnsInconsistentWithRows(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(Rows),-1,Equals,720)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(Columns),-1,Equals,1280)?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(Rows),-1,Equals,1080)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(Columns),-1,Equals,1920)?1:0);
	condition1 |=condition2;
}
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPMLTransferSyntaxAndFrameTimeNotNTSCOrPAL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,40)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,33)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPMLTransferSyntaxAndCineRateNotNTSCOrPAL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CineRate))?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,25)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,30)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPMLTransferSyntaxAndCineRateInconsistentWithFrameTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CineRate))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(FrameTime))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,40)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,25)?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,33)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,30)?1:0);
	condition1 |=condition2;
}
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPHLTransferSyntaxAndFrameTimeNotValid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,40)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,33)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,20)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,16)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPHLTransferSyntaxAndCineRateNotValid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CineRate))?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,25)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,30)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,50)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,60)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_MPEG2MPHLTransferSyntaxAndCineRateInconsistentWithFrameTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(CineRate))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(FrameTime))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,40)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,25)?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,33)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,30)?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,20)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,50)?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(BinaryValueMatch(list,TagFromName(FrameTime),-1,Equals,16)?1:0);
	condition2 &=(BinaryValueMatch(list,TagFromName(CineRate),-1,Equals,60)?1:0);
	condition1 |=condition2;
}
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_UnwantedPixelAspectRatioWhenMPEG2MPHLTransferSyntax(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition0 &=(ElementPresent(list,TagFromName(PixelAspectRatio))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(Modality))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnatomicRegionSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(AnatomicRegionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnatomicRegionSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AnatomicRegionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageSetSelectorCategoryIsRelativeTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageSetSelectorCategory),-1,"RELATIVE_TIME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RelativeTimePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RelativeTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageSetSelectorCategoryIsAbstractPriorAndAbstractPriorCodeSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageSetSelectorCategory),-1,"ABSTRACT_PRIOR")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(AbstractPriorCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageSetSelectorCategoryIsAbstractPriorAndAbstractPriorValueNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageSetSelectorCategory),-1,"ABSTRACT_PRIOR")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(AbstractPriorValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ScreenMinimumColorBitDepthNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ScreenMinimumColorBitDepth))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ScreenMinimumGrayscaleBitDepthNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ScreenMinimumGrayscaleBitDepth))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLayoutTypeIsTiled(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageBoxLayoutType),-1,"TILED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLayoutTypeIsCine(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageBoxLayoutType),-1,"CINE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLayoutTypeIsStack(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageBoxLayoutType),-1,"STACK")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(ImageBoxTileHorizontalDimension),-1,GreaterThan,1)?1:0);
	condition0 |=(BinaryValueMatch(list,TagFromName(ImageBoxTileVerticalDimension),-1,GreaterThan,1)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(ImageBoxLayoutType),-1,"TILED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxSmallScrollTypePresentWithValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ImageBoxSmallScrollType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLargeScrollTypePresentWithValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ImageBoxLargeScrollType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLayoutTypeIsCineAndCineRelativeToRealTimeNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageBoxLayoutType),-1,"CINE")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(CineRelativeToRealTime))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxLayoutTypeIsCineAndRecommendedDisplayFrameRateNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageBoxLayoutType),-1,"CINE")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(RecommendedDisplayFrameRate))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(SelectorAttribute))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributePresentAndFilterByOperatorNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SelectorAttribute))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(FilterByOperator))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FilterByCategoryNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(FilterByCategory))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeOrFilterByCategoryAndFilterByOperatorPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SelectorAttribute))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterByCategory))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(FilterByOperator))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeAndFilterByOperatorPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SelectorAttribute))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(FilterByOperator))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributePresentAndFilterByAttributePresenceNotPresentOrFilterByCategoryPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SelectorAttribute))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(FilterByAttributePresence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(FilterByCategory))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SortByCategoryNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(SortByCategory))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SelectorAttribute))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReformattingOperationTypeIsSlabOrMPR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReformattingOperationType),-1,"SLAB")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ReformattingOperationType),-1,"MPR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReformattingOperationTypeIsMPROr3D(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReformattingOperationType),-1,"MPR")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ReformattingOperationType),-1,"3D_RENDERING")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReformattingOperationTypeIs3D(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReformattingOperationType),-1,"3D_RENDERING")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsAT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"AT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsCS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"CS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsIS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"IS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsLO(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"LO")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsLT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"LT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsPN(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"PN")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsSH(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"SH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsST(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"ST")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsUT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"UT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsDS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"DS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsFD(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"FD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsFL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"FL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsUL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"UL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsUS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"US")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsSL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"SL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsSS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"SS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorAttributeVRIsSQ(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SelectorAttributeVR),-1,"SQ")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientEyeMovementCommandedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PatientEyeMovementCommanded),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PupilDilatedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PupilDilated),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PartialViewIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PartialView),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPaddingValueIsAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PixelPaddingValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPaddingValueIsPresentAndInstanceIsNotAnImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelPaddingValue))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(PixelData))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(PixelDataProviderURL))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelSpacingCalibrationTypeIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelSpacingCalibrationType))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientIdentityRemovedAndNotDeidentificationMethodCodeSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PatientIdentityRemoved),-1,"YES")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(DeidentificationMethodCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientIdentityRemovedAndNotDeidentificationMethod(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PatientIdentityRemoved),-1,"YES")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(DeidentificationMethod))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TransferSyntaxIsReferencedPixelData(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.94")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.95")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelDataProviderURLIsAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PixelDataProviderURL))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SOPClassIsEnhancedXAXRF(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.12.1.1")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(SOPClassUID),-1,"1.2.840.10008.5.1.4.1.1.12.2.1")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MaskOperationIsRevTID(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MaskOperation),-1,"REV_TID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MaskOperationIsTIDOrRevTID(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MaskOperation),-1,"TID")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(MaskOperation),-1,"REV_TID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsMR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(Modality),-1,"MR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsCT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(Modality),-1,"CT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsMROrPET(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(Modality),-1,"MR")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(Modality),-1,"PT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsocenterPositionIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(IsocenterPosition))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RadiationTypeIsIon(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RadiationType),-1,"ION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CompensatorMountingPositionNotDoubleSided(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(CompensatorMountingPosition),-1,"DOUBLE_SIDED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RangeModulatorTypeIsWhlModWeights(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RangeModulatorType),-1,"WHL_MODWEIGHTS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ScanModeAboveIsModulatedOrModulatedSpec(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(parentlist,TagFromName(ScanMode),-1,"MODULATED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ScanModeIsModulatedSpec(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ScanMode),-1,"MODULATED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanesInAcquisitionNotUndefined(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(ImageType),-1,"UNDEFINED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PositionerIsCArm(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PositionerType),-1,"CARM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PositionerIsCArmWithTableTopRelationship(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PositionerType),-1,"CARM")?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CArmPositionerTabletopRelationshipIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PositionerIsColumn(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PositionerType),-1,"COLUMN")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BitsAllocatedIs8(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(BitsAllocated),-1,Equals,8)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BitsAllocatedIs16(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(BitsAllocated),-1,Equals,16)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BitsStoredIs8(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(BitsStored),-1,Equals,8)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BitsStoredGreaterThan8(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(BitsStored),-1,GreaterThan,8)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureInmAsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ExposureInmAs))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayTubeCurrentInmAOrExposureTimeInmsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(XRayTubeCurrentInmA))?1:0);
	condition0 |=~(ElementPresent(list,TagFromName(ExposureTimeInms))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsocenterReferenceSystemSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(IsocenterReferenceSystemSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayReceptorTypeIsImageIntensifier(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(XRayReceptorType),-1,"IMG_INTENSIFIER")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(XRayReceptorType),-1,"IMG_INTENSIFIER")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayReceptorTypeIsDigitalDetector(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(XRayReceptorType),-1,"DIGITAL_DETECTOR")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(XRayReceptorType),-1,"DIGITAL_DETECTOR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureControlSensingRegionShapeIsRectangular(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExposureControlSensingRegionShape),-1,"RECTANGULAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureControlSensingRegionShapeIsCircular(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExposureControlSensingRegionShape),-1,"CIRCULAR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExposureControlSensingRegionShapeIsPolygonal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExposureControlSensingRegionShape),-1,"POLYGONAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GeometricalPropertiesIsNonUniform(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GeometricalProperties),-1,"NON_UNIFORM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DistanceObjectToTableTopNotEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ValuePresent(list,TagFromName(DistanceObjectToTableTop),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WaveformSampleInterpretationNeeds8Bit(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(WaveformSampleInterpretation),-1,"SB")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(WaveformSampleInterpretation),-1,"UB")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(WaveformSampleInterpretation),-1,"MB")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(WaveformSampleInterpretation),-1,"AB")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WaveformSampleInterpretationNeeds16Bit(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(WaveformSampleInterpretation),-1,"SS")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(WaveformSampleInterpretation),-1,"US")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InstitutionCodeSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(InstitutionCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InstitutionNameNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(InstitutionName))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ObserverTypeIsPerson(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ObserverType),-1,"PSN")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ObserverTypeIsDevice(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ObserverType),-1,"DEV")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanePositionSequenceOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlaneOrientationSequenceOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlaneOrientationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelValueTransformationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RealWorldValueMappingSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ReferencedImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ReferencedImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FramePixelShiftMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FramePixelShiftSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FramePixelShiftSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FramePixelShiftMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FramePixelShiftSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FramePixelShiftSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameDisplayShutterMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameDisplayShutterSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameDisplayShutterSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameDisplayShutterMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameDisplayShutterSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameDisplayShutterSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFrameCharacteristicsMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XAXRFFrameCharacteristicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(XAXRFFrameCharacteristicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFrameCharacteristicsMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XAXRFFrameCharacteristicsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XAXRFFrameCharacteristicsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayExposureControlSensingRegionsMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ExposureControlSensingRegionsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(ExposureControlSensingRegionsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayExposureControlSensingRegionsMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ExposureControlSensingRegionsSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ExposureControlSensingRegionsSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayCalibrationDeviceUsageMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CalibrationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(CalibrationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayCalibrationDeviceUsageMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CalibrationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CalibrationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayObjectThicknessMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ObjectThicknessSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(ObjectThicknessSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayObjectThicknessMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ObjectThicknessSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ObjectThicknessSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFrameAcquisitionMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameAcquisitionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameAcquisitionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFrameAcquisitionMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameAcquisitionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameAcquisitionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayIsocenterReferenceSystemMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IsocenterReferenceSystemSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(IsocenterReferenceSystemSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayIsocenterReferenceSystemMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IsocenterReferenceSystemSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IsocenterReferenceSystemSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientOrientationInFrameMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientOrientationInFrameMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(TemporalPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(TemporalPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(TemporalPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(TemporalPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequenceAndNotCardiacOrRespiratoryEvent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(TemporalPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(TemporalPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequenceAndNotCardiacOrRespiratoryEvent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(TemporalPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(TemporalPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CardiacSynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(RespiratorySynchronizationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameVOILUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageDataTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ImageDataTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageDataTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ImageDataTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IrradiationEventIdentificationMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IrradiationEventIdentificationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(IrradiationEventIdentificationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IrradiationEventIdentificationMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IrradiationEventIdentificationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IrradiationEventIdentificationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IrradiationEventIdentificationSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IrradiationEventIdentificationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IrradiationEventIdentificationSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IrradiationEventIdentificationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConversionSourceAttributesSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ConversionSourceAttributesSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConversionSourceAttributesSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ConversionSourceAttributesSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FramePixelDataPropertiesSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FramePixelDataPropertiesSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FramePixelDataPropertiesSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FramePixelDataPropertiesSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPixelIntensityRelationshipLUTMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PixelIntensityRelationship),-1,"LOG")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelIntensityRelationshipLUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelIntensityRelationshipLUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPixelIntensityRelationshipLUTMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PixelIntensityRelationship),-1,"LOG")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelIntensityRelationshipLUTSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelIntensityRelationshipLUTSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPatientOrientationInFrameMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPatientOrientationInFrameMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PatientOrientationInFrameSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FieldOfViewSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FieldOfViewSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayFieldOfViewMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(IsocenterReferenceSystemSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FieldOfViewSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(FieldOfViewSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayFieldOfViewMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(IsocenterReferenceSystemSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FieldOfViewSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FieldOfViewSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFrameDetectorParametersMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFrameDetectorParametersMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayFrameDetectorParametersMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(XRayReceptorType),-1,"DIGITAL_DETECTOR")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayFrameDetectorParametersMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(XRayReceptorType),-1,"DIGITAL_DETECTOR")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameDetectorParametersSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayProjectionPixelCalibrationMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ProjectionPixelCalibrationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ProjectionPixelCalibrationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayProjectionPixelCalibrationMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ProjectionPixelCalibrationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ProjectionPixelCalibrationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayPositionerMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PositionerPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PositionerPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayPositionerMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PositionerPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PositionerPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayTablePositionMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(TablePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(TablePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayTablePositionMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(TablePositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(TablePositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CollimatorShapeSequenceSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CollimatorShapeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CollimatorShapeSequenceSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CollimatorShapeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayCollimatorMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CollimatorShapeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(CollimatorShapeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayCollimatorMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(CollimatorShapeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(CollimatorShapeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayGeometryMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXRayGeometryMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(CArmPositionerTabletopRelationship),-1,"YES")?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ResponsiblePersonIsPresentWithValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ResponsiblePerson))?1:0);
	condition0 &=(ValuePresent(list,TagFromName(ResponsiblePerson),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsHuman(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(PatientSpeciesCodeSequence),-1,"SRT")?1:0);
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85B00")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85003")?1:0);
	condition1 &=condition2;
}
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(PatientSpeciesDescription))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PatientSpeciesCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PatientBreedDescription))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(PatientBreedCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(BreedRegistrationSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(StrainDescription))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(StrainNomenclature))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(StrainCodeSequence))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(StrainAdditionalInformation))?1:0);
	condition1 &=~(ElementPresent(list,TagFromName(StrainStockSequence))?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_IsAnimal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(PatientSpeciesCodeSequence),-1,"SRT")?1:0);
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85B00")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85003")?1:0);
	condition1 &=condition2;
}
	condition0 |=~condition1;
}
{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(PatientSpeciesDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientSpeciesCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BreedRegistrationSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainNomenclature))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainAdditionalInformation))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainStockSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_IsAnimalAndPatientSpeciesCodeSequenceAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PatientSpeciesCodeSequence))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(PatientSpeciesCodeSequence),-1,"SRT")?1:0);
{
	int condition3 =0;
{
	int condition4 =0;
	condition4 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85B00")?1:0);
	condition4 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85003")?1:0);
	condition3 |=~condition4;
}
	condition2 &=condition3;
}
	condition1 |=condition2;
}
	condition1 |=(ElementPresent(list,TagFromName(PatientSpeciesDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BreedRegistrationSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainNomenclature))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainAdditionalInformation))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainStockSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_IsAnimalAndPatientSpeciesDescriptionAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PatientSpeciesDescription))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(PatientSpeciesCodeSequence),-1,"SRT")?1:0);
{
	int condition3 =0;
{
	int condition4 =0;
	condition4 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85B00")?1:0);
	condition4 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85003")?1:0);
	condition3 |=~condition4;
}
	condition2 &=condition3;
}
	condition1 |=condition2;
}
	condition1 |=(ElementPresent(list,TagFromName(PatientSpeciesCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BreedRegistrationSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainNomenclature))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainAdditionalInformation))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainStockSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_IsAnimalAndPatientBreedCodeSequenceEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(SequenceHasItems(list,TagFromName(PatientBreedCodeSequence))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(PatientSpeciesCodeSequence),-1,"SRT")?1:0);
{
	int condition3 =0;
{
	int condition4 =0;
	condition4 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85B00")?1:0);
	condition4 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(PatientSpeciesCodeSequence),-1,"L-85003")?1:0);
	condition3 |=~condition4;
}
	condition2 &=condition3;
}
	condition1 |=condition2;
}
	condition1 |=(ElementPresent(list,TagFromName(PatientSpeciesDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientSpeciesCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PatientBreedCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BreedRegistrationSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainDescription))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainNomenclature))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainAdditionalInformation))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(StrainStockSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_DetectorTypeIsStorage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DetectorType),-1,"STORAGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DetectorTypeIsNotStorage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(DetectorType),-1,"STORAGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsACR(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"ACR")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsASTMSigpurpose(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"ASTM-sigpurpose")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsC4(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"C4")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsC5(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"C5")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsCD2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"CD2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsDCM(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"DCM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsDCMUID(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"DCMUID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsHPC(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"HPC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsI10(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"I10")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsI10P(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"I10P")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsI9(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"I9")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsI9C(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"I9C")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsISO3166_1(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"ISO3166_1")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsISO639_1(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"ISO639_1")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsISO639_2(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"ISO639_2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsLN(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"LN")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsPOS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"POS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsRFC3066(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"RFC3066")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsSNM3(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SNM3")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsSCT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SCT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsSRT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SRT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsCTV3(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"CTV3")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsUCUM(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"UCUM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsUMLS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"UMLS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorIsUPC(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"UPC")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPaddingRangeLimitIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelPaddingRangeLimit))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientPositionAndPatientOrientationCodeSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PatientPosition))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(PatientOrientationCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VOILUTSequencePresentAndPresentationIntentTypeIsNotForPresentation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(VOILUTSequence))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WindowCenterPresentAndPresentationIntentTypeIsNotForPresentation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(WindowCenter))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpatialLocationsPreservedReorientedOnly(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SpatialLocationsPreserved),-1,"REORIENTED_ONLY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnwantedPixelAspectRatioWhenPixelSpacingPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelAspectRatio))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(PixelSpacing))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnwantedPixelAspectRatioWhenImagerPixelSpacingPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelAspectRatio))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(ImagerPixelSpacing))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnwantedPixelAspectRatioWhenNominalScannedPixelSpacingPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelAspectRatio))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(NominalScannedPixelSpacing))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnwantedPixelAspectRatioWhenSharedPixelMeasuresMacro(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelAspectRatio))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnwantedPixelAspectRatioWhenPerFramePixelMeasuresMacro(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelAspectRatio))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PixelMeasuresSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionIndexPointerIsNotFunctionalGroup(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9304))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9301))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9360))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9321))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9312))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9329))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9326))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9314))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9308))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9325))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9455))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9118))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9407))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9341))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9172))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0008,0x9124))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9434))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9432))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9417))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9071))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9451))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9472))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0028,0x9443))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0028,0x9415))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0028,0x9132))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9807))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0052,0x0027))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0052,0x0029))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0052,0x0025))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9477))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9462))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9251))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9119))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9117))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9114))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9125))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9226))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9006))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9152))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9115))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9042))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9107))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9103))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9227))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9112))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9049))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9197))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0022,0x0031))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0048,0x0207))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9456))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9733))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9732))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9736))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9751))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9735))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9749))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9734))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0040,0x9092))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9450))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9771))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0028,0x9422))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0028,0x9110))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0028,0x9145))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9116))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9113))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0048,0x021a))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9405))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9401))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9737))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0040,0x9096))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0008,0x1140))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9253))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0062,0x000a))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0048,0x0110))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9406))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9310))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9476))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9412))?1:0);
	condition0 &=~(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0018,0x9504))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionIndexPointerIsFrameContentSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9111))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionIndexPointerIsDimensionIndexValues(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(TagValueMatch(list,TagFromName(DimensionIndexPointer),-1,Tag(0x0020,0x9157))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacSignalSourcePresentAndCardiacSynchronizationTechniqueIsNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CardiacSignalSource))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacRRIntervalSpecifiedPresentAndCardiacSynchronizationTechniqueIsNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CardiacRRIntervalSpecified))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacBeatRejectionTechniquePresentAndCardiacSynchronizationTechniqueIsNotProspectiveOrRetrospective(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CardiacBeatRejectionTechnique))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"PROSPECTIVE")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"RETROSPECTIVE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LowRRValuePresentAndCardiacSynchronizationTechniqueIsNotProspectiveOrRetrospective(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(LowRRValue))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"PROSPECTIVE")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"RETROSPECTIVE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_HighRRValuePresentAndCardiacSynchronizationTechniqueIsNotProspectiveOrRetrospective(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(HighRRValue))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"PROSPECTIVE")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"RETROSPECTIVE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntervalsAcquiredPresentAndCardiacSynchronizationTechniqueIsNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(IntervalsAcquired))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntervalsRejectedPresentAndCardiacSynchronizationTechniqueIsNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(IntervalsRejected))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratorySignalSourcePresentAndRespiratoryMotionCompensationTechniqueIsNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RespiratorySignalSource))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BulkMotionSignalSourcePresentAndBulkMotionCompensationTechniqueIsNone(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(BulkMotionSignalSource))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(BulkMotionCompensationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedFrameNumberAndReferencedSegmentNumberPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedFrameNumber))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(ReferencedSegmentNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsUltrasoundStageProtocol(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NumberOfStages))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(NumberOfViewsInStage))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(StageName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(StageCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(StageNumber))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ViewName))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(ViewNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NominalScannedPixelSpacingPresentAndConversionTypeNotDigitizedFilmScannedDocumentScannedImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(NominalScannedPixelSpacing))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ConversionType),-1,"DF")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ConversionType),-1,"SD")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ConversionType),-1,"SI")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PartialViewNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PartialView))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodeValueIllegalOrDeprecated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodeValue),-1,"Y-X1770")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodeValue),-1,"Y-X1771")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodeValue),-1,"TBD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodingSchemeDesignatorDeprecated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SRT")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"SNM3")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(CodingSchemeDesignator),-1,"99SDM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodeMeaningIllegalOrDeprecated(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CodeValue),-1,"TBD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LongCodeValueAndURNCodeValueAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(LongCodeValue))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(URNCodeValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodeValueOrLongCodeValuePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CodeValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(LongCodeValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodeValueAndURNCodeValueAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(CodeValue))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(URNCodeValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodeValueAndLongCodeValueAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(CodeValue))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(LongCodeValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedOphthalmicFrameLocationMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(OphthalmicFrameLocationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(OphthalmicFrameLocationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedOphthalmicFrameLocationMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(OphthalmicFrameLocationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(OphthalmicFrameLocationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;


	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicImageOrientationIsTransverse(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(OphthalmicImageOrientation),-1,"TRANSVERSE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSOPClassUIDInFileIsEncapsulatedCDADocument(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUIDInFile),-1,EncapsulatedCDAStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRay3DFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XRay3DFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRay3DFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRay3DFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModulePatientOrientation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PatientOrientationCodeSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PatientGantryRelationshipCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleImageEquipmentCoordinateRelationship(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ImageToEquipmentMappingMatrix))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(EquipmentCoordinateSystemIdentification))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRay3DAngiographicImageContributingSources(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContributingSourcesSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRay3DCraniofacialImageContributingSources(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContributingSourcesSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRay3DAngiographicAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(XRay3DAcquisitionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRay3DCraniofacialAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(XRay3DAcquisitionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleXRay3DReconstruction(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(XRay3DReconstructionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SingleCardiacIntervalAcquired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(IntervalsAcquired),-1,Equals,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CardiacSynchronizationTechniqueOtherThanNoneOrRealTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(CardiacSynchronizationTechnique))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(CardiacSynchronizationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(CardiacSynchronizationTechnique),-1,"REALTIME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRespiratoryIntervalTime(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"NONE")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryMotionCompensationTechnique),-1,"REALTIME")?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(RespiratoryTriggerType),-1,"AMPLITUDE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratoryTriggerTypeTimeOrBoth(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(RespiratoryTriggerType),-1,"TIME")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(RespiratoryTriggerType),-1,"BOTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RespiratoryTriggerTypeAmplitudeOrBoth(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(RespiratoryTriggerType),-1,"AMPLITUDE")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(RespiratoryTriggerType),-1,"BOTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StartingRespiratoryAmplitudeIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(StartingRespiratoryAmplitude))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EndingRespiratoryAmplitudeIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(EndingRespiratoryAmplitude))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlendingSequenceIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(BlendingSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSeriesSequenceIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedSeriesSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnatomicRegionSequenceIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AnatomicRegionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnatomicRegionSequenceIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(AnatomicRegionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(Modality))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AbsoluteChannelDisplayScaleIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(AbsoluteChannelDisplayScale))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FractionalChannelDisplayScaleIsNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(FractionalChannelDisplayScale))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpecimenIdentifierIsPresentWithValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SpecimenIdentifier))?1:0);
	condition0 &=(ValuePresent(list,TagFromName(SpecimenIdentifier),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ROIPhysicalPropertyIsElemFraction(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ROIPhysicalProperty),-1,"ELEM_FRACTION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelSpacingIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelSpacing))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3MissingOrEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ValuePresent(list,TagFromName(ImageType),2)?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue4MissingOrEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ValuePresent(list,TagFromName(ImageType),3)?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),3,"")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LateralityHasNoValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(Laterality))?1:0);
	condition0 &=~(ValuePresent(list,TagFromName(Laterality),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LateralityRequired(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ImageLaterality))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(MeasurementLaterality))?1:0);
	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(FrameAnatomySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(FrameAnatomySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(SegmentSequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,BasicVoiceStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,TwelveLeadECGStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,GeneralECGStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,AmbulatoryECGStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,CardiacElectrophysiologyWaveformStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,RespiratoryWaveformStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(Modality),-1,"ECG")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(Modality),-1,"EPS")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(Modality),-1,"RESP")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(SpecimenDescriptionSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"ABDOMEN")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"ABDOMENPELVIS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"AORTA")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"BACK")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"BLADDER")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"BRAIN")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CEREBELLUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CTSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CERVIX")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CHEST")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CHESTABDOMEN")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CHESTABDPELVIS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CIRCLEOFWILLIS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"COCCYX")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"COLON")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"CORONARYARTERY")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"DUODENUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"WHOLEBODY")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"ESOPHAGUS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"FACE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"GALLBLADDER")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"HEAD")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"HEADNECK")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"HEART")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"ILEUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"ILIUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"JAW")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"JEJUNUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"LARYNX")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"LIVER")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"LSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"LSSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"JAW")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"MAXILLA")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"MEDIASTINUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"MOUTH")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"NECK")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"NECKCHEST")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"NECKCHESTABDOMEN")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"NECKCHESTABDPELV")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"NOSE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"PANCREAS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"PELVIS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"PENIS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"PHARYNX")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"PROSTATE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"RECTUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"SSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"SCALP")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"SKULL")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"SPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"SPLEEN")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"STERNUM")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"STOMACH")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"TSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"TLSPINE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"THYMUS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"THYROID")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"TONGUE")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"TRACHEA")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"URETER")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"URETHRA")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"UTERUS")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"VAGINA")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(BodyPartExamined),-1,"VULVA")?1:0);
	condition0 &=~condition1;
}
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D4000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB57")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-42500")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-41070")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-59490")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-42000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-42300")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-32602")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-32502")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-42100")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D2100")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-60610")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-74000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-DD123")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-A0100")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D6500")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11501")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D00F7")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-83200")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D3000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB55")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB56")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-45526")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11BF0")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-59300")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-42400")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-58200")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D0010")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-56000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-DD163")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-63000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D1100")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D1000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-32000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-58600")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-58400")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-59000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-24100")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-62000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11503")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D00F9")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-28000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D3300")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-2300C")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D1600")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB52")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB53")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB54")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-21000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-65000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-65010")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-65600")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D6000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"R-FAB58")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-91000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D2700")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-55002")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-20101")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-9200B")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-59600")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D4900")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11AD0")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D1160")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D1460")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-59470")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11100")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-58000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-A7010")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D0146")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-C3000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-46460")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-48890")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11210")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-57000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11218")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-42070")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-11502")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D00F8")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D3000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-C8000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-B6000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-53000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-25000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-DD006")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-F1810")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-D4230")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-48817")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-75000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-83000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-88920")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-82000")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(AnatomicRegionSequence),-1,"T-81000")?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(AnatomicRegionSequence),-1,"SRT")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(AnatomicRegionSequence),-1,"SNM3")?1:0);
	condition2 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(AnatomicRegionSequence),-1,"99SDM")?1:0);
	condition1 &=condition2;
}
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(LossyImageCompressionMethod))?1:0);
	condition0 &=(ElementPresent(list,TagFromName(TransferSyntaxUID))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.1")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.1.99")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.2")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.57")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.58")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.65")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.66")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.70")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.80")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.90")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.92")?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.5")?1:0);
	condition0 &=~condition1;
}
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(LossyImageCompressionMethod),-1,"ISO_10918_1")?1:0);
{
	int condition3 =0;
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.50")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.51")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.52")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.53")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.54")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.55")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.56")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.59")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.60")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.61")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.62")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.63")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.64")?1:0);
	condition2 &=~condition3;
}
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(LossyImageCompressionMethod),-1,"ISO_14495_1")?1:0);
{
	int condition3 =0;
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.81")?1:0);
	condition2 &=~condition3;
}
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(LossyImageCompressionMethod),-1,"ISO_15444_1")?1:0);
{
	int condition3 =0;
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.91")?1:0);
	condition2 &=~condition3;
}
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(LossyImageCompressionMethod),-1,"ISO_15444_2")?1:0);
{
	int condition3 =0;
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.93")?1:0);
	condition2 &=~condition3;
}
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(LossyImageCompressionMethod),-1,"ISO_13818_2")?1:0);
{
	int condition3 =0;
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.100")?1:0);
	condition3 |=(StringValueMatch(list,TagFromName(TransferSyntaxUID),-1,"1.2.840.10008.1.2.4.101")?1:0);
	condition2 &=~condition3;
}
	condition1 |=condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_UniversalEntityIDPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(UniversalEntityID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UniversalEntityIDNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(UniversalEntityID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LocalNamespaceEntityIDNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(LocalNamespaceEntityID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CodeMeaningEmptyOrNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(CodeMeaning))?1:0);
	condition0 |=~(ValuePresent(list,TagFromName(CodeMeaning),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnatomicRegionSequencePresentAndEmptyButBodyPartExaminedHasValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AnatomicRegionSequence))?1:0);
	condition0 &=~(SequenceHasItems(list,TagFromName(AnatomicRegionSequence))?1:0);
	condition0 &=(ValuePresent(list,TagFromName(BodyPartExamined),-1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ViewCodeSequenceAbsentOrEmptyButViewPositionHasValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ValuePresent(list,TagFromName(ViewPosition),-1)?1:0);
	condition0 &=~(SequenceHasItems(list,TagFromName(ViewCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InstanceIsNotAnImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(PixelData))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(PixelDataProviderURL))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentationTypeIsBinary(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SegmentationType),-1,"BINARY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentationTypeIsNotBinary(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(SegmentationType),-1,"BINARY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentationTypeIsFractional(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SegmentationType),-1,"FRACTIONAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SegmentAlgorithmTypeIsNotManual(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(SegmentAlgorithmType),-1,"MANUAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InstancesAreReferencedAndStudiesContainingOtherReferencedInstancesSequenceAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(StudiesContainingOtherReferencedInstancesSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(StereoPairsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(RegistrationSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(DeformableRegistrationSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(FiducialSetSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(ReferencedImageRealWorldValueMappingSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_InstancesAreReferencedAndReferencedSeriesSequenceAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedSeriesSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(StereoPairsSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(RegistrationSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(DeformableRegistrationSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(FiducialSetSequence))?1:0);
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ReferencedSOPInstanceUID),TagFromName(ReferencedImageRealWorldValueMappingSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NotSecondaryCaptureSOPClass(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeSingleBitSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeGrayscaleByteSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeGrayscaleWordSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,MultiframeTrueColorSecondaryCaptureImageStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionStartConditionDENS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionStartCondition),-1,"DENS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionStartConditionRDD(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionStartCondition),-1,"RDD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionStartConditionCARD_TRIG(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionStartCondition),-1,"CARD_TRIG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionStartConditionRESP_TRIG(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionStartCondition),-1,"RESP_TRIG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTerminationConditionCNTS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTerminationCondition),-1,"CNTS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTerminationConditionDENS(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTerminationCondition),-1,"DENS")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTerminationConditionRDD(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTerminationCondition),-1,"RDD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTerminationConditionTIME(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTerminationCondition),-1,"TIME")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTerminationConditionCARD_TRIG(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTerminationCondition),-1,"CARD_TRIG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AcquisitionTerminationConditionRESP_TRIG(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(AcquisitionTerminationCondition),-1,"RESP_TRIG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OriginalAndTypeOfDetectorMotionIsStationary(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(TypeOfDetectorMotion),-1,"STATIONARY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DetectorGeometryPresentAndTypeOfDetectorMotionIsNotStationary(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DetectorGeometry))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(TypeOfDetectorMotion),-1,"STATIONARY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsRandomsCorrected(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(RandomsCorrected),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsAttenuationCorrected(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(AttenuationCorrected),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsScatterCorrected(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ScatterCorrected),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsDecayCorrected(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DecayCorrected),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsIterativeReconstruction(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(IterativeReconstructionMethod),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultiEnergyProportionalWeighting(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(DerivationCodeSequence),-1,"113097")?1:0);
	condition0 &=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(DerivationCodeSequence),-1,"DCM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_EnergyWeightingFactorPresentInRoot(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(EnergyWeightingFactor))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1IsOriginal(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ClinicalTrialProtocolEthicsCommitteeApprovalNumberIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ClinicalTrialProtocolEthicsCommitteeApprovalNumber))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ConsentForDistributionFlagIsYesOrWithdrawn(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ConsentForDistributionFlag),-1,"YES")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ConsentForDistributionFlag),-1,"WITHDRAWN")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DistributionTypeIsNotNamedProtocol(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(DistributionType),-1,"NAMED_PROTOCOL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FluenceModeIsNonStandard(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(FluenceMode),-1,"NON_STANDARD")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseSummationTypeIsNotMultiPlanAndReferencedRTPlanSequenceHasMultipleItems(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(DoseSummationType),-1,"MULTI_PLAN")?1:0);
	condition0 &=(SequenceHasMultipleItems(list,TagFromName(ReferencedRTPlanSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoseSummationTypeIsMultiPlanAndReferencedRTPlanSequenceHasLessThanTwoItems(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DoseSummationType),-1,"MULTI_PLAN")?1:0);
{
	int condition1 =0;
	condition1 |=~(SequenceHasItems(list,TagFromName(ReferencedRTPlanSequence))?1:0);
	condition1 |=(SequenceHasOneItem(list,TagFromName(ReferencedRTPlanSequence))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NeedSimpleFrameListInFrameExtractionModule(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(CalculatedFrameList))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(TimeRange))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedCalculatedFrameListInFrameExtractionModule(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(SimpleFrameList))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(TimeRange))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedTimeRangeInFrameExtractionModule(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(SimpleFrameList))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(CalculatedFrameList))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleFrameExtraction(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FrameExtractionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MydriaticAgentConcentrationIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MydriaticAgentConcentration))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1DerivedAndImageTypeValue3MissingOrEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),0,"DERIVED")?1:0);
{
	int condition1 =0;
	condition1 |=~(ValuePresent(list,TagFromName(ImageType),2)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ImageType),2,"")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue1NotDerivedAndImageTypeValueNotMissingOrEmpty(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(list,TagFromName(ImageType),0,"DERIVED")?1:0);
{
	int condition1 =0;
	condition1 |=~(ValuePresent(list,TagFromName(ImageType),2)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ImageType),2,"")?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ASLContextIsControlLOrLabel(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ASLContext),-1,"CONTROL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ASLContext),-1,"LABEL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ASLCrusherFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ASLCrusherFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ASLBolusCutoffFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ASLBolusCutoffFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GraphicTypeIsPOINT(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GraphicType),-1,"POINT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GraphicTypeIsCIRCLE(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GraphicType),-1,"CIRCLE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GraphicTypeIsELLIPSE(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GraphicType),-1,"ELLIPSE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GraphicTypeIsELLIPSOID(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GraphicType),-1,"ELLIPSOID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRay3DReconstructionSequenceIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(XRay3DReconstructionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ModalityIsMG(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Modality),-1,"MG")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ViewModifierCodeSequenceIsMagnificationOrSpotCompression(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;


	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsRectangle(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewDimensionsInFloat))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(FieldOfViewShape),-1,"StringValue=")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsRound(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewDimensionsInFloat))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(FieldOfViewShape),-1,"StringValue=")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsHexagon(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FieldOfViewDimensionsInFloat))?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(FieldOfViewShape),-1,"StringValue=")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleBreastTomosynthesisContributingSources(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ContributingSourcesSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleBreastTomosynthesisAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(XRay3DAcquisitionSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SurfaceProcessingIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SurfaceProcessing),-1,"StringValue=")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AxisOfRotationIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AxisOfRotation))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StudyInstanceUIDIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(StudyInstanceUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PositionerMotionIsPresentAndNumberOfFramesIsAbsentOrOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PositionerMotion))?1:0);
{
	int condition1 =0;
	condition1 |=~(ElementPresent(list,TagFromName(NumberOfFrames))?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,Equals,1)?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RationalNumeratorValueIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RationalNumeratorValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FloatingPointValuePresentButValueTypeIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FloatingPointValue))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RationalNumeratorValuePresentButValueTypeIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RationalNumeratorValue))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RationalDenominatorValueButValueTypeIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RationalDenominatorValue))?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FloatingPointValuePresentButAcquisitionContextItemIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FloatingPointValue))?1:0);
{
	int condition1 =0;
	condition1 |=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUMERIC")?1:0);
	condition1 |=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Date))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RationalNumeratorValuePresentButAcquisitionContextItemIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RationalNumeratorValue))?1:0);
{
	int condition1 =0;
	condition1 |=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUMERIC")?1:0);
	condition1 |=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Date))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RationalDenominatorValuePresentButAcquisitionContextItemIsNotNumeric(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RationalDenominatorValue))?1:0);
{
	int condition1 =0;
	condition1 |=~(StringValueMatch(list,TagFromName(ValueType),-1,"NUMERIC")?1:0);
	condition1 |=~(ElementPresent(list,TagFromName(NumericValue))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Time))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(PersonName))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(TextValue))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ConceptCodeSequence))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(Date))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionIndexSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(rootlist,TagFromName(DimensionIndexSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_InStackPositionNumberIsZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(InStackPositionNumber),-1,Equals,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TemporalPositionIndexIsZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(TemporalPositionIndex),-1,Equals,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionIndexValuesContainsZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(DimensionIndexValues),-1,Equals,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WindowWidthIsNegative(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(WindowWidth),-1,LessThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WindowWidthIsZeroAndSigmoid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(WindowWidth),-1,Equals,0)?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(VOILUTFunction),-1,"SIGMOID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WindowWidthIsLessThanOneAndNotExact(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(WindowWidth),-1,LessThan,1)?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(VOILUTFunction),-1,"LINEAR_EXACT")?1:0);
	condition0 &=~(StringValueMatch(list,TagFromName(VOILUTFunction),-1,"SIGMOID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IVUSAcquisitionIsMotorized(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(IVUSAcquisition),-1,"MOTORIZED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IVUSAcquisitionIsMeasured(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(IVUSAcquisition),-1,"MEASURED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularOCTFrameTypeSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IntravascularOCTFrameTypeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularOCTFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IntravascularOCTFrameTypeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularFrameContentSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IntravascularFrameContentSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularFrameContentSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IntravascularFrameContentSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularFrameContentSequenceNotInSharedFunctionalGroupSequenceAndAcquisitionIsMeasured(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IntravascularFrameContentSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(IVUSAcquisition),-1,"MEASURED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularFrameContentSequenceNotInPerFrameFunctionalGroupSequenceAndAcquisitionIsMeasured(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IntravascularFrameContentSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(IVUSAcquisition),-1,"MEASURED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularOCTFrameContentSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IntravascularOCTFrameContentSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IntravascularOCTFrameContentSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IntravascularOCTFrameContentSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PresentationIntentTypeIsForProcessing(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PresentationIntentType),-1,"FOR PROCESSING")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PresentationIntentTypeIsForPresentation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPresentationIsColorRef(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(PixelPresentation),-1,"COLOR_REF")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RotationalCatheterInformationIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CatheterDirectionOfRotation))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(CatheterRotationalRate))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageBoxOverlapPriorityValueNot1To100(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ImageBoxOverlapPriority))?1:0);
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(ImageBoxOverlapPriority),-1,LessThan,1)?1:0);
	condition1 |=(BinaryValueMatch(list,TagFromName(ImageBoxOverlapPriority),-1,GreaterThan,100)?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_RecommendedDisplayFrameRateNotGreaterThanZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(RecommendedDisplayFrameRate))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(RecommendedDisplayFrameRate),-1,LessThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CineRelativeToRealTimeNotGreaterThanZero(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CineRelativeToRealTime))?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(CineRelativeToRealTime),-1,LessThan,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedPresentationStateOrStereometricInstanceOrInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedPresentationStateSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedStereometricInstanceSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedInstanceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedImageOrStereometricInstanceOrInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedImageSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedStereometricInstanceSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedInstanceSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedPresentationStateOrStereometricInstanceOrImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedPresentationStateSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedStereometricInstanceSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedImageSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NoReferencedPresentationStateOrInstanceOrImage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(ReferencedPresentationStateSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedInstanceSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(ReferencedImageSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleStructuredDisplayAnnotation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(StructuredDisplayTextBoxSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ViewIsCardiacShortOrLongAxis(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ViewCodeSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"SRT")?1:0);
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"SNM3")?1:0);
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"99SDM")?1:0);
	condition0 &=condition1;
}
{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(ViewCodeSequence),-1,"G-A186")?1:0);
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(ViewCodeSequence),-1,"G-A18A")?1:0);
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(ViewCodeSequence),-1,"G-A18B")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ViewIsNotSpecimen(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ViewCodeSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"SRT")?1:0);
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"SNM3")?1:0);
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodingSchemeDesignator),TagFromName(ViewCodeSequence),-1,"99SDM")?1:0);
	condition0 &=condition1;
}
{
	int condition1 =0;
	condition1 |=(ElementStringValueMatchWithin(list,TagFromName(CodeValue),TagFromName(ViewCodeSequence),-1,"G-8310")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_UltrasoundAcquisitionGeometryIsApex(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(UltrasoundAcquisitionGeometry),-1,"APEX")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPatientFrameOfReferenceSource(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ImagePositionPatient),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ImagePositionPatient),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ImageOrientationPatient),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(ImageOrientationPatient),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientFrameOfReferenceSourceIsTable(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PatientFrameOfReferenceSource),-1,"TABLE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PerformedProtocolCodeSequenceIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PerformedProtocolCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPositionMeasuringDeviceUsed(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(VolumetricProperties),-1,"VOLUME")?1:0);
	condition0 &=(StringValueMatch(list,TagFromName(VolumeBasedCalculationTechnique),-1,"NONE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PerformedProtocolTypeIsStaged(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PerformedProtocolType),-1,"STAGED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AnyDataPathAssignmentIsOtherThanPrimaryPValues(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementStringValueMatchWithin(list,TagFromName(DataPathAssignment),TagFromName(DataFrameAssignmentSequence),-1,"PRIMARY_SINGLE")?1:0);
	condition0 |=(ElementStringValueMatchWithin(list,TagFromName(DataPathAssignment),TagFromName(DataFrameAssignmentSequence),-1,"SECONDARY_SINGLE")?1:0);
	condition0 |=(ElementStringValueMatchWithin(list,TagFromName(DataPathAssignment),TagFromName(DataFrameAssignmentSequence),-1,"SECONDARY_HIGH")?1:0);
	condition0 |=(ElementStringValueMatchWithin(list,TagFromName(DataPathAssignment),TagFromName(DataFrameAssignmentSequence),-1,"SECONDARY_LOW")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlendingLUT1TransferFunctionIsConstant(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BlendingLUT1TransferFunction),-1,"CONSTANT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlendingLUT2TransferFunctionIsConstant(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BlendingLUT2TransferFunction),-1,"CONSTANT")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlendingLUT1TransferFunctionIsTable(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BlendingLUT1TransferFunction),-1,"TABLE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RGBLUTTransferFunctionIsTable(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RGBLUTTransferFunction),-1,"TABLE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleEnhancedPaletteColorLookupTable(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DataFrameAssignmentSequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BlendingLUT1Sequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BlendingLUT2Sequence))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(EnhancedPaletteColorLookupTableSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleExcludedIntervals(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ExcludedIntervalsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Localizer(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"LOCALIZER")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3Label(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"LABEL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleICCProfile(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ICCProfile))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleOpticalPath(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(OpticalPathSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpecimenReferenceMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(SpecimenReferenceSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(SpecimenReferenceSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpecimenReferenceMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(SpecimenReferenceSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(SpecimenReferenceSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPlanePositionSlideMacroInSharedFunctionalGroupSequenceForWholeSlideMicroscopy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PlanePositionSlideSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedPlanePositionSlideMacroInPerFrameFunctionalGroupSequenceForWholeSlideMicroscopy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PlanePositionSlideSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedOpticalPathIdentificationMacroInSharedFunctionalGroupSequenceForWholeSlideMicroscopy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(OpticalPathIdentificationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(OpticalPathIdentificationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition1 |=~(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NeedOpticalPathIdentificationMacroInPerFrameFunctionalGroupSequenceForWholeSlideMicroscopy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(OpticalPathIdentificationSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(OpticalPathIdentificationSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition1 |=~(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3LocalizerOrLabelOrOverview(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"LOCALIZER")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"LABEL")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"OVERVIEW")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExtendedDepthOfFieldIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExtendedDepthOfField),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IlluminationColorCodeSequenceNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(IlluminationColorCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IlluminationWaveLengthNotPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(IlluminationWaveLength))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedICCProfileInOpticalPathSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PaletteColorLookupTableSequence))?1:0);
	condition0 |=~(StringValueMatch(rootlist,TagFromName(PhotometricInterpretation),-1,"MONOCHROME2")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedZeroVelocityPixelValue(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(DataType),-1,"TISSUE_VELOCITY")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DataType),-1,"FLOW_VELOCITY")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(DataType),-1,"DIRECTION_POWER")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SpatialTransformOfDoseIsRigidOrNonRigid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(SpatialTransformOfDose),-1,"RIGID")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(SpatialTransformOfDose),-1,"NON_RIGID")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelSpacingRequiredInPixelMeasures(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(ElementPresent(rootlist,TagFromName(VolumetricProperties))?1:0);
	condition1 &=~(StringValueMatch(rootlist,TagFromName(VolumetricProperties),-1,"DISTORTED")?1:0);
	condition1 &=~(StringValueMatch(rootlist,TagFromName(VolumetricProperties),-1,"SAMPLED")?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
	condition1 &=(ElementPresent(rootlist,TagFromName(FrameOfReferenceUID))?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicTomographyImageStorageSOPClassUID)?1:0);
	condition1 &=(StringValueMatch(rootlist,TagFromName(OphthalmicVolumetricPropertiesFlag),-1,"YES")?1:0);
	condition0 |=condition1;
}
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SliceThicknessRequiredInPixelMeasures(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(ElementPresent(rootlist,TagFromName(VolumetricProperties))?1:0);
	condition1 &=~(StringValueMatch(rootlist,TagFromName(VolumetricProperties),-1,"DISTORTED")?1:0);
	condition1 &=~(StringValueMatch(rootlist,TagFromName(VolumetricProperties),-1,"SAMPLED")?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
	condition1 &=(ElementPresent(rootlist,TagFromName(FrameOfReferenceUID))?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicTomographyImageStorageSOPClassUID)?1:0);
	condition1 &=(StringValueMatch(rootlist,TagFromName(OphthalmicVolumetricPropertiesFlag),-1,"YES")?1:0);
	condition0 |=condition1;
}
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,OphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImagePositionPatientNotPresentInEitherSharedOrPerFrameFunctionalGroupsAndEitherFrameTypeIsOriginalAndVolumetricPropertiesIsNotDistortedOrSegmentationWithFrameOfReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ImagePositionPatient),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ImagePositionPatient),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition2 &=~(StringValueMatch(rootlist,TagFromName(VolumetricProperties),-1,"DISTORTED")?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
	condition2 &=(ElementPresent(rootlist,TagFromName(FrameOfReferenceUID))?1:0);
	condition1 |=condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageOrientationPatientNotPresentInEitherSharedOrPerFrameFunctionalGroupsAndEitherFrameTypeIsOriginalAndVolumetricPropertiesIsNotDistortedOrSegmentationWithFrameOfReference(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(ImageOrientationPatient),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ImageOrientationPatient),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
{
	int condition2 =0;
	condition2 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition2 &=~(StringValueMatch(rootlist,TagFromName(VolumetricProperties),-1,"DISTORTED")?1:0);
	condition1 |=condition2;
}
{
	int condition2 =0;
	condition2 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
	condition2 &=(ElementPresent(rootlist,TagFromName(FrameOfReferenceUID))?1:0);
	condition1 |=condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_BitsStoredPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(BitsStored))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_HighBitPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(HighBit))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelRepresentationPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PixelRepresentation))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PlanarConfigurationPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PlanarConfiguration))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FloatPixelPaddingValuePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FloatPixelPaddingValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DoubleFloatPixelPaddingValuePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(DoubleFloatPixelPaddingValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3IsTissueIntensity(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"TISSUE_INTENSITY")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3IsSoundSpeed(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"SOUND_SPEED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3IsAttenuation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"ATTENUATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue3IsSoundSpeedOrAttenuation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"SOUND_SPEED")?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),2,"ATTENUATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisualAcuityTypeCodeSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(VisualAcuityTypeCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RightLensSequenceAndLeftLensSequenceAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RightLensSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(LeftLensSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OptotypeIsLettersNumbersOrPictures(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(Optotype),-1,"LETTERS")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(Optotype),-1,"NUMBERS")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(Optotype),-1,"PICTURES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialMeasurementsDeviceTypeIsUltrasound(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(OphthalmicAxialMeasurementsDeviceType),-1,"ULTRASOUND")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialMeasurementsDeviceTypeIsOptical(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(OphthalmicAxialMeasurementsDeviceType),-1,"OPTICAL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MydriaticAgentConcentrationPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(MydriaticAgentConcentration))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialLengthMeasurementsTypeAboveIsTotalLength(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(parentlist,TagFromName(OphthalmicAxialLengthMeasurementsType),-1,"TOTAL LENGTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialLengthMeasurementsTypeIsTotalLength(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(OphthalmicAxialLengthMeasurementsType),-1,"TOTAL LENGTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialLengthMeasurementsTypeAboveIsLengthSummation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(parentlist,TagFromName(OphthalmicAxialLengthMeasurementsType),-1,"LENGTH SUMMATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialLengthMeasurementsTypeIsLengthSummation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(OphthalmicAxialLengthMeasurementsType),-1,"LENGTH SUMMATION")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialLengthMeasurementsTypeAboveIsSegmentalLength(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(parentlist,TagFromName(OphthalmicAxialLengthMeasurementsType),-1,"SEGMENTAL LENGTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_OphthalmicAxialLengthMeasurementsTypeIsSegmentalLength(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(OphthalmicAxialLengthMeasurementsType),-1,"SEGMENTAL LENGTH")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_RefractiveProcedureOccurredIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(RefractiveProcedureOccurred),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedFrameNumberPresentAndReferencedSOPClassUIDIsNotMultiFrame(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedFrameNumber))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,NuclearMedicineImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,UltrasoundMultiframeImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,MultiframeSingleBitSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,MultiframeGrayscaleByteSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,MultiframeGrayscaleWordSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,MultiframeTrueColorSecondaryCaptureImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,XRayAngiographicImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,XRayAngiographicBiplaneImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,XRayRadioFluoroscopicImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,RTImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,RTDoseStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,VideoEndoscopicImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,VideoMicroscopicImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,VideoPhotographicImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,VLWholeSlideMicroscopyImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedMRImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,MRSpectroscopyStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedMRColorImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedCTImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,OphthalmicPhotography8BitImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,OphthalmicPhotography16BitImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedXAImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedXRFImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,OphthalmicTomographyImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,XRay3DAngiographicImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,XRay3DCraniofacialImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,BreastTomosynthesisImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedPETImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,EnhancedUSVolumeStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,IVOCTImageStorageForProcessingSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,IVOCTImageStorageForPresentationSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,LegacyConvertedEnhancedCTImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,LegacyConvertedEnhancedMRImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,LegacyConvertedEnhancedPETImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,BreastProjectionXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,BreastProjectionXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,ParametricMapStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,WideFieldOphthalmicPhotographyStereographicProjectionImageStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,WideFieldOphthalmicPhotography3DCoordinatesImageStorageSOPClassUID)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSegmentNumberPresentAndReferencedSOPClassUIDIsNotSegmentationOrSurfaceSegmentation(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(ReferencedSegmentNumber))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,SurfaceSegmentationStorageSOPClassUID)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDerivationImageMacroInSharedFunctionalGroupSequenceForBreastProjection(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DerivationImageSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
{
	int condition2 =0;
	condition2 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition2 &=(StringValueMatch(rootlist,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);
	condition1 |=condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDerivationImageMacroInPerFrameFunctionalGroupSequenceForBreastProjection(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(DerivationImageSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
{
	int condition1 =0;
	condition1 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"DERIVED")?1:0);
{
	int condition2 =0;
	condition2 |=(StringValueMatch(rootlist,TagFromName(ImageType),0,"ORIGINAL")?1:0);
	condition2 &=(StringValueMatch(rootlist,TagFromName(PresentationIntentType),-1,"FOR PRESENTATION")?1:0);
	condition1 |=condition2;
}
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_NeedBreastXRayPositionerMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PositionerPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(PositionerPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedBreastXRayPositionerMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(PositionerPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(PositionerPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedBreastXRayDetectorMacroInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DetectorPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(DetectorPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedBreastXRayDetectorMacroInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 &=~(ElementPresentInPathFromRoot(rootlist,TagFromName(DetectorPositionSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(DetectorPositionSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayGeometrySequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayGeometrySequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayGeometrySequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayGeometrySequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayAcquisitionDoseSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayAcquisitionDoseSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayAcquisitionDoseSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayAcquisitionDoseSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsocenterReferenceSystemSequenceNotInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(IsocenterReferenceSystemSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IsocenterReferenceSystemSequenceNotInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(IsocenterReferenceSystemSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayGridMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayGridSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayGridSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayGridMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayGridSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayGridSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFilterMacroOKInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayFilterSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayFilterSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_XRayFilterMacroOKInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(XRayFilterSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(ElementPresentInPathFromRoot(rootlist,TagFromName(XRayFilterSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AlternateBeamDosePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(AlternateBeamDose))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_AlternateBeamDoseTypeSameValueAsBeamDoseType(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(AlternateBeamDose),-1,"PHYSICAL")?1:0);
	condition1 &=(StringValueMatch(list,TagFromName(BeamDoseType),-1,"PHYSICAL")?1:0);
	condition0 |=condition1;
}
{
	int condition1 =0;
	condition1 |=(StringValueMatch(list,TagFromName(AlternateBeamDose),-1,"EFFECTIVE")?1:0);
	condition1 &=(StringValueMatch(list,TagFromName(BeamDoseType),-1,"EFFECTIVE")?1:0);
	condition0 |=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_TrackingIDIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TrackingID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TrackingUIDIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(TrackingUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValuesNotDBTThinThickGenerated2D(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,GreaterThan,1)?1:0);
	condition1 &=(StringValueMatch(list,TagFromName(ImageType),2,"TOMOSYNTHESIS")?1:0);
{
	int condition2 =0;
	condition2 |=(StringValueMatch(list,TagFromName(ImageType),3,"NONE")?1:0);
{
	int condition3 =0;
	condition3 |=(StringValueMatch(list,TagFromName(ImageType),0,"DERIVED")?1:0);
{
	int condition4 =0;
	condition4 |=(StringValueMatch(list,TagFromName(ImageType),3,"MAXIMUM")?1:0);
	condition4 |=(StringValueMatch(list,TagFromName(ImageType),3,"MEAN")?1:0);
	condition4 |=(StringValueMatch(list,TagFromName(ImageType),3,"SUBTRACTION")?1:0);
	condition4 |=(StringValueMatch(list,TagFromName(ImageType),3,"ADDITION")?1:0);
	condition3 &=condition4;
}
	condition2 |=condition3;
}
	condition1 &=condition2;
}
	condition0 |=~condition1;
}
{
	int condition1 =0;
	condition1 |=(BinaryValueMatch(list,TagFromName(NumberOfFrames),-1,Equals,1)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ImageType),0,"DERIVED")?1:0);
	condition1 &=(StringValueMatch(list,TagFromName(ImageType),2,"TOMOSYNTHESIS")?1:0);
	condition1 &=(StringValueMatch(list,TagFromName(ImageType),3,"GENERATED_2D")?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPresentationIsColorRange(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"COLOR_RANGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPresentationIsColorRangeAndPaletteColorLookupTableModuleAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"COLOR_RANGE")?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(RedPaletteColorLookupTableData))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(GreenPaletteColorLookupTableData))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BluePaletteColorLookupTableData))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(SegmentedRedPaletteColorLookupTableData))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(SegmentedGreenPaletteColorLookupTableData))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(SegmentedBluePaletteColorLookupTableData))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(RedPaletteColorLookupTableDescriptor))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(GreenPaletteColorLookupTableDescriptor))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(BluePaletteColorLookupTableDescriptor))?1:0);
	condition0 &=~condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_PixelPresentationIsColorRangeAndPaletteColorLookupTableUIDAbsent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PixelPresentation),-1,"COLOR_RANGE")?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(PaletteColorLookupTableUID))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StoredValueColorRangeSequenceNotInPerFrameFunctionalGroupSequenceAndPixelPresentationIsColorRange(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(StoredValueColorRangeSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PixelPresentation),-1,"COLOR_RANGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_StoredValueColorRangeSequenceNotInSharedFunctionalGroupSequenceAndPixelPresentationIsColorRange(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentInPathFromRoot(rootlist,TagFromName(StoredValueColorRangeSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);
	condition0 &=(StringValueMatch(rootlist,TagFromName(PixelPresentation),-1,"COLOR_RANGE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_WaterEquivalentDiameterIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(WaterEquivalentDiameter))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTDIvolIsPresentButCTDIPhantomTypeCodeSequenceIsNot(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(CTDIvol))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(CTDIPhantomTypeCodeSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnassignedSharedConvertedAttributesMacroPresentInSharedFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRoot(rootlist,TagFromName(UnassignedSharedConvertedAttributesSequence),TagFromName(SharedFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_UnassignedPerFrameConvertedAttributesMacroPresentInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(UnassignedPerFrameConvertedAttributesSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageFrameConversionSourceMacroPresentInPerFrameFunctionalGroupSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresentInPathFromRootFirstItem(rootlist,TagFromName(ConversionSourceAttributesSequence),TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IlluminationWaveLengthInvalid(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(BinaryValueMatch(list,TagFromName(IlluminationWaveLength),-1,LessThanOrEquals,0)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedModuleSlideLabel(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ImageType),2,"LABEL")?1:0);
	condition0 |=(ElementPresent(list,TagFromName(BarcodeValue))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(LabelText))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LongitudinalTemporalOffsetFromEventIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(LongitudinalTemporalOffsetFromEvent))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRecommendedDisplayCIELabValueListInTrackSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RecommendedDisplayCIELabValue))?1:0);
	condition0 &=~(ElementPresentAbove(parentlist,TagFromName(RecommendedDisplayCIELabValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRecommendedDisplayCIELabValueInTrackSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(RecommendedDisplayCIELabValueList))?1:0);
	condition0 &=~(ElementPresentAbove(parentlist,TagFromName(RecommendedDisplayCIELabValue))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedRecommendedDisplayCIELabValueInTrackSetSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresentWithin(list,TagFromName(RecommendedDisplayCIELabValueList),TagFromName(TrackSequence))?1:0);
	condition0 &=~(ElementPresentWithin(list,TagFromName(RecommendedDisplayCIELabValue),TagFromName(TrackSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PerFrameFunctionalGroupsSequencePresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PerFrameFunctionalGroupsSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FrameContentMacroPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(FrameContentSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionOrganizationTypeIsTILED_FULL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionOrganizationTypeIsNotTILED_FULL(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_DimensionOrganizationTypeIsTILED_FULLAndTotalPixelMatrixFocalPlanesGreaterThanOne(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(DimensionOrganizationType),0,"TILED_FULL")?1:0);
	condition0 &=(BinaryValueMatch(list,TagFromName(TotalPixelMatrixFocalPlanes),-1,GreaterThan,1)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSOPClassUIDIsSegmentationStorage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,SegmentationStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSOPClassUIDIsSpatialFiducialsStorage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,SpatialFiducialsStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedSOPClassUIDIsRTStructureSetStorage(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ReferencedSOPClassUID),-1,RTStructureSetStorageSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExcessiveFalsePositivesDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExcessiveFalsePositivesDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FalsePositivesEstimateFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(FalsePositivesEstimateFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExcessiveFalseNegativesDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExcessiveFalseNegativesDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FalseNegativesEstimateFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(FalseNegativesEstimateFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CatchTrialsDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CatchTrialsDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ExcessiveFixationLossesDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ExcessiveFixationLossesDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_IndexNormalsFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(IndexNormalsFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TestPointNormalsDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(TestPointNormalsDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GeneralizedDefectCorrectedSensitivityDeviationFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GeneralizedDefectCorrectedSensitivityDeviationFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlindSpotLocalizedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BlindSpotLocalized),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ScreeningBaselineMeasuredIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ScreeningBaselineMeasured),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FovealPointNormativeDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(FovealPointNormativeDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_FovealSensitivityMeasuredIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(FovealSensitivityMeasured),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PresentedVisualStimuliDataFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PresentedVisualStimuliDataFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_LocalDeviationProbabilityNormalsFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(LocalDeviationProbabilityNormalsFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_GlobalDeviationProbabilityNormalsFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(GlobalDeviationProbabilityNormalsFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_VisualFieldTestNormalsFlagIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(VisualFieldTestNormalsFlag),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShortTermFluctuationCalculatedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ShortTermFluctuationCalculated),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ShortTermFluctuationProbabilityCalculatedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(ShortTermFluctuationProbabilityCalculated),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CorrectedLocalizedDeviationFromNormalCalculatedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CorrectedLocalizedDeviationFromNormalCalculated),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CorrectedLocalizedDeviationFromNormalProbabilityCalculatedIsYes(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(CorrectedLocalizedDeviationFromNormalProbabilityCalculated),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MeasurementLateralityLeftOrBoth(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MeasurementLaterality),-1,"L")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(MeasurementLaterality),-1,"B")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MeasurementLateralityRightOrBoth(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MeasurementLaterality),-1,"R")?1:0);
	condition0 |=(StringValueMatch(list,TagFromName(MeasurementLaterality),-1,"B")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PrivateDataElementValueRepresentationIsSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(PrivateDataElementValueRepresentation),-1,"SQ")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_BlockIdentifyingInformationStatusIsMIXED(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(BlockIdentifyingInformationStatus),-1,"MIXED")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedAnatomicRegionSequenceInGeneralImageModule(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForProcessingSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalMammographyXRayImageStorageForPresentationSOPClassUID)?1:0);
	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,DigitalIntraoralXRayImageStorageForPresentationSOPClassUID)?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_SelectorSequencePointerIsPresent(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(SelectorSequencePointer))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ReferencedFrameNumberOrReferencedFrameNumbersPresentButNMImageInstance(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(SOPClassUID),-1,NuclearMedicineImageStorageSOPClassUID)?1:0);
{
	int condition1 =0;
	condition1 |=(ElementPresent(list,TagFromName(ReferencedFrameNumber))?1:0);
	condition1 |=(ElementPresent(list,TagFromName(ReferencedFrameNumbers))?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_IsMultienergyCTAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue4MissingOrEmptyForMultienergy(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);
{
	int condition1 =0;
	condition1 |=~(ValuePresent(list,TagFromName(ImageType),3)?1:0);
	condition1 |=(StringValueMatch(list,TagFromName(ImageType),3,"")?1:0);
	condition0 &=condition1;
}

	return (condition0 & 1) != 0;
}

bool
Condition_ImageTypeValue4IsVMI(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(rootlist,TagFromName(ImageType),3,"VMI")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergySourceTechniqueIsSWITCHING_SOURCE(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MultienergySourceTechnique),-1,"SWITCHING_SOURCE")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_MultienergyDetectorTypeIsPHOTON_COUNTING(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(MultienergyDetectorType),-1,"PHOTON_COUNTING")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTAcquisitionDetailsSequenceNotOneItemAndNotMultienergyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(SequenceHasOneItem(list,TagFromName(CTAcquisitionDetailsSequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTGeometrySequenceNotOneItemAndNotMultienergyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(SequenceHasOneItem(list,TagFromName(CTGeometrySequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTExposureSequenceNotOneItemAndNotMultienergyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(SequenceHasOneItem(list,TagFromName(CTExposureSequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_CTXRayDetailsSequenceNotOneItemAndNotMultienergyAcquisition(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(SequenceHasOneItem(list,TagFromName(CTXRayDetailsSequence))?1:0);
	condition0 &=~(StringValueMatch(rootlist,TagFromName(MultienergyCTAcquisition),-1,"YES")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_PatientAlternativeCalendarNeeded(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(ElementPresent(list,TagFromName(PatientBirthDateInAlternativeCalendar))?1:0);
	condition0 |=(ElementPresent(list,TagFromName(PatientDeathDateInAlternativeCalendar))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TypeOfInstancesIsDICOM(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(list,TagFromName(TypeOfInstances),-1,"DICOM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_TypeOfInstancesInParentIsCDA(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=(StringValueMatch(parentlist,TagFromName(TypeOfInstances),-1,"DICOM")?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDICOMRetrievalSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(DICOMMediaRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(XDSRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORSRetrievalSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedDICOMMediaRetrievalSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(DICOMRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(XDSRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORSRetrievalSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedWADORetrievalSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(DICOMRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(DICOMMediaRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(XDSRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORSRetrievalSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedXDSRetrievalSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(DICOMRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(DICOMMediaRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORSRetrievalSequence))?1:0);

	return (condition0 & 1) != 0;
}

bool
Condition_NeedWADORSRetrievalSequence(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist)
{
	int condition0 =0;
	(void)list;
	(void)parentlist;
	(void)rootlist;

	condition0 |=~(ElementPresent(list,TagFromName(DICOMRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(DICOMMediaRetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(WADORetrievalSequence))?1:0);
	condition0 &=~(ElementPresent(list,TagFromName(XDSRetrievalSequence))?1:0);

	return (condition0 & 1) != 0;
}


#endif /* __Header_condnd__ */
