// Automatically generated from template - EDITS WILL BE LOST

// Generated by tagval.awk with options define tagvald

#ifndef __Header_tagvald__
#define __Header_tagvald__

char *
TagValueDescription_NMFrameIncrementPointerValues(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0010 :
			ost << "Energy Window Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0020 :
			ost << "Detector Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0030 :
			ost << "Phase Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0050 :
			ost << "Rotation Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0060 :
			ost << "RR Interval Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0070 :
			ost << "Time Slot Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0080 :
			ost << "Slice Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0090 :
			ost << "Angular View Vector" << ends;
			return ost.str();
		case (((Uint32)0x0054)<<16)|(Uint32)0x0100 :
			ost << "Time Slice Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_XRayFrameIncrementPointerValues(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0018)<<16)|(Uint32)0x1063 :
			ost << "Frame Time" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1065 :
			ost << "Frame Time Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsEnergyWindowVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0010 :
			ost << "Energy Window Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsDetectorVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0020 :
			ost << "Detector Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsPhaseVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0030 :
			ost << "Phase Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsRotationVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0050 :
			ost << "Rotation Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsRRIntervalVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0060 :
			ost << "RR Interval Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsTimeSlotVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0070 :
			ost << "Time Slot Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsSliceVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0080 :
			ost << "Slice Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsAngularViewVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0090 :
			ost << "Angular View Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_FrameIncrementPointerIsTimeSliceVector(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0054)<<16)|(Uint32)0x0100 :
			ost << "Time Slice Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_XAFrameDimensionPointerValues(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0018)<<16)|(Uint32)0x1063 :
			ost << "Frame Time" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1065 :
			ost << "Frame Time Vector" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1520 :
			ost << "Positioner Primary Angle Increment" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1521 :
			ost << "Positioner Secondary Angle Increment" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1135 :
			ost << "Table Vertical Increment" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1137 :
			ost << "Table Longitudinal Increment" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x1136 :
			ost << "Table Lateral Increment" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x2002 :
			ost << "Frame Label Vector" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_QTUSDimensionOrganization3DDimensionIndexPointerValues(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0020)<<16)|(Uint32)0x930D :
			ost << "Temporal Position Time Offset" << ends;
			return ost.str();
		case (((Uint32)0x0020)<<16)|(Uint32)0x9301 :
			ost << "Image Position (Volume)" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x9808 :
			ost << "Data Type" << ends;
			return ost.str();
		default:
			return 0;
	}
}

char *
TagValueDescription_QTUSDimensionOrganization3DFunctionalGroupPointerValues(Uint16 group,Uint16 element)
{
	ostrstream ost;
	Uint32 value=(((Uint32)group)<<16)|(Uint32)element;
	switch (value) {
		case (((Uint32)0x0020)<<16)|(Uint32)0x9310 :
			ost << "Temporal Position Sequence" << ends;
			return ost.str();
		case (((Uint32)0x0020)<<16)|(Uint32)0x930E :
			ost << "Plane Position (Volume) Sequence" << ends;
			return ost.str();
		case (((Uint32)0x0018)<<16)|(Uint32)0x9807 :
			ost << "Image Data Type Sequence" << ends;
			return ost.str();
		default:
			return 0;
	}
}


#endif /* __Header_tagvald__ */
